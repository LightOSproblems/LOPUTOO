
PQ9_raadioside_moodul_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c314  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800c4a4  0800c4a4  0001c4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c570  0800c570  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c570  0800c570  0001c570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c578  0800c578  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c578  0800c578  0001c578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c57c  0800c57c  0001c57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800c580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b4  2000015c  0800c6dc  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001610  0800c6dc  00021610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ae5b  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d99  00000000  00000000  0003b02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c8  00000000  00000000  0003edc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000108f  00000000  00000000  00040390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ebec  00000000  00000000  0004141f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b6c1  00000000  00000000  0006000b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8c38  00000000  00000000  0007b6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006020  00000000  00000000  00134304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013a324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c48c 	.word	0x0800c48c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0800c48c 	.word	0x0800c48c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Si4468_CmdTransmitReceive>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Si4468_CmdTransmitReceive(uint8_t * TxBuf, uint8_t * RxBuf, uint8_t Length){
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af02      	add	r7, sp, #8
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	4613      	mov	r3, r2
 8000588:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f001 ffca 	bl	800252c <HAL_GPIO_WritePin>
	uint8_t result = HAL_SPI_TransmitReceive(&hspi1, TxBuf, RxBuf, Length, HAL_MAX_DELAY);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	b29b      	uxth	r3, r3
 800059c:	f04f 32ff 	mov.w	r2, #4294967295
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	68f9      	ldr	r1, [r7, #12]
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <Si4468_CmdTransmitReceive+0x58>)
 80005a8:	f005 f925 	bl	80057f6 <HAL_SPI_TransmitReceive>
 80005ac:	4603      	mov	r3, r0
 80005ae:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f001 ffb7 	bl	800252c <HAL_GPIO_WritePin>
	if (result != HAL_OK) return 1;
 80005be:	7dfb      	ldrb	r3, [r7, #23]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <Si4468_CmdTransmitReceive+0x4c>
 80005c4:	2301      	movs	r3, #1
 80005c6:	e000      	b.n	80005ca <Si4468_CmdTransmitReceive+0x4e>
	return 0;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000264 	.word	0x20000264

080005d8 <Si4468_CmdTransmit>:

uint8_t Si4468_CmdTransmit(uint8_t * RxBuf, uint8_t Length){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ee:	f001 ff9d 	bl	800252c <HAL_GPIO_WritePin>
	uint8_t result = HAL_SPI_Transmit(&hspi1, RxBuf, Length, HAL_MAX_DELAY);
 80005f2:	78fb      	ldrb	r3, [r7, #3]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <Si4468_CmdTransmit+0x50>)
 80005fe:	f004 fe4e 	bl	800529e <HAL_SPI_Transmit>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f001 ff8c 	bl	800252c <HAL_GPIO_WritePin>
	if (result != HAL_OK) return 1;
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <Si4468_CmdTransmit+0x46>
 800061a:	2301      	movs	r3, #1
 800061c:	e000      	b.n	8000620 <Si4468_CmdTransmit+0x48>
	return 0;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000264 	.word	0x20000264

0800062c <Si4468_CmdReadCmdReplyWhenReady>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
	if (result != HAL_OK) return 1;
	return 0;
}

uint8_t Si4468_CmdReadCmdReplyWhenReady(uint8_t * RxBuf, uint8_t Length){
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af02      	add	r7, sp, #8
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
	uint8_t CmdTxBuf[2] = {Si4468_READ_CMD_BUFF, 0};
 8000638:	2344      	movs	r3, #68	; 0x44
 800063a:	81bb      	strh	r3, [r7, #12]
	uint8_t CmdRxBuf[2] = {0, 0};
 800063c:	2300      	movs	r3, #0
 800063e:	813b      	strh	r3, [r7, #8]
	uint8_t result;
	while(1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064a:	f001 ff6f 	bl	800252c <HAL_GPIO_WritePin>
		result = HAL_SPI_TransmitReceive(&hspi1, CmdTxBuf, CmdRxBuf, 2, HAL_MAX_DELAY);
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f107 010c 	add.w	r1, r7, #12
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2302      	movs	r3, #2
 800065e:	4815      	ldr	r0, [pc, #84]	; (80006b4 <Si4468_CmdReadCmdReplyWhenReady+0x88>)
 8000660:	f005 f8c9 	bl	80057f6 <HAL_SPI_TransmitReceive>
 8000664:	4603      	mov	r3, r0
 8000666:	73fb      	strb	r3, [r7, #15]
		if (CmdRxBuf[1] == 0xFF) break;
 8000668:	7a7b      	ldrb	r3, [r7, #9]
 800066a:	2bff      	cmp	r3, #255	; 0xff
 800066c:	d00a      	beq.n	8000684 <Si4468_CmdReadCmdReplyWhenReady+0x58>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f001 ff58 	bl	800252c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 fcfd 	bl	800107c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000682:	e7dd      	b.n	8000640 <Si4468_CmdReadCmdReplyWhenReady+0x14>
		if (CmdRxBuf[1] == 0xFF) break;
 8000684:	bf00      	nop
	}
	result += HAL_SPI_Receive(&hspi1, RxBuf, Length, HAL_MAX_DELAY);
 8000686:	78fb      	ldrb	r3, [r7, #3]
 8000688:	b29a      	uxth	r2, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	4808      	ldr	r0, [pc, #32]	; (80006b4 <Si4468_CmdReadCmdReplyWhenReady+0x88>)
 8000692:	f004 ff79 	bl	8005588 <HAL_SPI_Receive>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	4413      	add	r3, r2
 800069e:	73fb      	strb	r3, [r7, #15]
	if (result != HAL_OK) return 1;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <Si4468_CmdReadCmdReplyWhenReady+0x7e>
 80006a6:	2301      	movs	r3, #1
 80006a8:	e000      	b.n	80006ac <Si4468_CmdReadCmdReplyWhenReady+0x80>
	return 0;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000264 	.word	0x20000264

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	f6ad 1d88 	subw	sp, sp, #2440	; 0x988
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char USB_TxBuf[1024], USB_RxBuf[1024];
	uint8_t Si4468_TxBuf[64] = {0}; // For writing to Si4468 FIFO registers
 80006c0:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80006c4:	f6a3 0344 	subw	r3, r3, #2116	; 0x844
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	3304      	adds	r3, #4
 80006ce:	223c      	movs	r2, #60	; 0x3c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00b fa56 	bl	800bb84 <memset>
	uint8_t Si4468_RxBuf[64] = {0}; // For reading from Si4468 FIFO registers
 80006d8:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80006dc:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	3304      	adds	r3, #4
 80006e6:	223c      	movs	r2, #60	; 0x3c
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f00b fa4a 	bl	800bb84 <memset>
	uint8_t Si4468_CmdTxBuf[128], Si4468_CmdRxBuf[128];
	uint8_t counter = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f000 fc4c 	bl	8000f92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f8a1 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 f9db 	bl	8000ab8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000702:	f000 f8f3 	bl	80008ec <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000706:	f000 f967 	bl	80009d8 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 800070a:	f000 f997 	bl	8000a3c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800070e:	f00a fc45 	bl	800af9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Set SPI NSS high
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071c:	f001 ff06 	bl	800252c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the amplifier OFF (drive EN low)
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000726:	4843      	ldr	r0, [pc, #268]	; (8000834 <main+0x17c>)
 8000728:	f001 ff00 	bl	800252c <HAL_GPIO_WritePin>

  // ### Si4468 TRANSCEIVER STARTUP
  // Perform a POR (Power on reset)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f001 fef9 	bl	800252c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800073a:	200a      	movs	r0, #10
 800073c:	f000 fc9e 	bl	800107c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f001 feef 	bl	800252c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800074e:	200a      	movs	r0, #10
 8000750:	f000 fc94 	bl	800107c <HAL_Delay>
  // Send a POWER_UP command to Si4468
  Si4468_CmdTxBuf[0] = Si4468_POWER_UP;
 8000754:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8000758:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 800075c:	2202      	movs	r2, #2
 800075e:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x01;
 8000760:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8000764:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8000768:	2201      	movs	r2, #1
 800076a:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x01; // Using an external drive (TCXO) as clock source
 800076c:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8000770:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8000774:	2201      	movs	r2, #1
 8000776:	709a      	strb	r2, [r3, #2]
  /* TCXO frequency is 30 MHz (30'000'000 Hz; in hex: 0x01C9C380).
   * NB! The byte order of the following hex value is reversed due to Endianness!
   * Si4468 expects most significant byte first, but STM32L412 seems to
   * be Little-Endian.
   */
  *((uint32_t *) &Si4468_CmdTxBuf[3]) = 0x80C3C901;
 8000778:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800077c:	3303      	adds	r3, #3
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <main+0x180>)
 8000780:	601a      	str	r2, [r3, #0]
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 7);
 8000782:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000786:	2107      	movs	r1, #7
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff25 	bl	80005d8 <Si4468_CmdTransmit>

  /* Wait until Si4468 has finished the power-up sequence.
   * The transceiver will be ready when the returned value of
   * CTS (clear to send) byte will be equal to 0xFF
   */
  Si4468_CmdTxBuf[0] = Si4468_READ_CMD_BUFF;
 800078e:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8000792:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8000796:	2244      	movs	r2, #68	; 0x44
 8000798:	701a      	strb	r2, [r3, #0]
  Si4468_CmdRxBuf[1] = 0;
 800079a:	f607 1388 	addw	r3, r7, #2440	; 0x988
 800079e:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80007a2:	2200      	movs	r2, #0
 80007a4:	705a      	strb	r2, [r3, #1]
  while(Si4468_CmdRxBuf[1] != 0xFF){
 80007a6:	e006      	b.n	80007b6 <main+0xfe>
	  Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 80007a8:	1d39      	adds	r1, r7, #4
 80007aa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80007ae:	2202      	movs	r2, #2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fee3 	bl	800057c <Si4468_CmdTransmitReceive>
  while(Si4468_CmdRxBuf[1] != 0xFF){
 80007b6:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80007ba:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80007be:	785b      	ldrb	r3, [r3, #1]
 80007c0:	2bff      	cmp	r3, #255	; 0xff
 80007c2:	d1f1      	bne.n	80007a8 <main+0xf0>
  }

  /* Read the "part info" of the device to make sure the initialization worked
   * and we have a good SPI communication going...
   */
  Si4468_CmdTxBuf[0] = Si4468_PART_INFO;
 80007c4:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80007c8:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
  Si4468_CmdRxBuf[1] = 0;
 80007d0:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80007d4:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80007d8:	2200      	movs	r2, #0
 80007da:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 80007dc:	1d39      	adds	r1, r7, #4
 80007de:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80007e2:	2202      	movs	r2, #2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fec9 	bl	800057c <Si4468_CmdTransmitReceive>
  Si4468_CmdReadCmdReplyWhenReady(Si4468_CmdRxBuf, 8);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2108      	movs	r1, #8
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff1c 	bl	800062c <Si4468_CmdReadCmdReplyWhenReady>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(USB_TxBuf, "%u\r\n", counter);
 80007f4:	f897 2987 	ldrb.w	r2, [r7, #2439]	; 0x987
 80007f8:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80007fc:	490f      	ldr	r1, [pc, #60]	; (800083c <main+0x184>)
 80007fe:	4618      	mov	r0, r3
 8000800:	f00b f9a0 	bl	800bb44 <siprintf>
	  counter++;
 8000804:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8000808:	3301      	adds	r3, #1
 800080a:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
	  CDC_Transmit_FS((uint8_t *)USB_TxBuf, strlen(USB_TxBuf));
 800080e:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fcdc 	bl	80001d0 <strlen>
 8000818:	4603      	mov	r3, r0
 800081a:	b29a      	uxth	r2, r3
 800081c:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f00a fc78 	bl	800b118 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8000828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082c:	f000 fc26 	bl	800107c <HAL_Delay>
	  sprintf(USB_TxBuf, "%u\r\n", counter);
 8000830:	e7e0      	b.n	80007f4 <main+0x13c>
 8000832:	bf00      	nop
 8000834:	48000800 	.word	0x48000800
 8000838:	80c3c901 	.word	0x80c3c901
 800083c:	0800c4a4 	.word	0x0800c4a4

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b096      	sub	sp, #88	; 0x58
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2244      	movs	r2, #68	; 0x44
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f00b f998 	bl	800bb84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000862:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000866:	f003 fc05 	bl	8004074 <HAL_PWREx_ControlVoltageScaling>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000870:	f000 f9c8 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000874:	2312      	movs	r3, #18
 8000876:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800087c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000882:	2301      	movs	r3, #1
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800088a:	23b0      	movs	r3, #176	; 0xb0
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000892:	2302      	movs	r3, #2
 8000894:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000896:	2301      	movs	r3, #1
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 800089a:	230a      	movs	r3, #10
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800089e:	2302      	movs	r3, #2
 80008a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 fc48 	bl	8004140 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008b6:	f000 f9a5 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2303      	movs	r3, #3
 80008c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	2104      	movs	r1, #4
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 f896 	bl	8004a04 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008de:	f000 f991 	bl	8000c04 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3758      	adds	r7, #88	; 0x58
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800090e:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <MX_ADC1_Init+0xe0>)
 8000910:	4a2f      	ldr	r2, [pc, #188]	; (80009d0 <MX_ADC1_Init+0xe4>)
 8000912:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000914:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <MX_ADC1_Init+0xe0>)
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800091a:	4b2c      	ldr	r3, [pc, #176]	; (80009cc <MX_ADC1_Init+0xe0>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000920:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <MX_ADC1_Init+0xe0>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000926:	4b29      	ldr	r3, [pc, #164]	; (80009cc <MX_ADC1_Init+0xe0>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <MX_ADC1_Init+0xe0>)
 800092e:	2204      	movs	r2, #4
 8000930:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_ADC1_Init+0xe0>)
 8000934:	2200      	movs	r2, #0
 8000936:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <MX_ADC1_Init+0xe0>)
 800093a:	2200      	movs	r2, #0
 800093c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <MX_ADC1_Init+0xe0>)
 8000940:	2201      	movs	r2, #1
 8000942:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_ADC1_Init+0xe0>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_ADC1_Init+0xe0>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_ADC1_Init+0xe0>)
 8000954:	2200      	movs	r2, #0
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_ADC1_Init+0xe0>)
 800095a:	2200      	movs	r2, #0
 800095c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_ADC1_Init+0xe0>)
 8000962:	2200      	movs	r2, #0
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_ADC1_Init+0xe0>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800096e:	4817      	ldr	r0, [pc, #92]	; (80009cc <MX_ADC1_Init+0xe0>)
 8000970:	f000 fd48 	bl	8001404 <HAL_ADC_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800097a:	f000 f943 	bl	8000c04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4810      	ldr	r0, [pc, #64]	; (80009cc <MX_ADC1_Init+0xe0>)
 800098a:	f001 faa7 	bl	8001edc <HAL_ADCEx_MultiModeConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000994:	f000 f936 	bl	8000c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_ADC1_Init+0xe8>)
 800099a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800099c:	2306      	movs	r3, #6
 800099e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009a4:	237f      	movs	r3, #127	; 0x7f
 80009a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009a8:	2304      	movs	r3, #4
 80009aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_ADC1_Init+0xe0>)
 80009b6:	f000 fe6f 	bl	8001698 <HAL_ADC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80009c0:	f000 f920 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000178 	.word	0x20000178
 80009d0:	50040000 	.word	0x50040000
 80009d4:	2e300800 	.word	0x2e300800

080009d8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_LPUART1_UART_Init+0x58>)
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <MX_LPUART1_UART_Init+0x5c>)
 80009e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_LPUART1_UART_Init+0x58>)
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <MX_LPUART1_UART_Init+0x60>)
 80009e6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_LPUART1_UART_Init+0x58>)
 80009ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_LPUART1_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_LPUART1_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_LPUART1_UART_Init+0x58>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_LPUART1_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_LPUART1_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_LPUART1_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000a14:	2300      	movs	r3, #0
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_LPUART1_UART_Init+0x58>)
 8000a1c:	f005 ff39 	bl	8006892 <HAL_RS485Ex_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 f8ed 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001dc 	.word	0x200001dc
 8000a34:	40008000 	.word	0x40008000
 8000a38:	00033324 	.word	0x00033324

08000a3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <MX_SPI1_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a72:	2210      	movs	r2, #16
 8000a74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a8a:	2207      	movs	r2, #7
 8000a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_SPI1_Init+0x74>)
 8000a9c:	f004 fb5c 	bl	8005158 <HAL_SPI_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 f8ad 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000264 	.word	0x20000264
 8000ab4:	40013000 	.word	0x40013000

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b4a      	ldr	r3, [pc, #296]	; (8000bf8 <MX_GPIO_Init+0x140>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a49      	ldr	r2, [pc, #292]	; (8000bf8 <MX_GPIO_Init+0x140>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b47      	ldr	r3, [pc, #284]	; (8000bf8 <MX_GPIO_Init+0x140>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b44      	ldr	r3, [pc, #272]	; (8000bf8 <MX_GPIO_Init+0x140>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a43      	ldr	r2, [pc, #268]	; (8000bf8 <MX_GPIO_Init+0x140>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <MX_GPIO_Init+0x140>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b3e      	ldr	r3, [pc, #248]	; (8000bf8 <MX_GPIO_Init+0x140>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a3d      	ldr	r2, [pc, #244]	; (8000bf8 <MX_GPIO_Init+0x140>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <MX_GPIO_Init+0x140>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOST_EN_GPIO_Port, BOOST_EN_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1c:	4837      	ldr	r0, [pc, #220]	; (8000bfc <MX_GPIO_Init+0x144>)
 8000b1e:	f001 fd05 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYS_RST_Pin|TRANS_SDN_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f248 4110 	movw	r1, #33808	; 0x8410
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f001 fcfe 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FWD_MEAS_AMP_EN_Pin|REV_MEAS_AMP_EN_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	21c0      	movs	r1, #192	; 0xc0
 8000b34:	4832      	ldr	r0, [pc, #200]	; (8000c00 <MX_GPIO_Init+0x148>)
 8000b36:	f001 fcf9 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOOST_EN_Pin */
  GPIO_InitStruct.Pin = BOOST_EN_Pin;
 8000b3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOST_EN_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4619      	mov	r1, r3
 8000b52:	482a      	ldr	r0, [pc, #168]	; (8000bfc <MX_GPIO_Init+0x144>)
 8000b54:	f001 fb78 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYS_RST_Pin TRANS_SDN_Pin */
  GPIO_InitStruct.Pin = SYS_RST_Pin|TRANS_SDN_Pin;
 8000b58:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f001 fb68 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRANS_NIRQ_Pin */
  GPIO_InitStruct.Pin = TRANS_NIRQ_Pin;
 8000b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TRANS_NIRQ_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b92:	f001 fb59 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDO_PG_Pin */
  GPIO_InitStruct.Pin = LDO_PG_Pin;
 8000b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LDO_PG_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f001 fb4b 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f001 fb3b 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pins : FWD_MEAS_AMP_EN_Pin REV_MEAS_AMP_EN_Pin */
  GPIO_InitStruct.Pin = FWD_MEAS_AMP_EN_Pin|REV_MEAS_AMP_EN_Pin;
 8000bd2:	23c0      	movs	r3, #192	; 0xc0
 8000bd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_GPIO_Init+0x148>)
 8000bea:	f001 fb2d 	bl	8002248 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bee:	bf00      	nop
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	48000400 	.word	0x48000400

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x44>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_MspInit+0x44>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6613      	str	r3, [r2, #96]	; 0x60
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x44>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x44>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x44>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x44>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <HAL_ADC_MspInit+0x74>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d124      	bne.n	8000cc4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_ADC_MspInit+0x78>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <HAL_ADC_MspInit+0x78>)
 8000c80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_ADC_MspInit+0x78>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_ADC_MspInit+0x78>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_ADC_MspInit+0x78>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_ADC_MspInit+0x78>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000caa:	23c0      	movs	r3, #192	; 0xc0
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cae:	230b      	movs	r3, #11
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f001 fac2 	bl	8002248 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	50040000 	.word	0x50040000
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b098      	sub	sp, #96	; 0x60
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	2234      	movs	r2, #52	; 0x34
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00a ff45 	bl	800bb84 <memset>
  if(huart->Instance==LPUART1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a2d      	ldr	r2, [pc, #180]	; (8000db4 <HAL_UART_MspInit+0xe0>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d152      	bne.n	8000daa <HAL_UART_MspInit+0xd6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d04:	2320      	movs	r3, #32
 8000d06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0c:	f107 0318 	add.w	r3, r7, #24
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 f89b 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d1c:	f7ff ff72 	bl	8000c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d20:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <HAL_UART_MspInit+0xe4>)
 8000d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d24:	4a24      	ldr	r2, [pc, #144]	; (8000db8 <HAL_UART_MspInit+0xe4>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <HAL_UART_MspInit+0xe4>)
 8000d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <HAL_UART_MspInit+0xe4>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3c:	4a1e      	ldr	r2, [pc, #120]	; (8000db8 <HAL_UART_MspInit+0xe4>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <HAL_UART_MspInit+0xe4>)
 8000d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_UART_MspInit+0xe4>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d54:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <HAL_UART_MspInit+0xe4>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_UART_MspInit+0xe4>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f001 fa5f 	bl	8002248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_UART_MspInit+0xe8>)
 8000da6:	f001 fa4f 	bl	8002248 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3760      	adds	r7, #96	; 0x60
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40008000 	.word	0x40008000
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48000400 	.word	0x48000400

08000dc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_SPI_MspInit+0x7c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d127      	bne.n	8000e32 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_SPI_MspInit+0x80>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <HAL_SPI_MspInit+0x80>)
 8000de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dec:	6613      	str	r3, [r2, #96]	; 0x60
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_SPI_MspInit+0x80>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_SPI_MspInit+0x80>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <HAL_SPI_MspInit+0x80>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_SPI_MspInit+0x80>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e12:	2338      	movs	r3, #56	; 0x38
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e22:	2305      	movs	r3, #5
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_SPI_MspInit+0x84>)
 8000e2e:	f001 fa0b 	bl	8002248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40013000 	.word	0x40013000
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48000400 	.word	0x48000400

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f8d2 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <USB_IRQHandler+0x10>)
 8000ea2:	f001 fc83 	bl	80027ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000fb0 	.word	0x20000fb0

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f00a fe58 	bl	800bb94 <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000a000 	.word	0x2000a000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	200002c8 	.word	0x200002c8
 8000f18:	20001610 	.word	0x20001610

08000f1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f44:	f7ff ffea 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <LoopForever+0xe>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <LoopForever+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f00a fe17 	bl	800bba0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f72:	f7ff fba1 	bl	80006b8 <main>

08000f76 <LoopForever>:

LoopForever:
    b LoopForever
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f78:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000f84:	0800c580 	.word	0x0800c580
  ldr r2, =_sbss
 8000f88:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000f8c:	20001610 	.word	0x20001610

08000f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_2_IRQHandler>

08000f92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f001 f911 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f000 f80e 	bl	8000fc4 <HAL_InitTick>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	e001      	b.n	8000fb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb4:	f7ff fe2c 	bl	8000c10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_InitTick+0x6c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d023      	beq.n	8001020 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_InitTick+0x70>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_InitTick+0x6c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 f91d 	bl	800222e <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10f      	bne.n	800101a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d809      	bhi.n	8001014 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f001 f8e7 	bl	80021da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100c:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_InitTick+0x74>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e007      	b.n	8001024 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e004      	b.n	8001024 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e001      	b.n	8001024 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	20000000 	.word	0x20000000
 8001038:	20000004 	.word	0x20000004

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	200002cc 	.word	0x200002cc

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200002cc 	.word	0x200002cc

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008

080010c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	609a      	str	r2, [r3, #8]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3360      	adds	r3, #96	; 0x60
 800113e:	461a      	mov	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <LL_ADC_SetOffset+0x44>)
 800114e:	4013      	ands	r3, r2
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	4313      	orrs	r3, r2
 800115c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001164:	bf00      	nop
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	03fff000 	.word	0x03fff000

08001174 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3360      	adds	r3, #96	; 0x60
 8001182:	461a      	mov	r2, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3360      	adds	r3, #96	; 0x60
 80011b0:	461a      	mov	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	431a      	orrs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011ca:	bf00      	nop
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	615a      	str	r2, [r3, #20]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3330      	adds	r3, #48	; 0x30
 800120c:	461a      	mov	r2, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	4413      	add	r3, r2
 800121a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	211f      	movs	r1, #31
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	401a      	ands	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	0e9b      	lsrs	r3, r3, #26
 8001234:	f003 011f 	and.w	r1, r3, #31
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	431a      	orrs	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001248:	bf00      	nop
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3314      	adds	r3, #20
 8001264:	461a      	mov	r2, r3
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	0e5b      	lsrs	r3, r3, #25
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	4413      	add	r3, r2
 8001272:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	0d1b      	lsrs	r3, r3, #20
 800127c:	f003 031f 	and.w	r3, r3, #31
 8001280:	2107      	movs	r1, #7
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	401a      	ands	r2, r3
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	0d1b      	lsrs	r3, r3, #20
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	431a      	orrs	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800129e:	bf00      	nop
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012c4:	43db      	mvns	r3, r3
 80012c6:	401a      	ands	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0318 	and.w	r3, r3, #24
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012d0:	40d9      	lsrs	r1, r3
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	400b      	ands	r3, r1
 80012d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012da:	431a      	orrs	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	0007ffff 	.word	0x0007ffff

080012f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6093      	str	r3, [r2, #8]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800132c:	d101      	bne.n	8001332 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001354:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800137c:	d101      	bne.n	8001382 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <LL_ADC_IsEnabled+0x18>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <LL_ADC_IsEnabled+0x1a>
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d101      	bne.n	80013ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d101      	bne.n	80013f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e12b      	b.n	8001676 <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	2b00      	cmp	r3, #0
 800142a:	d109      	bne.n	8001440 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fc13 	bl	8000c58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff67 	bl	8001318 <LL_ADC_IsDeepPowerDownEnabled>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d004      	beq.n	800145a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff4d 	bl	80012f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff82 	bl	8001368 <LL_ADC_IsInternalRegulatorEnabled>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d115      	bne.n	8001496 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff66 	bl	8001340 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001474:	4b82      	ldr	r3, [pc, #520]	; (8001680 <HAL_ADC_Init+0x27c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	099b      	lsrs	r3, r3, #6
 800147a:	4a82      	ldr	r2, [pc, #520]	; (8001684 <HAL_ADC_Init+0x280>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	099b      	lsrs	r3, r3, #6
 8001482:	3301      	adds	r3, #1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001488:	e002      	b.n	8001490 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3b01      	subs	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f9      	bne.n	800148a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff64 	bl	8001368 <LL_ADC_IsInternalRegulatorEnabled>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014aa:	f043 0210 	orr.w	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff75 	bl	80013b6 <LL_ADC_REG_IsConversionOngoing>
 80014cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 80c4 	bne.w	8001664 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 80c0 	bne.w	8001664 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014ec:	f043 0202 	orr.w	r2, r3, #2
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff49 	bl	8001390 <LL_ADC_IsEnabled>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d110      	bne.n	8001526 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001504:	4860      	ldr	r0, [pc, #384]	; (8001688 <HAL_ADC_Init+0x284>)
 8001506:	f7ff ff43 	bl	8001390 <LL_ADC_IsEnabled>
 800150a:	4604      	mov	r4, r0
 800150c:	485f      	ldr	r0, [pc, #380]	; (800168c <HAL_ADC_Init+0x288>)
 800150e:	f7ff ff3f 	bl	8001390 <LL_ADC_IsEnabled>
 8001512:	4603      	mov	r3, r0
 8001514:	4323      	orrs	r3, r4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d105      	bne.n	8001526 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4619      	mov	r1, r3
 8001520:	485b      	ldr	r0, [pc, #364]	; (8001690 <HAL_ADC_Init+0x28c>)
 8001522:	f7ff fdcf 	bl	80010c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7e5b      	ldrb	r3, [r3, #25]
 800152a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001530:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001536:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800153c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001544:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	3b01      	subs	r3, #1
 800155a:	045b      	lsls	r3, r3, #17
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	4b43      	ldr	r3, [pc, #268]	; (8001694 <HAL_ADC_Init+0x290>)
 8001586:	4013      	ands	r3, r2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	69b9      	ldr	r1, [r7, #24]
 800158e:	430b      	orrs	r3, r1
 8001590:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff20 	bl	80013dc <LL_ADC_INJ_IsConversionOngoing>
 800159c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d13d      	bne.n	8001620 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d13a      	bne.n	8001620 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015ae:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015b6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015c6:	f023 0302 	bic.w	r3, r3, #2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	69b9      	ldr	r1, [r7, #24]
 80015d0:	430b      	orrs	r3, r1
 80015d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d118      	bne.n	8001610 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015f4:	4311      	orrs	r1, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015fa:	4311      	orrs	r1, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001600:	430a      	orrs	r2, r1
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 0201 	orr.w	r2, r2, #1
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	e007      	b.n	8001620 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0201 	bic.w	r2, r2, #1
 800161e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10c      	bne.n	8001642 <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f023 010f 	bic.w	r1, r3, #15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	1e5a      	subs	r2, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
 8001640:	e007      	b.n	8001652 <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 020f 	bic.w	r2, r2, #15
 8001650:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	f023 0303 	bic.w	r3, r3, #3
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	655a      	str	r2, [r3, #84]	; 0x54
 8001662:	e007      	b.n	8001674 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001668:	f043 0210 	orr.w	r2, r3, #16
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001674:	7ffb      	ldrb	r3, [r7, #31]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd90      	pop	{r4, r7, pc}
 800167e:	bf00      	nop
 8001680:	20000000 	.word	0x20000000
 8001684:	053e2d63 	.word	0x053e2d63
 8001688:	50040000 	.word	0x50040000
 800168c:	50040100 	.word	0x50040100
 8001690:	50040300 	.word	0x50040300
 8001694:	fff0c007 	.word	0xfff0c007

08001698 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0b6      	sub	sp, #216	; 0xd8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x22>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e3d5      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x7ce>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fe75 	bl	80013b6 <LL_ADC_REG_IsConversionOngoing>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 83ba 	bne.w	8001e48 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b05      	cmp	r3, #5
 80016e2:	d824      	bhi.n	800172e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	3b02      	subs	r3, #2
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d81b      	bhi.n	8001726 <HAL_ADC_ConfigChannel+0x8e>
 80016ee:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <HAL_ADC_ConfigChannel+0x5c>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	08001705 	.word	0x08001705
 80016f8:	0800170d 	.word	0x0800170d
 80016fc:	08001715 	.word	0x08001715
 8001700:	0800171d 	.word	0x0800171d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001704:	230c      	movs	r3, #12
 8001706:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800170a:	e010      	b.n	800172e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800170c:	2312      	movs	r3, #18
 800170e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001712:	e00c      	b.n	800172e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001714:	2318      	movs	r3, #24
 8001716:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800171a:	e008      	b.n	800172e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800171c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001724:	e003      	b.n	800172e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001726:	2306      	movs	r3, #6
 8001728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800172c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800173c:	f7ff fd5e 	bl	80011fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fe36 	bl	80013b6 <LL_ADC_REG_IsConversionOngoing>
 800174a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe42 	bl	80013dc <LL_ADC_INJ_IsConversionOngoing>
 8001758:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800175c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 81bf 	bne.w	8001ae4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 81ba 	bne.w	8001ae4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001778:	d10f      	bne.n	800179a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2200      	movs	r2, #0
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fd65 	bl	8001254 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fd1f 	bl	80011d6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001798:	e00e      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6819      	ldr	r1, [r3, #0]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	461a      	mov	r2, r3
 80017a8:	f7ff fd54 	bl	8001254 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fd0f 	bl	80011d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d00a      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	6919      	ldr	r1, [r3, #16]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017ea:	f7ff fc9f 	bl	800112c <LL_ADC_SetOffset>
 80017ee:	e179      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fcbc 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10a      	bne.n	800181c <HAL_ADC_ConfigChannel+0x184>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fcb1 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	0e9b      	lsrs	r3, r3, #26
 8001816:	f003 021f 	and.w	r2, r3, #31
 800181a:	e01e      	b.n	800185a <HAL_ADC_ConfigChannel+0x1c2>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fca6 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001828:	4603      	mov	r3, r0
 800182a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001832:	fa93 f3a3 	rbit	r3, r3
 8001836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800183a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800183e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001842:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800184a:	2320      	movs	r3, #32
 800184c:	e004      	b.n	8001858 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800184e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x1da>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	0e9b      	lsrs	r3, r3, #26
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	e018      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x20c>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800188a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800188e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001896:	2320      	movs	r3, #32
 8001898:	e004      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800189a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d106      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fc75 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2101      	movs	r1, #1
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fc59 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x24a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2101      	movs	r1, #1
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fc4e 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	0e9b      	lsrs	r3, r3, #26
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	e01e      	b.n	8001920 <HAL_ADC_ConfigChannel+0x288>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2101      	movs	r1, #1
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fc43 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001900:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001908:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001910:	2320      	movs	r3, #32
 8001912:	e004      	b.n	800191e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001914:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x2a0>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	e018      	b.n	800196a <HAL_ADC_ConfigChannel+0x2d2>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800194c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001954:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800195c:	2320      	movs	r3, #32
 800195e:	e004      	b.n	800196a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800196a:	429a      	cmp	r2, r3
 800196c:	d106      	bne.n	800197c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	2101      	movs	r1, #1
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fc12 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2102      	movs	r1, #2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fbf6 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10a      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x310>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2102      	movs	r1, #2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fbeb 	bl	8001174 <LL_ADC_GetOffsetChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	f003 021f 	and.w	r2, r3, #31
 80019a6:	e01e      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x34e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2102      	movs	r1, #2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fbe0 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80019c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80019ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80019d6:	2320      	movs	r3, #32
 80019d8:	e004      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80019da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d105      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x366>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	0e9b      	lsrs	r3, r3, #26
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	e014      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x390>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	e004      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001a1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d106      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	2102      	movs	r1, #2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fbb3 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2103      	movs	r1, #3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fb97 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10a      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x3ce>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2103      	movs	r1, #3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fb8c 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	0e9b      	lsrs	r3, r3, #26
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	e017      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x3fe>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2103      	movs	r1, #3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fb81 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a78:	fa93 f3a3 	rbit	r3, r3
 8001a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a80:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001a88:	2320      	movs	r3, #32
 8001a8a:	e003      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d105      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x416>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	0e9b      	lsrs	r3, r3, #26
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	e011      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x43a>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001abe:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	e003      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d106      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2200      	movs	r2, #0
 8001adc:	2103      	movs	r1, #3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fb5e 	bl	80011a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fc51 	bl	8001390 <LL_ADC_IsEnabled>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f040 813f 	bne.w	8001d74 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6819      	ldr	r1, [r3, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	461a      	mov	r2, r3
 8001b04:	f7ff fbd2 	bl	80012ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a8e      	ldr	r2, [pc, #568]	; (8001d48 <HAL_ADC_ConfigChannel+0x6b0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	f040 8130 	bne.w	8001d74 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10b      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x4a4>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f003 031f 	and.w	r3, r3, #31
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	bf94      	ite	ls
 8001b34:	2301      	movls	r3, #1
 8001b36:	2300      	movhi	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	e019      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x4d8>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001b54:	2320      	movs	r3, #32
 8001b56:	e003      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	3301      	adds	r3, #1
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2b09      	cmp	r3, #9
 8001b68:	bf94      	ite	ls
 8001b6a:	2301      	movls	r3, #1
 8001b6c:	2300      	movhi	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d079      	beq.n	8001c68 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d107      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x4f8>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	3301      	adds	r3, #1
 8001b88:	069b      	lsls	r3, r3, #26
 8001b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b8e:	e015      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x524>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ba0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e003      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	069b      	lsls	r3, r3, #26
 8001bb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x544>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0e9b      	lsrs	r3, r3, #26
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	e017      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x574>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bec:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	e003      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	3301      	adds	r3, #1
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	ea42 0103 	orr.w	r1, r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10a      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x59a>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	3301      	adds	r3, #1
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	051b      	lsls	r3, r3, #20
 8001c30:	e018      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x5cc>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c42:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	e003      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	f003 021f 	and.w	r2, r3, #31
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c64:	430b      	orrs	r3, r1
 8001c66:	e080      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d107      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x5ec>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	069b      	lsls	r3, r3, #26
 8001c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c82:	e015      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x618>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e003      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	069b      	lsls	r3, r3, #26
 8001cac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x638>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0e9b      	lsrs	r3, r3, #26
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	e017      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x668>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	61bb      	str	r3, [r7, #24]
  return result;
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001ce8:	2320      	movs	r3, #32
 8001cea:	e003      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	ea42 0103 	orr.w	r1, r2, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10d      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x694>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0e9b      	lsrs	r3, r3, #26
 8001d16:	3301      	adds	r3, #1
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	3b1e      	subs	r3, #30
 8001d24:	051b      	lsls	r3, r3, #20
 8001d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	e01d      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x6d0>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	60fb      	str	r3, [r7, #12]
  return result;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d103      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001d44:	2320      	movs	r3, #32
 8001d46:	e005      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x6bc>
 8001d48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3301      	adds	r3, #1
 8001d56:	f003 021f 	and.w	r2, r3, #31
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b1e      	subs	r3, #30
 8001d62:	051b      	lsls	r3, r3, #20
 8001d64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d68:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7ff fa70 	bl	8001254 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d06c      	beq.n	8001e5a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d80:	483c      	ldr	r0, [pc, #240]	; (8001e74 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d82:	f7ff f9c5 	bl	8001110 <LL_ADC_GetCommonPathInternalCh>
 8001d86:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a3a      	ldr	r2, [pc, #232]	; (8001e78 <HAL_ADC_ConfigChannel+0x7e0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d127      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d121      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a35      	ldr	r2, [pc, #212]	; (8001e7c <HAL_ADC_ConfigChannel+0x7e4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d157      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001db2:	4619      	mov	r1, r3
 8001db4:	482f      	ldr	r0, [pc, #188]	; (8001e74 <HAL_ADC_ConfigChannel+0x7dc>)
 8001db6:	f7ff f998 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dba:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_ADC_ConfigChannel+0x7e8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	4a30      	ldr	r2, [pc, #192]	; (8001e84 <HAL_ADC_ConfigChannel+0x7ec>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	099b      	lsrs	r3, r3, #6
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001dd4:	e002      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f9      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001de2:	e03a      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a27      	ldr	r2, [pc, #156]	; (8001e88 <HAL_ADC_ConfigChannel+0x7f0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d113      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10d      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_ADC_ConfigChannel+0x7e4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d12a      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4819      	ldr	r0, [pc, #100]	; (8001e74 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e10:	f7ff f96b 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e14:	e021      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_ADC_ConfigChannel+0x7f4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d11c      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d116      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <HAL_ADC_ConfigChannel+0x7e4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d111      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e42:	f7ff f952 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
 8001e46:	e008      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	f043 0220 	orr.w	r2, r3, #32
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e62:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	37d8      	adds	r7, #216	; 0xd8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	80080000 	.word	0x80080000
 8001e74:	50040300 	.word	0x50040300
 8001e78:	c7520000 	.word	0xc7520000
 8001e7c:	50040000 	.word	0x50040000
 8001e80:	20000000 	.word	0x20000000
 8001e84:	053e2d63 	.word	0x053e2d63
 8001e88:	cb840000 	.word	0xcb840000
 8001e8c:	80000001 	.word	0x80000001

08001e90 <LL_ADC_IsEnabled>:
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <LL_ADC_IsEnabled+0x18>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <LL_ADC_IsEnabled+0x1a>
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_ADC_REG_IsConversionOngoing>:
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d101      	bne.n	8001ece <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b09f      	sub	sp, #124	; 0x7c
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e089      	b.n	800200e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001f02:	2300      	movs	r3, #0
 8001f04:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001f06:	2300      	movs	r3, #0
 8001f08:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a42      	ldr	r2, [pc, #264]	; (8002018 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d102      	bne.n	8001f1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f14:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	e001      	b.n	8001f1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10b      	bne.n	8001f3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	f043 0220 	orr.w	r2, r3, #32
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e068      	b.n	800200e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ffb9 	bl	8001eb6 <LL_ADC_REG_IsConversionOngoing>
 8001f44:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ffb3 	bl	8001eb6 <LL_ADC_REG_IsConversionOngoing>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d14a      	bne.n	8001fec <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001f56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d147      	bne.n	8001fec <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f5c:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001f5e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d027      	beq.n	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f7a:	035b      	lsls	r3, r3, #13
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f84:	4824      	ldr	r0, [pc, #144]	; (8002018 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001f86:	f7ff ff83 	bl	8001e90 <LL_ADC_IsEnabled>
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4823      	ldr	r0, [pc, #140]	; (800201c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001f8e:	f7ff ff7f 	bl	8001e90 <LL_ADC_IsEnabled>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4323      	orrs	r3, r4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d132      	bne.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fa2:	f023 030f 	bic.w	r3, r3, #15
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	6811      	ldr	r1, [r2, #0]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	6892      	ldr	r2, [r2, #8]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001fb6:	e023      	b.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fc4:	4814      	ldr	r0, [pc, #80]	; (8002018 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001fc6:	f7ff ff63 	bl	8001e90 <LL_ADC_IsEnabled>
 8001fca:	4604      	mov	r4, r0
 8001fcc:	4813      	ldr	r0, [pc, #76]	; (800201c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001fce:	f7ff ff5f 	bl	8001e90 <LL_ADC_IsEnabled>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4323      	orrs	r3, r4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d112      	bne.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fe2:	f023 030f 	bic.w	r3, r3, #15
 8001fe6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001fe8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001fea:	e009      	b.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001ffe:	e000      	b.n	8002002 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002000:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800200a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800200e:	4618      	mov	r0, r3
 8002010:	377c      	adds	r7, #124	; 0x7c
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}
 8002016:	bf00      	nop
 8002018:	50040000 	.word	0x50040000
 800201c:	50040100 	.word	0x50040100
 8002020:	50040300 	.word	0x50040300

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800204c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002056:	4a04      	ldr	r2, [pc, #16]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	60d3      	str	r3, [r2, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	; (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f7ff ff8e 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff29 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff3e 	bl	800206c <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff8e 	bl	8002118 <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5d 	bl	80020c4 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff31 	bl	8002088 <__NVIC_EnableIRQ>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffa2 	bl	8002180 <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002256:	e14e      	b.n	80024f6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8140 	beq.w	80024f0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d005      	beq.n	8002288 <HAL_GPIO_Init+0x40>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d130      	bne.n	80022ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022be:	2201      	movs	r2, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 0201 	and.w	r2, r3, #1
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d017      	beq.n	8002326 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d123      	bne.n	800237a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	08da      	lsrs	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3208      	adds	r2, #8
 8002374:	6939      	ldr	r1, [r7, #16]
 8002376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	2203      	movs	r2, #3
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0203 	and.w	r2, r3, #3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 809a 	beq.w	80024f0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023bc:	4b55      	ldr	r3, [pc, #340]	; (8002514 <HAL_GPIO_Init+0x2cc>)
 80023be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c0:	4a54      	ldr	r2, [pc, #336]	; (8002514 <HAL_GPIO_Init+0x2cc>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6613      	str	r3, [r2, #96]	; 0x60
 80023c8:	4b52      	ldr	r3, [pc, #328]	; (8002514 <HAL_GPIO_Init+0x2cc>)
 80023ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023d4:	4a50      	ldr	r2, [pc, #320]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023fe:	d013      	beq.n	8002428 <HAL_GPIO_Init+0x1e0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a46      	ldr	r2, [pc, #280]	; (800251c <HAL_GPIO_Init+0x2d4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00d      	beq.n	8002424 <HAL_GPIO_Init+0x1dc>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a45      	ldr	r2, [pc, #276]	; (8002520 <HAL_GPIO_Init+0x2d8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <HAL_GPIO_Init+0x1d8>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a44      	ldr	r2, [pc, #272]	; (8002524 <HAL_GPIO_Init+0x2dc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_GPIO_Init+0x1d4>
 8002418:	2303      	movs	r3, #3
 800241a:	e006      	b.n	800242a <HAL_GPIO_Init+0x1e2>
 800241c:	2307      	movs	r3, #7
 800241e:	e004      	b.n	800242a <HAL_GPIO_Init+0x1e2>
 8002420:	2302      	movs	r3, #2
 8002422:	e002      	b.n	800242a <HAL_GPIO_Init+0x1e2>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_GPIO_Init+0x1e2>
 8002428:	2300      	movs	r3, #0
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	f002 0203 	and.w	r2, r2, #3
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	4093      	lsls	r3, r2
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800243a:	4937      	ldr	r1, [pc, #220]	; (8002518 <HAL_GPIO_Init+0x2d0>)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002448:	4b37      	ldr	r3, [pc, #220]	; (8002528 <HAL_GPIO_Init+0x2e0>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800246c:	4a2e      	ldr	r2, [pc, #184]	; (8002528 <HAL_GPIO_Init+0x2e0>)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002472:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_GPIO_Init+0x2e0>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002496:	4a24      	ldr	r2, [pc, #144]	; (8002528 <HAL_GPIO_Init+0x2e0>)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_GPIO_Init+0x2e0>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024c0:	4a19      	ldr	r2, [pc, #100]	; (8002528 <HAL_GPIO_Init+0x2e0>)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_GPIO_Init+0x2e0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ea:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <HAL_GPIO_Init+0x2e0>)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3301      	adds	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	f47f aea9 	bne.w	8002258 <HAL_GPIO_Init+0x10>
  }
}
 8002506:	bf00      	nop
 8002508:	bf00      	nop
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40021000 	.word	0x40021000
 8002518:	40010000 	.word	0x40010000
 800251c:	48000400 	.word	0x48000400
 8002520:	48000800 	.word	0x48000800
 8002524:	48000c00 	.word	0x48000c00
 8002528:	40010400 	.word	0x40010400

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002548:	e002      	b.n	8002550 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800255c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255e:	b08b      	sub	sp, #44	; 0x2c
 8002560:	af06      	add	r7, sp, #24
 8002562:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0f8      	b.n	8002760 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f008 ff22 	bl	800b3cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2203      	movs	r2, #3
 800258c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f004 fa0b 	bl	80069b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	687e      	ldr	r6, [r7, #4]
 80025a2:	466d      	mov	r5, sp
 80025a4:	f106 0410 	add.w	r4, r6, #16
 80025a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	602b      	str	r3, [r5, #0]
 80025b0:	1d33      	adds	r3, r6, #4
 80025b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b4:	6838      	ldr	r0, [r7, #0]
 80025b6:	f004 f9d3 	bl	8006960 <USB_CoreInit>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0c9      	b.n	8002760 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f004 fa07 	bl	80069e6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e040      	b.n	8002660 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	3301      	adds	r3, #1
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	3303      	adds	r3, #3
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	3338      	adds	r3, #56	; 0x38
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	333c      	adds	r3, #60	; 0x3c
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	440b      	add	r3, r1
 8002654:	3340      	adds	r3, #64	; 0x40
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	3301      	adds	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	d3b9      	bcc.n	80025de <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e044      	b.n	80026fa <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	440b      	add	r3, r1
 800267e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	440b      	add	r3, r1
 80026c0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	440b      	add	r3, r1
 80026d6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	440b      	add	r3, r1
 80026ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	3301      	adds	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	d3b5      	bcc.n	8002670 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	687e      	ldr	r6, [r7, #4]
 800270c:	466d      	mov	r5, sp
 800270e:	f106 0410 	add.w	r4, r6, #16
 8002712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	602b      	str	r3, [r5, #0]
 800271a:	1d33      	adds	r3, r6, #4
 800271c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800271e:	6838      	ldr	r0, [r7, #0]
 8002720:	f004 f96e 	bl	8006a00 <USB_DevInit>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e014      	b.n	8002760 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f001 fc58 	bl	8004004 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f006 fbff 	bl	8008f5c <USB_DevDisconnect>

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002768 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_PCD_Start+0x16>
 800277a:	2302      	movs	r3, #2
 800277c:	e012      	b.n	80027a4 <HAL_PCD_Start+0x3c>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f004 f8f9 	bl	8006982 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f006 fbca 	bl	8008f2e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f006 fbe4 	bl	8008f86 <USB_ReadInterrupts>
 80027be:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fb13 	bl	8002df6 <PCD_EP_ISR_Handler>

    return;
 80027d0:	e110      	b.n	80029f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d013      	beq.n	8002804 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ee:	b292      	uxth	r2, r2
 80027f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f008 fea0 	bl	800b53a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80027fa:	2100      	movs	r1, #0
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f8fc 	bl	80029fa <HAL_PCD_SetAddress>

    return;
 8002802:	e0f7      	b.n	80029f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002816:	b29a      	uxth	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002820:	b292      	uxth	r2, r2
 8002822:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002826:	e0e5      	b.n	80029f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00c      	beq.n	800284c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800283a:	b29a      	uxth	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002844:	b292      	uxth	r2, r2
 8002846:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800284a:	e0d3      	b.n	80029f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d034      	beq.n	80028c0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800285e:	b29a      	uxth	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0204 	bic.w	r2, r2, #4
 8002868:	b292      	uxth	r2, r2
 800286a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002876:	b29a      	uxth	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0208 	bic.w	r2, r2, #8
 8002880:	b292      	uxth	r2, r2
 8002882:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800288c:	2b01      	cmp	r3, #1
 800288e:	d107      	bne.n	80028a0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002898:	2100      	movs	r1, #0
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f009 f8fe 	bl	800ba9c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f008 fe83 	bl	800b5ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028b8:	b292      	uxth	r2, r2
 80028ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80028be:	e099      	b.n	80029f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d027      	beq.n	800291a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0208 	orr.w	r2, r2, #8
 80028dc:	b292      	uxth	r2, r2
 80028de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f4:	b292      	uxth	r2, r2
 80028f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0204 	orr.w	r2, r2, #4
 800290c:	b292      	uxth	r2, r2
 800290e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f008 fe30 	bl	800b578 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002918:	e06c      	b.n	80029f4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b00      	cmp	r3, #0
 8002922:	d040      	beq.n	80029a6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800292c:	b29a      	uxth	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002936:	b292      	uxth	r2, r2
 8002938:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d12b      	bne.n	800299e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800294e:	b29a      	uxth	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0204 	orr.w	r2, r2, #4
 8002958:	b292      	uxth	r2, r2
 800295a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0208 	orr.w	r2, r2, #8
 8002970:	b292      	uxth	r2, r2
 8002972:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002986:	b29b      	uxth	r3, r3
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002994:	2101      	movs	r1, #1
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f009 f880 	bl	800ba9c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800299c:	e02a      	b.n	80029f4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f008 fdea 	bl	800b578 <HAL_PCD_SuspendCallback>
    return;
 80029a4:	e026      	b.n	80029f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00f      	beq.n	80029d0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029c2:	b292      	uxth	r2, r2
 80029c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f008 fda8 	bl	800b51e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029ce:	e011      	b.n	80029f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00c      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ec:	b292      	uxth	r2, r2
 80029ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80029f2:	bf00      	nop
  }
}
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_PCD_SetAddress+0x1a>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e013      	b.n	8002a3c <HAL_PCD_SetAddress+0x42>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f006 fa6a 	bl	8008f06 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	461a      	mov	r2, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	70fb      	strb	r3, [r7, #3]
 8002a56:	460b      	mov	r3, r1
 8002a58:	803b      	strh	r3, [r7, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	da0e      	bge.n	8002a88 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	705a      	strb	r2, [r3, #1]
 8002a86:	e00e      	b.n	8002aa6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	f003 0207 	and.w	r2, r3, #7
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ab2:	883a      	ldrh	r2, [r7, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	78ba      	ldrb	r2, [r7, #2]
 8002abc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002abe:	78bb      	ldrb	r3, [r7, #2]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d102      	bne.n	8002aca <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_PCD_EP_Open+0x94>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e00e      	b.n	8002af6 <HAL_PCD_EP_Open+0xb2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68f9      	ldr	r1, [r7, #12]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 ffac 	bl	8006a44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002af4:	7afb      	ldrb	r3, [r7, #11]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	da0e      	bge.n	8002b30 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	705a      	strb	r2, [r3, #1]
 8002b2e:	e00e      	b.n	8002b4e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	f003 0207 	and.w	r2, r3, #7
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_PCD_EP_Close+0x6a>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e00e      	b.n	8002b86 <HAL_PCD_EP_Close+0x88>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68f9      	ldr	r1, [r7, #12]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f004 fb28 	bl	80071cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
 8002ba0:	f003 0207 	and.w	r2, r3, #7
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bce:	7afb      	ldrb	r3, [r7, #11]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6979      	ldr	r1, [r7, #20]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f004 fce0 	bl	80075a6 <USB_EPStartXfer>

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	f003 0207 	and.w	r2, r3, #7
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c30:	7afb      	ldrb	r3, [r7, #11]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6979      	ldr	r1, [r7, #20]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f004 fc91 	bl	80075a6 <USB_EPStartXfer>

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	f003 0207 	and.w	r2, r3, #7
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d901      	bls.n	8002cac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e04c      	b.n	8002d46 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	da0e      	bge.n	8002cd2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	705a      	strb	r2, [r3, #1]
 8002cd0:	e00c      	b.n	8002cec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_PCD_EP_SetStall+0x7e>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e01c      	b.n	8002d46 <HAL_PCD_EP_SetStall+0xb8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f005 fff4 	bl	8008d08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d108      	bne.n	8002d3c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002d34:	4619      	mov	r1, r3
 8002d36:	4610      	mov	r0, r2
 8002d38:	f006 f935 	bl	8008fa6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	f003 020f 	and.w	r2, r3, #15
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d901      	bls.n	8002d6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e040      	b.n	8002dee <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	da0e      	bge.n	8002d92 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4413      	add	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	705a      	strb	r2, [r3, #1]
 8002d90:	e00e      	b.n	8002db0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	f003 0207 	and.w	r2, r3, #7
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_PCD_EP_ClrStall+0x82>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e00e      	b.n	8002dee <HAL_PCD_EP_ClrStall+0xa0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f005 ffe3 	bl	8008daa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b096      	sub	sp, #88	; 0x58
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002dfe:	e3b1      	b.n	8003564 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002e0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002e1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 8173 	bne.w	800310a <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d150      	bne.n	8002ed2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e40:	81fb      	strh	r3, [r7, #14]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3328      	adds	r3, #40	; 0x28
 8002e58:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e80:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	441a      	add	r2, r3
 8002e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e90:	2100      	movs	r1, #0
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f008 fb29 	bl	800b4ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 835f 	beq.w	8003564 <PCD_EP_ISR_Handler+0x76e>
 8002ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 835a 	bne.w	8003564 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	b292      	uxth	r2, r2
 8002ec4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ed0:	e348      	b.n	8003564 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ed8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ee4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d032      	beq.n	8002f56 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f16:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f24:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f28:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f006 f889 	bl	8009042 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	823b      	strh	r3, [r7, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	8a3a      	ldrh	r2, [r7, #16]
 8002f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f008 fa9e 	bl	800b490 <HAL_PCD_SetupStageCallback>
 8002f54:	e306      	b.n	8003564 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f56:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f280 8302 	bge.w	8003564 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	83fb      	strh	r3, [r7, #30]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	8bfa      	ldrh	r2, [r7, #30]
 8002f76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d019      	beq.n	8002fe2 <PCD_EP_ISR_Handler+0x1ec>
 8002fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d015      	beq.n	8002fe2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fbc:	6959      	ldr	r1, [r3, #20]
 8002fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f006 f83b 	bl	8009042 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	441a      	add	r2, r3
 8002fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f008 fa69 	bl	800b4b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002fec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f040 82b5 	bne.w	8003564 <PCD_EP_ISR_Handler+0x76e>
 8002ffa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ffe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003002:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003006:	f000 82ad 	beq.w	8003564 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003018:	b29b      	uxth	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4413      	add	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003034:	b29a      	uxth	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	801a      	strh	r2, [r3, #0]
 800303a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b3e      	cmp	r3, #62	; 0x3e
 8003040:	d91d      	bls.n	800307e <PCD_EP_ISR_Handler+0x288>
 8003042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	647b      	str	r3, [r7, #68]	; 0x44
 800304a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <PCD_EP_ISR_Handler+0x266>
 8003056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003058:	3b01      	subs	r3, #1
 800305a:	647b      	str	r3, [r7, #68]	; 0x44
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	b29a      	uxth	r2, r3
 8003062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003064:	b29b      	uxth	r3, r3
 8003066:	029b      	lsls	r3, r3, #10
 8003068:	b29b      	uxth	r3, r3
 800306a:	4313      	orrs	r3, r2
 800306c:	b29b      	uxth	r3, r3
 800306e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003076:	b29a      	uxth	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	e026      	b.n	80030cc <PCD_EP_ISR_Handler+0x2d6>
 800307e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <PCD_EP_ISR_Handler+0x2a6>
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003094:	b29a      	uxth	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	801a      	strh	r2, [r3, #0]
 800309a:	e017      	b.n	80030cc <PCD_EP_ISR_Handler+0x2d6>
 800309c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	647b      	str	r3, [r7, #68]	; 0x44
 80030a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <PCD_EP_ISR_Handler+0x2c0>
 80030b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b2:	3301      	adds	r3, #1
 80030b4:	647b      	str	r3, [r7, #68]	; 0x44
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030be:	b29b      	uxth	r3, r3
 80030c0:	029b      	lsls	r3, r3, #10
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	4313      	orrs	r3, r2
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030dc:	827b      	strh	r3, [r7, #18]
 80030de:	8a7b      	ldrh	r3, [r7, #18]
 80030e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030e4:	827b      	strh	r3, [r7, #18]
 80030e6:	8a7b      	ldrh	r3, [r7, #18]
 80030e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030ec:	827b      	strh	r3, [r7, #18]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	8a7b      	ldrh	r3, [r7, #18]
 80030f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	b29b      	uxth	r3, r3
 8003106:	8013      	strh	r3, [r2, #0]
 8003108:	e22c      	b.n	8003564 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800311e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003122:	2b00      	cmp	r3, #0
 8003124:	f280 80f6 	bge.w	8003314 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	b29a      	uxth	r2, r3
 800313a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800313e:	4013      	ands	r3, r2
 8003140:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003156:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800315a:	b292      	uxth	r2, r2
 800315c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800315e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003176:	7b1b      	ldrb	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d123      	bne.n	80031c4 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003184:	b29b      	uxth	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	4413      	add	r3, r2
 8003196:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80031a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 808e 	beq.w	80032ca <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b4:	6959      	ldr	r1, [r3, #20]
 80031b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b8:	88da      	ldrh	r2, [r3, #6]
 80031ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031be:	f005 ff40 	bl	8009042 <USB_ReadPMA>
 80031c2:	e082      	b.n	80032ca <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80031c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c6:	78db      	ldrb	r3, [r3, #3]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d10a      	bne.n	80031e2 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80031cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031d0:	461a      	mov	r2, r3
 80031d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f9d3 	bl	8003580 <HAL_PCD_EP_DB_Receive>
 80031da:	4603      	mov	r3, r0
 80031dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80031e0:	e073      	b.n	80032ca <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	441a      	add	r2, r3
 800320e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800321a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003222:	b29b      	uxth	r3, r3
 8003224:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d022      	beq.n	8003286 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003248:	b29b      	uxth	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	4413      	add	r3, r2
 800325a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003264:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003268:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800326c:	2b00      	cmp	r3, #0
 800326e:	d02c      	beq.n	80032ca <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003276:	6959      	ldr	r1, [r3, #20]
 8003278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327a:	891a      	ldrh	r2, [r3, #8]
 800327c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003280:	f005 fedf 	bl	8009042 <USB_ReadPMA>
 8003284:	e021      	b.n	80032ca <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800328e:	b29b      	uxth	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80032ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032bc:	6959      	ldr	r1, [r3, #20]
 80032be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c0:	895a      	ldrh	r2, [r3, #10]
 80032c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032c6:	f005 febc 	bl	8009042 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80032ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032cc:	69da      	ldr	r2, [r3, #28]
 80032ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032d2:	441a      	add	r2, r3
 80032d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80032d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032e0:	441a      	add	r2, r3
 80032e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80032e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <PCD_EP_ISR_Handler+0x504>
 80032ee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80032f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d206      	bcs.n	8003308 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80032fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	4619      	mov	r1, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f008 f8d7 	bl	800b4b4 <HAL_PCD_DataOutStageCallback>
 8003306:	e005      	b.n	8003314 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800330e:	4618      	mov	r0, r3
 8003310:	f004 f949 	bl	80075a6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003314:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8121 	beq.w	8003564 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8003322:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800334c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003350:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800336a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800336e:	b29b      	uxth	r3, r3
 8003370:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003374:	78db      	ldrb	r3, [r3, #3]
 8003376:	2b01      	cmp	r3, #1
 8003378:	f040 80a2 	bne.w	80034c0 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 800337c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337e:	2200      	movs	r2, #0
 8003380:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003384:	7b1b      	ldrb	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8093 	beq.w	80034b2 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800338c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d046      	beq.n	8003426 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339a:	785b      	ldrb	r3, [r3, #1]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d126      	bne.n	80033ee <PCD_EP_ISR_Handler+0x5f8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	4413      	add	r3, r2
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
 80033b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	00da      	lsls	r2, r3, #3
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	4413      	add	r3, r2
 80033c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033c6:	623b      	str	r3, [r7, #32]
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	801a      	strh	r2, [r3, #0]
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	801a      	strh	r2, [r3, #0]
 80033ec:	e061      	b.n	80034b2 <PCD_EP_ISR_Handler+0x6bc>
 80033ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f0:	785b      	ldrb	r3, [r3, #1]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d15d      	bne.n	80034b2 <PCD_EP_ISR_Handler+0x6bc>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003404:	b29b      	uxth	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	4413      	add	r3, r2
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	00da      	lsls	r2, r3, #3
 8003414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003416:	4413      	add	r3, r2
 8003418:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	2200      	movs	r2, #0
 8003422:	801a      	strh	r2, [r3, #0]
 8003424:	e045      	b.n	80034b2 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342e:	785b      	ldrb	r3, [r3, #1]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d126      	bne.n	8003482 <PCD_EP_ISR_Handler+0x68c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003442:	b29b      	uxth	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003448:	4413      	add	r3, r2
 800344a:	637b      	str	r3, [r7, #52]	; 0x34
 800344c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	00da      	lsls	r2, r3, #3
 8003452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003454:	4413      	add	r3, r2
 8003456:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800345a:	633b      	str	r3, [r7, #48]	; 0x30
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29b      	uxth	r3, r3
 8003462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003466:	b29a      	uxth	r2, r3
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	801a      	strh	r2, [r3, #0]
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b29b      	uxth	r3, r3
 8003472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800347a:	b29a      	uxth	r2, r3
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	801a      	strh	r2, [r3, #0]
 8003480:	e017      	b.n	80034b2 <PCD_EP_ISR_Handler+0x6bc>
 8003482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003484:	785b      	ldrb	r3, [r3, #1]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d113      	bne.n	80034b2 <PCD_EP_ISR_Handler+0x6bc>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003492:	b29b      	uxth	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003498:	4413      	add	r3, r2
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	00da      	lsls	r2, r3, #3
 80034a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a4:	4413      	add	r3, r2
 80034a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ae:	2200      	movs	r2, #0
 80034b0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f008 f816 	bl	800b4ea <HAL_PCD_DataInStageCallback>
 80034be:	e051      	b.n	8003564 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80034c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d144      	bne.n	8003556 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80034f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f6:	699a      	ldr	r2, [r3, #24]
 80034f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d907      	bls.n	8003510 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8003500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003502:	699a      	ldr	r2, [r3, #24]
 8003504:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003508:	1ad2      	subs	r2, r2, r3
 800350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350c:	619a      	str	r2, [r3, #24]
 800350e:	e002      	b.n	8003516 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8003510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003512:	2200      	movs	r2, #0
 8003514:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800351e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	4619      	mov	r1, r3
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f007 ffe0 	bl	800b4ea <HAL_PCD_DataInStageCallback>
 800352a:	e01b      	b.n	8003564 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800352c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003534:	441a      	add	r2, r3
 8003536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003538:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800353a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003542:	441a      	add	r2, r3
 8003544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003546:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800354e:	4618      	mov	r0, r3
 8003550:	f004 f829 	bl	80075a6 <USB_EPStartXfer>
 8003554:	e006      	b.n	8003564 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003556:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800355a:	461a      	mov	r2, r3
 800355c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f917 	bl	8003792 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800356c:	b29b      	uxth	r3, r3
 800356e:	b21b      	sxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	f6ff ac45 	blt.w	8002e00 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3758      	adds	r7, #88	; 0x58
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d07c      	beq.n	8003692 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	4413      	add	r3, r2
 80035b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	8b7b      	ldrh	r3, [r7, #26]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d306      	bcc.n	80035d6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	8b7b      	ldrh	r3, [r7, #26]
 80035ce:	1ad2      	subs	r2, r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	619a      	str	r2, [r3, #24]
 80035d4:	e002      	b.n	80035dc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2200      	movs	r2, #0
 80035da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d123      	bne.n	800362c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	833b      	strh	r3, [r7, #24]
 8003600:	8b3b      	ldrh	r3, [r7, #24]
 8003602:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003606:	833b      	strh	r3, [r7, #24]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	8b3b      	ldrh	r3, [r7, #24]
 8003618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800361c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003628:	b29b      	uxth	r3, r3
 800362a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01f      	beq.n	8003676 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003650:	82fb      	strh	r3, [r7, #22]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	441a      	add	r2, r3
 8003660:	8afb      	ldrh	r3, [r7, #22]
 8003662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800366a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003672:	b29b      	uxth	r3, r3
 8003674:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003676:	8b7b      	ldrh	r3, [r7, #26]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8085 	beq.w	8003788 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	6959      	ldr	r1, [r3, #20]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	891a      	ldrh	r2, [r3, #8]
 800368a:	8b7b      	ldrh	r3, [r7, #26]
 800368c:	f005 fcd9 	bl	8009042 <USB_ReadPMA>
 8003690:	e07a      	b.n	8003788 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369a:	b29b      	uxth	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	8b7b      	ldrh	r3, [r7, #26]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d306      	bcc.n	80036d0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	8b7b      	ldrh	r3, [r7, #26]
 80036c8:	1ad2      	subs	r2, r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	619a      	str	r2, [r3, #24]
 80036ce:	e002      	b.n	80036d6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2200      	movs	r2, #0
 80036d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d123      	bne.n	8003726 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	83fb      	strh	r3, [r7, #30]
 80036fa:	8bfb      	ldrh	r3, [r7, #30]
 80036fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003700:	83fb      	strh	r3, [r7, #30]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	441a      	add	r2, r3
 8003710:	8bfb      	ldrh	r3, [r7, #30]
 8003712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800371a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003722:	b29b      	uxth	r3, r3
 8003724:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d11f      	bne.n	8003770 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	83bb      	strh	r3, [r7, #28]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	441a      	add	r2, r3
 800375a:	8bbb      	ldrh	r3, [r7, #28]
 800375c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003768:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800376c:	b29b      	uxth	r3, r3
 800376e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003770:	8b7b      	ldrh	r3, [r7, #26]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	6959      	ldr	r1, [r3, #20]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	895a      	ldrh	r2, [r3, #10]
 8003782:	8b7b      	ldrh	r3, [r7, #26]
 8003784:	f005 fc5d 	bl	8009042 <USB_ReadPMA>
    }
  }

  return count;
 8003788:	8b7b      	ldrh	r3, [r7, #26]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b0a4      	sub	sp, #144	; 0x90
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	4613      	mov	r3, r2
 800379e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 81db 	beq.w	8003b62 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	4413      	add	r3, r2
 80037c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80037dc:	429a      	cmp	r2, r3
 80037de:	d907      	bls.n	80037f0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80037e8:	1ad2      	subs	r2, r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	619a      	str	r2, [r3, #24]
 80037ee:	e002      	b.n	80037f6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2200      	movs	r2, #0
 80037f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 80b9 	bne.w	8003972 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d126      	bne.n	8003856 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003816:	b29b      	uxth	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	4413      	add	r3, r2
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	00da      	lsls	r2, r3, #3
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	4413      	add	r3, r2
 800382a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	b29b      	uxth	r3, r3
 8003836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800383a:	b29a      	uxth	r2, r3
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800384a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800384e:	b29a      	uxth	r2, r3
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	801a      	strh	r2, [r3, #0]
 8003854:	e01a      	b.n	800388c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	785b      	ldrb	r3, [r3, #1]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d116      	bne.n	800388c <HAL_PCD_EP_DB_Transmit+0xfa>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800386c:	b29b      	uxth	r3, r3
 800386e:	461a      	mov	r2, r3
 8003870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003872:	4413      	add	r3, r2
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	00da      	lsls	r2, r3, #3
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	4413      	add	r3, r2
 8003880:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003884:	633b      	str	r3, [r7, #48]	; 0x30
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	2200      	movs	r2, #0
 800388a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	785b      	ldrb	r3, [r3, #1]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d126      	bne.n	80038e8 <HAL_PCD_EP_DB_Transmit+0x156>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	00da      	lsls	r2, r3, #3
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	801a      	strh	r2, [r3, #0]
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	801a      	strh	r2, [r3, #0]
 80038e6:	e017      	b.n	8003918 <HAL_PCD_EP_DB_Transmit+0x186>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	785b      	ldrb	r3, [r3, #1]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d113      	bne.n	8003918 <HAL_PCD_EP_DB_Transmit+0x186>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	4413      	add	r3, r2
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	00da      	lsls	r2, r3, #3
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	4413      	add	r3, r2
 800390c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	2200      	movs	r2, #0
 8003916:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	4619      	mov	r1, r3
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f007 fde3 	bl	800b4ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 82fa 	beq.w	8003f24 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	b29b      	uxth	r3, r3
 8003942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394a:	82fb      	strh	r3, [r7, #22]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	441a      	add	r2, r3
 800395a:	8afb      	ldrh	r3, [r7, #22]
 800395c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396c:	b29b      	uxth	r3, r3
 800396e:	8013      	strh	r3, [r2, #0]
 8003970:	e2d8      	b.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d021      	beq.n	80039c0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	441a      	add	r2, r3
 80039a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80039ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039bc:	b29b      	uxth	r3, r3
 80039be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	f040 82ac 	bne.w	8003f24 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80039d4:	441a      	add	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	69da      	ldr	r2, [r3, #28]
 80039de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80039e2:	441a      	add	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	6a1a      	ldr	r2, [r3, #32]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d30b      	bcc.n	8003a0c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6a1a      	ldr	r2, [r3, #32]
 8003a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a04:	1ad2      	subs	r2, r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	621a      	str	r2, [r3, #32]
 8003a0a:	e017      	b.n	8003a3c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d108      	bne.n	8003a26 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003a14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a24:	e00a      	b.n	8003a3c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	785b      	ldrb	r3, [r3, #1]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d165      	bne.n	8003b10 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a58:	4413      	add	r3, r2
 8003a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	00da      	lsls	r2, r3, #3
 8003a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a64:	4413      	add	r3, r2
 8003a66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7a:	801a      	strh	r2, [r3, #0]
 8003a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a80:	2b3e      	cmp	r3, #62	; 0x3e
 8003a82:	d91d      	bls.n	8003ac0 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <HAL_PCD_EP_DB_Transmit+0x30c>
 8003a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	029b      	lsls	r3, r3, #10
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	4313      	orrs	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abc:	801a      	strh	r2, [r3, #0]
 8003abe:	e044      	b.n	8003b4a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <HAL_PCD_EP_DB_Transmit+0x34c>
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	801a      	strh	r2, [r3, #0]
 8003adc:	e035      	b.n	8003b4a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_PCD_EP_DB_Transmit+0x366>
 8003af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af4:	3301      	adds	r3, #1
 8003af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	029b      	lsls	r3, r3, #10
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	4313      	orrs	r3, r2
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	801a      	strh	r2, [r3, #0]
 8003b0e:	e01c      	b.n	8003b4a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	785b      	ldrb	r3, [r3, #1]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d118      	bne.n	8003b4a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b2c:	4413      	add	r3, r2
 8003b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	00da      	lsls	r2, r3, #3
 8003b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b38:	4413      	add	r3, r2
 8003b3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b48:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6959      	ldr	r1, [r3, #20]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	891a      	ldrh	r2, [r3, #8]
 8003b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f005 fa2f 	bl	8008fbe <USB_WritePMA>
 8003b60:	e1e0      	b.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b86:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d307      	bcc.n	8003ba6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b9e:	1ad2      	subs	r2, r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	619a      	str	r2, [r3, #24]
 8003ba4:	e002      	b.n	8003bac <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f040 80c0 	bne.w	8003d36 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d126      	bne.n	8003c0c <HAL_PCD_EP_DB_Transmit+0x47a>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bd2:	4413      	add	r3, r2
 8003bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	00da      	lsls	r2, r3, #3
 8003bdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bde:	4413      	add	r3, r2
 8003be0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003be4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	e01a      	b.n	8003c42 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d116      	bne.n	8003c42 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	667b      	str	r3, [r7, #100]	; 0x64
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c28:	4413      	add	r3, r2
 8003c2a:	667b      	str	r3, [r7, #100]	; 0x64
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	00da      	lsls	r2, r3, #3
 8003c32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c34:	4413      	add	r3, r2
 8003c36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c3e:	2200      	movs	r2, #0
 8003c40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	677b      	str	r3, [r7, #116]	; 0x74
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	785b      	ldrb	r3, [r3, #1]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d12b      	bne.n	8003ca8 <HAL_PCD_EP_DB_Transmit+0x516>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c64:	4413      	add	r3, r2
 8003c66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	00da      	lsls	r2, r3, #3
 8003c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c70:	4413      	add	r3, r2
 8003c72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	e017      	b.n	8003cd8 <HAL_PCD_EP_DB_Transmit+0x546>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d113      	bne.n	8003cd8 <HAL_PCD_EP_DB_Transmit+0x546>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cbe:	4413      	add	r3, r2
 8003cc0:	677b      	str	r3, [r7, #116]	; 0x74
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	00da      	lsls	r2, r3, #3
 8003cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cca:	4413      	add	r3, r2
 8003ccc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cd0:	673b      	str	r3, [r7, #112]	; 0x70
 8003cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f007 fc03 	bl	800b4ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f040 811a 	bne.w	8003f24 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	441a      	add	r2, r3
 8003d1c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	8013      	strh	r3, [r2, #0]
 8003d34:	e0f6      	b.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d121      	bne.n	8003d84 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	441a      	add	r2, r3
 8003d6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	f040 80ca 	bne.w	8003f24 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d98:	441a      	add	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003da6:	441a      	add	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6a1a      	ldr	r2, [r3, #32]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d30b      	bcc.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6a1a      	ldr	r2, [r3, #32]
 8003dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc8:	1ad2      	subs	r2, r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	621a      	str	r2, [r3, #32]
 8003dce:	e017      	b.n	8003e00 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d108      	bne.n	8003dea <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003dd8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ddc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003de8:	e00a      	b.n	8003e00 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2200      	movs	r2, #0
 8003df6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	657b      	str	r3, [r7, #84]	; 0x54
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d165      	bne.n	8003eda <HAL_PCD_EP_DB_Transmit+0x748>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e22:	4413      	add	r3, r2
 8003e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	00da      	lsls	r2, r3, #3
 8003e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e2e:	4413      	add	r3, r2
 8003e30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e34:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e44:	801a      	strh	r2, [r3, #0]
 8003e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e4a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e4c:	d91d      	bls.n	8003e8a <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d102      	bne.n	8003e68 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003e62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e64:	3b01      	subs	r3, #1
 8003e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	029b      	lsls	r3, r3, #10
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	4313      	orrs	r3, r2
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e86:	801a      	strh	r2, [r3, #0]
 8003e88:	e041      	b.n	8003f0e <HAL_PCD_EP_DB_Transmit+0x77c>
 8003e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <HAL_PCD_EP_DB_Transmit+0x716>
 8003e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ea4:	801a      	strh	r2, [r3, #0]
 8003ea6:	e032      	b.n	8003f0e <HAL_PCD_EP_DB_Transmit+0x77c>
 8003ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_PCD_EP_DB_Transmit+0x730>
 8003ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	029b      	lsls	r3, r3, #10
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ed6:	801a      	strh	r2, [r3, #0]
 8003ed8:	e019      	b.n	8003f0e <HAL_PCD_EP_DB_Transmit+0x77c>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	785b      	ldrb	r3, [r3, #1]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d115      	bne.n	8003f0e <HAL_PCD_EP_DB_Transmit+0x77c>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef0:	4413      	add	r3, r2
 8003ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	00da      	lsls	r2, r3, #3
 8003efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003efc:	4413      	add	r3, r2
 8003efe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f02:	653b      	str	r3, [r7, #80]	; 0x50
 8003f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	6959      	ldr	r1, [r3, #20]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	895a      	ldrh	r2, [r3, #10]
 8003f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f005 f84d 	bl	8008fbe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3e:	82bb      	strh	r3, [r7, #20]
 8003f40:	8abb      	ldrh	r3, [r7, #20]
 8003f42:	f083 0310 	eor.w	r3, r3, #16
 8003f46:	82bb      	strh	r3, [r7, #20]
 8003f48:	8abb      	ldrh	r3, [r7, #20]
 8003f4a:	f083 0320 	eor.w	r3, r3, #32
 8003f4e:	82bb      	strh	r3, [r7, #20]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	441a      	add	r2, r3
 8003f5e:	8abb      	ldrh	r3, [r7, #20]
 8003f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3790      	adds	r7, #144	; 0x90
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b087      	sub	sp, #28
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	607b      	str	r3, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	817b      	strh	r3, [r7, #10]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003f90:	897b      	ldrh	r3, [r7, #10]
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f9c:	897b      	ldrh	r3, [r7, #10]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	e009      	b.n	8003fc8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fb4:	897a      	ldrh	r2, [r7, #10]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003fc8:	893b      	ldrh	r3, [r7, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d107      	bne.n	8003fde <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	80da      	strh	r2, [r3, #6]
 8003fdc:	e00b      	b.n	8003ff6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	0c1b      	lsrs	r3, r3, #16
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004028:	b29b      	uxth	r3, r3
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800403c:	b29b      	uxth	r3, r3
 800403e:	f043 0302 	orr.w	r3, r3, #2
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800405c:	4b04      	ldr	r3, [pc, #16]	; (8004070 <HAL_PWREx_GetVoltageRange+0x18>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40007000 	.word	0x40007000

08004074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004082:	d130      	bne.n	80040e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004084:	4b23      	ldr	r3, [pc, #140]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800408c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004090:	d038      	beq.n	8004104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004092:	4b20      	ldr	r3, [pc, #128]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800409a:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800409c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040a2:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2232      	movs	r2, #50	; 0x32
 80040a8:	fb02 f303 	mul.w	r3, r2, r3
 80040ac:	4a1b      	ldr	r2, [pc, #108]	; (800411c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	0c9b      	lsrs	r3, r3, #18
 80040b4:	3301      	adds	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040b8:	e002      	b.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3b01      	subs	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c0:	4b14      	ldr	r3, [pc, #80]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040cc:	d102      	bne.n	80040d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f2      	bne.n	80040ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040d4:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e0:	d110      	bne.n	8004104 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e00f      	b.n	8004106 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f2:	d007      	beq.n	8004104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040f4:	4b07      	ldr	r3, [pc, #28]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040fc:	4a05      	ldr	r2, [pc, #20]	; (8004114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004102:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40007000 	.word	0x40007000
 8004118:	20000000 	.word	0x20000000
 800411c:	431bde83 	.word	0x431bde83

08004120 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	4a04      	ldr	r2, [pc, #16]	; (800413c <HAL_PWREx_EnableVddUSB+0x1c>)
 800412a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800412e:	6053      	str	r3, [r2, #4]
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40007000 	.word	0x40007000

08004140 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f000 bc4f 	b.w	80049f2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004154:	4b97      	ldr	r3, [pc, #604]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800415e:	4b95      	ldr	r3, [pc, #596]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80e6 	beq.w	8004342 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_RCC_OscConfig+0x4c>
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	2b0c      	cmp	r3, #12
 8004180:	f040 808d 	bne.w	800429e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b01      	cmp	r3, #1
 8004188:	f040 8089 	bne.w	800429e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800418c:	4b89      	ldr	r3, [pc, #548]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d006      	beq.n	80041a6 <HAL_RCC_OscConfig+0x66>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f000 bc26 	b.w	80049f2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041aa:	4b82      	ldr	r3, [pc, #520]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <HAL_RCC_OscConfig+0x80>
 80041b6:	4b7f      	ldr	r3, [pc, #508]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041be:	e005      	b.n	80041cc <HAL_RCC_OscConfig+0x8c>
 80041c0:	4b7c      	ldr	r3, [pc, #496]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d224      	bcs.n	800421a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fdd9 	bl	8004d8c <RCC_SetFlashLatencyFromMSIRange>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f000 bc06 	b.w	80049f2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e6:	4b73      	ldr	r3, [pc, #460]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a72      	ldr	r2, [pc, #456]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041ec:	f043 0308 	orr.w	r3, r3, #8
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b70      	ldr	r3, [pc, #448]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	496d      	ldr	r1, [pc, #436]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004200:	4313      	orrs	r3, r2
 8004202:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004204:	4b6b      	ldr	r3, [pc, #428]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	4968      	ldr	r1, [pc, #416]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]
 8004218:	e025      	b.n	8004266 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800421a:	4b66      	ldr	r3, [pc, #408]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a65      	ldr	r2, [pc, #404]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004220:	f043 0308 	orr.w	r3, r3, #8
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b63      	ldr	r3, [pc, #396]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	4960      	ldr	r1, [pc, #384]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004238:	4b5e      	ldr	r3, [pc, #376]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	495b      	ldr	r1, [pc, #364]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004248:	4313      	orrs	r3, r2
 800424a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fd98 	bl	8004d8c <RCC_SetFlashLatencyFromMSIRange>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e3c5      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004266:	f000 fccd 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 800426a:	4602      	mov	r2, r0
 800426c:	4b51      	ldr	r3, [pc, #324]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	4950      	ldr	r1, [pc, #320]	; (80043b8 <HAL_RCC_OscConfig+0x278>)
 8004278:	5ccb      	ldrb	r3, [r1, r3]
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	fa22 f303 	lsr.w	r3, r2, r3
 8004282:	4a4e      	ldr	r2, [pc, #312]	; (80043bc <HAL_RCC_OscConfig+0x27c>)
 8004284:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004286:	4b4e      	ldr	r3, [pc, #312]	; (80043c0 <HAL_RCC_OscConfig+0x280>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc fe9a 	bl	8000fc4 <HAL_InitTick>
 8004290:	4603      	mov	r3, r0
 8004292:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d052      	beq.n	8004340 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800429a:	7dfb      	ldrb	r3, [r7, #23]
 800429c:	e3a9      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d032      	beq.n	800430c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042a6:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a42      	ldr	r2, [pc, #264]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042b2:	f7fc fed7 	bl	8001064 <HAL_GetTick>
 80042b6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042ba:	f7fc fed3 	bl	8001064 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e392      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042cc:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042d8:	4b36      	ldr	r3, [pc, #216]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a35      	ldr	r2, [pc, #212]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80042de:	f043 0308 	orr.w	r3, r3, #8
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b33      	ldr	r3, [pc, #204]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	4930      	ldr	r1, [pc, #192]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042f6:	4b2f      	ldr	r3, [pc, #188]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	492b      	ldr	r1, [pc, #172]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004306:	4313      	orrs	r3, r2
 8004308:	604b      	str	r3, [r1, #4]
 800430a:	e01a      	b.n	8004342 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800430c:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a28      	ldr	r2, [pc, #160]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004318:	f7fc fea4 	bl	8001064 <HAL_GetTick>
 800431c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004320:	f7fc fea0 	bl	8001064 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e35f      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004332:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x1e0>
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004340:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d073      	beq.n	8004436 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d005      	beq.n	8004360 <HAL_RCC_OscConfig+0x220>
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d10e      	bne.n	8004378 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	2b03      	cmp	r3, #3
 800435e:	d10b      	bne.n	8004378 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004360:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d063      	beq.n	8004434 <HAL_RCC_OscConfig+0x2f4>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d15f      	bne.n	8004434 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e33c      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d106      	bne.n	8004390 <HAL_RCC_OscConfig+0x250>
 8004382:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a0b      	ldr	r2, [pc, #44]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	e025      	b.n	80043dc <HAL_RCC_OscConfig+0x29c>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004398:	d114      	bne.n	80043c4 <HAL_RCC_OscConfig+0x284>
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80043a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a02      	ldr	r2, [pc, #8]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 80043ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e013      	b.n	80043dc <HAL_RCC_OscConfig+0x29c>
 80043b4:	40021000 	.word	0x40021000
 80043b8:	0800c4f4 	.word	0x0800c4f4
 80043bc:	20000000 	.word	0x20000000
 80043c0:	20000004 	.word	0x20000004
 80043c4:	4b8f      	ldr	r3, [pc, #572]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a8e      	ldr	r2, [pc, #568]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b8c      	ldr	r3, [pc, #560]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a8b      	ldr	r2, [pc, #556]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fc fe3e 	bl	8001064 <HAL_GetTick>
 80043e8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ec:	f7fc fe3a 	bl	8001064 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	; 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e2f9      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043fe:	4b81      	ldr	r3, [pc, #516]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x2ac>
 800440a:	e014      	b.n	8004436 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fc fe2a 	bl	8001064 <HAL_GetTick>
 8004410:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004414:	f7fc fe26 	bl	8001064 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e2e5      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004426:	4b77      	ldr	r3, [pc, #476]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x2d4>
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d060      	beq.n	8004504 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	2b04      	cmp	r3, #4
 8004446:	d005      	beq.n	8004454 <HAL_RCC_OscConfig+0x314>
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d119      	bne.n	8004482 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d116      	bne.n	8004482 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004454:	4b6b      	ldr	r3, [pc, #428]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_OscConfig+0x32c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e2c2      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446c:	4b65      	ldr	r3, [pc, #404]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	061b      	lsls	r3, r3, #24
 800447a:	4962      	ldr	r1, [pc, #392]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004480:	e040      	b.n	8004504 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d023      	beq.n	80044d2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800448a:	4b5e      	ldr	r3, [pc, #376]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a5d      	ldr	r2, [pc, #372]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fc fde5 	bl	8001064 <HAL_GetTick>
 800449a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449e:	f7fc fde1 	bl	8001064 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e2a0      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b0:	4b54      	ldr	r3, [pc, #336]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b51      	ldr	r3, [pc, #324]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	494e      	ldr	r1, [pc, #312]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
 80044d0:	e018      	b.n	8004504 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b4c      	ldr	r3, [pc, #304]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a4b      	ldr	r2, [pc, #300]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80044d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fc fdc1 	bl	8001064 <HAL_GetTick>
 80044e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e6:	f7fc fdbd 	bl	8001064 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e27c      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044f8:	4b42      	ldr	r3, [pc, #264]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f0      	bne.n	80044e6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 8082 	beq.w	8004616 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d05f      	beq.n	80045da <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800451a:	4b3a      	ldr	r3, [pc, #232]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800451c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004520:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f003 0310 	and.w	r3, r3, #16
 800452c:	429a      	cmp	r2, r3
 800452e:	d037      	beq.n	80045a0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d006      	beq.n	8004548 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e254      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01b      	beq.n	800458a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004552:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004558:	4a2a      	ldr	r2, [pc, #168]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004562:	f7fc fd7f 	bl	8001064 <HAL_GetTick>
 8004566:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800456a:	f7fc fd7b 	bl	8001064 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b11      	cmp	r3, #17
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e23a      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800457c:	4b21      	ldr	r3, [pc, #132]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800457e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ef      	bne.n	800456a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800458a:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800458c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004590:	f023 0210 	bic.w	r2, r3, #16
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	491a      	ldr	r1, [pc, #104]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a0:	4b18      	ldr	r3, [pc, #96]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80045a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a6:	4a17      	ldr	r2, [pc, #92]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7fc fd58 	bl	8001064 <HAL_GetTick>
 80045b4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b8:	f7fc fd54 	bl	8001064 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b11      	cmp	r3, #17
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e213      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ca:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80045cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0ef      	beq.n	80045b8 <HAL_RCC_OscConfig+0x478>
 80045d8:	e01d      	b.n	8004616 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045da:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e0:	4a08      	ldr	r2, [pc, #32]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	f023 0301 	bic.w	r3, r3, #1
 80045e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ea:	f7fc fd3b 	bl	8001064 <HAL_GetTick>
 80045ee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045f0:	e00a      	b.n	8004608 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f2:	f7fc fd37 	bl	8001064 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b11      	cmp	r3, #17
 80045fe:	d903      	bls.n	8004608 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e1f6      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
 8004604:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004608:	4ba9      	ldr	r3, [pc, #676]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 800460a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1ed      	bne.n	80045f2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80bd 	beq.w	800479e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004624:	2300      	movs	r3, #0
 8004626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800462a:	4ba1      	ldr	r3, [pc, #644]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10e      	bne.n	8004654 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	4b9e      	ldr	r3, [pc, #632]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	4a9d      	ldr	r2, [pc, #628]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 800463c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004640:	6593      	str	r3, [r2, #88]	; 0x58
 8004642:	4b9b      	ldr	r3, [pc, #620]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 8004644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004654:	4b97      	ldr	r3, [pc, #604]	; (80048b4 <HAL_RCC_OscConfig+0x774>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d118      	bne.n	8004692 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004660:	4b94      	ldr	r3, [pc, #592]	; (80048b4 <HAL_RCC_OscConfig+0x774>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a93      	ldr	r2, [pc, #588]	; (80048b4 <HAL_RCC_OscConfig+0x774>)
 8004666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466c:	f7fc fcfa 	bl	8001064 <HAL_GetTick>
 8004670:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004674:	f7fc fcf6 	bl	8001064 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e1b5      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004686:	4b8b      	ldr	r3, [pc, #556]	; (80048b4 <HAL_RCC_OscConfig+0x774>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d02c      	beq.n	80046f8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800469e:	4b84      	ldr	r3, [pc, #528]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b0:	497f      	ldr	r1, [pc, #508]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d010      	beq.n	80046e6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046c4:	4b7a      	ldr	r3, [pc, #488]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	4a79      	ldr	r2, [pc, #484]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80046cc:	f043 0304 	orr.w	r3, r3, #4
 80046d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046d4:	4b76      	ldr	r3, [pc, #472]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	4a75      	ldr	r2, [pc, #468]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80046dc:	f043 0301 	orr.w	r3, r3, #1
 80046e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046e4:	e018      	b.n	8004718 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046e6:	4b72      	ldr	r3, [pc, #456]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	4a70      	ldr	r2, [pc, #448]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046f6:	e00f      	b.n	8004718 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046f8:	4b6d      	ldr	r3, [pc, #436]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	4a6c      	ldr	r2, [pc, #432]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004708:	4b69      	ldr	r3, [pc, #420]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	4a68      	ldr	r2, [pc, #416]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 8004710:	f023 0304 	bic.w	r3, r3, #4
 8004714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d016      	beq.n	800474e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fc fca0 	bl	8001064 <HAL_GetTick>
 8004724:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004726:	e00a      	b.n	800473e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004728:	f7fc fc9c 	bl	8001064 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f241 3288 	movw	r2, #5000	; 0x1388
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e159      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800473e:	4b5c      	ldr	r3, [pc, #368]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0ed      	beq.n	8004728 <HAL_RCC_OscConfig+0x5e8>
 800474c:	e01d      	b.n	800478a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474e:	f7fc fc89 	bl	8001064 <HAL_GetTick>
 8004752:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fc fc85 	bl	8001064 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e142      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800476c:	4b50      	ldr	r3, [pc, #320]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ed      	bne.n	8004756 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800477a:	4b4d      	ldr	r3, [pc, #308]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	4a4b      	ldr	r2, [pc, #300]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 8004782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800478a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004792:	4b47      	ldr	r3, [pc, #284]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 8004794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004796:	4a46      	ldr	r2, [pc, #280]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 8004798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d03c      	beq.n	8004824 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01c      	beq.n	80047ec <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047b2:	4b3f      	ldr	r3, [pc, #252]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80047b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047b8:	4a3d      	ldr	r2, [pc, #244]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c2:	f7fc fc4f 	bl	8001064 <HAL_GetTick>
 80047c6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047ca:	f7fc fc4b 	bl	8001064 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e10a      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047dc:	4b34      	ldr	r3, [pc, #208]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80047de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0ef      	beq.n	80047ca <HAL_RCC_OscConfig+0x68a>
 80047ea:	e01b      	b.n	8004824 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047ec:	4b30      	ldr	r3, [pc, #192]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80047ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047f2:	4a2f      	ldr	r2, [pc, #188]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fc:	f7fc fc32 	bl	8001064 <HAL_GetTick>
 8004800:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004804:	f7fc fc2e 	bl	8001064 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0ed      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004816:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 8004818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1ef      	bne.n	8004804 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80e1 	beq.w	80049f0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	2b02      	cmp	r3, #2
 8004834:	f040 80b5 	bne.w	80049a2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004838:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	f003 0203 	and.w	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	429a      	cmp	r2, r3
 800484a:	d124      	bne.n	8004896 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004856:	3b01      	subs	r3, #1
 8004858:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d11b      	bne.n	8004896 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d113      	bne.n	8004896 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004878:	085b      	lsrs	r3, r3, #1
 800487a:	3b01      	subs	r3, #1
 800487c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d109      	bne.n	8004896 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	3b01      	subs	r3, #1
 8004890:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d05f      	beq.n	8004956 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	2b0c      	cmp	r3, #12
 800489a:	d05a      	beq.n	8004952 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a03      	ldr	r2, [pc, #12]	; (80048b0 <HAL_RCC_OscConfig+0x770>)
 80048a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048a8:	f7fc fbdc 	bl	8001064 <HAL_GetTick>
 80048ac:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ae:	e00c      	b.n	80048ca <HAL_RCC_OscConfig+0x78a>
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fc fbd4 	bl	8001064 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e093      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ca:	4b4c      	ldr	r3, [pc, #304]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048d6:	4b49      	ldr	r3, [pc, #292]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	4b49      	ldr	r3, [pc, #292]	; (8004a00 <HAL_RCC_OscConfig+0x8c0>)
 80048dc:	4013      	ands	r3, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048e6:	3a01      	subs	r2, #1
 80048e8:	0112      	lsls	r2, r2, #4
 80048ea:	4311      	orrs	r1, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048f0:	0212      	lsls	r2, r2, #8
 80048f2:	4311      	orrs	r1, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048f8:	0852      	lsrs	r2, r2, #1
 80048fa:	3a01      	subs	r2, #1
 80048fc:	0552      	lsls	r2, r2, #21
 80048fe:	4311      	orrs	r1, r2
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004904:	0852      	lsrs	r2, r2, #1
 8004906:	3a01      	subs	r2, #1
 8004908:	0652      	lsls	r2, r2, #25
 800490a:	430a      	orrs	r2, r1
 800490c:	493b      	ldr	r1, [pc, #236]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004912:	4b3a      	ldr	r3, [pc, #232]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a39      	ldr	r2, [pc, #228]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 8004918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800491c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800491e:	4b37      	ldr	r3, [pc, #220]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	4a36      	ldr	r2, [pc, #216]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 8004924:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004928:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800492a:	f7fc fb9b 	bl	8001064 <HAL_GetTick>
 800492e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004932:	f7fc fb97 	bl	8001064 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e056      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004944:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004950:	e04e      	b.n	80049f0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e04d      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004956:	4b29      	ldr	r3, [pc, #164]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d146      	bne.n	80049f0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004962:	4b26      	ldr	r3, [pc, #152]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a25      	ldr	r2, [pc, #148]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 8004968:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800496c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800496e:	4b23      	ldr	r3, [pc, #140]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	4a22      	ldr	r2, [pc, #136]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 8004974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004978:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800497a:	f7fc fb73 	bl	8001064 <HAL_GetTick>
 800497e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004982:	f7fc fb6f 	bl	8001064 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e02e      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004994:	4b19      	ldr	r3, [pc, #100]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x842>
 80049a0:	e026      	b.n	80049f0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	d021      	beq.n	80049ec <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a8:	4b14      	ldr	r3, [pc, #80]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a13      	ldr	r2, [pc, #76]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 80049ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fc fb56 	bl	8001064 <HAL_GetTick>
 80049b8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fc fb52 	bl	8001064 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e011      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ce:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	4a07      	ldr	r2, [pc, #28]	; (80049fc <HAL_RCC_OscConfig+0x8bc>)
 80049e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80049e4:	f023 0303 	bic.w	r3, r3, #3
 80049e8:	60d3      	str	r3, [r2, #12]
 80049ea:	e001      	b.n	80049f0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3728      	adds	r7, #40	; 0x28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40021000 	.word	0x40021000
 8004a00:	f99f808c 	.word	0xf99f808c

08004a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0e7      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a18:	4b75      	ldr	r3, [pc, #468]	; (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d910      	bls.n	8004a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b72      	ldr	r3, [pc, #456]	; (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f023 0207 	bic.w	r2, r3, #7
 8004a2e:	4970      	ldr	r1, [pc, #448]	; (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a36:	4b6e      	ldr	r3, [pc, #440]	; (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0cf      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d010      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	4b66      	ldr	r3, [pc, #408]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d908      	bls.n	8004a76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a64:	4b63      	ldr	r3, [pc, #396]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4960      	ldr	r1, [pc, #384]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d04c      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d107      	bne.n	8004a9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8a:	4b5a      	ldr	r3, [pc, #360]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d121      	bne.n	8004ada <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0a6      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa2:	4b54      	ldr	r3, [pc, #336]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d115      	bne.n	8004ada <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e09a      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d107      	bne.n	8004aca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aba:	4b4e      	ldr	r3, [pc, #312]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e08e      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aca:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e086      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ada:	4b46      	ldr	r3, [pc, #280]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f023 0203 	bic.w	r2, r3, #3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	4943      	ldr	r1, [pc, #268]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aec:	f7fc faba 	bl	8001064 <HAL_GetTick>
 8004af0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af2:	e00a      	b.n	8004b0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af4:	f7fc fab6 	bl	8001064 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e06e      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0a:	4b3a      	ldr	r3, [pc, #232]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 020c 	and.w	r2, r3, #12
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d1eb      	bne.n	8004af4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d010      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d208      	bcs.n	8004b4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b38:	4b2e      	ldr	r3, [pc, #184]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	492b      	ldr	r1, [pc, #172]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b4a:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d210      	bcs.n	8004b7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b58:	4b25      	ldr	r3, [pc, #148]	; (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f023 0207 	bic.w	r2, r3, #7
 8004b60:	4923      	ldr	r1, [pc, #140]	; (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b68:	4b21      	ldr	r3, [pc, #132]	; (8004bf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d001      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e036      	b.n	8004be8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d008      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b86:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4918      	ldr	r1, [pc, #96]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d009      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba4:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	4910      	ldr	r1, [pc, #64]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bb8:	f000 f824 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	490b      	ldr	r1, [pc, #44]	; (8004bf8 <HAL_RCC_ClockConfig+0x1f4>)
 8004bca:	5ccb      	ldrb	r3, [r1, r3]
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd4:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <HAL_RCC_ClockConfig+0x1f8>)
 8004bd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <HAL_RCC_ClockConfig+0x1fc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fc f9f1 	bl	8000fc4 <HAL_InitTick>
 8004be2:	4603      	mov	r3, r0
 8004be4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004be6:	7afb      	ldrb	r3, [r7, #11]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40022000 	.word	0x40022000
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	0800c4f4 	.word	0x0800c4f4
 8004bfc:	20000000 	.word	0x20000000
 8004c00:	20000004 	.word	0x20000004

08004c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b089      	sub	sp, #36	; 0x24
 8004c08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c12:	4b3e      	ldr	r3, [pc, #248]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
 8004c1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c1c:	4b3b      	ldr	r3, [pc, #236]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0x34>
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b0c      	cmp	r3, #12
 8004c30:	d121      	bne.n	8004c76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d11e      	bne.n	8004c76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c38:	4b34      	ldr	r3, [pc, #208]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d107      	bne.n	8004c54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c44:	4b31      	ldr	r3, [pc, #196]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e005      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c54:	4b2d      	ldr	r3, [pc, #180]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c60:	4a2b      	ldr	r2, [pc, #172]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10d      	bne.n	8004c8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c74:	e00a      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d102      	bne.n	8004c82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c7c:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c7e:	61bb      	str	r3, [r7, #24]
 8004c80:	e004      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d101      	bne.n	8004c8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c88:	4b23      	ldr	r3, [pc, #140]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b0c      	cmp	r3, #12
 8004c90:	d134      	bne.n	8004cfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c92:	4b1e      	ldr	r3, [pc, #120]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d003      	beq.n	8004caa <HAL_RCC_GetSysClockFreq+0xa6>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d003      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xac>
 8004ca8:	e005      	b.n	8004cb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004caa:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cac:	617b      	str	r3, [r7, #20]
      break;
 8004cae:	e005      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cb0:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cb2:	617b      	str	r3, [r7, #20]
      break;
 8004cb4:	e002      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	617b      	str	r3, [r7, #20]
      break;
 8004cba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cbc:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cca:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	0a1b      	lsrs	r3, r3, #8
 8004cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	fb03 f202 	mul.w	r2, r3, r2
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	0e5b      	lsrs	r3, r3, #25
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	3301      	adds	r3, #1
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cfc:	69bb      	ldr	r3, [r7, #24]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3724      	adds	r7, #36	; 0x24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	0800c50c 	.word	0x0800c50c
 8004d14:	00f42400 	.word	0x00f42400
 8004d18:	007a1200 	.word	0x007a1200

08004d1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d20:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d22:	681b      	ldr	r3, [r3, #0]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000000 	.word	0x20000000

08004d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d38:	f7ff fff0 	bl	8004d1c <HAL_RCC_GetHCLKFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	0a1b      	lsrs	r3, r3, #8
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	4904      	ldr	r1, [pc, #16]	; (8004d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d4a:	5ccb      	ldrb	r3, [r1, r3]
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	0800c504 	.word	0x0800c504

08004d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d64:	f7ff ffda 	bl	8004d1c <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	0adb      	lsrs	r3, r3, #11
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4904      	ldr	r1, [pc, #16]	; (8004d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	f003 031f 	and.w	r3, r3, #31
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40021000 	.word	0x40021000
 8004d88:	0800c504 	.word	0x0800c504

08004d8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d94:	2300      	movs	r3, #0
 8004d96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d98:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004da4:	f7ff f958 	bl	8004058 <HAL_PWREx_GetVoltageRange>
 8004da8:	6178      	str	r0, [r7, #20]
 8004daa:	e014      	b.n	8004dd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dac:	4b25      	ldr	r3, [pc, #148]	; (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db0:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db6:	6593      	str	r3, [r2, #88]	; 0x58
 8004db8:	4b22      	ldr	r3, [pc, #136]	; (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004dc4:	f7ff f948 	bl	8004058 <HAL_PWREx_GetVoltageRange>
 8004dc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dca:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dce:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ddc:	d10b      	bne.n	8004df6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b80      	cmp	r3, #128	; 0x80
 8004de2:	d919      	bls.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2ba0      	cmp	r3, #160	; 0xa0
 8004de8:	d902      	bls.n	8004df0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dea:	2302      	movs	r3, #2
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	e013      	b.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004df0:	2301      	movs	r3, #1
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	e010      	b.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d902      	bls.n	8004e02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	e00a      	b.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b80      	cmp	r3, #128	; 0x80
 8004e06:	d102      	bne.n	8004e0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e08:	2302      	movs	r3, #2
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	e004      	b.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b70      	cmp	r3, #112	; 0x70
 8004e12:	d101      	bne.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e14:	2301      	movs	r3, #1
 8004e16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 0207 	bic.w	r2, r3, #7
 8004e20:	4909      	ldr	r1, [pc, #36]	; (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e28:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d001      	beq.n	8004e3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40021000 	.word	0x40021000
 8004e48:	40022000 	.word	0x40022000

08004e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e54:	2300      	movs	r3, #0
 8004e56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e58:	2300      	movs	r3, #0
 8004e5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 809e 	beq.w	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e6e:	4b46      	ldr	r3, [pc, #280]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00d      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e84:	4b40      	ldr	r3, [pc, #256]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e88:	4a3f      	ldr	r2, [pc, #252]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e90:	4b3d      	ldr	r3, [pc, #244]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea0:	4b3a      	ldr	r3, [pc, #232]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a39      	ldr	r2, [pc, #228]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eac:	f7fc f8da 	bl	8001064 <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eb2:	e009      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb4:	f7fc f8d6 	bl	8001064 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d902      	bls.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	74fb      	strb	r3, [r7, #19]
        break;
 8004ec6:	e005      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ec8:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0ef      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d15a      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eda:	4b2b      	ldr	r3, [pc, #172]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01e      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d019      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ef6:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f02:	4b21      	ldr	r3, [pc, #132]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f08:	4a1f      	ldr	r2, [pc, #124]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f12:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f18:	4a1b      	ldr	r2, [pc, #108]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f22:	4a19      	ldr	r2, [pc, #100]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d016      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7fc f896 	bl	8001064 <HAL_GetTick>
 8004f38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f3a:	e00b      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3c:	f7fc f892 	bl	8001064 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d902      	bls.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	74fb      	strb	r3, [r7, #19]
            break;
 8004f52:	e006      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f54:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ec      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004f62:	7cfb      	ldrb	r3, [r7, #19]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f68:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	4904      	ldr	r1, [pc, #16]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f7e:	e009      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
 8004f84:	e006      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004f86:	bf00      	nop
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f90:	7cfb      	ldrb	r3, [r7, #19]
 8004f92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f94:	7c7b      	ldrb	r3, [r7, #17]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d105      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f9a:	4b6e      	ldr	r3, [pc, #440]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	4a6d      	ldr	r2, [pc, #436]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fb2:	4b68      	ldr	r3, [pc, #416]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f023 0203 	bic.w	r2, r3, #3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4964      	ldr	r1, [pc, #400]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd4:	4b5f      	ldr	r3, [pc, #380]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f023 020c 	bic.w	r2, r3, #12
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	495c      	ldr	r1, [pc, #368]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff6:	4b57      	ldr	r3, [pc, #348]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4953      	ldr	r1, [pc, #332]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005018:	4b4e      	ldr	r3, [pc, #312]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	494b      	ldr	r1, [pc, #300]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800503a:	4b46      	ldr	r3, [pc, #280]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	4942      	ldr	r1, [pc, #264]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800505c:	4b3d      	ldr	r3, [pc, #244]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	493a      	ldr	r1, [pc, #232]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800507e:	4b35      	ldr	r3, [pc, #212]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	4931      	ldr	r1, [pc, #196]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050a0:	4b2c      	ldr	r3, [pc, #176]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	4929      	ldr	r1, [pc, #164]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050c2:	4b24      	ldr	r3, [pc, #144]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	4920      	ldr	r1, [pc, #128]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d015      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	4918      	ldr	r1, [pc, #96]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005102:	d105      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005104:	4b13      	ldr	r3, [pc, #76]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4a12      	ldr	r2, [pc, #72]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800510a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005122:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	490a      	ldr	r1, [pc, #40]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800513a:	d105      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4a04      	ldr	r2, [pc, #16]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005146:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005148:	7cbb      	ldrb	r3, [r7, #18]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40021000 	.word	0x40021000

08005158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e095      	b.n	8005296 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	2b00      	cmp	r3, #0
 8005170:	d108      	bne.n	8005184 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800517a:	d009      	beq.n	8005190 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	61da      	str	r2, [r3, #28]
 8005182:	e005      	b.n	8005190 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fb fe08 	bl	8000dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051d0:	d902      	bls.n	80051d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e002      	b.n	80051de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80051e6:	d007      	beq.n	80051f8 <HAL_SPI_Init+0xa0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051f0:	d002      	beq.n	80051f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	ea42 0103 	orr.w	r1, r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	f003 0204 	and.w	r2, r3, #4
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005274:	ea42 0103 	orr.w	r1, r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b088      	sub	sp, #32
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	603b      	str	r3, [r7, #0]
 80052aa:	4613      	mov	r3, r2
 80052ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_SPI_Transmit+0x22>
 80052bc:	2302      	movs	r3, #2
 80052be:	e15f      	b.n	8005580 <HAL_SPI_Transmit+0x2e2>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052c8:	f7fb fecc 	bl	8001064 <HAL_GetTick>
 80052cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d002      	beq.n	80052e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052de:	2302      	movs	r3, #2
 80052e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052e2:	e148      	b.n	8005576 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <HAL_SPI_Transmit+0x52>
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d102      	bne.n	80052f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052f4:	e13f      	b.n	8005576 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2203      	movs	r2, #3
 80052fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	88fa      	ldrh	r2, [r7, #6]
 800530e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	88fa      	ldrh	r2, [r7, #6]
 8005314:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005340:	d10f      	bne.n	8005362 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005350:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005360:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d007      	beq.n	8005380 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800537e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005388:	d94f      	bls.n	800542a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_SPI_Transmit+0xfa>
 8005392:	8afb      	ldrh	r3, [r7, #22]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d142      	bne.n	800541e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	881a      	ldrh	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	1c9a      	adds	r2, r3, #2
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053bc:	e02f      	b.n	800541e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d112      	bne.n	80053f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	881a      	ldrh	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	1c9a      	adds	r2, r3, #2
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053f0:	e015      	b.n	800541e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053f2:	f7fb fe37 	bl	8001064 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d803      	bhi.n	800540a <HAL_SPI_Transmit+0x16c>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d102      	bne.n	8005410 <HAL_SPI_Transmit+0x172>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d106      	bne.n	800541e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800541c:	e0ab      	b.n	8005576 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1ca      	bne.n	80053be <HAL_SPI_Transmit+0x120>
 8005428:	e080      	b.n	800552c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_SPI_Transmit+0x19a>
 8005432:	8afb      	ldrh	r3, [r7, #22]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d174      	bne.n	8005522 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	d912      	bls.n	8005468 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	881a      	ldrh	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	1c9a      	adds	r2, r3, #2
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b02      	subs	r3, #2
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005466:	e05c      	b.n	8005522 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	7812      	ldrb	r2, [r2, #0]
 8005474:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800548e:	e048      	b.n	8005522 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b02      	cmp	r3, #2
 800549c:	d12b      	bne.n	80054f6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d912      	bls.n	80054ce <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	881a      	ldrh	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	1c9a      	adds	r2, r3, #2
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b02      	subs	r3, #2
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054cc:	e029      	b.n	8005522 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	7812      	ldrb	r2, [r2, #0]
 80054da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054f4:	e015      	b.n	8005522 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054f6:	f7fb fdb5 	bl	8001064 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d803      	bhi.n	800550e <HAL_SPI_Transmit+0x270>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d102      	bne.n	8005514 <HAL_SPI_Transmit+0x276>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005520:	e029      	b.n	8005576 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1b1      	bne.n	8005490 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fcf9 	bl	8005f28 <SPI_EndRxTxTransaction>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e003      	b.n	8005576 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800557e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d002      	beq.n	80055ae <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80055a8:	2302      	movs	r3, #2
 80055aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055ac:	e11a      	b.n	80057e4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b6:	d112      	bne.n	80055de <HAL_SPI_Receive+0x56>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10e      	bne.n	80055de <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2204      	movs	r2, #4
 80055c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055c8:	88fa      	ldrh	r2, [r7, #6]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	4613      	mov	r3, r2
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f90e 	bl	80057f6 <HAL_SPI_TransmitReceive>
 80055da:	4603      	mov	r3, r0
 80055dc:	e107      	b.n	80057ee <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_SPI_Receive+0x64>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e100      	b.n	80057ee <HAL_SPI_Receive+0x266>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055f4:	f7fb fd36 	bl	8001064 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_SPI_Receive+0x7e>
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]
    goto error;
 800560a:	e0eb      	b.n	80057e4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2204      	movs	r2, #4
 8005610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005656:	d908      	bls.n	800566a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	e007      	b.n	800567a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005678:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005682:	d10f      	bne.n	80056a4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005692:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d007      	beq.n	80056c2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056ca:	d86f      	bhi.n	80057ac <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056cc:	e034      	b.n	8005738 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d117      	bne.n	800570c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f103 020c 	add.w	r2, r3, #12
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	7812      	ldrb	r2, [r2, #0]
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800570a:	e015      	b.n	8005738 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800570c:	f7fb fcaa 	bl	8001064 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d803      	bhi.n	8005724 <HAL_SPI_Receive+0x19c>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005722:	d102      	bne.n	800572a <HAL_SPI_Receive+0x1a2>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005736:	e055      	b.n	80057e4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1c4      	bne.n	80056ce <HAL_SPI_Receive+0x146>
 8005744:	e038      	b.n	80057b8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b01      	cmp	r3, #1
 8005752:	d115      	bne.n	8005780 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	b292      	uxth	r2, r2
 8005760:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	1c9a      	adds	r2, r3, #2
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800577e:	e015      	b.n	80057ac <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005780:	f7fb fc70 	bl	8001064 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d803      	bhi.n	8005798 <HAL_SPI_Receive+0x210>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d102      	bne.n	800579e <HAL_SPI_Receive+0x216>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80057aa:	e01b      	b.n	80057e4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1c6      	bne.n	8005746 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	6839      	ldr	r1, [r7, #0]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fb5b 	bl	8005e78 <SPI_EndRxTransaction>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	75fb      	strb	r3, [r7, #23]
 80057da:	e003      	b.n	80057e4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b08a      	sub	sp, #40	; 0x28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005804:	2301      	movs	r3, #1
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_SPI_TransmitReceive+0x26>
 8005818:	2302      	movs	r3, #2
 800581a:	e20a      	b.n	8005c32 <HAL_SPI_TransmitReceive+0x43c>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005824:	f7fb fc1e 	bl	8001064 <HAL_GetTick>
 8005828:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005830:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005838:	887b      	ldrh	r3, [r7, #2]
 800583a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800583c:	887b      	ldrh	r3, [r7, #2]
 800583e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005840:	7efb      	ldrb	r3, [r7, #27]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d00e      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x6e>
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800584c:	d106      	bne.n	800585c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <HAL_SPI_TransmitReceive+0x66>
 8005856:	7efb      	ldrb	r3, [r7, #27]
 8005858:	2b04      	cmp	r3, #4
 800585a:	d003      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800585c:	2302      	movs	r3, #2
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005862:	e1e0      	b.n	8005c26 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_SPI_TransmitReceive+0x80>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_SPI_TransmitReceive+0x80>
 8005870:	887b      	ldrh	r3, [r7, #2]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d103      	bne.n	800587e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800587c:	e1d3      	b.n	8005c26 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b04      	cmp	r3, #4
 8005888:	d003      	beq.n	8005892 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2205      	movs	r2, #5
 800588e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	887a      	ldrh	r2, [r7, #2]
 80058a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	887a      	ldrh	r2, [r7, #2]
 80058aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	887a      	ldrh	r2, [r7, #2]
 80058b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	887a      	ldrh	r2, [r7, #2]
 80058be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058d4:	d802      	bhi.n	80058dc <HAL_SPI_TransmitReceive+0xe6>
 80058d6:	8a3b      	ldrh	r3, [r7, #16]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d908      	bls.n	80058ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058ea:	605a      	str	r2, [r3, #4]
 80058ec:	e007      	b.n	80058fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d007      	beq.n	800591c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800591a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005924:	f240 8081 	bls.w	8005a2a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_SPI_TransmitReceive+0x140>
 8005930:	8a7b      	ldrh	r3, [r7, #18]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d16d      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	881a      	ldrh	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	1c9a      	adds	r2, r3, #2
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800595a:	e05a      	b.n	8005a12 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b02      	cmp	r3, #2
 8005968:	d11b      	bne.n	80059a2 <HAL_SPI_TransmitReceive+0x1ac>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d016      	beq.n	80059a2 <HAL_SPI_TransmitReceive+0x1ac>
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	2b01      	cmp	r3, #1
 8005978:	d113      	bne.n	80059a2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	881a      	ldrh	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	1c9a      	adds	r2, r3, #2
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d11c      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x1f4>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d016      	beq.n	80059ea <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	b292      	uxth	r2, r2
 80059c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	1c9a      	adds	r2, r3, #2
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059e6:	2301      	movs	r3, #1
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059ea:	f7fb fb3b 	bl	8001064 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d80b      	bhi.n	8005a12 <HAL_SPI_TransmitReceive+0x21c>
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d007      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005a10:	e109      	b.n	8005c26 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d19f      	bne.n	800595c <HAL_SPI_TransmitReceive+0x166>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d199      	bne.n	800595c <HAL_SPI_TransmitReceive+0x166>
 8005a28:	e0e3      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_SPI_TransmitReceive+0x244>
 8005a32:	8a7b      	ldrh	r3, [r7, #18]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	f040 80cf 	bne.w	8005bd8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d912      	bls.n	8005a6a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	1c9a      	adds	r2, r3, #2
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b02      	subs	r3, #2
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a68:	e0b6      	b.n	8005bd8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	330c      	adds	r3, #12
 8005a74:	7812      	ldrb	r2, [r2, #0]
 8005a76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a90:	e0a2      	b.n	8005bd8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d134      	bne.n	8005b0a <HAL_SPI_TransmitReceive+0x314>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d02f      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x314>
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d12c      	bne.n	8005b0a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d912      	bls.n	8005ae0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	881a      	ldrh	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	1c9a      	adds	r2, r3, #2
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b02      	subs	r3, #2
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ade:	e012      	b.n	8005b06 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	7812      	ldrb	r2, [r2, #0]
 8005aec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d148      	bne.n	8005baa <HAL_SPI_TransmitReceive+0x3b4>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d042      	beq.n	8005baa <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d923      	bls.n	8005b78 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	b292      	uxth	r2, r2
 8005b3c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	1c9a      	adds	r2, r3, #2
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b02      	subs	r3, #2
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d81f      	bhi.n	8005ba6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b74:	605a      	str	r2, [r3, #4]
 8005b76:	e016      	b.n	8005ba6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f103 020c 	add.w	r2, r3, #12
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	7812      	ldrb	r2, [r2, #0]
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005baa:	f7fb fa5b 	bl	8001064 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d803      	bhi.n	8005bc2 <HAL_SPI_TransmitReceive+0x3cc>
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d102      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x3d2>
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d107      	bne.n	8005bd8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005bd6:	e026      	b.n	8005c26 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f47f af57 	bne.w	8005a92 <HAL_SPI_TransmitReceive+0x29c>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f47f af50 	bne.w	8005a92 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 f996 	bl	8005f28 <SPI_EndRxTxTransaction>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c1c:	e003      	b.n	8005c26 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3728      	adds	r7, #40	; 0x28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c4c:	f7fb fa0a 	bl	8001064 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	1a9b      	subs	r3, r3, r2
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	4413      	add	r3, r2
 8005c5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c5c:	f7fb fa02 	bl	8001064 <HAL_GetTick>
 8005c60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c62:	4b39      	ldr	r3, [pc, #228]	; (8005d48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	015b      	lsls	r3, r3, #5
 8005c68:	0d1b      	lsrs	r3, r3, #20
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	fb02 f303 	mul.w	r3, r2, r3
 8005c70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c72:	e054      	b.n	8005d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7a:	d050      	beq.n	8005d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c7c:	f7fb f9f2 	bl	8001064 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d902      	bls.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d13d      	bne.n	8005d0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005caa:	d111      	bne.n	8005cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb4:	d004      	beq.n	8005cc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cbe:	d107      	bne.n	8005cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd8:	d10f      	bne.n	8005cfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e017      	b.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	2300      	movne	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d19b      	bne.n	8005c74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000000 	.word	0x20000000

08005d4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	; 0x28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d5e:	f7fb f981 	bl	8001064 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005d6e:	f7fb f979 	bl	8001064 <HAL_GetTick>
 8005d72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	330c      	adds	r3, #12
 8005d7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d7c:	4b3d      	ldr	r3, [pc, #244]	; (8005e74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	00da      	lsls	r2, r3, #3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	0d1b      	lsrs	r3, r3, #20
 8005d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
 8005d92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d94:	e060      	b.n	8005e58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d9c:	d107      	bne.n	8005dae <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d104      	bne.n	8005dae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d050      	beq.n	8005e58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005db6:	f7fb f955 	bl	8001064 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d902      	bls.n	8005dcc <SPI_WaitFifoStateUntilTimeout+0x80>
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d13d      	bne.n	8005e48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de4:	d111      	bne.n	8005e0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dee:	d004      	beq.n	8005dfa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df8:	d107      	bne.n	8005e0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e12:	d10f      	bne.n	8005e34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e010      	b.n	8005e6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4013      	ands	r3, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d196      	bne.n	8005d96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3728      	adds	r7, #40	; 0x28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000000 	.word	0x20000000

08005e78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8c:	d111      	bne.n	8005eb2 <SPI_EndRxTransaction+0x3a>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e96:	d004      	beq.n	8005ea2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea0:	d107      	bne.n	8005eb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2180      	movs	r1, #128	; 0x80
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f7ff febd 	bl	8005c3c <SPI_WaitFlagStateUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ecc:	f043 0220 	orr.w	r2, r3, #32
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e023      	b.n	8005f20 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ee0:	d11d      	bne.n	8005f1e <SPI_EndRxTransaction+0xa6>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eea:	d004      	beq.n	8005ef6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef4:	d113      	bne.n	8005f1e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7ff ff22 	bl	8005d4c <SPI_WaitFifoStateUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f12:	f043 0220 	orr.w	r2, r3, #32
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e000      	b.n	8005f20 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7ff ff03 	bl	8005d4c <SPI_WaitFifoStateUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f50:	f043 0220 	orr.w	r2, r3, #32
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e027      	b.n	8005fac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2200      	movs	r2, #0
 8005f64:	2180      	movs	r1, #128	; 0x80
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff fe68 	bl	8005c3c <SPI_WaitFlagStateUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d007      	beq.n	8005f82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f76:	f043 0220 	orr.w	r2, r3, #32
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e014      	b.n	8005fac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7ff fedc 	bl	8005d4c <SPI_WaitFifoStateUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9e:	f043 0220 	orr.w	r2, r3, #32
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e000      	b.n	8005fac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fb8:	b08a      	sub	sp, #40	; 0x28
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b9e      	ldr	r3, [pc, #632]	; (800625c <UART_SetConfig+0x2a8>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a93      	ldr	r2, [pc, #588]	; (8006260 <UART_SetConfig+0x2ac>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800601c:	4313      	orrs	r3, r2
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006030:	430a      	orrs	r2, r1
 8006032:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a8a      	ldr	r2, [pc, #552]	; (8006264 <UART_SetConfig+0x2b0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d126      	bne.n	800608c <UART_SetConfig+0xd8>
 800603e:	4b8a      	ldr	r3, [pc, #552]	; (8006268 <UART_SetConfig+0x2b4>)
 8006040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	2b03      	cmp	r3, #3
 800604a:	d81b      	bhi.n	8006084 <UART_SetConfig+0xd0>
 800604c:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <UART_SetConfig+0xa0>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	08006065 	.word	0x08006065
 8006058:	08006075 	.word	0x08006075
 800605c:	0800606d 	.word	0x0800606d
 8006060:	0800607d 	.word	0x0800607d
 8006064:	2301      	movs	r3, #1
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606a:	e0ab      	b.n	80061c4 <UART_SetConfig+0x210>
 800606c:	2302      	movs	r3, #2
 800606e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006072:	e0a7      	b.n	80061c4 <UART_SetConfig+0x210>
 8006074:	2304      	movs	r3, #4
 8006076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607a:	e0a3      	b.n	80061c4 <UART_SetConfig+0x210>
 800607c:	2308      	movs	r3, #8
 800607e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006082:	e09f      	b.n	80061c4 <UART_SetConfig+0x210>
 8006084:	2310      	movs	r3, #16
 8006086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608a:	e09b      	b.n	80061c4 <UART_SetConfig+0x210>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a76      	ldr	r2, [pc, #472]	; (800626c <UART_SetConfig+0x2b8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d138      	bne.n	8006108 <UART_SetConfig+0x154>
 8006096:	4b74      	ldr	r3, [pc, #464]	; (8006268 <UART_SetConfig+0x2b4>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609c:	f003 030c 	and.w	r3, r3, #12
 80060a0:	2b0c      	cmp	r3, #12
 80060a2:	d82d      	bhi.n	8006100 <UART_SetConfig+0x14c>
 80060a4:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <UART_SetConfig+0xf8>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	080060e1 	.word	0x080060e1
 80060b0:	08006101 	.word	0x08006101
 80060b4:	08006101 	.word	0x08006101
 80060b8:	08006101 	.word	0x08006101
 80060bc:	080060f1 	.word	0x080060f1
 80060c0:	08006101 	.word	0x08006101
 80060c4:	08006101 	.word	0x08006101
 80060c8:	08006101 	.word	0x08006101
 80060cc:	080060e9 	.word	0x080060e9
 80060d0:	08006101 	.word	0x08006101
 80060d4:	08006101 	.word	0x08006101
 80060d8:	08006101 	.word	0x08006101
 80060dc:	080060f9 	.word	0x080060f9
 80060e0:	2300      	movs	r3, #0
 80060e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e6:	e06d      	b.n	80061c4 <UART_SetConfig+0x210>
 80060e8:	2302      	movs	r3, #2
 80060ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ee:	e069      	b.n	80061c4 <UART_SetConfig+0x210>
 80060f0:	2304      	movs	r3, #4
 80060f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060f6:	e065      	b.n	80061c4 <UART_SetConfig+0x210>
 80060f8:	2308      	movs	r3, #8
 80060fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060fe:	e061      	b.n	80061c4 <UART_SetConfig+0x210>
 8006100:	2310      	movs	r3, #16
 8006102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006106:	e05d      	b.n	80061c4 <UART_SetConfig+0x210>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a58      	ldr	r2, [pc, #352]	; (8006270 <UART_SetConfig+0x2bc>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d125      	bne.n	800615e <UART_SetConfig+0x1aa>
 8006112:	4b55      	ldr	r3, [pc, #340]	; (8006268 <UART_SetConfig+0x2b4>)
 8006114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800611c:	2b30      	cmp	r3, #48	; 0x30
 800611e:	d016      	beq.n	800614e <UART_SetConfig+0x19a>
 8006120:	2b30      	cmp	r3, #48	; 0x30
 8006122:	d818      	bhi.n	8006156 <UART_SetConfig+0x1a2>
 8006124:	2b20      	cmp	r3, #32
 8006126:	d00a      	beq.n	800613e <UART_SetConfig+0x18a>
 8006128:	2b20      	cmp	r3, #32
 800612a:	d814      	bhi.n	8006156 <UART_SetConfig+0x1a2>
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <UART_SetConfig+0x182>
 8006130:	2b10      	cmp	r3, #16
 8006132:	d008      	beq.n	8006146 <UART_SetConfig+0x192>
 8006134:	e00f      	b.n	8006156 <UART_SetConfig+0x1a2>
 8006136:	2300      	movs	r3, #0
 8006138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800613c:	e042      	b.n	80061c4 <UART_SetConfig+0x210>
 800613e:	2302      	movs	r3, #2
 8006140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006144:	e03e      	b.n	80061c4 <UART_SetConfig+0x210>
 8006146:	2304      	movs	r3, #4
 8006148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800614c:	e03a      	b.n	80061c4 <UART_SetConfig+0x210>
 800614e:	2308      	movs	r3, #8
 8006150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006154:	e036      	b.n	80061c4 <UART_SetConfig+0x210>
 8006156:	2310      	movs	r3, #16
 8006158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800615c:	e032      	b.n	80061c4 <UART_SetConfig+0x210>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a3f      	ldr	r2, [pc, #252]	; (8006260 <UART_SetConfig+0x2ac>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d12a      	bne.n	80061be <UART_SetConfig+0x20a>
 8006168:	4b3f      	ldr	r3, [pc, #252]	; (8006268 <UART_SetConfig+0x2b4>)
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006176:	d01a      	beq.n	80061ae <UART_SetConfig+0x1fa>
 8006178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800617c:	d81b      	bhi.n	80061b6 <UART_SetConfig+0x202>
 800617e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006182:	d00c      	beq.n	800619e <UART_SetConfig+0x1ea>
 8006184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006188:	d815      	bhi.n	80061b6 <UART_SetConfig+0x202>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <UART_SetConfig+0x1e2>
 800618e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006192:	d008      	beq.n	80061a6 <UART_SetConfig+0x1f2>
 8006194:	e00f      	b.n	80061b6 <UART_SetConfig+0x202>
 8006196:	2300      	movs	r3, #0
 8006198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619c:	e012      	b.n	80061c4 <UART_SetConfig+0x210>
 800619e:	2302      	movs	r3, #2
 80061a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a4:	e00e      	b.n	80061c4 <UART_SetConfig+0x210>
 80061a6:	2304      	movs	r3, #4
 80061a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ac:	e00a      	b.n	80061c4 <UART_SetConfig+0x210>
 80061ae:	2308      	movs	r3, #8
 80061b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b4:	e006      	b.n	80061c4 <UART_SetConfig+0x210>
 80061b6:	2310      	movs	r3, #16
 80061b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061bc:	e002      	b.n	80061c4 <UART_SetConfig+0x210>
 80061be:	2310      	movs	r3, #16
 80061c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a25      	ldr	r2, [pc, #148]	; (8006260 <UART_SetConfig+0x2ac>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	f040 808a 	bne.w	80062e4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d824      	bhi.n	8006222 <UART_SetConfig+0x26e>
 80061d8:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <UART_SetConfig+0x22c>)
 80061da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061de:	bf00      	nop
 80061e0:	08006205 	.word	0x08006205
 80061e4:	08006223 	.word	0x08006223
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	08006223 	.word	0x08006223
 80061f0:	08006213 	.word	0x08006213
 80061f4:	08006223 	.word	0x08006223
 80061f8:	08006223 	.word	0x08006223
 80061fc:	08006223 	.word	0x08006223
 8006200:	0800621b 	.word	0x0800621b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006204:	f7fe fd96 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 8006208:	61f8      	str	r0, [r7, #28]
        break;
 800620a:	e010      	b.n	800622e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800620c:	4b19      	ldr	r3, [pc, #100]	; (8006274 <UART_SetConfig+0x2c0>)
 800620e:	61fb      	str	r3, [r7, #28]
        break;
 8006210:	e00d      	b.n	800622e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006212:	f7fe fcf7 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8006216:	61f8      	str	r0, [r7, #28]
        break;
 8006218:	e009      	b.n	800622e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800621e:	61fb      	str	r3, [r7, #28]
        break;
 8006220:	e005      	b.n	800622e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800622c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8109 	beq.w	8006448 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	4613      	mov	r3, r2
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	4413      	add	r3, r2
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	429a      	cmp	r2, r3
 8006244:	d305      	bcc.n	8006252 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	429a      	cmp	r2, r3
 8006250:	d912      	bls.n	8006278 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006258:	e0f6      	b.n	8006448 <UART_SetConfig+0x494>
 800625a:	bf00      	nop
 800625c:	efff69f3 	.word	0xefff69f3
 8006260:	40008000 	.word	0x40008000
 8006264:	40013800 	.word	0x40013800
 8006268:	40021000 	.word	0x40021000
 800626c:	40004400 	.word	0x40004400
 8006270:	40004800 	.word	0x40004800
 8006274:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2200      	movs	r2, #0
 800627c:	461c      	mov	r4, r3
 800627e:	4615      	mov	r5, r2
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	022b      	lsls	r3, r5, #8
 800628a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800628e:	0222      	lsls	r2, r4, #8
 8006290:	68f9      	ldr	r1, [r7, #12]
 8006292:	6849      	ldr	r1, [r1, #4]
 8006294:	0849      	lsrs	r1, r1, #1
 8006296:	2000      	movs	r0, #0
 8006298:	4688      	mov	r8, r1
 800629a:	4681      	mov	r9, r0
 800629c:	eb12 0a08 	adds.w	sl, r2, r8
 80062a0:	eb43 0b09 	adc.w	fp, r3, r9
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062b2:	4650      	mov	r0, sl
 80062b4:	4659      	mov	r1, fp
 80062b6:	f7f9 ffe3 	bl	8000280 <__aeabi_uldivmod>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4613      	mov	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c8:	d308      	bcc.n	80062dc <UART_SetConfig+0x328>
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d0:	d204      	bcs.n	80062dc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	e0b5      	b.n	8006448 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062e2:	e0b1      	b.n	8006448 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ec:	d15d      	bne.n	80063aa <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80062ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d827      	bhi.n	8006346 <UART_SetConfig+0x392>
 80062f6:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <UART_SetConfig+0x348>)
 80062f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fc:	08006321 	.word	0x08006321
 8006300:	08006329 	.word	0x08006329
 8006304:	08006331 	.word	0x08006331
 8006308:	08006347 	.word	0x08006347
 800630c:	08006337 	.word	0x08006337
 8006310:	08006347 	.word	0x08006347
 8006314:	08006347 	.word	0x08006347
 8006318:	08006347 	.word	0x08006347
 800631c:	0800633f 	.word	0x0800633f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006320:	f7fe fd08 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 8006324:	61f8      	str	r0, [r7, #28]
        break;
 8006326:	e014      	b.n	8006352 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006328:	f7fe fd1a 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 800632c:	61f8      	str	r0, [r7, #28]
        break;
 800632e:	e010      	b.n	8006352 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006330:	4b4c      	ldr	r3, [pc, #304]	; (8006464 <UART_SetConfig+0x4b0>)
 8006332:	61fb      	str	r3, [r7, #28]
        break;
 8006334:	e00d      	b.n	8006352 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006336:	f7fe fc65 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 800633a:	61f8      	str	r0, [r7, #28]
        break;
 800633c:	e009      	b.n	8006352 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006342:	61fb      	str	r3, [r7, #28]
        break;
 8006344:	e005      	b.n	8006352 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d077      	beq.n	8006448 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	005a      	lsls	r2, r3, #1
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	085b      	lsrs	r3, r3, #1
 8006362:	441a      	add	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	fbb2 f3f3 	udiv	r3, r2, r3
 800636c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b0f      	cmp	r3, #15
 8006372:	d916      	bls.n	80063a2 <UART_SetConfig+0x3ee>
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637a:	d212      	bcs.n	80063a2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f023 030f 	bic.w	r3, r3, #15
 8006384:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	b29b      	uxth	r3, r3
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	b29a      	uxth	r2, r3
 8006392:	8afb      	ldrh	r3, [r7, #22]
 8006394:	4313      	orrs	r3, r2
 8006396:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	8afa      	ldrh	r2, [r7, #22]
 800639e:	60da      	str	r2, [r3, #12]
 80063a0:	e052      	b.n	8006448 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063a8:	e04e      	b.n	8006448 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d827      	bhi.n	8006402 <UART_SetConfig+0x44e>
 80063b2:	a201      	add	r2, pc, #4	; (adr r2, 80063b8 <UART_SetConfig+0x404>)
 80063b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b8:	080063dd 	.word	0x080063dd
 80063bc:	080063e5 	.word	0x080063e5
 80063c0:	080063ed 	.word	0x080063ed
 80063c4:	08006403 	.word	0x08006403
 80063c8:	080063f3 	.word	0x080063f3
 80063cc:	08006403 	.word	0x08006403
 80063d0:	08006403 	.word	0x08006403
 80063d4:	08006403 	.word	0x08006403
 80063d8:	080063fb 	.word	0x080063fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063dc:	f7fe fcaa 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 80063e0:	61f8      	str	r0, [r7, #28]
        break;
 80063e2:	e014      	b.n	800640e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063e4:	f7fe fcbc 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 80063e8:	61f8      	str	r0, [r7, #28]
        break;
 80063ea:	e010      	b.n	800640e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063ec:	4b1d      	ldr	r3, [pc, #116]	; (8006464 <UART_SetConfig+0x4b0>)
 80063ee:	61fb      	str	r3, [r7, #28]
        break;
 80063f0:	e00d      	b.n	800640e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063f2:	f7fe fc07 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 80063f6:	61f8      	str	r0, [r7, #28]
        break;
 80063f8:	e009      	b.n	800640e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fe:	61fb      	str	r3, [r7, #28]
        break;
 8006400:	e005      	b.n	800640e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800640c:	bf00      	nop
    }

    if (pclk != 0U)
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d019      	beq.n	8006448 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	085a      	lsrs	r2, r3, #1
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	441a      	add	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	fbb2 f3f3 	udiv	r3, r2, r3
 8006426:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b0f      	cmp	r3, #15
 800642c:	d909      	bls.n	8006442 <UART_SetConfig+0x48e>
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006434:	d205      	bcs.n	8006442 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	60da      	str	r2, [r3, #12]
 8006440:	e002      	b.n	8006448 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006454:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006458:	4618      	mov	r0, r3
 800645a:	3728      	adds	r7, #40	; 0x28
 800645c:	46bd      	mov	sp, r7
 800645e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006462:	bf00      	nop
 8006464:	00f42400 	.word	0x00f42400

08006468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01a      	beq.n	800657e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006566:	d10a      	bne.n	800657e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	605a      	str	r2, [r3, #4]
  }
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b098      	sub	sp, #96	; 0x60
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065bc:	f7fa fd52 	bl	8001064 <HAL_GetTick>
 80065c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d12e      	bne.n	800662e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065d8:	2200      	movs	r2, #0
 80065da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f88c 	bl	80066fc <UART_WaitOnFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d021      	beq.n	800662e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006608:	647b      	str	r3, [r7, #68]	; 0x44
 800660a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800660e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e6      	bne.n	80065ea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e062      	b.n	80066f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b04      	cmp	r3, #4
 800663a:	d149      	bne.n	80066d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800663c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006644:	2200      	movs	r2, #0
 8006646:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f856 	bl	80066fc <UART_WaitOnFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d03c      	beq.n	80066d0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	623b      	str	r3, [r7, #32]
   return(result);
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800666a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006674:	633b      	str	r3, [r7, #48]	; 0x30
 8006676:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800667a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e6      	bne.n	8006656 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3308      	adds	r3, #8
 800668e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	60fb      	str	r3, [r7, #12]
   return(result);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0301 	bic.w	r3, r3, #1
 800669e:	64bb      	str	r3, [r7, #72]	; 0x48
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3308      	adds	r3, #8
 80066a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066a8:	61fa      	str	r2, [r7, #28]
 80066aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	69b9      	ldr	r1, [r7, #24]
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	617b      	str	r3, [r7, #20]
   return(result);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e5      	bne.n	8006688 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e011      	b.n	80066f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3758      	adds	r7, #88	; 0x58
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	4613      	mov	r3, r2
 800670a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800670c:	e049      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006714:	d045      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006716:	f7fa fca5 	bl	8001064 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	429a      	cmp	r2, r3
 8006724:	d302      	bcc.n	800672c <UART_WaitOnFlagUntilTimeout+0x30>
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e048      	b.n	80067c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d031      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b08      	cmp	r3, #8
 800674a:	d110      	bne.n	800676e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2208      	movs	r2, #8
 8006752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f838 	bl	80067ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2208      	movs	r2, #8
 800675e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e029      	b.n	80067c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800677c:	d111      	bne.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006786:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 f81e 	bl	80067ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e00f      	b.n	80067c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4013      	ands	r3, r2
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	bf0c      	ite	eq
 80067b2:	2301      	moveq	r3, #1
 80067b4:	2300      	movne	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d0a6      	beq.n	800670e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b095      	sub	sp, #84	; 0x54
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	461a      	mov	r2, r3
 80067ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f0:	643b      	str	r3, [r7, #64]	; 0x40
 80067f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e6      	bne.n	80067d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3308      	adds	r3, #8
 800680a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	61fb      	str	r3, [r7, #28]
   return(result);
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	64bb      	str	r3, [r7, #72]	; 0x48
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006824:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800682a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e5      	bne.n	8006804 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683c:	2b01      	cmp	r3, #1
 800683e:	d118      	bne.n	8006872 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	60bb      	str	r3, [r7, #8]
   return(result);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f023 0310 	bic.w	r3, r3, #16
 8006854:	647b      	str	r3, [r7, #68]	; 0x44
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800685e:	61bb      	str	r3, [r7, #24]
 8006860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6979      	ldr	r1, [r7, #20]
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	613b      	str	r3, [r7, #16]
   return(result);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e6      	bne.n	8006840 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006886:	bf00      	nop
 8006888:	3754      	adds	r7, #84	; 0x54
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b086      	sub	sp, #24
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	607a      	str	r2, [r7, #4]
 800689e:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e056      	b.n	8006958 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7fa fa0a 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2224      	movs	r2, #36	; 0x24
 80068c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0201 	bic.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff fdc2 	bl	8006468 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff fb65 	bl	8005fb4 <UART_SetConfig>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e031      	b.n	8006958 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006902:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	430a      	orrs	r2, r1
 8006916:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	055b      	lsls	r3, r3, #21
 800691c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	4313      	orrs	r3, r2
 8006926:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8006932:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	6812      	ldr	r2, [r2, #0]
 800693a:	6979      	ldr	r1, [r7, #20]
 800693c:	430b      	orrs	r3, r1
 800693e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7ff fe2b 	bl	80065ac <UART_CheckIdleState>
 8006956:	4603      	mov	r3, r0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006960:	b084      	sub	sp, #16
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	f107 0014 	add.w	r0, r7, #20
 800696e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	b004      	add	sp, #16
 8006980:	4770      	bx	lr

08006982 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006992:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006996:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	b29a      	uxth	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80069bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	43db      	mvns	r3, r3
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	4013      	ands	r3, r2
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a00:	b084      	sub	sp, #16
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	f107 0014 	add.w	r0, r7, #20
 8006a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	b004      	add	sp, #16
 8006a40:	4770      	bx	lr
	...

08006a44 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b09d      	sub	sp, #116	; 0x74
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	78db      	ldrb	r3, [r3, #3]
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d81f      	bhi.n	8006ab6 <USB_ActivateEndpoint+0x72>
 8006a76:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <USB_ActivateEndpoint+0x38>)
 8006a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7c:	08006a8d 	.word	0x08006a8d
 8006a80:	08006aa9 	.word	0x08006aa9
 8006a84:	08006abf 	.word	0x08006abf
 8006a88:	08006a9b 	.word	0x08006a9b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006a98:	e012      	b.n	8006ac0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006a9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a9e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006aa2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006aa6:	e00b      	b.n	8006ac0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006aa8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006aac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ab0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006ab4:	e004      	b.n	8006ac0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006abc:	e000      	b.n	8006ac0 <USB_ActivateEndpoint+0x7c>
      break;
 8006abe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	441a      	add	r2, r3
 8006aca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	b21b      	sxth	r3, r3
 8006af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afa:	b21a      	sxth	r2, r3
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	b21b      	sxth	r3, r3
 8006b02:	4313      	orrs	r3, r2
 8006b04:	b21b      	sxth	r3, r3
 8006b06:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	7b1b      	ldrb	r3, [r3, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f040 8178 	bne.w	8006e26 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	785b      	ldrb	r3, [r3, #1]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 8084 	beq.w	8006c48 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	4413      	add	r3, r2
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	00da      	lsls	r2, r3, #3
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	88db      	ldrh	r3, [r3, #6]
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	827b      	strh	r3, [r7, #18]
 8006b82:	8a7b      	ldrh	r3, [r7, #18]
 8006b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01b      	beq.n	8006bc4 <USB_ActivateEndpoint+0x180>
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	823b      	strh	r3, [r7, #16]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	441a      	add	r2, r3
 8006bae:	8a3b      	ldrh	r3, [r7, #16]
 8006bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	78db      	ldrb	r3, [r3, #3]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d020      	beq.n	8006c0e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006be2:	81bb      	strh	r3, [r7, #12]
 8006be4:	89bb      	ldrh	r3, [r7, #12]
 8006be6:	f083 0320 	eor.w	r3, r3, #32
 8006bea:	81bb      	strh	r3, [r7, #12]
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	441a      	add	r2, r3
 8006bf6:	89bb      	ldrh	r3, [r7, #12]
 8006bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	8013      	strh	r3, [r2, #0]
 8006c0c:	e2d5      	b.n	80071ba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c24:	81fb      	strh	r3, [r7, #14]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	441a      	add	r2, r3
 8006c30:	89fb      	ldrh	r3, [r7, #14]
 8006c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	8013      	strh	r3, [r2, #0]
 8006c46:	e2b8      	b.n	80071ba <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	461a      	mov	r2, r3
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	4413      	add	r3, r2
 8006c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	00da      	lsls	r2, r3, #3
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	4413      	add	r3, r2
 8006c66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	88db      	ldrh	r3, [r3, #6]
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	4413      	add	r3, r2
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	00da      	lsls	r2, r3, #3
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	4413      	add	r3, r2
 8006c9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	801a      	strh	r2, [r3, #0]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8006cb6:	d91d      	bls.n	8006cf4 <USB_ActivateEndpoint+0x2b0>
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f003 031f 	and.w	r3, r3, #31
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d102      	bne.n	8006cd2 <USB_ActivateEndpoint+0x28e>
 8006ccc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	029b      	lsls	r3, r3, #10
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	801a      	strh	r2, [r3, #0]
 8006cf2:	e026      	b.n	8006d42 <USB_ActivateEndpoint+0x2fe>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <USB_ActivateEndpoint+0x2ce>
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	801a      	strh	r2, [r3, #0]
 8006d10:	e017      	b.n	8006d42 <USB_ActivateEndpoint+0x2fe>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <USB_ActivateEndpoint+0x2e8>
 8006d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d28:	3301      	adds	r3, #1
 8006d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	029b      	lsls	r3, r3, #10
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01b      	beq.n	8006d92 <USB_ActivateEndpoint+0x34e>
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d70:	843b      	strh	r3, [r7, #32]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	441a      	add	r2, r3
 8006d7c:	8c3b      	ldrh	r3, [r7, #32]
 8006d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d124      	bne.n	8006de4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db0:	83bb      	strh	r3, [r7, #28]
 8006db2:	8bbb      	ldrh	r3, [r7, #28]
 8006db4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006db8:	83bb      	strh	r3, [r7, #28]
 8006dba:	8bbb      	ldrh	r3, [r7, #28]
 8006dbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dc0:	83bb      	strh	r3, [r7, #28]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	8bbb      	ldrh	r3, [r7, #28]
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]
 8006de2:	e1ea      	b.n	80071ba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfa:	83fb      	strh	r3, [r7, #30]
 8006dfc:	8bfb      	ldrh	r3, [r7, #30]
 8006dfe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e02:	83fb      	strh	r3, [r7, #30]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	441a      	add	r2, r3
 8006e0e:	8bfb      	ldrh	r3, [r7, #30]
 8006e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	8013      	strh	r3, [r2, #0]
 8006e24:	e1c9      	b.n	80071ba <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	78db      	ldrb	r3, [r3, #3]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d11e      	bne.n	8006e6c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e44:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	441a      	add	r2, r3
 8006e52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e5e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	8013      	strh	r3, [r2, #0]
 8006e6a:	e01d      	b.n	8006ea8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	441a      	add	r2, r3
 8006e90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb8:	4413      	add	r3, r2
 8006eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	00da      	lsls	r2, r3, #3
 8006ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eca:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	891b      	ldrh	r3, [r3, #8]
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	657b      	str	r3, [r7, #84]	; 0x54
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eec:	4413      	add	r3, r2
 8006eee:	657b      	str	r3, [r7, #84]	; 0x54
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	00da      	lsls	r2, r3, #3
 8006ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ef8:	4413      	add	r3, r2
 8006efa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006efe:	653b      	str	r3, [r7, #80]	; 0x50
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	895b      	ldrh	r3, [r3, #10]
 8006f04:	085b      	lsrs	r3, r3, #1
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	785b      	ldrb	r3, [r3, #1]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f040 8093 	bne.w	8007040 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006f2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d01b      	beq.n	8006f6e <USB_ActivateEndpoint+0x52a>
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	441a      	add	r2, r3
 8006f58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006f7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01b      	beq.n	8006fbe <USB_ActivateEndpoint+0x57a>
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd4:	873b      	strh	r3, [r7, #56]	; 0x38
 8006fd6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006fd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fdc:	873b      	strh	r3, [r7, #56]	; 0x38
 8006fde:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006fe0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fe4:	873b      	strh	r3, [r7, #56]	; 0x38
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	441a      	add	r2, r3
 8006ff0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007002:	b29b      	uxth	r3, r3
 8007004:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	b29b      	uxth	r3, r3
 8007014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	441a      	add	r2, r3
 8007028:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800702a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703a:	b29b      	uxth	r3, r3
 800703c:	8013      	strh	r3, [r2, #0]
 800703e:	e0bc      	b.n	80071ba <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01d      	beq.n	8007098 <USB_ActivateEndpoint+0x654>
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b29b      	uxth	r3, r3
 800706a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007072:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	441a      	add	r2, r3
 8007080:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800708c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007094:	b29b      	uxth	r3, r3
 8007096:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80070a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01d      	beq.n	80070f0 <USB_ActivateEndpoint+0x6ac>
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	441a      	add	r2, r3
 80070d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80070dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	78db      	ldrb	r3, [r3, #3]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d024      	beq.n	8007142 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800710e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007112:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007116:	f083 0320 	eor.w	r3, r3, #32
 800711a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	441a      	add	r2, r3
 8007128:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800712c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713c:	b29b      	uxth	r3, r3
 800713e:	8013      	strh	r3, [r2, #0]
 8007140:	e01d      	b.n	800717e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007158:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	441a      	add	r2, r3
 8007166:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800716a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800716e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800717a:	b29b      	uxth	r3, r3
 800717c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007194:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	441a      	add	r2, r3
 80071a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80071a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80071ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3774      	adds	r7, #116	; 0x74
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop

080071cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b08d      	sub	sp, #52	; 0x34
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	7b1b      	ldrb	r3, [r3, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f040 808e 	bne.w	80072fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d044      	beq.n	8007272 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	81bb      	strh	r3, [r7, #12]
 80071f6:	89bb      	ldrh	r3, [r7, #12]
 80071f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01b      	beq.n	8007238 <USB_DeactivateEndpoint+0x6c>
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007216:	817b      	strh	r3, [r7, #10]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	441a      	add	r2, r3
 8007222:	897b      	ldrh	r3, [r7, #10]
 8007224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800722c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007234:	b29b      	uxth	r3, r3
 8007236:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800724e:	813b      	strh	r3, [r7, #8]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	441a      	add	r2, r3
 800725a:	893b      	ldrh	r3, [r7, #8]
 800725c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726c:	b29b      	uxth	r3, r3
 800726e:	8013      	strh	r3, [r2, #0]
 8007270:	e192      	b.n	8007598 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	827b      	strh	r3, [r7, #18]
 8007280:	8a7b      	ldrh	r3, [r7, #18]
 8007282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01b      	beq.n	80072c2 <USB_DeactivateEndpoint+0xf6>
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	b29b      	uxth	r3, r3
 8007298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800729c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a0:	823b      	strh	r3, [r7, #16]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	441a      	add	r2, r3
 80072ac:	8a3b      	ldrh	r3, [r7, #16]
 80072ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072be:	b29b      	uxth	r3, r3
 80072c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d8:	81fb      	strh	r3, [r7, #14]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	441a      	add	r2, r3
 80072e4:	89fb      	ldrh	r3, [r7, #14]
 80072e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	8013      	strh	r3, [r2, #0]
 80072fa:	e14d      	b.n	8007598 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f040 80a5 	bne.w	8007450 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	843b      	strh	r3, [r7, #32]
 8007314:	8c3b      	ldrh	r3, [r7, #32]
 8007316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01b      	beq.n	8007356 <USB_DeactivateEndpoint+0x18a>
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007334:	83fb      	strh	r3, [r7, #30]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	441a      	add	r2, r3
 8007340:	8bfb      	ldrh	r3, [r7, #30]
 8007342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800734a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800734e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007352:	b29b      	uxth	r3, r3
 8007354:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	83bb      	strh	r3, [r7, #28]
 8007364:	8bbb      	ldrh	r3, [r7, #28]
 8007366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d01b      	beq.n	80073a6 <USB_DeactivateEndpoint+0x1da>
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007384:	837b      	strh	r3, [r7, #26]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	441a      	add	r2, r3
 8007390:	8b7b      	ldrh	r3, [r7, #26]
 8007392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800739a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800739e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073bc:	833b      	strh	r3, [r7, #24]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	441a      	add	r2, r3
 80073c8:	8b3b      	ldrh	r3, [r7, #24]
 80073ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073da:	b29b      	uxth	r3, r3
 80073dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f4:	82fb      	strh	r3, [r7, #22]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	441a      	add	r2, r3
 8007400:	8afb      	ldrh	r3, [r7, #22]
 8007402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800740e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007412:	b29b      	uxth	r3, r3
 8007414:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800742c:	82bb      	strh	r3, [r7, #20]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	441a      	add	r2, r3
 8007438:	8abb      	ldrh	r3, [r7, #20]
 800743a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744a:	b29b      	uxth	r3, r3
 800744c:	8013      	strh	r3, [r2, #0]
 800744e:	e0a3      	b.n	8007598 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800745e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01b      	beq.n	80074a0 <USB_DeactivateEndpoint+0x2d4>
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	b29b      	uxth	r3, r3
 8007476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	441a      	add	r2, r3
 800748a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800748c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749c:	b29b      	uxth	r3, r3
 800749e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80074ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80074b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01b      	beq.n	80074f0 <USB_DeactivateEndpoint+0x324>
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	441a      	add	r2, r3
 80074da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80074dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007506:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	441a      	add	r2, r3
 8007512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800751c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007524:	b29b      	uxth	r3, r3
 8007526:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	b29b      	uxth	r3, r3
 8007536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800753a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800753e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	441a      	add	r2, r3
 800754a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800754c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755c:	b29b      	uxth	r3, r3
 800755e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	b29b      	uxth	r3, r3
 800756e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007576:	847b      	strh	r3, [r7, #34]	; 0x22
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	441a      	add	r2, r3
 8007582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007594:	b29b      	uxth	r3, r3
 8007596:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3734      	adds	r7, #52	; 0x34
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b0c2      	sub	sp, #264	; 0x108
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075b4:	6018      	str	r0, [r3, #0]
 80075b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075be:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	785b      	ldrb	r3, [r3, #1]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	f040 86b7 	bne.w	8008340 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80075d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699a      	ldr	r2, [r3, #24]
 80075de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d908      	bls.n	8007600 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80075ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80075fe:	e007      	b.n	8007610 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	7b1b      	ldrb	r3, [r3, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d13a      	bne.n	8007696 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6959      	ldr	r1, [r3, #20]
 800762c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	88da      	ldrh	r2, [r3, #6]
 8007638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800763c:	b29b      	uxth	r3, r3
 800763e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007642:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007646:	6800      	ldr	r0, [r0, #0]
 8007648:	f001 fcb9 	bl	8008fbe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800764c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	613b      	str	r3, [r7, #16]
 8007658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007666:	b29b      	uxth	r3, r3
 8007668:	461a      	mov	r2, r3
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	4413      	add	r3, r2
 800766e:	613b      	str	r3, [r7, #16]
 8007670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	00da      	lsls	r2, r3, #3
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	4413      	add	r3, r2
 8007682:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	801a      	strh	r2, [r3, #0]
 8007692:	f000 be1f 	b.w	80082d4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	78db      	ldrb	r3, [r3, #3]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	f040 8462 	bne.w	8007f6c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80076a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6a1a      	ldr	r2, [r3, #32]
 80076b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	f240 83df 	bls.w	8007e84 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80076c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80076f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	441a      	add	r2, r3
 800770a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800770e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007716:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800771a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800771e:	b29b      	uxth	r3, r3
 8007720:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6a1a      	ldr	r2, [r3, #32]
 800772e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007732:	1ad2      	subs	r2, r2, r3
 8007734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007744:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 81c7 	beq.w	8007af6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	633b      	str	r3, [r7, #48]	; 0x30
 8007774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	785b      	ldrb	r3, [r3, #1]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d177      	bne.n	8007874 <USB_EPStartXfer+0x2ce>
 8007784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800779e:	b29b      	uxth	r3, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	4413      	add	r3, r2
 80077a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	00da      	lsls	r2, r3, #3
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	4413      	add	r3, r2
 80077ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	801a      	strh	r2, [r3, #0]
 80077d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d4:	2b3e      	cmp	r3, #62	; 0x3e
 80077d6:	d921      	bls.n	800781c <USB_EPStartXfer+0x276>
 80077d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e6:	f003 031f 	and.w	r3, r3, #31
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <USB_EPStartXfer+0x252>
 80077ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077f2:	3b01      	subs	r3, #1
 80077f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007802:	b29b      	uxth	r3, r3
 8007804:	029b      	lsls	r3, r3, #10
 8007806:	b29b      	uxth	r3, r3
 8007808:	4313      	orrs	r3, r2
 800780a:	b29b      	uxth	r3, r3
 800780c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007814:	b29a      	uxth	r2, r3
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	e050      	b.n	80078be <USB_EPStartXfer+0x318>
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <USB_EPStartXfer+0x294>
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	881b      	ldrh	r3, [r3, #0]
 8007828:	b29b      	uxth	r3, r3
 800782a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800782e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007832:	b29a      	uxth	r2, r3
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	801a      	strh	r2, [r3, #0]
 8007838:	e041      	b.n	80078be <USB_EPStartXfer+0x318>
 800783a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783e:	085b      	lsrs	r3, r3, #1
 8007840:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <USB_EPStartXfer+0x2b4>
 8007850:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007854:	3301      	adds	r3, #1
 8007856:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b29a      	uxth	r2, r3
 8007860:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007864:	b29b      	uxth	r3, r3
 8007866:	029b      	lsls	r3, r3, #10
 8007868:	b29b      	uxth	r3, r3
 800786a:	4313      	orrs	r3, r2
 800786c:	b29a      	uxth	r2, r3
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	e024      	b.n	80078be <USB_EPStartXfer+0x318>
 8007874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	785b      	ldrb	r3, [r3, #1]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d11c      	bne.n	80078be <USB_EPStartXfer+0x318>
 8007884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007888:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007892:	b29b      	uxth	r3, r3
 8007894:	461a      	mov	r2, r3
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	4413      	add	r3, r2
 800789a:	633b      	str	r3, [r7, #48]	; 0x30
 800789c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	00da      	lsls	r2, r3, #3
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	4413      	add	r3, r2
 80078ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	895b      	ldrh	r3, [r3, #10]
 80078ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6959      	ldr	r1, [r3, #20]
 80078da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078de:	b29b      	uxth	r3, r3
 80078e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80078e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80078e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80078ec:	6800      	ldr	r0, [r0, #0]
 80078ee:	f001 fb66 	bl	8008fbe <USB_WritePMA>
            ep->xfer_buff += len;
 80078f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	695a      	ldr	r2, [r3, #20]
 80078fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007902:	441a      	add	r2, r3
 8007904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6a1a      	ldr	r2, [r3, #32]
 800791c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	429a      	cmp	r2, r3
 800792a:	d90f      	bls.n	800794c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800792c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6a1a      	ldr	r2, [r3, #32]
 8007938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800793c:	1ad2      	subs	r2, r2, r3
 800793e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	621a      	str	r2, [r3, #32]
 800794a:	e00e      	b.n	800796a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800794c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800795c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2200      	movs	r2, #0
 8007968:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800796a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800796e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	785b      	ldrb	r3, [r3, #1]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d177      	bne.n	8007a6a <USB_EPStartXfer+0x4c4>
 800797a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	61bb      	str	r3, [r7, #24]
 8007986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007994:	b29b      	uxth	r3, r3
 8007996:	461a      	mov	r2, r3
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	4413      	add	r3, r2
 800799c:	61bb      	str	r3, [r7, #24]
 800799e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	00da      	lsls	r2, r3, #3
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	4413      	add	r3, r2
 80079b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	801a      	strh	r2, [r3, #0]
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ca:	2b3e      	cmp	r3, #62	; 0x3e
 80079cc:	d921      	bls.n	8007a12 <USB_EPStartXfer+0x46c>
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079dc:	f003 031f 	and.w	r3, r3, #31
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d104      	bne.n	80079ee <USB_EPStartXfer+0x448>
 80079e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e8:	3b01      	subs	r3, #1
 80079ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	029b      	lsls	r3, r3, #10
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	4313      	orrs	r3, r2
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	e056      	b.n	8007ac0 <USB_EPStartXfer+0x51a>
 8007a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10a      	bne.n	8007a30 <USB_EPStartXfer+0x48a>
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	801a      	strh	r2, [r3, #0]
 8007a2e:	e047      	b.n	8007ac0 <USB_EPStartXfer+0x51a>
 8007a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d004      	beq.n	8007a50 <USB_EPStartXfer+0x4aa>
 8007a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	029b      	lsls	r3, r3, #10
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	4313      	orrs	r3, r2
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	e02a      	b.n	8007ac0 <USB_EPStartXfer+0x51a>
 8007a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d122      	bne.n	8007ac0 <USB_EPStartXfer+0x51a>
 8007a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	623b      	str	r3, [r7, #32]
 8007a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	461a      	mov	r2, r3
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	623b      	str	r3, [r7, #32]
 8007a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	00da      	lsls	r2, r3, #3
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	891b      	ldrh	r3, [r3, #8]
 8007acc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6959      	ldr	r1, [r3, #20]
 8007adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ae6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007aea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007aee:	6800      	ldr	r0, [r0, #0]
 8007af0:	f001 fa65 	bl	8008fbe <USB_WritePMA>
 8007af4:	e3ee      	b.n	80082d4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d177      	bne.n	8007bf6 <USB_EPStartXfer+0x650>
 8007b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	461a      	mov	r2, r3
 8007b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b26:	4413      	add	r3, r2
 8007b28:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	00da      	lsls	r2, r3, #3
 8007b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b40:	647b      	str	r3, [r7, #68]	; 0x44
 8007b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b50:	801a      	strh	r2, [r3, #0]
 8007b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b56:	2b3e      	cmp	r3, #62	; 0x3e
 8007b58:	d921      	bls.n	8007b9e <USB_EPStartXfer+0x5f8>
 8007b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b68:	f003 031f 	and.w	r3, r3, #31
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d104      	bne.n	8007b7a <USB_EPStartXfer+0x5d4>
 8007b70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b74:	3b01      	subs	r3, #1
 8007b76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	029b      	lsls	r3, r3, #10
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b9a:	801a      	strh	r2, [r3, #0]
 8007b9c:	e056      	b.n	8007c4c <USB_EPStartXfer+0x6a6>
 8007b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10a      	bne.n	8007bbc <USB_EPStartXfer+0x616>
 8007ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb8:	801a      	strh	r2, [r3, #0]
 8007bba:	e047      	b.n	8007c4c <USB_EPStartXfer+0x6a6>
 8007bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc0:	085b      	lsrs	r3, r3, #1
 8007bc2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d004      	beq.n	8007bdc <USB_EPStartXfer+0x636>
 8007bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	029b      	lsls	r3, r3, #10
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	4313      	orrs	r3, r2
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf2:	801a      	strh	r2, [r3, #0]
 8007bf4:	e02a      	b.n	8007c4c <USB_EPStartXfer+0x6a6>
 8007bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d122      	bne.n	8007c4c <USB_EPStartXfer+0x6a6>
 8007c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	653b      	str	r3, [r7, #80]	; 0x50
 8007c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c26:	4413      	add	r3, r2
 8007c28:	653b      	str	r3, [r7, #80]	; 0x50
 8007c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	00da      	lsls	r2, r3, #3
 8007c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	891b      	ldrh	r3, [r3, #8]
 8007c58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6959      	ldr	r1, [r3, #20]
 8007c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c7a:	6800      	ldr	r0, [r0, #0]
 8007c7c:	f001 f99f 	bl	8008fbe <USB_WritePMA>
            ep->xfer_buff += len;
 8007c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	695a      	ldr	r2, [r3, #20]
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c90:	441a      	add	r2, r3
 8007c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6a1a      	ldr	r2, [r3, #32]
 8007caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d90f      	bls.n	8007cda <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6a1a      	ldr	r2, [r3, #32]
 8007cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cca:	1ad2      	subs	r2, r2, r3
 8007ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	621a      	str	r2, [r3, #32]
 8007cd8:	e00e      	b.n	8007cf8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	643b      	str	r3, [r7, #64]	; 0x40
 8007d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	785b      	ldrb	r3, [r3, #1]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d177      	bne.n	8007e04 <USB_EPStartXfer+0x85e>
 8007d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	461a      	mov	r2, r3
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	4413      	add	r3, r2
 8007d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	00da      	lsls	r2, r3, #3
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	4413      	add	r3, r2
 8007d4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5e:	801a      	strh	r2, [r3, #0]
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d64:	2b3e      	cmp	r3, #62	; 0x3e
 8007d66:	d921      	bls.n	8007dac <USB_EPStartXfer+0x806>
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d6c:	095b      	lsrs	r3, r3, #5
 8007d6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d76:	f003 031f 	and.w	r3, r3, #31
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d104      	bne.n	8007d88 <USB_EPStartXfer+0x7e2>
 8007d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d82:	3b01      	subs	r3, #1
 8007d84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	029b      	lsls	r3, r3, #10
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da8:	801a      	strh	r2, [r3, #0]
 8007daa:	e050      	b.n	8007e4e <USB_EPStartXfer+0x8a8>
 8007dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <USB_EPStartXfer+0x824>
 8007db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc6:	801a      	strh	r2, [r3, #0]
 8007dc8:	e041      	b.n	8007e4e <USB_EPStartXfer+0x8a8>
 8007dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dce:	085b      	lsrs	r3, r3, #1
 8007dd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <USB_EPStartXfer+0x844>
 8007de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de4:	3301      	adds	r3, #1
 8007de6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	029b      	lsls	r3, r3, #10
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e00:	801a      	strh	r2, [r3, #0]
 8007e02:	e024      	b.n	8007e4e <USB_EPStartXfer+0x8a8>
 8007e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	785b      	ldrb	r3, [r3, #1]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d11c      	bne.n	8007e4e <USB_EPStartXfer+0x8a8>
 8007e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e28:	4413      	add	r3, r2
 8007e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8007e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	00da      	lsls	r2, r3, #3
 8007e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	895b      	ldrh	r3, [r3, #10]
 8007e5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6959      	ldr	r1, [r3, #20]
 8007e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007e78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007e7c:	6800      	ldr	r0, [r0, #0]
 8007e7e:	f001 f89e 	bl	8008fbe <USB_WritePMA>
 8007e82:	e227      	b.n	80082d4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	441a      	add	r2, r3
 8007ed8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f10:	4413      	add	r3, r2
 8007f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	00da      	lsls	r2, r3, #3
 8007f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f24:	4413      	add	r3, r2
 8007f26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	891b      	ldrh	r3, [r3, #8]
 8007f42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6959      	ldr	r1, [r3, #20]
 8007f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f64:	6800      	ldr	r0, [r0, #0]
 8007f66:	f001 f82a 	bl	8008fbe <USB_WritePMA>
 8007f6a:	e1b3      	b.n	80082d4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6a1a      	ldr	r2, [r3, #32]
 8007f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f7c:	1ad2      	subs	r2, r2, r3
 8007f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 80c6 	beq.w	800813e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	673b      	str	r3, [r7, #112]	; 0x70
 8007fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d177      	bne.n	80080be <USB_EPStartXfer+0xb18>
 8007fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	461a      	mov	r2, r3
 8007fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fee:	4413      	add	r3, r2
 8007ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	00da      	lsls	r2, r3, #3
 8008000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008002:	4413      	add	r3, r2
 8008004:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008008:	667b      	str	r3, [r7, #100]	; 0x64
 800800a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008014:	b29a      	uxth	r2, r3
 8008016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008018:	801a      	strh	r2, [r3, #0]
 800801a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800801e:	2b3e      	cmp	r3, #62	; 0x3e
 8008020:	d921      	bls.n	8008066 <USB_EPStartXfer+0xac0>
 8008022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008026:	095b      	lsrs	r3, r3, #5
 8008028:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008030:	f003 031f 	and.w	r3, r3, #31
 8008034:	2b00      	cmp	r3, #0
 8008036:	d104      	bne.n	8008042 <USB_EPStartXfer+0xa9c>
 8008038:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800803c:	3b01      	subs	r3, #1
 800803e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	b29a      	uxth	r2, r3
 8008048:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800804c:	b29b      	uxth	r3, r3
 800804e:	029b      	lsls	r3, r3, #10
 8008050:	b29b      	uxth	r3, r3
 8008052:	4313      	orrs	r3, r2
 8008054:	b29b      	uxth	r3, r3
 8008056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800805a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800805e:	b29a      	uxth	r2, r3
 8008060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008062:	801a      	strh	r2, [r3, #0]
 8008064:	e050      	b.n	8008108 <USB_EPStartXfer+0xb62>
 8008066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <USB_EPStartXfer+0xade>
 800806e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	b29b      	uxth	r3, r3
 8008074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800807c:	b29a      	uxth	r2, r3
 800807e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008080:	801a      	strh	r2, [r3, #0]
 8008082:	e041      	b.n	8008108 <USB_EPStartXfer+0xb62>
 8008084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008088:	085b      	lsrs	r3, r3, #1
 800808a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800808e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <USB_EPStartXfer+0xafe>
 800809a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800809e:	3301      	adds	r3, #1
 80080a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80080a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	029b      	lsls	r3, r3, #10
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	4313      	orrs	r3, r2
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080ba:	801a      	strh	r2, [r3, #0]
 80080bc:	e024      	b.n	8008108 <USB_EPStartXfer+0xb62>
 80080be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d11c      	bne.n	8008108 <USB_EPStartXfer+0xb62>
 80080ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080dc:	b29b      	uxth	r3, r3
 80080de:	461a      	mov	r2, r3
 80080e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080e2:	4413      	add	r3, r2
 80080e4:	673b      	str	r3, [r7, #112]	; 0x70
 80080e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	00da      	lsls	r2, r3, #3
 80080f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080f6:	4413      	add	r3, r2
 80080f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008102:	b29a      	uxth	r2, r3
 8008104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008106:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	895b      	ldrh	r3, [r3, #10]
 8008114:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6959      	ldr	r1, [r3, #20]
 8008124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008128:	b29b      	uxth	r3, r3
 800812a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800812e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008132:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008136:	6800      	ldr	r0, [r0, #0]
 8008138:	f000 ff41 	bl	8008fbe <USB_WritePMA>
 800813c:	e0ca      	b.n	80082d4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800813e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	785b      	ldrb	r3, [r3, #1]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d177      	bne.n	800823e <USB_EPStartXfer+0xc98>
 800814e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	67fb      	str	r3, [r7, #124]	; 0x7c
 800815a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008168:	b29b      	uxth	r3, r3
 800816a:	461a      	mov	r2, r3
 800816c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800816e:	4413      	add	r3, r2
 8008170:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	00da      	lsls	r2, r3, #3
 8008180:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008182:	4413      	add	r3, r2
 8008184:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008188:	67bb      	str	r3, [r7, #120]	; 0x78
 800818a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008194:	b29a      	uxth	r2, r3
 8008196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008198:	801a      	strh	r2, [r3, #0]
 800819a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800819e:	2b3e      	cmp	r3, #62	; 0x3e
 80081a0:	d921      	bls.n	80081e6 <USB_EPStartXfer+0xc40>
 80081a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b0:	f003 031f 	and.w	r3, r3, #31
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d104      	bne.n	80081c2 <USB_EPStartXfer+0xc1c>
 80081b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081bc:	3b01      	subs	r3, #1
 80081be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	029b      	lsls	r3, r3, #10
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	4313      	orrs	r3, r2
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081de:	b29a      	uxth	r2, r3
 80081e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081e2:	801a      	strh	r2, [r3, #0]
 80081e4:	e05c      	b.n	80082a0 <USB_EPStartXfer+0xcfa>
 80081e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10a      	bne.n	8008204 <USB_EPStartXfer+0xc5e>
 80081ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008200:	801a      	strh	r2, [r3, #0]
 8008202:	e04d      	b.n	80082a0 <USB_EPStartXfer+0xcfa>
 8008204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008208:	085b      	lsrs	r3, r3, #1
 800820a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800820e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <USB_EPStartXfer+0xc7e>
 800821a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800821e:	3301      	adds	r3, #1
 8008220:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	b29a      	uxth	r2, r3
 800822a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800822e:	b29b      	uxth	r3, r3
 8008230:	029b      	lsls	r3, r3, #10
 8008232:	b29b      	uxth	r3, r3
 8008234:	4313      	orrs	r3, r2
 8008236:	b29a      	uxth	r2, r3
 8008238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	e030      	b.n	80082a0 <USB_EPStartXfer+0xcfa>
 800823e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d128      	bne.n	80082a0 <USB_EPStartXfer+0xcfa>
 800824e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800825c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800826a:	b29b      	uxth	r3, r3
 800826c:	461a      	mov	r2, r3
 800826e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008272:	4413      	add	r3, r2
 8008274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	00da      	lsls	r2, r3, #3
 8008286:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800828a:	4413      	add	r3, r2
 800828c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008298:	b29a      	uxth	r2, r3
 800829a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800829e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80082a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	891b      	ldrh	r3, [r3, #8]
 80082ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6959      	ldr	r1, [r3, #20]
 80082bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80082c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80082ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80082ce:	6800      	ldr	r0, [r0, #0]
 80082d0:	f000 fe75 	bl	8008fbe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80082d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082fa:	817b      	strh	r3, [r7, #10]
 80082fc:	897b      	ldrh	r3, [r7, #10]
 80082fe:	f083 0310 	eor.w	r3, r3, #16
 8008302:	817b      	strh	r3, [r7, #10]
 8008304:	897b      	ldrh	r3, [r7, #10]
 8008306:	f083 0320 	eor.w	r3, r3, #32
 800830a:	817b      	strh	r3, [r7, #10]
 800830c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800831a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	441a      	add	r2, r3
 8008326:	897b      	ldrh	r3, [r7, #10]
 8008328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008338:	b29b      	uxth	r3, r3
 800833a:	8013      	strh	r3, [r2, #0]
 800833c:	f000 bcde 	b.w	8008cfc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	7b1b      	ldrb	r3, [r3, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	f040 80bb 	bne.w	80084c8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699a      	ldr	r2, [r3, #24]
 800835e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	429a      	cmp	r2, r3
 800836c:	d917      	bls.n	800839e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800836e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800837e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800838e:	1ad2      	subs	r2, r2, r3
 8008390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	619a      	str	r2, [r3, #24]
 800839c:	e00e      	b.n	80083bc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800839e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80083ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2200      	movs	r2, #0
 80083ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80083bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083d8:	b29b      	uxth	r3, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083e0:	4413      	add	r3, r2
 80083e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	00da      	lsls	r2, r3, #3
 80083f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083f8:	4413      	add	r3, r2
 80083fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	b29b      	uxth	r3, r3
 800840a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800840e:	b29a      	uxth	r2, r3
 8008410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008414:	801a      	strh	r2, [r3, #0]
 8008416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800841a:	2b3e      	cmp	r3, #62	; 0x3e
 800841c:	d924      	bls.n	8008468 <USB_EPStartXfer+0xec2>
 800841e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008422:	095b      	lsrs	r3, r3, #5
 8008424:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <USB_EPStartXfer+0xe98>
 8008434:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008438:	3b01      	subs	r3, #1
 800843a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800843e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29a      	uxth	r2, r3
 8008446:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800844a:	b29b      	uxth	r3, r3
 800844c:	029b      	lsls	r3, r3, #10
 800844e:	b29b      	uxth	r3, r3
 8008450:	4313      	orrs	r3, r2
 8008452:	b29b      	uxth	r3, r3
 8008454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800845c:	b29a      	uxth	r2, r3
 800845e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008462:	801a      	strh	r2, [r3, #0]
 8008464:	f000 bc10 	b.w	8008c88 <USB_EPStartXfer+0x16e2>
 8008468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10c      	bne.n	800848a <USB_EPStartXfer+0xee4>
 8008470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	b29b      	uxth	r3, r3
 8008478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008480:	b29a      	uxth	r2, r3
 8008482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008486:	801a      	strh	r2, [r3, #0]
 8008488:	e3fe      	b.n	8008c88 <USB_EPStartXfer+0x16e2>
 800848a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800848e:	085b      	lsrs	r3, r3, #1
 8008490:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b00      	cmp	r3, #0
 800849e:	d004      	beq.n	80084aa <USB_EPStartXfer+0xf04>
 80084a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084a4:	3301      	adds	r3, #1
 80084a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	029b      	lsls	r3, r3, #10
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	4313      	orrs	r3, r2
 80084be:	b29a      	uxth	r2, r3
 80084c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084c4:	801a      	strh	r2, [r3, #0]
 80084c6:	e3df      	b.n	8008c88 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80084c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	78db      	ldrb	r3, [r3, #3]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	f040 8218 	bne.w	800890a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80084da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	785b      	ldrb	r3, [r3, #1]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f040 809d 	bne.w	8008626 <USB_EPStartXfer+0x1080>
 80084ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008508:	b29b      	uxth	r3, r3
 800850a:	461a      	mov	r2, r3
 800850c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008510:	4413      	add	r3, r2
 8008512:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	00da      	lsls	r2, r3, #3
 8008524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008528:	4413      	add	r3, r2
 800852a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800852e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800853e:	b29a      	uxth	r2, r3
 8008540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008544:	801a      	strh	r2, [r3, #0]
 8008546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b3e      	cmp	r3, #62	; 0x3e
 8008554:	d92b      	bls.n	80085ae <USB_EPStartXfer+0x1008>
 8008556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	095b      	lsrs	r3, r3, #5
 8008564:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800856c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	f003 031f 	and.w	r3, r3, #31
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <USB_EPStartXfer+0xfe0>
 800857c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008580:	3b01      	subs	r3, #1
 8008582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	b29a      	uxth	r2, r3
 800858e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008592:	b29b      	uxth	r3, r3
 8008594:	029b      	lsls	r3, r3, #10
 8008596:	b29b      	uxth	r3, r3
 8008598:	4313      	orrs	r3, r2
 800859a:	b29b      	uxth	r3, r3
 800859c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085aa:	801a      	strh	r2, [r3, #0]
 80085ac:	e070      	b.n	8008690 <USB_EPStartXfer+0x10ea>
 80085ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10c      	bne.n	80085d8 <USB_EPStartXfer+0x1032>
 80085be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085d4:	801a      	strh	r2, [r3, #0]
 80085d6:	e05b      	b.n	8008690 <USB_EPStartXfer+0x10ea>
 80085d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	085b      	lsrs	r3, r3, #1
 80085e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d004      	beq.n	8008608 <USB_EPStartXfer+0x1062>
 80085fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008602:	3301      	adds	r3, #1
 8008604:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008608:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	b29a      	uxth	r2, r3
 8008610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008614:	b29b      	uxth	r3, r3
 8008616:	029b      	lsls	r3, r3, #10
 8008618:	b29b      	uxth	r3, r3
 800861a:	4313      	orrs	r3, r2
 800861c:	b29a      	uxth	r2, r3
 800861e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008622:	801a      	strh	r2, [r3, #0]
 8008624:	e034      	b.n	8008690 <USB_EPStartXfer+0x10ea>
 8008626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d12c      	bne.n	8008690 <USB_EPStartXfer+0x10ea>
 8008636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800863a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008652:	b29b      	uxth	r3, r3
 8008654:	461a      	mov	r2, r3
 8008656:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800865a:	4413      	add	r3, r2
 800865c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	00da      	lsls	r2, r3, #3
 800866e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008672:	4413      	add	r3, r2
 8008674:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800867c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	b29a      	uxth	r2, r3
 800868a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800868e:	801a      	strh	r2, [r3, #0]
 8008690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008694:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800869e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	785b      	ldrb	r3, [r3, #1]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f040 809d 	bne.w	80087ea <USB_EPStartXfer+0x1244>
 80086b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086d4:	4413      	add	r3, r2
 80086d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	00da      	lsls	r2, r3, #3
 80086e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086ec:	4413      	add	r3, r2
 80086ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008702:	b29a      	uxth	r2, r3
 8008704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008708:	801a      	strh	r2, [r3, #0]
 800870a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	2b3e      	cmp	r3, #62	; 0x3e
 8008718:	d92b      	bls.n	8008772 <USB_EPStartXfer+0x11cc>
 800871a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800871e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	095b      	lsrs	r3, r3, #5
 8008728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800872c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	f003 031f 	and.w	r3, r3, #31
 800873c:	2b00      	cmp	r3, #0
 800873e:	d104      	bne.n	800874a <USB_EPStartXfer+0x11a4>
 8008740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008744:	3b01      	subs	r3, #1
 8008746:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800874a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	b29a      	uxth	r2, r3
 8008752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008756:	b29b      	uxth	r3, r3
 8008758:	029b      	lsls	r3, r3, #10
 800875a:	b29b      	uxth	r3, r3
 800875c:	4313      	orrs	r3, r2
 800875e:	b29b      	uxth	r3, r3
 8008760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008768:	b29a      	uxth	r2, r3
 800876a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800876e:	801a      	strh	r2, [r3, #0]
 8008770:	e069      	b.n	8008846 <USB_EPStartXfer+0x12a0>
 8008772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10c      	bne.n	800879c <USB_EPStartXfer+0x11f6>
 8008782:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800878e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008792:	b29a      	uxth	r2, r3
 8008794:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008798:	801a      	strh	r2, [r3, #0]
 800879a:	e054      	b.n	8008846 <USB_EPStartXfer+0x12a0>
 800879c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	085b      	lsrs	r3, r3, #1
 80087aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d004      	beq.n	80087cc <USB_EPStartXfer+0x1226>
 80087c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c6:	3301      	adds	r3, #1
 80087c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087d8:	b29b      	uxth	r3, r3
 80087da:	029b      	lsls	r3, r3, #10
 80087dc:	b29b      	uxth	r3, r3
 80087de:	4313      	orrs	r3, r2
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087e6:	801a      	strh	r2, [r3, #0]
 80087e8:	e02d      	b.n	8008846 <USB_EPStartXfer+0x12a0>
 80087ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	785b      	ldrb	r3, [r3, #1]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d125      	bne.n	8008846 <USB_EPStartXfer+0x12a0>
 80087fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008808:	b29b      	uxth	r3, r3
 800880a:	461a      	mov	r2, r3
 800880c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008810:	4413      	add	r3, r2
 8008812:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800881a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	00da      	lsls	r2, r3, #3
 8008824:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008828:	4413      	add	r3, r2
 800882a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800882e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	b29a      	uxth	r2, r3
 8008840:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008844:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 8218 	beq.w	8008c88 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800885c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008878:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800887c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <USB_EPStartXfer+0x12ea>
 8008884:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10d      	bne.n	80088ac <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008890:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008898:	2b00      	cmp	r3, #0
 800889a:	f040 81f5 	bne.w	8008c88 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800889e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80088a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f040 81ee 	bne.w	8008c88 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80088ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80088d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	441a      	add	r2, r3
 80088f0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80088f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008900:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008904:	b29b      	uxth	r3, r3
 8008906:	8013      	strh	r3, [r2, #0]
 8008908:	e1be      	b.n	8008c88 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800890a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	78db      	ldrb	r3, [r3, #3]
 8008916:	2b01      	cmp	r3, #1
 8008918:	f040 81b4 	bne.w	8008c84 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800891c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800892c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	429a      	cmp	r2, r3
 8008936:	d917      	bls.n	8008968 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800893c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	699a      	ldr	r2, [r3, #24]
 8008954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008958:	1ad2      	subs	r2, r2, r3
 800895a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	619a      	str	r2, [r3, #24]
 8008966:	e00e      	b.n	8008986 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	785b      	ldrb	r3, [r3, #1]
 8008992:	2b00      	cmp	r3, #0
 8008994:	f040 8085 	bne.w	8008aa2 <USB_EPStartXfer+0x14fc>
 8008998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800899c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80089a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	461a      	mov	r2, r3
 80089b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80089bc:	4413      	add	r3, r2
 80089be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80089c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	00da      	lsls	r2, r3, #3
 80089d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80089d4:	4413      	add	r3, r2
 80089d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80089da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089f0:	801a      	strh	r2, [r3, #0]
 80089f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f6:	2b3e      	cmp	r3, #62	; 0x3e
 80089f8:	d923      	bls.n	8008a42 <USB_EPStartXfer+0x149c>
 80089fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089fe:	095b      	lsrs	r3, r3, #5
 8008a00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a08:	f003 031f 	and.w	r3, r3, #31
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d104      	bne.n	8008a1a <USB_EPStartXfer+0x1474>
 8008a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a14:	3b01      	subs	r3, #1
 8008a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	029b      	lsls	r3, r3, #10
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a3e:	801a      	strh	r2, [r3, #0]
 8008a40:	e060      	b.n	8008b04 <USB_EPStartXfer+0x155e>
 8008a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10c      	bne.n	8008a64 <USB_EPStartXfer+0x14be>
 8008a4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a60:	801a      	strh	r2, [r3, #0]
 8008a62:	e04f      	b.n	8008b04 <USB_EPStartXfer+0x155e>
 8008a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a68:	085b      	lsrs	r3, r3, #1
 8008a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d004      	beq.n	8008a84 <USB_EPStartXfer+0x14de>
 8008a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a7e:	3301      	adds	r3, #1
 8008a80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	029b      	lsls	r3, r3, #10
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	4313      	orrs	r3, r2
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a9e:	801a      	strh	r2, [r3, #0]
 8008aa0:	e030      	b.n	8008b04 <USB_EPStartXfer+0x155e>
 8008aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	785b      	ldrb	r3, [r3, #1]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d128      	bne.n	8008b04 <USB_EPStartXfer+0x155e>
 8008ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	00da      	lsls	r2, r3, #3
 8008aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008aee:	4413      	add	r3, r2
 8008af0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008b02:	801a      	strh	r2, [r3, #0]
 8008b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	785b      	ldrb	r3, [r3, #1]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f040 8085 	bne.w	8008c2e <USB_EPStartXfer+0x1688>
 8008b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	461a      	mov	r2, r3
 8008b44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b48:	4413      	add	r3, r2
 8008b4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	00da      	lsls	r2, r3, #3
 8008b5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b60:	4413      	add	r3, r2
 8008b62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b82:	2b3e      	cmp	r3, #62	; 0x3e
 8008b84:	d923      	bls.n	8008bce <USB_EPStartXfer+0x1628>
 8008b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b8a:	095b      	lsrs	r3, r3, #5
 8008b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b94:	f003 031f 	and.w	r3, r3, #31
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d104      	bne.n	8008ba6 <USB_EPStartXfer+0x1600>
 8008b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	029b      	lsls	r3, r3, #10
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bca:	801a      	strh	r2, [r3, #0]
 8008bcc:	e05c      	b.n	8008c88 <USB_EPStartXfer+0x16e2>
 8008bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10c      	bne.n	8008bf0 <USB_EPStartXfer+0x164a>
 8008bd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bec:	801a      	strh	r2, [r3, #0]
 8008bee:	e04b      	b.n	8008c88 <USB_EPStartXfer+0x16e2>
 8008bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf4:	085b      	lsrs	r3, r3, #1
 8008bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d004      	beq.n	8008c10 <USB_EPStartXfer+0x166a>
 8008c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	029b      	lsls	r3, r3, #10
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	4313      	orrs	r3, r2
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c2a:	801a      	strh	r2, [r3, #0]
 8008c2c:	e02c      	b.n	8008c88 <USB_EPStartXfer+0x16e2>
 8008c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	785b      	ldrb	r3, [r3, #1]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d124      	bne.n	8008c88 <USB_EPStartXfer+0x16e2>
 8008c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c54:	4413      	add	r3, r2
 8008c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	00da      	lsls	r2, r3, #3
 8008c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c80:	801a      	strh	r2, [r3, #0]
 8008c82:	e001      	b.n	8008c88 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e03a      	b.n	8008cfe <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008cb2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008cb6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008cbe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008cc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cc6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	441a      	add	r2, r3
 8008ce4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	785b      	ldrb	r3, [r3, #1]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d020      	beq.n	8008d5c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d30:	81bb      	strh	r3, [r7, #12]
 8008d32:	89bb      	ldrh	r3, [r7, #12]
 8008d34:	f083 0310 	eor.w	r3, r3, #16
 8008d38:	81bb      	strh	r3, [r7, #12]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	441a      	add	r2, r3
 8008d44:	89bb      	ldrh	r3, [r7, #12]
 8008d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	8013      	strh	r3, [r2, #0]
 8008d5a:	e01f      	b.n	8008d9c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	881b      	ldrh	r3, [r3, #0]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d72:	81fb      	strh	r3, [r7, #14]
 8008d74:	89fb      	ldrh	r3, [r7, #14]
 8008d76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d7a:	81fb      	strh	r3, [r7, #14]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	441a      	add	r2, r3
 8008d86:	89fb      	ldrh	r3, [r7, #14]
 8008d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b087      	sub	sp, #28
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	7b1b      	ldrb	r3, [r3, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f040 809d 	bne.w	8008ef8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	785b      	ldrb	r3, [r3, #1]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d04c      	beq.n	8008e60 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	823b      	strh	r3, [r7, #16]
 8008dd4:	8a3b      	ldrh	r3, [r7, #16]
 8008dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d01b      	beq.n	8008e16 <USB_EPClearStall+0x6c>
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df4:	81fb      	strh	r3, [r7, #14]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	441a      	add	r2, r3
 8008e00:	89fb      	ldrh	r3, [r7, #14]
 8008e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	78db      	ldrb	r3, [r3, #3]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d06c      	beq.n	8008ef8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e34:	81bb      	strh	r3, [r7, #12]
 8008e36:	89bb      	ldrh	r3, [r7, #12]
 8008e38:	f083 0320 	eor.w	r3, r3, #32
 8008e3c:	81bb      	strh	r3, [r7, #12]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	441a      	add	r2, r3
 8008e48:	89bb      	ldrh	r3, [r7, #12]
 8008e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	8013      	strh	r3, [r2, #0]
 8008e5e:	e04b      	b.n	8008ef8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	82fb      	strh	r3, [r7, #22]
 8008e6e:	8afb      	ldrh	r3, [r7, #22]
 8008e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d01b      	beq.n	8008eb0 <USB_EPClearStall+0x106>
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8e:	82bb      	strh	r3, [r7, #20]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	441a      	add	r2, r3
 8008e9a:	8abb      	ldrh	r3, [r7, #20]
 8008e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec6:	827b      	strh	r3, [r7, #18]
 8008ec8:	8a7b      	ldrh	r3, [r7, #18]
 8008eca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ece:	827b      	strh	r3, [r7, #18]
 8008ed0:	8a7b      	ldrh	r3, [r7, #18]
 8008ed2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ed6:	827b      	strh	r3, [r7, #18]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	441a      	add	r2, r3
 8008ee2:	8a7b      	ldrh	r3, [r7, #18]
 8008ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f12:	78fb      	ldrb	r3, [r7, #3]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d103      	bne.n	8008f20 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2280      	movs	r2, #128	; 0x80
 8008f1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b085      	sub	sp, #20
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f98:	68fb      	ldr	r3, [r7, #12]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b08b      	sub	sp, #44	; 0x2c
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	461a      	mov	r2, r3
 8008fcc:	460b      	mov	r3, r1
 8008fce:	80fb      	strh	r3, [r7, #6]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008fd4:	88bb      	ldrh	r3, [r7, #4]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	085b      	lsrs	r3, r3, #1
 8008fda:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fe4:	88fa      	ldrh	r2, [r7, #6]
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff4:	e01b      	b.n	800902e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	3301      	adds	r3, #1
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	021b      	lsls	r3, r3, #8
 8009004:	b21a      	sxth	r2, r3
 8009006:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800900a:	4313      	orrs	r3, r2
 800900c:	b21b      	sxth	r3, r3
 800900e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	8a7a      	ldrh	r2, [r7, #18]
 8009014:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	3302      	adds	r3, #2
 800901a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	3301      	adds	r3, #1
 8009020:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	3301      	adds	r3, #1
 8009026:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	3b01      	subs	r3, #1
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e0      	bne.n	8008ff6 <USB_WritePMA+0x38>
  }
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop
 8009038:	372c      	adds	r7, #44	; 0x2c
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009042:	b480      	push	{r7}
 8009044:	b08b      	sub	sp, #44	; 0x2c
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	4611      	mov	r1, r2
 800904e:	461a      	mov	r2, r3
 8009050:	460b      	mov	r3, r1
 8009052:	80fb      	strh	r3, [r7, #6]
 8009054:	4613      	mov	r3, r2
 8009056:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009058:	88bb      	ldrh	r3, [r7, #4]
 800905a:	085b      	lsrs	r3, r3, #1
 800905c:	b29b      	uxth	r3, r3
 800905e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009068:	88fa      	ldrh	r2, [r7, #6]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009072:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	627b      	str	r3, [r7, #36]	; 0x24
 8009078:	e018      	b.n	80090ac <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800907a:	6a3b      	ldr	r3, [r7, #32]
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	b29b      	uxth	r3, r3
 8009080:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	3302      	adds	r3, #2
 8009086:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	b2da      	uxtb	r2, r3
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	3301      	adds	r3, #1
 8009094:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	0a1b      	lsrs	r3, r3, #8
 800909a:	b2da      	uxtb	r2, r3
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	3301      	adds	r3, #1
 80090a4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	3b01      	subs	r3, #1
 80090aa:	627b      	str	r3, [r7, #36]	; 0x24
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e3      	bne.n	800907a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80090b2:	88bb      	ldrh	r3, [r7, #4]
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d007      	beq.n	80090ce <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	701a      	strb	r2, [r3, #0]
  }
}
 80090ce:	bf00      	nop
 80090d0:	372c      	adds	r7, #44	; 0x2c
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
	...

080090dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80090ec:	f002 fd0c 	bl	800bb08 <USBD_static_malloc>
 80090f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d109      	bne.n	800910c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	32b0      	adds	r2, #176	; 0xb0
 8009102:	2100      	movs	r1, #0
 8009104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009108:	2302      	movs	r3, #2
 800910a:	e0d4      	b.n	80092b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800910c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009110:	2100      	movs	r1, #0
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f002 fd36 	bl	800bb84 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	32b0      	adds	r2, #176	; 0xb0
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	32b0      	adds	r2, #176	; 0xb0
 8009132:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	7c1b      	ldrb	r3, [r3, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d138      	bne.n	80091b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009144:	4b5e      	ldr	r3, [pc, #376]	; (80092c0 <USBD_CDC_Init+0x1e4>)
 8009146:	7819      	ldrb	r1, [r3, #0]
 8009148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800914c:	2202      	movs	r2, #2
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f002 fadc 	bl	800b70c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009154:	4b5a      	ldr	r3, [pc, #360]	; (80092c0 <USBD_CDC_Init+0x1e4>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f003 020f 	and.w	r2, r3, #15
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	440b      	add	r3, r1
 8009168:	3324      	adds	r3, #36	; 0x24
 800916a:	2201      	movs	r2, #1
 800916c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800916e:	4b55      	ldr	r3, [pc, #340]	; (80092c4 <USBD_CDC_Init+0x1e8>)
 8009170:	7819      	ldrb	r1, [r3, #0]
 8009172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009176:	2202      	movs	r2, #2
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f002 fac7 	bl	800b70c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800917e:	4b51      	ldr	r3, [pc, #324]	; (80092c4 <USBD_CDC_Init+0x1e8>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	f003 020f 	and.w	r2, r3, #15
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	440b      	add	r3, r1
 8009192:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009196:	2201      	movs	r2, #1
 8009198:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800919a:	4b4b      	ldr	r3, [pc, #300]	; (80092c8 <USBD_CDC_Init+0x1ec>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	f003 020f 	and.w	r2, r3, #15
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	440b      	add	r3, r1
 80091ae:	3326      	adds	r3, #38	; 0x26
 80091b0:	2210      	movs	r2, #16
 80091b2:	801a      	strh	r2, [r3, #0]
 80091b4:	e035      	b.n	8009222 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80091b6:	4b42      	ldr	r3, [pc, #264]	; (80092c0 <USBD_CDC_Init+0x1e4>)
 80091b8:	7819      	ldrb	r1, [r3, #0]
 80091ba:	2340      	movs	r3, #64	; 0x40
 80091bc:	2202      	movs	r2, #2
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f002 faa4 	bl	800b70c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80091c4:	4b3e      	ldr	r3, [pc, #248]	; (80092c0 <USBD_CDC_Init+0x1e4>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	f003 020f 	and.w	r2, r3, #15
 80091cc:	6879      	ldr	r1, [r7, #4]
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	3324      	adds	r3, #36	; 0x24
 80091da:	2201      	movs	r2, #1
 80091dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80091de:	4b39      	ldr	r3, [pc, #228]	; (80092c4 <USBD_CDC_Init+0x1e8>)
 80091e0:	7819      	ldrb	r1, [r3, #0]
 80091e2:	2340      	movs	r3, #64	; 0x40
 80091e4:	2202      	movs	r2, #2
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f002 fa90 	bl	800b70c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80091ec:	4b35      	ldr	r3, [pc, #212]	; (80092c4 <USBD_CDC_Init+0x1e8>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	f003 020f 	and.w	r2, r3, #15
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	4613      	mov	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	440b      	add	r3, r1
 8009200:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009204:	2201      	movs	r2, #1
 8009206:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009208:	4b2f      	ldr	r3, [pc, #188]	; (80092c8 <USBD_CDC_Init+0x1ec>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	f003 020f 	and.w	r2, r3, #15
 8009210:	6879      	ldr	r1, [r7, #4]
 8009212:	4613      	mov	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	440b      	add	r3, r1
 800921c:	3326      	adds	r3, #38	; 0x26
 800921e:	2210      	movs	r2, #16
 8009220:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009222:	4b29      	ldr	r3, [pc, #164]	; (80092c8 <USBD_CDC_Init+0x1ec>)
 8009224:	7819      	ldrb	r1, [r3, #0]
 8009226:	2308      	movs	r3, #8
 8009228:	2203      	movs	r2, #3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f002 fa6e 	bl	800b70c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009230:	4b25      	ldr	r3, [pc, #148]	; (80092c8 <USBD_CDC_Init+0x1ec>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	f003 020f 	and.w	r2, r3, #15
 8009238:	6879      	ldr	r1, [r7, #4]
 800923a:	4613      	mov	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	440b      	add	r3, r1
 8009244:	3324      	adds	r3, #36	; 0x24
 8009246:	2201      	movs	r2, #1
 8009248:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	33b0      	adds	r3, #176	; 0xb0
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009280:	2302      	movs	r3, #2
 8009282:	e018      	b.n	80092b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7c1b      	ldrb	r3, [r3, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800928c:	4b0d      	ldr	r3, [pc, #52]	; (80092c4 <USBD_CDC_Init+0x1e8>)
 800928e:	7819      	ldrb	r1, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f002 fbb2 	bl	800ba04 <USBD_LL_PrepareReceive>
 80092a0:	e008      	b.n	80092b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092a2:	4b08      	ldr	r3, [pc, #32]	; (80092c4 <USBD_CDC_Init+0x1e8>)
 80092a4:	7819      	ldrb	r1, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092ac:	2340      	movs	r3, #64	; 0x40
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f002 fba8 	bl	800ba04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20000093 	.word	0x20000093
 80092c4:	20000094 	.word	0x20000094
 80092c8:	20000095 	.word	0x20000095

080092cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80092d8:	4b3a      	ldr	r3, [pc, #232]	; (80093c4 <USBD_CDC_DeInit+0xf8>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f002 fa52 	bl	800b788 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80092e4:	4b37      	ldr	r3, [pc, #220]	; (80093c4 <USBD_CDC_DeInit+0xf8>)
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	f003 020f 	and.w	r2, r3, #15
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	440b      	add	r3, r1
 80092f8:	3324      	adds	r3, #36	; 0x24
 80092fa:	2200      	movs	r2, #0
 80092fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80092fe:	4b32      	ldr	r3, [pc, #200]	; (80093c8 <USBD_CDC_DeInit+0xfc>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f002 fa3f 	bl	800b788 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800930a:	4b2f      	ldr	r3, [pc, #188]	; (80093c8 <USBD_CDC_DeInit+0xfc>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	f003 020f 	and.w	r2, r3, #15
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	440b      	add	r3, r1
 800931e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009322:	2200      	movs	r2, #0
 8009324:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009326:	4b29      	ldr	r3, [pc, #164]	; (80093cc <USBD_CDC_DeInit+0x100>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f002 fa2b 	bl	800b788 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009332:	4b26      	ldr	r3, [pc, #152]	; (80093cc <USBD_CDC_DeInit+0x100>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	f003 020f 	and.w	r2, r3, #15
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	4613      	mov	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	440b      	add	r3, r1
 8009346:	3324      	adds	r3, #36	; 0x24
 8009348:	2200      	movs	r2, #0
 800934a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800934c:	4b1f      	ldr	r3, [pc, #124]	; (80093cc <USBD_CDC_DeInit+0x100>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	f003 020f 	and.w	r2, r3, #15
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	4613      	mov	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	440b      	add	r3, r1
 8009360:	3326      	adds	r3, #38	; 0x26
 8009362:	2200      	movs	r2, #0
 8009364:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	32b0      	adds	r2, #176	; 0xb0
 8009370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01f      	beq.n	80093b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	33b0      	adds	r3, #176	; 0xb0
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	32b0      	adds	r2, #176	; 0xb0
 8009396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939a:	4618      	mov	r0, r3
 800939c:	f002 fbc2 	bl	800bb24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	32b0      	adds	r2, #176	; 0xb0
 80093aa:	2100      	movs	r1, #0
 80093ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20000093 	.word	0x20000093
 80093c8:	20000094 	.word	0x20000094
 80093cc:	20000095 	.word	0x20000095

080093d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	32b0      	adds	r2, #176	; 0xb0
 80093e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e0bf      	b.n	8009580 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009408:	2b00      	cmp	r3, #0
 800940a:	d050      	beq.n	80094ae <USBD_CDC_Setup+0xde>
 800940c:	2b20      	cmp	r3, #32
 800940e:	f040 80af 	bne.w	8009570 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	88db      	ldrh	r3, [r3, #6]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d03a      	beq.n	8009490 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	b25b      	sxtb	r3, r3
 8009420:	2b00      	cmp	r3, #0
 8009422:	da1b      	bge.n	800945c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	33b0      	adds	r3, #176	; 0xb0
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800943a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	88d2      	ldrh	r2, [r2, #6]
 8009440:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	88db      	ldrh	r3, [r3, #6]
 8009446:	2b07      	cmp	r3, #7
 8009448:	bf28      	it	cs
 800944a:	2307      	movcs	r3, #7
 800944c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	89fa      	ldrh	r2, [r7, #14]
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 fd21 	bl	800ae9c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800945a:	e090      	b.n	800957e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	785a      	ldrb	r2, [r3, #1]
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	88db      	ldrh	r3, [r3, #6]
 800946a:	2b3f      	cmp	r3, #63	; 0x3f
 800946c:	d803      	bhi.n	8009476 <USBD_CDC_Setup+0xa6>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	88db      	ldrh	r3, [r3, #6]
 8009472:	b2da      	uxtb	r2, r3
 8009474:	e000      	b.n	8009478 <USBD_CDC_Setup+0xa8>
 8009476:	2240      	movs	r2, #64	; 0x40
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800947e:	6939      	ldr	r1, [r7, #16]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009486:	461a      	mov	r2, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f001 fd33 	bl	800aef4 <USBD_CtlPrepareRx>
      break;
 800948e:	e076      	b.n	800957e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	33b0      	adds	r3, #176	; 0xb0
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	7850      	ldrb	r0, [r2, #1]
 80094a6:	2200      	movs	r2, #0
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	4798      	blx	r3
      break;
 80094ac:	e067      	b.n	800957e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	785b      	ldrb	r3, [r3, #1]
 80094b2:	2b0b      	cmp	r3, #11
 80094b4:	d851      	bhi.n	800955a <USBD_CDC_Setup+0x18a>
 80094b6:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <USBD_CDC_Setup+0xec>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	080094ed 	.word	0x080094ed
 80094c0:	08009569 	.word	0x08009569
 80094c4:	0800955b 	.word	0x0800955b
 80094c8:	0800955b 	.word	0x0800955b
 80094cc:	0800955b 	.word	0x0800955b
 80094d0:	0800955b 	.word	0x0800955b
 80094d4:	0800955b 	.word	0x0800955b
 80094d8:	0800955b 	.word	0x0800955b
 80094dc:	0800955b 	.word	0x0800955b
 80094e0:	0800955b 	.word	0x0800955b
 80094e4:	08009517 	.word	0x08009517
 80094e8:	08009541 	.word	0x08009541
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d107      	bne.n	8009508 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80094f8:	f107 030a 	add.w	r3, r7, #10
 80094fc:	2202      	movs	r2, #2
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 fccb 	bl	800ae9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009506:	e032      	b.n	800956e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 fc55 	bl	800adba <USBD_CtlError>
            ret = USBD_FAIL;
 8009510:	2303      	movs	r3, #3
 8009512:	75fb      	strb	r3, [r7, #23]
          break;
 8009514:	e02b      	b.n	800956e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b03      	cmp	r3, #3
 8009520:	d107      	bne.n	8009532 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009522:	f107 030d 	add.w	r3, r7, #13
 8009526:	2201      	movs	r2, #1
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 fcb6 	bl	800ae9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009530:	e01d      	b.n	800956e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 fc40 	bl	800adba <USBD_CtlError>
            ret = USBD_FAIL;
 800953a:	2303      	movs	r3, #3
 800953c:	75fb      	strb	r3, [r7, #23]
          break;
 800953e:	e016      	b.n	800956e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b03      	cmp	r3, #3
 800954a:	d00f      	beq.n	800956c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f001 fc33 	bl	800adba <USBD_CtlError>
            ret = USBD_FAIL;
 8009554:	2303      	movs	r3, #3
 8009556:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009558:	e008      	b.n	800956c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f001 fc2c 	bl	800adba <USBD_CtlError>
          ret = USBD_FAIL;
 8009562:	2303      	movs	r3, #3
 8009564:	75fb      	strb	r3, [r7, #23]
          break;
 8009566:	e002      	b.n	800956e <USBD_CDC_Setup+0x19e>
          break;
 8009568:	bf00      	nop
 800956a:	e008      	b.n	800957e <USBD_CDC_Setup+0x1ae>
          break;
 800956c:	bf00      	nop
      }
      break;
 800956e:	e006      	b.n	800957e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f001 fc21 	bl	800adba <USBD_CtlError>
      ret = USBD_FAIL;
 8009578:	2303      	movs	r3, #3
 800957a:	75fb      	strb	r3, [r7, #23]
      break;
 800957c:	bf00      	nop
  }

  return (uint8_t)ret;
 800957e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800959a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	32b0      	adds	r2, #176	; 0xb0
 80095a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e065      	b.n	800967e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	32b0      	adds	r2, #176	; 0xb0
 80095bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80095c2:	78fb      	ldrb	r3, [r7, #3]
 80095c4:	f003 020f 	and.w	r2, r3, #15
 80095c8:	6879      	ldr	r1, [r7, #4]
 80095ca:	4613      	mov	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	440b      	add	r3, r1
 80095d4:	3318      	adds	r3, #24
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d02f      	beq.n	800963c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	f003 020f 	and.w	r2, r3, #15
 80095e2:	6879      	ldr	r1, [r7, #4]
 80095e4:	4613      	mov	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	440b      	add	r3, r1
 80095ee:	3318      	adds	r3, #24
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	f003 010f 	and.w	r1, r3, #15
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	460b      	mov	r3, r1
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	440b      	add	r3, r1
 8009600:	00db      	lsls	r3, r3, #3
 8009602:	4403      	add	r3, r0
 8009604:	3338      	adds	r3, #56	; 0x38
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	fbb2 f1f3 	udiv	r1, r2, r3
 800960c:	fb01 f303 	mul.w	r3, r1, r3
 8009610:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009612:	2b00      	cmp	r3, #0
 8009614:	d112      	bne.n	800963c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009616:	78fb      	ldrb	r3, [r7, #3]
 8009618:	f003 020f 	and.w	r2, r3, #15
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	440b      	add	r3, r1
 8009628:	3318      	adds	r3, #24
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800962e:	78f9      	ldrb	r1, [r7, #3]
 8009630:	2300      	movs	r3, #0
 8009632:	2200      	movs	r2, #0
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f002 f9ad 	bl	800b994 <USBD_LL_Transmit>
 800963a:	e01f      	b.n	800967c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2200      	movs	r2, #0
 8009640:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	33b0      	adds	r3, #176	; 0xb0
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d010      	beq.n	800967c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	33b0      	adds	r3, #176	; 0xb0
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009678:	78fa      	ldrb	r2, [r7, #3]
 800967a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	460b      	mov	r3, r1
 8009690:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	32b0      	adds	r2, #176	; 0xb0
 800969c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	32b0      	adds	r2, #176	; 0xb0
 80096ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e01a      	b.n	80096ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80096b8:	78fb      	ldrb	r3, [r7, #3]
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f002 f9d9 	bl	800ba74 <USBD_LL_GetRxDataSize>
 80096c2:	4602      	mov	r2, r0
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	33b0      	adds	r3, #176	; 0xb0
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80096e8:	4611      	mov	r1, r2
 80096ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	32b0      	adds	r2, #176	; 0xb0
 8009708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009714:	2303      	movs	r3, #3
 8009716:	e025      	b.n	8009764 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	33b0      	adds	r3, #176	; 0xb0
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d01a      	beq.n	8009762 <USBD_CDC_EP0_RxReady+0x6c>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009732:	2bff      	cmp	r3, #255	; 0xff
 8009734:	d015      	beq.n	8009762 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	33b0      	adds	r3, #176	; 0xb0
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800974e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009756:	b292      	uxth	r2, r2
 8009758:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	22ff      	movs	r2, #255	; 0xff
 800975e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009774:	2182      	movs	r1, #130	; 0x82
 8009776:	4818      	ldr	r0, [pc, #96]	; (80097d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009778:	f000 fcbd 	bl	800a0f6 <USBD_GetEpDesc>
 800977c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800977e:	2101      	movs	r1, #1
 8009780:	4815      	ldr	r0, [pc, #84]	; (80097d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009782:	f000 fcb8 	bl	800a0f6 <USBD_GetEpDesc>
 8009786:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009788:	2181      	movs	r1, #129	; 0x81
 800978a:	4813      	ldr	r0, [pc, #76]	; (80097d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800978c:	f000 fcb3 	bl	800a0f6 <USBD_GetEpDesc>
 8009790:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2210      	movs	r2, #16
 800979c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d006      	beq.n	80097b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097ac:	711a      	strb	r2, [r3, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d006      	beq.n	80097c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097c0:	711a      	strb	r2, [r3, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2243      	movs	r2, #67	; 0x43
 80097ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80097cc:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20000050 	.word	0x20000050

080097dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097e4:	2182      	movs	r1, #130	; 0x82
 80097e6:	4818      	ldr	r0, [pc, #96]	; (8009848 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097e8:	f000 fc85 	bl	800a0f6 <USBD_GetEpDesc>
 80097ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097ee:	2101      	movs	r1, #1
 80097f0:	4815      	ldr	r0, [pc, #84]	; (8009848 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097f2:	f000 fc80 	bl	800a0f6 <USBD_GetEpDesc>
 80097f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097f8:	2181      	movs	r1, #129	; 0x81
 80097fa:	4813      	ldr	r0, [pc, #76]	; (8009848 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097fc:	f000 fc7b 	bl	800a0f6 <USBD_GetEpDesc>
 8009800:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2210      	movs	r2, #16
 800980c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d006      	beq.n	8009822 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	2200      	movs	r2, #0
 8009818:	711a      	strb	r2, [r3, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	f042 0202 	orr.w	r2, r2, #2
 8009820:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d006      	beq.n	8009836 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	711a      	strb	r2, [r3, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f042 0202 	orr.w	r2, r2, #2
 8009834:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2243      	movs	r2, #67	; 0x43
 800983a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800983c:	4b02      	ldr	r3, [pc, #8]	; (8009848 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	20000050 	.word	0x20000050

0800984c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009854:	2182      	movs	r1, #130	; 0x82
 8009856:	4818      	ldr	r0, [pc, #96]	; (80098b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009858:	f000 fc4d 	bl	800a0f6 <USBD_GetEpDesc>
 800985c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800985e:	2101      	movs	r1, #1
 8009860:	4815      	ldr	r0, [pc, #84]	; (80098b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009862:	f000 fc48 	bl	800a0f6 <USBD_GetEpDesc>
 8009866:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009868:	2181      	movs	r1, #129	; 0x81
 800986a:	4813      	ldr	r0, [pc, #76]	; (80098b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800986c:	f000 fc43 	bl	800a0f6 <USBD_GetEpDesc>
 8009870:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2210      	movs	r2, #16
 800987c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d006      	beq.n	8009892 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2200      	movs	r2, #0
 8009888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800988c:	711a      	strb	r2, [r3, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d006      	beq.n	80098a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098a0:	711a      	strb	r2, [r3, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2243      	movs	r2, #67	; 0x43
 80098aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80098ac:	4b02      	ldr	r3, [pc, #8]	; (80098b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	20000050 	.word	0x20000050

080098bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	220a      	movs	r2, #10
 80098c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80098ca:	4b03      	ldr	r3, [pc, #12]	; (80098d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	2000000c 	.word	0x2000000c

080098dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80098ec:	2303      	movs	r3, #3
 80098ee:	e009      	b.n	8009904 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	33b0      	adds	r3, #176	; 0xb0
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009910:	b480      	push	{r7}
 8009912:	b087      	sub	sp, #28
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	32b0      	adds	r2, #176	; 0xb0
 8009926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009932:	2303      	movs	r3, #3
 8009934:	e008      	b.n	8009948 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	371c      	adds	r7, #28
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	32b0      	adds	r2, #176	; 0xb0
 8009968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009974:	2303      	movs	r3, #3
 8009976:	e004      	b.n	8009982 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
	...

08009990 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	32b0      	adds	r2, #176	; 0xb0
 80099a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80099a8:	2301      	movs	r3, #1
 80099aa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e025      	b.n	8009a02 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d11f      	bne.n	8009a00 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80099c8:	4b10      	ldr	r3, [pc, #64]	; (8009a0c <USBD_CDC_TransmitPacket+0x7c>)
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	f003 020f 	and.w	r2, r3, #15
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	4613      	mov	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4403      	add	r3, r0
 80099e2:	3318      	adds	r3, #24
 80099e4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <USBD_CDC_TransmitPacket+0x7c>)
 80099e8:	7819      	ldrb	r1, [r3, #0]
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f001 ffcc 	bl	800b994 <USBD_LL_Transmit>

    ret = USBD_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20000093 	.word	0x20000093

08009a10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	32b0      	adds	r2, #176	; 0xb0
 8009a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	32b0      	adds	r2, #176	; 0xb0
 8009a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e018      	b.n	8009a70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	7c1b      	ldrb	r3, [r3, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10a      	bne.n	8009a5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a46:	4b0c      	ldr	r3, [pc, #48]	; (8009a78 <USBD_CDC_ReceivePacket+0x68>)
 8009a48:	7819      	ldrb	r1, [r3, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 ffd5 	bl	800ba04 <USBD_LL_PrepareReceive>
 8009a5a:	e008      	b.n	8009a6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a5c:	4b06      	ldr	r3, [pc, #24]	; (8009a78 <USBD_CDC_ReceivePacket+0x68>)
 8009a5e:	7819      	ldrb	r1, [r3, #0]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a66:	2340      	movs	r3, #64	; 0x40
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f001 ffcb 	bl	800ba04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	20000094 	.word	0x20000094

08009a7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	4613      	mov	r3, r2
 8009a88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e01f      	b.n	8009ad4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	79fa      	ldrb	r2, [r7, #7]
 8009ac6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f001 fd8b 	bl	800b5e4 <USBD_LL_Init>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e025      	b.n	8009b40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	32ae      	adds	r2, #174	; 0xae
 8009b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00f      	beq.n	8009b30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	32ae      	adds	r2, #174	; 0xae
 8009b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	f107 020e 	add.w	r2, r7, #14
 8009b24:	4610      	mov	r0, r2
 8009b26:	4798      	blx	r3
 8009b28:	4602      	mov	r2, r0
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 fda9 	bl	800b6a8 <USBD_LL_Start>
 8009b56:	4603      	mov	r3, r0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b084      	sub	sp, #16
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	460b      	mov	r3, r1
 8009b80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d009      	beq.n	8009ba4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	78fa      	ldrb	r2, [r7, #3]
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	4798      	blx	r3
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	78fa      	ldrb	r2, [r7, #3]
 8009bc8:	4611      	mov	r1, r2
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	4798      	blx	r3
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b084      	sub	sp, #16
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f001 f8a6 	bl	800ad46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009c08:	461a      	mov	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c16:	f003 031f 	and.w	r3, r3, #31
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d01a      	beq.n	8009c54 <USBD_LL_SetupStage+0x72>
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d822      	bhi.n	8009c68 <USBD_LL_SetupStage+0x86>
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <USBD_LL_SetupStage+0x4a>
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d00a      	beq.n	8009c40 <USBD_LL_SetupStage+0x5e>
 8009c2a:	e01d      	b.n	8009c68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fad3 	bl	800a1e0 <USBD_StdDevReq>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c3e:	e020      	b.n	8009c82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fb3b 	bl	800a2c4 <USBD_StdItfReq>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	73fb      	strb	r3, [r7, #15]
      break;
 8009c52:	e016      	b.n	8009c82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fb9d 	bl	800a39c <USBD_StdEPReq>
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]
      break;
 8009c66:	e00c      	b.n	8009c82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 fdbc 	bl	800b7f4 <USBD_LL_StallEP>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c80:	bf00      	nop
  }

  return ret;
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	460b      	mov	r3, r1
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009c9e:	7afb      	ldrb	r3, [r7, #11]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d16e      	bne.n	8009d82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009caa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	f040 8098 	bne.w	8009de8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	689a      	ldr	r2, [r3, #8]
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d913      	bls.n	8009cec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	1ad2      	subs	r2, r2, r3
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	bf28      	it	cs
 8009cde:	4613      	movcs	r3, r2
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f001 f922 	bl	800af2e <USBD_CtlContinueRx>
 8009cea:	e07d      	b.n	8009de8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009cf2:	f003 031f 	and.w	r3, r3, #31
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d014      	beq.n	8009d24 <USBD_LL_DataOutStage+0x98>
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d81d      	bhi.n	8009d3a <USBD_LL_DataOutStage+0xae>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <USBD_LL_DataOutStage+0x7c>
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d003      	beq.n	8009d0e <USBD_LL_DataOutStage+0x82>
 8009d06:	e018      	b.n	8009d3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	75bb      	strb	r3, [r7, #22]
            break;
 8009d0c:	e018      	b.n	8009d40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	4619      	mov	r1, r3
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f000 f9d2 	bl	800a0c2 <USBD_CoreFindIF>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	75bb      	strb	r3, [r7, #22]
            break;
 8009d22:	e00d      	b.n	8009d40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f000 f9d4 	bl	800a0dc <USBD_CoreFindEP>
 8009d34:	4603      	mov	r3, r0
 8009d36:	75bb      	strb	r3, [r7, #22]
            break;
 8009d38:	e002      	b.n	8009d40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	75bb      	strb	r3, [r7, #22]
            break;
 8009d3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009d40:	7dbb      	ldrb	r3, [r7, #22]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d119      	bne.n	8009d7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	d113      	bne.n	8009d7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009d52:	7dba      	ldrb	r2, [r7, #22]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	32ae      	adds	r2, #174	; 0xae
 8009d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00b      	beq.n	8009d7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009d62:	7dba      	ldrb	r2, [r7, #22]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009d6a:	7dba      	ldrb	r2, [r7, #22]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	32ae      	adds	r2, #174	; 0xae
 8009d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f001 f8e8 	bl	800af50 <USBD_CtlSendStatus>
 8009d80:	e032      	b.n	8009de8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009d82:	7afb      	ldrb	r3, [r7, #11]
 8009d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 f9a5 	bl	800a0dc <USBD_CoreFindEP>
 8009d92:	4603      	mov	r3, r0
 8009d94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d96:	7dbb      	ldrb	r3, [r7, #22]
 8009d98:	2bff      	cmp	r3, #255	; 0xff
 8009d9a:	d025      	beq.n	8009de8 <USBD_LL_DataOutStage+0x15c>
 8009d9c:	7dbb      	ldrb	r3, [r7, #22]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d122      	bne.n	8009de8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	d117      	bne.n	8009dde <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009dae:	7dba      	ldrb	r2, [r7, #22]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	32ae      	adds	r2, #174	; 0xae
 8009db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00f      	beq.n	8009dde <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009dbe:	7dba      	ldrb	r2, [r7, #22]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009dc6:	7dba      	ldrb	r2, [r7, #22]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	32ae      	adds	r2, #174	; 0xae
 8009dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	7afa      	ldrb	r2, [r7, #11]
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	4798      	blx	r3
 8009dda:	4603      	mov	r3, r0
 8009ddc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
 8009de6:	e000      	b.n	8009dea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b086      	sub	sp, #24
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	607a      	str	r2, [r7, #4]
 8009dfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009e00:	7afb      	ldrb	r3, [r7, #11]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d16f      	bne.n	8009ee6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3314      	adds	r3, #20
 8009e0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d15a      	bne.n	8009ecc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	689a      	ldr	r2, [r3, #8]
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d914      	bls.n	8009e4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	689a      	ldr	r2, [r3, #8]
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	1ad2      	subs	r2, r2, r3
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	461a      	mov	r2, r3
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f001 f84a 	bl	800aed2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e3e:	2300      	movs	r3, #0
 8009e40:	2200      	movs	r2, #0
 8009e42:	2100      	movs	r1, #0
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f001 fddd 	bl	800ba04 <USBD_LL_PrepareReceive>
 8009e4a:	e03f      	b.n	8009ecc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d11c      	bne.n	8009e92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d316      	bcc.n	8009e92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d20f      	bcs.n	8009e92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e72:	2200      	movs	r2, #0
 8009e74:	2100      	movs	r1, #0
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f001 f82b 	bl	800aed2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e84:	2300      	movs	r3, #0
 8009e86:	2200      	movs	r2, #0
 8009e88:	2100      	movs	r1, #0
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f001 fdba 	bl	800ba04 <USBD_LL_PrepareReceive>
 8009e90:	e01c      	b.n	8009ecc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d10f      	bne.n	8009ebe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d009      	beq.n	8009ebe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ebe:	2180      	movs	r1, #128	; 0x80
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f001 fc97 	bl	800b7f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f001 f855 	bl	800af76 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d03a      	beq.n	8009f4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7ff fe42 	bl	8009b60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ee4:	e032      	b.n	8009f4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009ee6:	7afb      	ldrb	r3, [r7, #11]
 8009ee8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	4619      	mov	r1, r3
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 f8f3 	bl	800a0dc <USBD_CoreFindEP>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	2bff      	cmp	r3, #255	; 0xff
 8009efe:	d025      	beq.n	8009f4c <USBD_LL_DataInStage+0x15a>
 8009f00:	7dfb      	ldrb	r3, [r7, #23]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d122      	bne.n	8009f4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b03      	cmp	r3, #3
 8009f10:	d11c      	bne.n	8009f4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009f12:	7dfa      	ldrb	r2, [r7, #23]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	32ae      	adds	r2, #174	; 0xae
 8009f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d014      	beq.n	8009f4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009f22:	7dfa      	ldrb	r2, [r7, #23]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009f2a:	7dfa      	ldrb	r2, [r7, #23]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	32ae      	adds	r2, #174	; 0xae
 8009f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	7afa      	ldrb	r2, [r7, #11]
 8009f38:	4611      	mov	r1, r2
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	4798      	blx	r3
 8009f3e:	4603      	mov	r3, r0
 8009f40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009f42:	7dbb      	ldrb	r3, [r7, #22]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009f48:	7dbb      	ldrb	r3, [r7, #22]
 8009f4a:	e000      	b.n	8009f4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d014      	beq.n	8009fbc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00e      	beq.n	8009fbc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	6852      	ldr	r2, [r2, #4]
 8009faa:	b2d2      	uxtb	r2, r2
 8009fac:	4611      	mov	r1, r2
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	4798      	blx	r3
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fbc:	2340      	movs	r3, #64	; 0x40
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 fba2 	bl	800b70c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2240      	movs	r2, #64	; 0x40
 8009fd4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fd8:	2340      	movs	r3, #64	; 0x40
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2180      	movs	r1, #128	; 0x80
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f001 fb94 	bl	800b70c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2240      	movs	r2, #64	; 0x40
 8009fee:	621a      	str	r2, [r3, #32]

  return ret;
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b083      	sub	sp, #12
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	460b      	mov	r3, r1
 800a004:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	78fa      	ldrb	r2, [r7, #3]
 800a00a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b083      	sub	sp, #12
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d006      	beq.n	800a03c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a034:	b2da      	uxtb	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2204      	movs	r2, #4
 800a040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a060:	b2db      	uxtb	r3, r3
 800a062:	2b04      	cmp	r3, #4
 800a064:	d106      	bne.n	800a074 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b082      	sub	sp, #8
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b03      	cmp	r3, #3
 800a094:	d110      	bne.n	800a0b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00b      	beq.n	800a0b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d005      	beq.n	800a0b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b2:	69db      	ldr	r3, [r3, #28]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a0ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a0e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b086      	sub	sp, #24
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	460b      	mov	r3, r1
 800a100:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a10a:	2300      	movs	r3, #0
 800a10c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	885b      	ldrh	r3, [r3, #2]
 800a112:	b29a      	uxth	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	b29b      	uxth	r3, r3
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d920      	bls.n	800a160 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	b29b      	uxth	r3, r3
 800a124:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a126:	e013      	b.n	800a150 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a128:	f107 030a 	add.w	r3, r7, #10
 800a12c:	4619      	mov	r1, r3
 800a12e:	6978      	ldr	r0, [r7, #20]
 800a130:	f000 f81b 	bl	800a16a <USBD_GetNextDesc>
 800a134:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	785b      	ldrb	r3, [r3, #1]
 800a13a:	2b05      	cmp	r3, #5
 800a13c:	d108      	bne.n	800a150 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	789b      	ldrb	r3, [r3, #2]
 800a146:	78fa      	ldrb	r2, [r7, #3]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d008      	beq.n	800a15e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a14c:	2300      	movs	r3, #0
 800a14e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	885b      	ldrh	r3, [r3, #2]
 800a154:	b29a      	uxth	r2, r3
 800a156:	897b      	ldrh	r3, [r7, #10]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d8e5      	bhi.n	800a128 <USBD_GetEpDesc+0x32>
 800a15c:	e000      	b.n	800a160 <USBD_GetEpDesc+0x6a>
          break;
 800a15e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a160:	693b      	ldr	r3, [r7, #16]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a16a:	b480      	push	{r7}
 800a16c:	b085      	sub	sp, #20
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	881a      	ldrh	r2, [r3, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	b29b      	uxth	r3, r3
 800a182:	4413      	add	r3, r2
 800a184:	b29a      	uxth	r2, r3
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	461a      	mov	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4413      	add	r3, r2
 800a194:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a196:	68fb      	ldr	r3, [r7, #12]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a1c2:	8a3b      	ldrh	r3, [r7, #16]
 800a1c4:	021b      	lsls	r3, r3, #8
 800a1c6:	b21a      	sxth	r2, r3
 800a1c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	b21b      	sxth	r3, r3
 800a1d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a1d2:	89fb      	ldrh	r3, [r7, #14]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	371c      	adds	r7, #28
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1f6:	2b40      	cmp	r3, #64	; 0x40
 800a1f8:	d005      	beq.n	800a206 <USBD_StdDevReq+0x26>
 800a1fa:	2b40      	cmp	r3, #64	; 0x40
 800a1fc:	d857      	bhi.n	800a2ae <USBD_StdDevReq+0xce>
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00f      	beq.n	800a222 <USBD_StdDevReq+0x42>
 800a202:	2b20      	cmp	r3, #32
 800a204:	d153      	bne.n	800a2ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	32ae      	adds	r2, #174	; 0xae
 800a210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	4798      	blx	r3
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]
      break;
 800a220:	e04a      	b.n	800a2b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	2b09      	cmp	r3, #9
 800a228:	d83b      	bhi.n	800a2a2 <USBD_StdDevReq+0xc2>
 800a22a:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <USBD_StdDevReq+0x50>)
 800a22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a230:	0800a285 	.word	0x0800a285
 800a234:	0800a299 	.word	0x0800a299
 800a238:	0800a2a3 	.word	0x0800a2a3
 800a23c:	0800a28f 	.word	0x0800a28f
 800a240:	0800a2a3 	.word	0x0800a2a3
 800a244:	0800a263 	.word	0x0800a263
 800a248:	0800a259 	.word	0x0800a259
 800a24c:	0800a2a3 	.word	0x0800a2a3
 800a250:	0800a27b 	.word	0x0800a27b
 800a254:	0800a26d 	.word	0x0800a26d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fa3c 	bl	800a6d8 <USBD_GetDescriptor>
          break;
 800a260:	e024      	b.n	800a2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fbcb 	bl	800aa00 <USBD_SetAddress>
          break;
 800a26a:	e01f      	b.n	800a2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fc0a 	bl	800aa88 <USBD_SetConfig>
 800a274:	4603      	mov	r3, r0
 800a276:	73fb      	strb	r3, [r7, #15]
          break;
 800a278:	e018      	b.n	800a2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fcad 	bl	800abdc <USBD_GetConfig>
          break;
 800a282:	e013      	b.n	800a2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fcde 	bl	800ac48 <USBD_GetStatus>
          break;
 800a28c:	e00e      	b.n	800a2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fd0d 	bl	800acb0 <USBD_SetFeature>
          break;
 800a296:	e009      	b.n	800a2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fd31 	bl	800ad02 <USBD_ClrFeature>
          break;
 800a2a0:	e004      	b.n	800a2ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fd88 	bl	800adba <USBD_CtlError>
          break;
 800a2aa:	bf00      	nop
      }
      break;
 800a2ac:	e004      	b.n	800a2b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fd82 	bl	800adba <USBD_CtlError>
      break;
 800a2b6:	bf00      	nop
  }

  return ret;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop

0800a2c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2da:	2b40      	cmp	r3, #64	; 0x40
 800a2dc:	d005      	beq.n	800a2ea <USBD_StdItfReq+0x26>
 800a2de:	2b40      	cmp	r3, #64	; 0x40
 800a2e0:	d852      	bhi.n	800a388 <USBD_StdItfReq+0xc4>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <USBD_StdItfReq+0x26>
 800a2e6:	2b20      	cmp	r3, #32
 800a2e8:	d14e      	bne.n	800a388 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d840      	bhi.n	800a37a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	889b      	ldrh	r3, [r3, #4]
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d836      	bhi.n	800a370 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	889b      	ldrh	r3, [r3, #4]
 800a306:	b2db      	uxtb	r3, r3
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7ff fed9 	bl	800a0c2 <USBD_CoreFindIF>
 800a310:	4603      	mov	r3, r0
 800a312:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	2bff      	cmp	r3, #255	; 0xff
 800a318:	d01d      	beq.n	800a356 <USBD_StdItfReq+0x92>
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d11a      	bne.n	800a356 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a320:	7bba      	ldrb	r2, [r7, #14]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	32ae      	adds	r2, #174	; 0xae
 800a326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00f      	beq.n	800a350 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a330:	7bba      	ldrb	r2, [r7, #14]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a338:	7bba      	ldrb	r2, [r7, #14]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	32ae      	adds	r2, #174	; 0xae
 800a33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	4798      	blx	r3
 800a34a:	4603      	mov	r3, r0
 800a34c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a34e:	e004      	b.n	800a35a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a350:	2303      	movs	r3, #3
 800a352:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a354:	e001      	b.n	800a35a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a356:	2303      	movs	r3, #3
 800a358:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	88db      	ldrh	r3, [r3, #6]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d110      	bne.n	800a384 <USBD_StdItfReq+0xc0>
 800a362:	7bfb      	ldrb	r3, [r7, #15]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10d      	bne.n	800a384 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fdf1 	bl	800af50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a36e:	e009      	b.n	800a384 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fd21 	bl	800adba <USBD_CtlError>
          break;
 800a378:	e004      	b.n	800a384 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fd1c 	bl	800adba <USBD_CtlError>
          break;
 800a382:	e000      	b.n	800a386 <USBD_StdItfReq+0xc2>
          break;
 800a384:	bf00      	nop
      }
      break;
 800a386:	e004      	b.n	800a392 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fd15 	bl	800adba <USBD_CtlError>
      break;
 800a390:	bf00      	nop
  }

  return ret;
 800a392:	7bfb      	ldrb	r3, [r7, #15]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	889b      	ldrh	r3, [r3, #4]
 800a3ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3b8:	2b40      	cmp	r3, #64	; 0x40
 800a3ba:	d007      	beq.n	800a3cc <USBD_StdEPReq+0x30>
 800a3bc:	2b40      	cmp	r3, #64	; 0x40
 800a3be:	f200 817f 	bhi.w	800a6c0 <USBD_StdEPReq+0x324>
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d02a      	beq.n	800a41c <USBD_StdEPReq+0x80>
 800a3c6:	2b20      	cmp	r3, #32
 800a3c8:	f040 817a 	bne.w	800a6c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a3cc:	7bbb      	ldrb	r3, [r7, #14]
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f7ff fe83 	bl	800a0dc <USBD_CoreFindEP>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3da:	7b7b      	ldrb	r3, [r7, #13]
 800a3dc:	2bff      	cmp	r3, #255	; 0xff
 800a3de:	f000 8174 	beq.w	800a6ca <USBD_StdEPReq+0x32e>
 800a3e2:	7b7b      	ldrb	r3, [r7, #13]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f040 8170 	bne.w	800a6ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a3ea:	7b7a      	ldrb	r2, [r7, #13]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a3f2:	7b7a      	ldrb	r2, [r7, #13]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	32ae      	adds	r2, #174	; 0xae
 800a3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 8163 	beq.w	800a6ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a404:	7b7a      	ldrb	r2, [r7, #13]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	32ae      	adds	r2, #174	; 0xae
 800a40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	4798      	blx	r3
 800a416:	4603      	mov	r3, r0
 800a418:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a41a:	e156      	b.n	800a6ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	785b      	ldrb	r3, [r3, #1]
 800a420:	2b03      	cmp	r3, #3
 800a422:	d008      	beq.n	800a436 <USBD_StdEPReq+0x9a>
 800a424:	2b03      	cmp	r3, #3
 800a426:	f300 8145 	bgt.w	800a6b4 <USBD_StdEPReq+0x318>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 809b 	beq.w	800a566 <USBD_StdEPReq+0x1ca>
 800a430:	2b01      	cmp	r3, #1
 800a432:	d03c      	beq.n	800a4ae <USBD_StdEPReq+0x112>
 800a434:	e13e      	b.n	800a6b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d002      	beq.n	800a448 <USBD_StdEPReq+0xac>
 800a442:	2b03      	cmp	r3, #3
 800a444:	d016      	beq.n	800a474 <USBD_StdEPReq+0xd8>
 800a446:	e02c      	b.n	800a4a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a448:	7bbb      	ldrb	r3, [r7, #14]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00d      	beq.n	800a46a <USBD_StdEPReq+0xce>
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
 800a450:	2b80      	cmp	r3, #128	; 0x80
 800a452:	d00a      	beq.n	800a46a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a454:	7bbb      	ldrb	r3, [r7, #14]
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f001 f9cb 	bl	800b7f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a45e:	2180      	movs	r1, #128	; 0x80
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f001 f9c7 	bl	800b7f4 <USBD_LL_StallEP>
 800a466:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a468:	e020      	b.n	800a4ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fca4 	bl	800adba <USBD_CtlError>
              break;
 800a472:	e01b      	b.n	800a4ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	885b      	ldrh	r3, [r3, #2]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10e      	bne.n	800a49a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a47c:	7bbb      	ldrb	r3, [r7, #14]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00b      	beq.n	800a49a <USBD_StdEPReq+0xfe>
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	2b80      	cmp	r3, #128	; 0x80
 800a486:	d008      	beq.n	800a49a <USBD_StdEPReq+0xfe>
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	88db      	ldrh	r3, [r3, #6]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d104      	bne.n	800a49a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a490:	7bbb      	ldrb	r3, [r7, #14]
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f001 f9ad 	bl	800b7f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fd58 	bl	800af50 <USBD_CtlSendStatus>

              break;
 800a4a0:	e004      	b.n	800a4ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fc88 	bl	800adba <USBD_CtlError>
              break;
 800a4aa:	bf00      	nop
          }
          break;
 800a4ac:	e107      	b.n	800a6be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d002      	beq.n	800a4c0 <USBD_StdEPReq+0x124>
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	d016      	beq.n	800a4ec <USBD_StdEPReq+0x150>
 800a4be:	e04b      	b.n	800a558 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00d      	beq.n	800a4e2 <USBD_StdEPReq+0x146>
 800a4c6:	7bbb      	ldrb	r3, [r7, #14]
 800a4c8:	2b80      	cmp	r3, #128	; 0x80
 800a4ca:	d00a      	beq.n	800a4e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4cc:	7bbb      	ldrb	r3, [r7, #14]
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f001 f98f 	bl	800b7f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4d6:	2180      	movs	r1, #128	; 0x80
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f001 f98b 	bl	800b7f4 <USBD_LL_StallEP>
 800a4de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4e0:	e040      	b.n	800a564 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fc68 	bl	800adba <USBD_CtlError>
              break;
 800a4ea:	e03b      	b.n	800a564 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	885b      	ldrh	r3, [r3, #2]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d136      	bne.n	800a562 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a4f4:	7bbb      	ldrb	r3, [r7, #14]
 800a4f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d004      	beq.n	800a508 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a4fe:	7bbb      	ldrb	r3, [r7, #14]
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f001 f9ac 	bl	800b860 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fd21 	bl	800af50 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a50e:	7bbb      	ldrb	r3, [r7, #14]
 800a510:	4619      	mov	r1, r3
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7ff fde2 	bl	800a0dc <USBD_CoreFindEP>
 800a518:	4603      	mov	r3, r0
 800a51a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a51c:	7b7b      	ldrb	r3, [r7, #13]
 800a51e:	2bff      	cmp	r3, #255	; 0xff
 800a520:	d01f      	beq.n	800a562 <USBD_StdEPReq+0x1c6>
 800a522:	7b7b      	ldrb	r3, [r7, #13]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d11c      	bne.n	800a562 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a528:	7b7a      	ldrb	r2, [r7, #13]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a530:	7b7a      	ldrb	r2, [r7, #13]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	32ae      	adds	r2, #174	; 0xae
 800a536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d010      	beq.n	800a562 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a540:	7b7a      	ldrb	r2, [r7, #13]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	32ae      	adds	r2, #174	; 0xae
 800a546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	4798      	blx	r3
 800a552:	4603      	mov	r3, r0
 800a554:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a556:	e004      	b.n	800a562 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fc2d 	bl	800adba <USBD_CtlError>
              break;
 800a560:	e000      	b.n	800a564 <USBD_StdEPReq+0x1c8>
              break;
 800a562:	bf00      	nop
          }
          break;
 800a564:	e0ab      	b.n	800a6be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d002      	beq.n	800a578 <USBD_StdEPReq+0x1dc>
 800a572:	2b03      	cmp	r3, #3
 800a574:	d032      	beq.n	800a5dc <USBD_StdEPReq+0x240>
 800a576:	e097      	b.n	800a6a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d007      	beq.n	800a58e <USBD_StdEPReq+0x1f2>
 800a57e:	7bbb      	ldrb	r3, [r7, #14]
 800a580:	2b80      	cmp	r3, #128	; 0x80
 800a582:	d004      	beq.n	800a58e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fc17 	bl	800adba <USBD_CtlError>
                break;
 800a58c:	e091      	b.n	800a6b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a58e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a592:	2b00      	cmp	r3, #0
 800a594:	da0b      	bge.n	800a5ae <USBD_StdEPReq+0x212>
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a59c:	4613      	mov	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	3310      	adds	r3, #16
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	e00b      	b.n	800a5c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fc61 	bl	800ae9c <USBD_CtlSendData>
              break;
 800a5da:	e06a      	b.n	800a6b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a5dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	da11      	bge.n	800a608 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	f003 020f 	and.w	r2, r3, #15
 800a5ea:	6879      	ldr	r1, [r7, #4]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	440b      	add	r3, r1
 800a5f6:	3324      	adds	r3, #36	; 0x24
 800a5f8:	881b      	ldrh	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d117      	bne.n	800a62e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fbda 	bl	800adba <USBD_CtlError>
                  break;
 800a606:	e054      	b.n	800a6b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a608:	7bbb      	ldrb	r3, [r7, #14]
 800a60a:	f003 020f 	and.w	r2, r3, #15
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	4613      	mov	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4413      	add	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	440b      	add	r3, r1
 800a61a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d104      	bne.n	800a62e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fbc7 	bl	800adba <USBD_CtlError>
                  break;
 800a62c:	e041      	b.n	800a6b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a62e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a632:	2b00      	cmp	r3, #0
 800a634:	da0b      	bge.n	800a64e <USBD_StdEPReq+0x2b2>
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a63c:	4613      	mov	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	3310      	adds	r3, #16
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	4413      	add	r3, r2
 800a64a:	3304      	adds	r3, #4
 800a64c:	e00b      	b.n	800a666 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a64e:	7bbb      	ldrb	r3, [r7, #14]
 800a650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a654:	4613      	mov	r3, r2
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	4413      	add	r3, r2
 800a664:	3304      	adds	r3, #4
 800a666:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a668:	7bbb      	ldrb	r3, [r7, #14]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d002      	beq.n	800a674 <USBD_StdEPReq+0x2d8>
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	2b80      	cmp	r3, #128	; 0x80
 800a672:	d103      	bne.n	800a67c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2200      	movs	r2, #0
 800a678:	601a      	str	r2, [r3, #0]
 800a67a:	e00e      	b.n	800a69a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 f923 	bl	800b8cc <USBD_LL_IsStallEP>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d003      	beq.n	800a694 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	2201      	movs	r2, #1
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	e002      	b.n	800a69a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2200      	movs	r2, #0
 800a698:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	2202      	movs	r2, #2
 800a69e:	4619      	mov	r1, r3
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fbfb 	bl	800ae9c <USBD_CtlSendData>
              break;
 800a6a6:	e004      	b.n	800a6b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fb85 	bl	800adba <USBD_CtlError>
              break;
 800a6b0:	bf00      	nop
          }
          break;
 800a6b2:	e004      	b.n	800a6be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fb7f 	bl	800adba <USBD_CtlError>
          break;
 800a6bc:	bf00      	nop
      }
      break;
 800a6be:	e005      	b.n	800a6cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a6c0:	6839      	ldr	r1, [r7, #0]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fb79 	bl	800adba <USBD_CtlError>
      break;
 800a6c8:	e000      	b.n	800a6cc <USBD_StdEPReq+0x330>
      break;
 800a6ca:	bf00      	nop
  }

  return ret;
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
	...

0800a6d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	885b      	ldrh	r3, [r3, #2]
 800a6f2:	0a1b      	lsrs	r3, r3, #8
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	2b0e      	cmp	r3, #14
 800a6fa:	f200 8152 	bhi.w	800a9a2 <USBD_GetDescriptor+0x2ca>
 800a6fe:	a201      	add	r2, pc, #4	; (adr r2, 800a704 <USBD_GetDescriptor+0x2c>)
 800a700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a704:	0800a775 	.word	0x0800a775
 800a708:	0800a78d 	.word	0x0800a78d
 800a70c:	0800a7cd 	.word	0x0800a7cd
 800a710:	0800a9a3 	.word	0x0800a9a3
 800a714:	0800a9a3 	.word	0x0800a9a3
 800a718:	0800a943 	.word	0x0800a943
 800a71c:	0800a96f 	.word	0x0800a96f
 800a720:	0800a9a3 	.word	0x0800a9a3
 800a724:	0800a9a3 	.word	0x0800a9a3
 800a728:	0800a9a3 	.word	0x0800a9a3
 800a72c:	0800a9a3 	.word	0x0800a9a3
 800a730:	0800a9a3 	.word	0x0800a9a3
 800a734:	0800a9a3 	.word	0x0800a9a3
 800a738:	0800a9a3 	.word	0x0800a9a3
 800a73c:	0800a741 	.word	0x0800a741
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a746:	69db      	ldr	r3, [r3, #28]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00b      	beq.n	800a764 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	7c12      	ldrb	r2, [r2, #16]
 800a758:	f107 0108 	add.w	r1, r7, #8
 800a75c:	4610      	mov	r0, r2
 800a75e:	4798      	blx	r3
 800a760:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a762:	e126      	b.n	800a9b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fb27 	bl	800adba <USBD_CtlError>
        err++;
 800a76c:	7afb      	ldrb	r3, [r7, #11]
 800a76e:	3301      	adds	r3, #1
 800a770:	72fb      	strb	r3, [r7, #11]
      break;
 800a772:	e11e      	b.n	800a9b2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	7c12      	ldrb	r2, [r2, #16]
 800a780:	f107 0108 	add.w	r1, r7, #8
 800a784:	4610      	mov	r0, r2
 800a786:	4798      	blx	r3
 800a788:	60f8      	str	r0, [r7, #12]
      break;
 800a78a:	e112      	b.n	800a9b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	7c1b      	ldrb	r3, [r3, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10d      	bne.n	800a7b0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a79c:	f107 0208 	add.w	r2, r7, #8
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	4798      	blx	r3
 800a7a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a7ae:	e100      	b.n	800a9b2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b8:	f107 0208 	add.w	r2, r7, #8
 800a7bc:	4610      	mov	r0, r2
 800a7be:	4798      	blx	r3
 800a7c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	2202      	movs	r2, #2
 800a7c8:	701a      	strb	r2, [r3, #0]
      break;
 800a7ca:	e0f2      	b.n	800a9b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	885b      	ldrh	r3, [r3, #2]
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b05      	cmp	r3, #5
 800a7d4:	f200 80ac 	bhi.w	800a930 <USBD_GetDescriptor+0x258>
 800a7d8:	a201      	add	r2, pc, #4	; (adr r2, 800a7e0 <USBD_GetDescriptor+0x108>)
 800a7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7de:	bf00      	nop
 800a7e0:	0800a7f9 	.word	0x0800a7f9
 800a7e4:	0800a82d 	.word	0x0800a82d
 800a7e8:	0800a861 	.word	0x0800a861
 800a7ec:	0800a895 	.word	0x0800a895
 800a7f0:	0800a8c9 	.word	0x0800a8c9
 800a7f4:	0800a8fd 	.word	0x0800a8fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00b      	beq.n	800a81c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	7c12      	ldrb	r2, [r2, #16]
 800a810:	f107 0108 	add.w	r1, r7, #8
 800a814:	4610      	mov	r0, r2
 800a816:	4798      	blx	r3
 800a818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a81a:	e091      	b.n	800a940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 facb 	bl	800adba <USBD_CtlError>
            err++;
 800a824:	7afb      	ldrb	r3, [r7, #11]
 800a826:	3301      	adds	r3, #1
 800a828:	72fb      	strb	r3, [r7, #11]
          break;
 800a82a:	e089      	b.n	800a940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00b      	beq.n	800a850 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	7c12      	ldrb	r2, [r2, #16]
 800a844:	f107 0108 	add.w	r1, r7, #8
 800a848:	4610      	mov	r0, r2
 800a84a:	4798      	blx	r3
 800a84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a84e:	e077      	b.n	800a940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fab1 	bl	800adba <USBD_CtlError>
            err++;
 800a858:	7afb      	ldrb	r3, [r7, #11]
 800a85a:	3301      	adds	r3, #1
 800a85c:	72fb      	strb	r3, [r7, #11]
          break;
 800a85e:	e06f      	b.n	800a940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00b      	beq.n	800a884 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	7c12      	ldrb	r2, [r2, #16]
 800a878:	f107 0108 	add.w	r1, r7, #8
 800a87c:	4610      	mov	r0, r2
 800a87e:	4798      	blx	r3
 800a880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a882:	e05d      	b.n	800a940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fa97 	bl	800adba <USBD_CtlError>
            err++;
 800a88c:	7afb      	ldrb	r3, [r7, #11]
 800a88e:	3301      	adds	r3, #1
 800a890:	72fb      	strb	r3, [r7, #11]
          break;
 800a892:	e055      	b.n	800a940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00b      	beq.n	800a8b8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	7c12      	ldrb	r2, [r2, #16]
 800a8ac:	f107 0108 	add.w	r1, r7, #8
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	4798      	blx	r3
 800a8b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8b6:	e043      	b.n	800a940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8b8:	6839      	ldr	r1, [r7, #0]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fa7d 	bl	800adba <USBD_CtlError>
            err++;
 800a8c0:	7afb      	ldrb	r3, [r7, #11]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a8c6:	e03b      	b.n	800a940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ce:	695b      	ldr	r3, [r3, #20]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00b      	beq.n	800a8ec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	7c12      	ldrb	r2, [r2, #16]
 800a8e0:	f107 0108 	add.w	r1, r7, #8
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	4798      	blx	r3
 800a8e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8ea:	e029      	b.n	800a940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 fa63 	bl	800adba <USBD_CtlError>
            err++;
 800a8f4:	7afb      	ldrb	r3, [r7, #11]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a8fa:	e021      	b.n	800a940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00b      	beq.n	800a920 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a90e:	699b      	ldr	r3, [r3, #24]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	7c12      	ldrb	r2, [r2, #16]
 800a914:	f107 0108 	add.w	r1, r7, #8
 800a918:	4610      	mov	r0, r2
 800a91a:	4798      	blx	r3
 800a91c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a91e:	e00f      	b.n	800a940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a920:	6839      	ldr	r1, [r7, #0]
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fa49 	bl	800adba <USBD_CtlError>
            err++;
 800a928:	7afb      	ldrb	r3, [r7, #11]
 800a92a:	3301      	adds	r3, #1
 800a92c:	72fb      	strb	r3, [r7, #11]
          break;
 800a92e:	e007      	b.n	800a940 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fa41 	bl	800adba <USBD_CtlError>
          err++;
 800a938:	7afb      	ldrb	r3, [r7, #11]
 800a93a:	3301      	adds	r3, #1
 800a93c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a93e:	bf00      	nop
      }
      break;
 800a940:	e037      	b.n	800a9b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	7c1b      	ldrb	r3, [r3, #16]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d109      	bne.n	800a95e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a952:	f107 0208 	add.w	r2, r7, #8
 800a956:	4610      	mov	r0, r2
 800a958:	4798      	blx	r3
 800a95a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a95c:	e029      	b.n	800a9b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fa2a 	bl	800adba <USBD_CtlError>
        err++;
 800a966:	7afb      	ldrb	r3, [r7, #11]
 800a968:	3301      	adds	r3, #1
 800a96a:	72fb      	strb	r3, [r7, #11]
      break;
 800a96c:	e021      	b.n	800a9b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	7c1b      	ldrb	r3, [r3, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10d      	bne.n	800a992 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97e:	f107 0208 	add.w	r2, r7, #8
 800a982:	4610      	mov	r0, r2
 800a984:	4798      	blx	r3
 800a986:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	3301      	adds	r3, #1
 800a98c:	2207      	movs	r2, #7
 800a98e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a990:	e00f      	b.n	800a9b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fa10 	bl	800adba <USBD_CtlError>
        err++;
 800a99a:	7afb      	ldrb	r3, [r7, #11]
 800a99c:	3301      	adds	r3, #1
 800a99e:	72fb      	strb	r3, [r7, #11]
      break;
 800a9a0:	e007      	b.n	800a9b2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fa08 	bl	800adba <USBD_CtlError>
      err++;
 800a9aa:	7afb      	ldrb	r3, [r7, #11]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a9b0:	bf00      	nop
  }

  if (err != 0U)
 800a9b2:	7afb      	ldrb	r3, [r7, #11]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d11e      	bne.n	800a9f6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	88db      	ldrh	r3, [r3, #6]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d016      	beq.n	800a9ee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a9c0:	893b      	ldrh	r3, [r7, #8]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00e      	beq.n	800a9e4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	88da      	ldrh	r2, [r3, #6]
 800a9ca:	893b      	ldrh	r3, [r7, #8]
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	bf28      	it	cs
 800a9d0:	4613      	movcs	r3, r2
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a9d6:	893b      	ldrh	r3, [r7, #8]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	68f9      	ldr	r1, [r7, #12]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fa5d 	bl	800ae9c <USBD_CtlSendData>
 800a9e2:	e009      	b.n	800a9f8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f9e7 	bl	800adba <USBD_CtlError>
 800a9ec:	e004      	b.n	800a9f8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 faae 	bl	800af50 <USBD_CtlSendStatus>
 800a9f4:	e000      	b.n	800a9f8 <USBD_GetDescriptor+0x320>
    return;
 800a9f6:	bf00      	nop
  }
}
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop

0800aa00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	889b      	ldrh	r3, [r3, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d131      	bne.n	800aa76 <USBD_SetAddress+0x76>
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	88db      	ldrh	r3, [r3, #6]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d12d      	bne.n	800aa76 <USBD_SetAddress+0x76>
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	885b      	ldrh	r3, [r3, #2]
 800aa1e:	2b7f      	cmp	r3, #127	; 0x7f
 800aa20:	d829      	bhi.n	800aa76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	885b      	ldrh	r3, [r3, #2]
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d104      	bne.n	800aa44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f9bc 	bl	800adba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa42:	e01d      	b.n	800aa80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	7bfa      	ldrb	r2, [r7, #15]
 800aa48:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 ff69 	bl	800b928 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fa7a 	bl	800af50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d004      	beq.n	800aa6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2202      	movs	r2, #2
 800aa66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa6a:	e009      	b.n	800aa80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa74:	e004      	b.n	800aa80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f99e 	bl	800adba <USBD_CtlError>
  }
}
 800aa7e:	bf00      	nop
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	885b      	ldrh	r3, [r3, #2]
 800aa9a:	b2da      	uxtb	r2, r3
 800aa9c:	4b4e      	ldr	r3, [pc, #312]	; (800abd8 <USBD_SetConfig+0x150>)
 800aa9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aaa0:	4b4d      	ldr	r3, [pc, #308]	; (800abd8 <USBD_SetConfig+0x150>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d905      	bls.n	800aab4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 f985 	bl	800adba <USBD_CtlError>
    return USBD_FAIL;
 800aab0:	2303      	movs	r3, #3
 800aab2:	e08c      	b.n	800abce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d002      	beq.n	800aac6 <USBD_SetConfig+0x3e>
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d029      	beq.n	800ab18 <USBD_SetConfig+0x90>
 800aac4:	e075      	b.n	800abb2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aac6:	4b44      	ldr	r3, [pc, #272]	; (800abd8 <USBD_SetConfig+0x150>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d020      	beq.n	800ab10 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aace:	4b42      	ldr	r3, [pc, #264]	; (800abd8 <USBD_SetConfig+0x150>)
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	461a      	mov	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aad8:	4b3f      	ldr	r3, [pc, #252]	; (800abd8 <USBD_SetConfig+0x150>)
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7ff f849 	bl	8009b76 <USBD_SetClassConfig>
 800aae4:	4603      	mov	r3, r0
 800aae6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d008      	beq.n	800ab00 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 f962 	bl	800adba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2202      	movs	r2, #2
 800aafa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aafe:	e065      	b.n	800abcc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fa25 	bl	800af50 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2203      	movs	r2, #3
 800ab0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab0e:	e05d      	b.n	800abcc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fa1d 	bl	800af50 <USBD_CtlSendStatus>
      break;
 800ab16:	e059      	b.n	800abcc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ab18:	4b2f      	ldr	r3, [pc, #188]	; (800abd8 <USBD_SetConfig+0x150>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d112      	bne.n	800ab46 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2202      	movs	r2, #2
 800ab24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ab28:	4b2b      	ldr	r3, [pc, #172]	; (800abd8 <USBD_SetConfig+0x150>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab32:	4b29      	ldr	r3, [pc, #164]	; (800abd8 <USBD_SetConfig+0x150>)
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7ff f838 	bl	8009bae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fa06 	bl	800af50 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab44:	e042      	b.n	800abcc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ab46:	4b24      	ldr	r3, [pc, #144]	; (800abd8 <USBD_SetConfig+0x150>)
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d02a      	beq.n	800abaa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7ff f826 	bl	8009bae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ab62:	4b1d      	ldr	r3, [pc, #116]	; (800abd8 <USBD_SetConfig+0x150>)
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab6c:	4b1a      	ldr	r3, [pc, #104]	; (800abd8 <USBD_SetConfig+0x150>)
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	4619      	mov	r1, r3
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7fe ffff 	bl	8009b76 <USBD_SetClassConfig>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00f      	beq.n	800aba2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f918 	bl	800adba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f7ff f80b 	bl	8009bae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aba0:	e014      	b.n	800abcc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f9d4 	bl	800af50 <USBD_CtlSendStatus>
      break;
 800aba8:	e010      	b.n	800abcc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f9d0 	bl	800af50 <USBD_CtlSendStatus>
      break;
 800abb0:	e00c      	b.n	800abcc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f900 	bl	800adba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800abba:	4b07      	ldr	r3, [pc, #28]	; (800abd8 <USBD_SetConfig+0x150>)
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7fe fff4 	bl	8009bae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800abc6:	2303      	movs	r3, #3
 800abc8:	73fb      	strb	r3, [r7, #15]
      break;
 800abca:	bf00      	nop
  }

  return ret;
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	200002d0 	.word	0x200002d0

0800abdc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	88db      	ldrh	r3, [r3, #6]
 800abea:	2b01      	cmp	r3, #1
 800abec:	d004      	beq.n	800abf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 f8e2 	bl	800adba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800abf6:	e023      	b.n	800ac40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	dc02      	bgt.n	800ac0a <USBD_GetConfig+0x2e>
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	dc03      	bgt.n	800ac10 <USBD_GetConfig+0x34>
 800ac08:	e015      	b.n	800ac36 <USBD_GetConfig+0x5a>
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d00b      	beq.n	800ac26 <USBD_GetConfig+0x4a>
 800ac0e:	e012      	b.n	800ac36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f93c 	bl	800ae9c <USBD_CtlSendData>
        break;
 800ac24:	e00c      	b.n	800ac40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3304      	adds	r3, #4
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f934 	bl	800ae9c <USBD_CtlSendData>
        break;
 800ac34:	e004      	b.n	800ac40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f8be 	bl	800adba <USBD_CtlError>
        break;
 800ac3e:	bf00      	nop
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d81e      	bhi.n	800ac9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	88db      	ldrh	r3, [r3, #6]
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d004      	beq.n	800ac72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f8a5 	bl	800adba <USBD_CtlError>
        break;
 800ac70:	e01a      	b.n	800aca8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d005      	beq.n	800ac8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	f043 0202 	orr.w	r2, r3, #2
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	330c      	adds	r3, #12
 800ac92:	2202      	movs	r2, #2
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f900 	bl	800ae9c <USBD_CtlSendData>
      break;
 800ac9c:	e004      	b.n	800aca8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f88a 	bl	800adba <USBD_CtlError>
      break;
 800aca6:	bf00      	nop
  }
}
 800aca8:	bf00      	nop
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	885b      	ldrh	r3, [r3, #2]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d107      	bne.n	800acd2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f940 	bl	800af50 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800acd0:	e013      	b.n	800acfa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	885b      	ldrh	r3, [r3, #2]
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d10b      	bne.n	800acf2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	889b      	ldrh	r3, [r3, #4]
 800acde:	0a1b      	lsrs	r3, r3, #8
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f930 	bl	800af50 <USBD_CtlSendStatus>
}
 800acf0:	e003      	b.n	800acfa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 f860 	bl	800adba <USBD_CtlError>
}
 800acfa:	bf00      	nop
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b082      	sub	sp, #8
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	3b01      	subs	r3, #1
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d80b      	bhi.n	800ad32 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	885b      	ldrh	r3, [r3, #2]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d10c      	bne.n	800ad3c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f910 	bl	800af50 <USBD_CtlSendStatus>
      }
      break;
 800ad30:	e004      	b.n	800ad3c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f840 	bl	800adba <USBD_CtlError>
      break;
 800ad3a:	e000      	b.n	800ad3e <USBD_ClrFeature+0x3c>
      break;
 800ad3c:	bf00      	nop
  }
}
 800ad3e:	bf00      	nop
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b084      	sub	sp, #16
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	781a      	ldrb	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	781a      	ldrb	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f7ff fa17 	bl	800a1a4 <SWAPBYTE>
 800ad76:	4603      	mov	r3, r0
 800ad78:	461a      	mov	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	3301      	adds	r3, #1
 800ad82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3301      	adds	r3, #1
 800ad88:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f7ff fa0a 	bl	800a1a4 <SWAPBYTE>
 800ad90:	4603      	mov	r3, r0
 800ad92:	461a      	mov	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3301      	adds	r3, #1
 800ada2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f7ff f9fd 	bl	800a1a4 <SWAPBYTE>
 800adaa:	4603      	mov	r3, r0
 800adac:	461a      	mov	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	80da      	strh	r2, [r3, #6]
}
 800adb2:	bf00      	nop
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b082      	sub	sp, #8
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800adc4:	2180      	movs	r1, #128	; 0x80
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fd14 	bl	800b7f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800adcc:	2100      	movs	r1, #0
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fd10 	bl	800b7f4 <USBD_LL_StallEP>
}
 800add4:	bf00      	nop
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ade8:	2300      	movs	r3, #0
 800adea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d036      	beq.n	800ae60 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800adf6:	6938      	ldr	r0, [r7, #16]
 800adf8:	f000 f836 	bl	800ae68 <USBD_GetLen>
 800adfc:	4603      	mov	r3, r0
 800adfe:	3301      	adds	r3, #1
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	005b      	lsls	r3, r3, #1
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	4413      	add	r3, r2
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	7812      	ldrb	r2, [r2, #0]
 800ae14:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	4413      	add	r3, r2
 800ae22:	2203      	movs	r2, #3
 800ae24:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ae2c:	e013      	b.n	800ae56 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ae2e:	7dfb      	ldrb	r3, [r7, #23]
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	4413      	add	r3, r2
 800ae34:	693a      	ldr	r2, [r7, #16]
 800ae36:	7812      	ldrb	r2, [r2, #0]
 800ae38:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	613b      	str	r3, [r7, #16]
    idx++;
 800ae40:	7dfb      	ldrb	r3, [r7, #23]
 800ae42:	3301      	adds	r3, #1
 800ae44:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae50:	7dfb      	ldrb	r3, [r7, #23]
 800ae52:	3301      	adds	r3, #1
 800ae54:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1e7      	bne.n	800ae2e <USBD_GetString+0x52>
 800ae5e:	e000      	b.n	800ae62 <USBD_GetString+0x86>
    return;
 800ae60:	bf00      	nop
  }
}
 800ae62:	3718      	adds	r7, #24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae70:	2300      	movs	r3, #0
 800ae72:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ae78:	e005      	b.n	800ae86 <USBD_GetLen+0x1e>
  {
    len++;
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	3301      	adds	r3, #1
 800ae84:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1f5      	bne.n	800ae7a <USBD_GetLen+0x12>
  }

  return len;
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2202      	movs	r2, #2
 800aeac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	2100      	movs	r1, #0
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 fd66 	bl	800b994 <USBD_LL_Transmit>

  return USBD_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b084      	sub	sp, #16
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	60f8      	str	r0, [r7, #12]
 800aeda:	60b9      	str	r1, [r7, #8]
 800aedc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	2100      	movs	r1, #0
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f000 fd55 	bl	800b994 <USBD_LL_Transmit>

  return USBD_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2203      	movs	r2, #3
 800af04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	2100      	movs	r1, #0
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f000 fd70 	bl	800ba04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b084      	sub	sp, #16
 800af32:	af00      	add	r7, sp, #0
 800af34:	60f8      	str	r0, [r7, #12]
 800af36:	60b9      	str	r1, [r7, #8]
 800af38:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	2100      	movs	r1, #0
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f000 fd5f 	bl	800ba04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2204      	movs	r2, #4
 800af5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af60:	2300      	movs	r3, #0
 800af62:	2200      	movs	r2, #0
 800af64:	2100      	movs	r1, #0
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fd14 	bl	800b994 <USBD_LL_Transmit>

  return USBD_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3708      	adds	r7, #8
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b082      	sub	sp, #8
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2205      	movs	r2, #5
 800af82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af86:	2300      	movs	r3, #0
 800af88:	2200      	movs	r2, #0
 800af8a:	2100      	movs	r1, #0
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fd39 	bl	800ba04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800afa0:	2200      	movs	r2, #0
 800afa2:	4912      	ldr	r1, [pc, #72]	; (800afec <MX_USB_DEVICE_Init+0x50>)
 800afa4:	4812      	ldr	r0, [pc, #72]	; (800aff0 <MX_USB_DEVICE_Init+0x54>)
 800afa6:	f7fe fd69 	bl	8009a7c <USBD_Init>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800afb0:	f7f5 fe28 	bl	8000c04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800afb4:	490f      	ldr	r1, [pc, #60]	; (800aff4 <MX_USB_DEVICE_Init+0x58>)
 800afb6:	480e      	ldr	r0, [pc, #56]	; (800aff0 <MX_USB_DEVICE_Init+0x54>)
 800afb8:	f7fe fd90 	bl	8009adc <USBD_RegisterClass>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800afc2:	f7f5 fe1f 	bl	8000c04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800afc6:	490c      	ldr	r1, [pc, #48]	; (800aff8 <MX_USB_DEVICE_Init+0x5c>)
 800afc8:	4809      	ldr	r0, [pc, #36]	; (800aff0 <MX_USB_DEVICE_Init+0x54>)
 800afca:	f7fe fc87 	bl	80098dc <USBD_CDC_RegisterInterface>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d001      	beq.n	800afd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800afd4:	f7f5 fe16 	bl	8000c04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800afd8:	4805      	ldr	r0, [pc, #20]	; (800aff0 <MX_USB_DEVICE_Init+0x54>)
 800afda:	f7fe fdb5 	bl	8009b48 <USBD_Start>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800afe4:	f7f5 fe0e 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800afe8:	bf00      	nop
 800afea:	bd80      	pop	{r7, pc}
 800afec:	200000ac 	.word	0x200000ac
 800aff0:	200002d4 	.word	0x200002d4
 800aff4:	20000018 	.word	0x20000018
 800aff8:	20000098 	.word	0x20000098

0800affc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b000:	2200      	movs	r2, #0
 800b002:	4905      	ldr	r1, [pc, #20]	; (800b018 <CDC_Init_FS+0x1c>)
 800b004:	4805      	ldr	r0, [pc, #20]	; (800b01c <CDC_Init_FS+0x20>)
 800b006:	f7fe fc83 	bl	8009910 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b00a:	4905      	ldr	r1, [pc, #20]	; (800b020 <CDC_Init_FS+0x24>)
 800b00c:	4803      	ldr	r0, [pc, #12]	; (800b01c <CDC_Init_FS+0x20>)
 800b00e:	f7fe fca1 	bl	8009954 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b012:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b014:	4618      	mov	r0, r3
 800b016:	bd80      	pop	{r7, pc}
 800b018:	200009b0 	.word	0x200009b0
 800b01c:	200002d4 	.word	0x200002d4
 800b020:	200005b0 	.word	0x200005b0

0800b024 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b024:	b480      	push	{r7}
 800b026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b028:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	6039      	str	r1, [r7, #0]
 800b03e:	71fb      	strb	r3, [r7, #7]
 800b040:	4613      	mov	r3, r2
 800b042:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b044:	79fb      	ldrb	r3, [r7, #7]
 800b046:	2b23      	cmp	r3, #35	; 0x23
 800b048:	d84a      	bhi.n	800b0e0 <CDC_Control_FS+0xac>
 800b04a:	a201      	add	r2, pc, #4	; (adr r2, 800b050 <CDC_Control_FS+0x1c>)
 800b04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b050:	0800b0e1 	.word	0x0800b0e1
 800b054:	0800b0e1 	.word	0x0800b0e1
 800b058:	0800b0e1 	.word	0x0800b0e1
 800b05c:	0800b0e1 	.word	0x0800b0e1
 800b060:	0800b0e1 	.word	0x0800b0e1
 800b064:	0800b0e1 	.word	0x0800b0e1
 800b068:	0800b0e1 	.word	0x0800b0e1
 800b06c:	0800b0e1 	.word	0x0800b0e1
 800b070:	0800b0e1 	.word	0x0800b0e1
 800b074:	0800b0e1 	.word	0x0800b0e1
 800b078:	0800b0e1 	.word	0x0800b0e1
 800b07c:	0800b0e1 	.word	0x0800b0e1
 800b080:	0800b0e1 	.word	0x0800b0e1
 800b084:	0800b0e1 	.word	0x0800b0e1
 800b088:	0800b0e1 	.word	0x0800b0e1
 800b08c:	0800b0e1 	.word	0x0800b0e1
 800b090:	0800b0e1 	.word	0x0800b0e1
 800b094:	0800b0e1 	.word	0x0800b0e1
 800b098:	0800b0e1 	.word	0x0800b0e1
 800b09c:	0800b0e1 	.word	0x0800b0e1
 800b0a0:	0800b0e1 	.word	0x0800b0e1
 800b0a4:	0800b0e1 	.word	0x0800b0e1
 800b0a8:	0800b0e1 	.word	0x0800b0e1
 800b0ac:	0800b0e1 	.word	0x0800b0e1
 800b0b0:	0800b0e1 	.word	0x0800b0e1
 800b0b4:	0800b0e1 	.word	0x0800b0e1
 800b0b8:	0800b0e1 	.word	0x0800b0e1
 800b0bc:	0800b0e1 	.word	0x0800b0e1
 800b0c0:	0800b0e1 	.word	0x0800b0e1
 800b0c4:	0800b0e1 	.word	0x0800b0e1
 800b0c8:	0800b0e1 	.word	0x0800b0e1
 800b0cc:	0800b0e1 	.word	0x0800b0e1
 800b0d0:	0800b0e1 	.word	0x0800b0e1
 800b0d4:	0800b0e1 	.word	0x0800b0e1
 800b0d8:	0800b0e1 	.word	0x0800b0e1
 800b0dc:	0800b0e1 	.word	0x0800b0e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b0e0:	bf00      	nop
  }

  return (USBD_OK);
 800b0e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b0fa:	6879      	ldr	r1, [r7, #4]
 800b0fc:	4805      	ldr	r0, [pc, #20]	; (800b114 <CDC_Receive_FS+0x24>)
 800b0fe:	f7fe fc29 	bl	8009954 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b102:	4804      	ldr	r0, [pc, #16]	; (800b114 <CDC_Receive_FS+0x24>)
 800b104:	f7fe fc84 	bl	8009a10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b108:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	200002d4 	.word	0x200002d4

0800b118 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	460b      	mov	r3, r1
 800b122:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b124:	2300      	movs	r3, #0
 800b126:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b128:	4b0d      	ldr	r3, [pc, #52]	; (800b160 <CDC_Transmit_FS+0x48>)
 800b12a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b12e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b136:	2b00      	cmp	r3, #0
 800b138:	d001      	beq.n	800b13e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b13a:	2301      	movs	r3, #1
 800b13c:	e00b      	b.n	800b156 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b13e:	887b      	ldrh	r3, [r7, #2]
 800b140:	461a      	mov	r2, r3
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	4806      	ldr	r0, [pc, #24]	; (800b160 <CDC_Transmit_FS+0x48>)
 800b146:	f7fe fbe3 	bl	8009910 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b14a:	4805      	ldr	r0, [pc, #20]	; (800b160 <CDC_Transmit_FS+0x48>)
 800b14c:	f7fe fc20 	bl	8009990 <USBD_CDC_TransmitPacket>
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b154:	7bfb      	ldrb	r3, [r7, #15]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	200002d4 	.word	0x200002d4

0800b164 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b164:	b480      	push	{r7}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4613      	mov	r3, r2
 800b170:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b176:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	371c      	adds	r7, #28
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
	...

0800b188 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	4603      	mov	r3, r0
 800b190:	6039      	str	r1, [r7, #0]
 800b192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	2212      	movs	r2, #18
 800b198:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b19a:	4b03      	ldr	r3, [pc, #12]	; (800b1a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr
 800b1a8:	200000cc 	.word	0x200000cc

0800b1ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	6039      	str	r1, [r7, #0]
 800b1b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2204      	movs	r2, #4
 800b1bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b1be:	4b03      	ldr	r3, [pc, #12]	; (800b1cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	200000ec 	.word	0x200000ec

0800b1d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	6039      	str	r1, [r7, #0]
 800b1da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b1dc:	79fb      	ldrb	r3, [r7, #7]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d105      	bne.n	800b1ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	4907      	ldr	r1, [pc, #28]	; (800b204 <USBD_FS_ProductStrDescriptor+0x34>)
 800b1e6:	4808      	ldr	r0, [pc, #32]	; (800b208 <USBD_FS_ProductStrDescriptor+0x38>)
 800b1e8:	f7ff fdf8 	bl	800addc <USBD_GetString>
 800b1ec:	e004      	b.n	800b1f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	4904      	ldr	r1, [pc, #16]	; (800b204 <USBD_FS_ProductStrDescriptor+0x34>)
 800b1f2:	4805      	ldr	r0, [pc, #20]	; (800b208 <USBD_FS_ProductStrDescriptor+0x38>)
 800b1f4:	f7ff fdf2 	bl	800addc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1f8:	4b02      	ldr	r3, [pc, #8]	; (800b204 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20000db0 	.word	0x20000db0
 800b208:	0800c4ac 	.word	0x0800c4ac

0800b20c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	4603      	mov	r3, r0
 800b214:	6039      	str	r1, [r7, #0]
 800b216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	4904      	ldr	r1, [pc, #16]	; (800b22c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b21c:	4804      	ldr	r0, [pc, #16]	; (800b230 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b21e:	f7ff fddd 	bl	800addc <USBD_GetString>
  return USBD_StrDesc;
 800b222:	4b02      	ldr	r3, [pc, #8]	; (800b22c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b224:	4618      	mov	r0, r3
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	20000db0 	.word	0x20000db0
 800b230:	0800c4c4 	.word	0x0800c4c4

0800b234 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	4603      	mov	r3, r0
 800b23c:	6039      	str	r1, [r7, #0]
 800b23e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	221a      	movs	r2, #26
 800b244:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b246:	f000 f855 	bl	800b2f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b24a:	4b02      	ldr	r3, [pc, #8]	; (800b254 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	200000f0 	.word	0x200000f0

0800b258 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	6039      	str	r1, [r7, #0]
 800b262:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b264:	79fb      	ldrb	r3, [r7, #7]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d105      	bne.n	800b276 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b26a:	683a      	ldr	r2, [r7, #0]
 800b26c:	4907      	ldr	r1, [pc, #28]	; (800b28c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b26e:	4808      	ldr	r0, [pc, #32]	; (800b290 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b270:	f7ff fdb4 	bl	800addc <USBD_GetString>
 800b274:	e004      	b.n	800b280 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	4904      	ldr	r1, [pc, #16]	; (800b28c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b27a:	4805      	ldr	r0, [pc, #20]	; (800b290 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b27c:	f7ff fdae 	bl	800addc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b280:	4b02      	ldr	r3, [pc, #8]	; (800b28c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b282:	4618      	mov	r0, r3
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	20000db0 	.word	0x20000db0
 800b290:	0800c4d8 	.word	0x0800c4d8

0800b294 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	4603      	mov	r3, r0
 800b29c:	6039      	str	r1, [r7, #0]
 800b29e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2a0:	79fb      	ldrb	r3, [r7, #7]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d105      	bne.n	800b2b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	4907      	ldr	r1, [pc, #28]	; (800b2c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b2aa:	4808      	ldr	r0, [pc, #32]	; (800b2cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b2ac:	f7ff fd96 	bl	800addc <USBD_GetString>
 800b2b0:	e004      	b.n	800b2bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	4904      	ldr	r1, [pc, #16]	; (800b2c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b2b6:	4805      	ldr	r0, [pc, #20]	; (800b2cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b2b8:	f7ff fd90 	bl	800addc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2bc:	4b02      	ldr	r3, [pc, #8]	; (800b2c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20000db0 	.word	0x20000db0
 800b2cc:	0800c4e4 	.word	0x0800c4e4

0800b2d0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	6039      	str	r1, [r7, #0]
 800b2da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	220c      	movs	r2, #12
 800b2e0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b2e2:	4b03      	ldr	r3, [pc, #12]	; (800b2f0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	200000e0 	.word	0x200000e0

0800b2f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b2fa:	4b0f      	ldr	r3, [pc, #60]	; (800b338 <Get_SerialNum+0x44>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b300:	4b0e      	ldr	r3, [pc, #56]	; (800b33c <Get_SerialNum+0x48>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b306:	4b0e      	ldr	r3, [pc, #56]	; (800b340 <Get_SerialNum+0x4c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4413      	add	r3, r2
 800b312:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d009      	beq.n	800b32e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b31a:	2208      	movs	r2, #8
 800b31c:	4909      	ldr	r1, [pc, #36]	; (800b344 <Get_SerialNum+0x50>)
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f000 f814 	bl	800b34c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b324:	2204      	movs	r2, #4
 800b326:	4908      	ldr	r1, [pc, #32]	; (800b348 <Get_SerialNum+0x54>)
 800b328:	68b8      	ldr	r0, [r7, #8]
 800b32a:	f000 f80f 	bl	800b34c <IntToUnicode>
  }
}
 800b32e:	bf00      	nop
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	1fff7590 	.word	0x1fff7590
 800b33c:	1fff7594 	.word	0x1fff7594
 800b340:	1fff7598 	.word	0x1fff7598
 800b344:	200000f2 	.word	0x200000f2
 800b348:	20000102 	.word	0x20000102

0800b34c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b087      	sub	sp, #28
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	4613      	mov	r3, r2
 800b358:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b35e:	2300      	movs	r3, #0
 800b360:	75fb      	strb	r3, [r7, #23]
 800b362:	e027      	b.n	800b3b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	0f1b      	lsrs	r3, r3, #28
 800b368:	2b09      	cmp	r3, #9
 800b36a:	d80b      	bhi.n	800b384 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	0f1b      	lsrs	r3, r3, #28
 800b370:	b2da      	uxtb	r2, r3
 800b372:	7dfb      	ldrb	r3, [r7, #23]
 800b374:	005b      	lsls	r3, r3, #1
 800b376:	4619      	mov	r1, r3
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	440b      	add	r3, r1
 800b37c:	3230      	adds	r2, #48	; 0x30
 800b37e:	b2d2      	uxtb	r2, r2
 800b380:	701a      	strb	r2, [r3, #0]
 800b382:	e00a      	b.n	800b39a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	0f1b      	lsrs	r3, r3, #28
 800b388:	b2da      	uxtb	r2, r3
 800b38a:	7dfb      	ldrb	r3, [r7, #23]
 800b38c:	005b      	lsls	r3, r3, #1
 800b38e:	4619      	mov	r1, r3
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	440b      	add	r3, r1
 800b394:	3237      	adds	r2, #55	; 0x37
 800b396:	b2d2      	uxtb	r2, r2
 800b398:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	011b      	lsls	r3, r3, #4
 800b39e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b3a0:	7dfb      	ldrb	r3, [r7, #23]
 800b3a2:	005b      	lsls	r3, r3, #1
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	75fb      	strb	r3, [r7, #23]
 800b3b4:	7dfa      	ldrb	r2, [r7, #23]
 800b3b6:	79fb      	ldrb	r3, [r7, #7]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d3d3      	bcc.n	800b364 <IntToUnicode+0x18>
  }
}
 800b3bc:	bf00      	nop
 800b3be:	bf00      	nop
 800b3c0:	371c      	adds	r7, #28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
	...

0800b3cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b096      	sub	sp, #88	; 0x58
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b3d8:	2200      	movs	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	605a      	str	r2, [r3, #4]
 800b3de:	609a      	str	r2, [r3, #8]
 800b3e0:	60da      	str	r2, [r3, #12]
 800b3e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b3e4:	f107 0310 	add.w	r3, r7, #16
 800b3e8:	2234      	movs	r2, #52	; 0x34
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f000 fbc9 	bl	800bb84 <memset>
  if(pcdHandle->Instance==USB)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a24      	ldr	r2, [pc, #144]	; (800b488 <HAL_PCD_MspInit+0xbc>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d141      	bne.n	800b480 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b3fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b400:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800b402:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800b406:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b408:	f107 0310 	add.w	r3, r7, #16
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7f9 fd1d 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b418:	f7f5 fbf4 	bl	8000c04 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b41c:	4b1b      	ldr	r3, [pc, #108]	; (800b48c <HAL_PCD_MspInit+0xc0>)
 800b41e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b420:	4a1a      	ldr	r2, [pc, #104]	; (800b48c <HAL_PCD_MspInit+0xc0>)
 800b422:	f043 0301 	orr.w	r3, r3, #1
 800b426:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b428:	4b18      	ldr	r3, [pc, #96]	; (800b48c <HAL_PCD_MspInit+0xc0>)
 800b42a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b42c:	f003 0301 	and.w	r3, r3, #1
 800b430:	60fb      	str	r3, [r7, #12]
 800b432:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b434:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b438:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b43a:	2302      	movs	r3, #2
 800b43c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b43e:	2300      	movs	r3, #0
 800b440:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b442:	2303      	movs	r3, #3
 800b444:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800b446:	230a      	movs	r3, #10
 800b448:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b44a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b44e:	4619      	mov	r1, r3
 800b450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b454:	f7f6 fef8 	bl	8002248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b458:	4b0c      	ldr	r3, [pc, #48]	; (800b48c <HAL_PCD_MspInit+0xc0>)
 800b45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b45c:	4a0b      	ldr	r2, [pc, #44]	; (800b48c <HAL_PCD_MspInit+0xc0>)
 800b45e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b462:	6593      	str	r3, [r2, #88]	; 0x58
 800b464:	4b09      	ldr	r3, [pc, #36]	; (800b48c <HAL_PCD_MspInit+0xc0>)
 800b466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b46c:	60bb      	str	r3, [r7, #8]
 800b46e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b470:	2200      	movs	r2, #0
 800b472:	2100      	movs	r1, #0
 800b474:	2043      	movs	r0, #67	; 0x43
 800b476:	f7f6 feb0 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b47a:	2043      	movs	r0, #67	; 0x43
 800b47c:	f7f6 fec9 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b480:	bf00      	nop
 800b482:	3758      	adds	r7, #88	; 0x58
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	40006800 	.word	0x40006800
 800b48c:	40021000 	.word	0x40021000

0800b490 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	f7fe fb9b 	bl	8009be2 <USBD_LL_SetupStage>
}
 800b4ac:	bf00      	nop
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800b4c6:	78fa      	ldrb	r2, [r7, #3]
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	4413      	add	r3, r2
 800b4d0:	00db      	lsls	r3, r3, #3
 800b4d2:	440b      	add	r3, r1
 800b4d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	78fb      	ldrb	r3, [r7, #3]
 800b4dc:	4619      	mov	r1, r3
 800b4de:	f7fe fbd5 	bl	8009c8c <USBD_LL_DataOutStage>
}
 800b4e2:	bf00      	nop
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800b4fc:	78fa      	ldrb	r2, [r7, #3]
 800b4fe:	6879      	ldr	r1, [r7, #4]
 800b500:	4613      	mov	r3, r2
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	4413      	add	r3, r2
 800b506:	00db      	lsls	r3, r3, #3
 800b508:	440b      	add	r3, r1
 800b50a:	333c      	adds	r3, #60	; 0x3c
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	78fb      	ldrb	r3, [r7, #3]
 800b510:	4619      	mov	r1, r3
 800b512:	f7fe fc6e 	bl	8009df2 <USBD_LL_DataInStage>
}
 800b516:	bf00      	nop
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b082      	sub	sp, #8
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fe fda8 	bl	800a082 <USBD_LL_SOF>
}
 800b532:	bf00      	nop
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b084      	sub	sp, #16
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b542:	2301      	movs	r3, #1
 800b544:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	d001      	beq.n	800b552 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b54e:	f7f5 fb59 	bl	8000c04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b558:	7bfa      	ldrb	r2, [r7, #15]
 800b55a:	4611      	mov	r1, r2
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fe fd4c 	bl	8009ffa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fe fcf4 	bl	8009f56 <USBD_LL_Reset>
}
 800b56e:	bf00      	nop
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
	...

0800b578 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b586:	4618      	mov	r0, r3
 800b588:	f7fe fd47 	bl	800a01a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d005      	beq.n	800b5a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b594:	4b04      	ldr	r3, [pc, #16]	; (800b5a8 <HAL_PCD_SuspendCallback+0x30>)
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	4a03      	ldr	r2, [pc, #12]	; (800b5a8 <HAL_PCD_SuspendCallback+0x30>)
 800b59a:	f043 0306 	orr.w	r3, r3, #6
 800b59e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b5a0:	bf00      	nop
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	e000ed00 	.word	0xe000ed00

0800b5ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d007      	beq.n	800b5cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5bc:	4b08      	ldr	r3, [pc, #32]	; (800b5e0 <HAL_PCD_ResumeCallback+0x34>)
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	4a07      	ldr	r2, [pc, #28]	; (800b5e0 <HAL_PCD_ResumeCallback+0x34>)
 800b5c2:	f023 0306 	bic.w	r3, r3, #6
 800b5c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b5c8:	f000 fab6 	bl	800bb38 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fe fd3d 	bl	800a052 <USBD_LL_Resume>
}
 800b5d8:	bf00      	nop
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	e000ed00 	.word	0xe000ed00

0800b5e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b5ec:	f7f8 fd98 	bl	8004120 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b5f0:	4a2b      	ldr	r2, [pc, #172]	; (800b6a0 <USBD_LL_Init+0xbc>)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a29      	ldr	r2, [pc, #164]	; (800b6a0 <USBD_LL_Init+0xbc>)
 800b5fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800b600:	4b27      	ldr	r3, [pc, #156]	; (800b6a0 <USBD_LL_Init+0xbc>)
 800b602:	4a28      	ldr	r2, [pc, #160]	; (800b6a4 <USBD_LL_Init+0xc0>)
 800b604:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b606:	4b26      	ldr	r3, [pc, #152]	; (800b6a0 <USBD_LL_Init+0xbc>)
 800b608:	2208      	movs	r2, #8
 800b60a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b60c:	4b24      	ldr	r3, [pc, #144]	; (800b6a0 <USBD_LL_Init+0xbc>)
 800b60e:	2202      	movs	r2, #2
 800b610:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b612:	4b23      	ldr	r3, [pc, #140]	; (800b6a0 <USBD_LL_Init+0xbc>)
 800b614:	2202      	movs	r2, #2
 800b616:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b618:	4b21      	ldr	r3, [pc, #132]	; (800b6a0 <USBD_LL_Init+0xbc>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b61e:	4b20      	ldr	r3, [pc, #128]	; (800b6a0 <USBD_LL_Init+0xbc>)
 800b620:	2200      	movs	r2, #0
 800b622:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b624:	4b1e      	ldr	r3, [pc, #120]	; (800b6a0 <USBD_LL_Init+0xbc>)
 800b626:	2200      	movs	r2, #0
 800b628:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b62a:	4b1d      	ldr	r3, [pc, #116]	; (800b6a0 <USBD_LL_Init+0xbc>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b630:	481b      	ldr	r0, [pc, #108]	; (800b6a0 <USBD_LL_Init+0xbc>)
 800b632:	f7f6 ff93 	bl	800255c <HAL_PCD_Init>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d001      	beq.n	800b640 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b63c:	f7f5 fae2 	bl	8000c04 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b646:	2318      	movs	r3, #24
 800b648:	2200      	movs	r2, #0
 800b64a:	2100      	movs	r1, #0
 800b64c:	f7f8 fc97 	bl	8003f7e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b656:	2358      	movs	r3, #88	; 0x58
 800b658:	2200      	movs	r2, #0
 800b65a:	2180      	movs	r1, #128	; 0x80
 800b65c:	f7f8 fc8f 	bl	8003f7e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b666:	23c0      	movs	r3, #192	; 0xc0
 800b668:	2200      	movs	r2, #0
 800b66a:	2181      	movs	r1, #129	; 0x81
 800b66c:	f7f8 fc87 	bl	8003f7e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b676:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b67a:	2200      	movs	r2, #0
 800b67c:	2101      	movs	r1, #1
 800b67e:	f7f8 fc7e 	bl	8003f7e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b68c:	2200      	movs	r2, #0
 800b68e:	2182      	movs	r1, #130	; 0x82
 800b690:	f7f8 fc75 	bl	8003f7e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	20000fb0 	.word	0x20000fb0
 800b6a4:	40006800 	.word	0x40006800

0800b6a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7f7 f852 	bl	8002768 <HAL_PCD_Start>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b6c8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	d816      	bhi.n	800b6fc <USBD_LL_Start+0x54>
 800b6ce:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <USBD_LL_Start+0x2c>)
 800b6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d4:	0800b6e5 	.word	0x0800b6e5
 800b6d8:	0800b6eb 	.word	0x0800b6eb
 800b6dc:	0800b6f1 	.word	0x0800b6f1
 800b6e0:	0800b6f7 	.word	0x0800b6f7
    case HAL_OK :
      usb_status = USBD_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6e8:	e00b      	b.n	800b702 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b6ee:	e008      	b.n	800b702 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6f4:	e005      	b.n	800b702 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b6fa:	e002      	b.n	800b702 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b700:	bf00      	nop
  }
  return usb_status;
 800b702:	7bfb      	ldrb	r3, [r7, #15]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	4608      	mov	r0, r1
 800b716:	4611      	mov	r1, r2
 800b718:	461a      	mov	r2, r3
 800b71a:	4603      	mov	r3, r0
 800b71c:	70fb      	strb	r3, [r7, #3]
 800b71e:	460b      	mov	r3, r1
 800b720:	70bb      	strb	r3, [r7, #2]
 800b722:	4613      	mov	r3, r2
 800b724:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b734:	78bb      	ldrb	r3, [r7, #2]
 800b736:	883a      	ldrh	r2, [r7, #0]
 800b738:	78f9      	ldrb	r1, [r7, #3]
 800b73a:	f7f7 f983 	bl	8002a44 <HAL_PCD_EP_Open>
 800b73e:	4603      	mov	r3, r0
 800b740:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b742:	7bbb      	ldrb	r3, [r7, #14]
 800b744:	2b03      	cmp	r3, #3
 800b746:	d817      	bhi.n	800b778 <USBD_LL_OpenEP+0x6c>
 800b748:	a201      	add	r2, pc, #4	; (adr r2, 800b750 <USBD_LL_OpenEP+0x44>)
 800b74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74e:	bf00      	nop
 800b750:	0800b761 	.word	0x0800b761
 800b754:	0800b767 	.word	0x0800b767
 800b758:	0800b76d 	.word	0x0800b76d
 800b75c:	0800b773 	.word	0x0800b773
    case HAL_OK :
      usb_status = USBD_OK;
 800b760:	2300      	movs	r3, #0
 800b762:	73fb      	strb	r3, [r7, #15]
    break;
 800b764:	e00b      	b.n	800b77e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b766:	2303      	movs	r3, #3
 800b768:	73fb      	strb	r3, [r7, #15]
    break;
 800b76a:	e008      	b.n	800b77e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b76c:	2301      	movs	r3, #1
 800b76e:	73fb      	strb	r3, [r7, #15]
    break;
 800b770:	e005      	b.n	800b77e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b772:	2303      	movs	r3, #3
 800b774:	73fb      	strb	r3, [r7, #15]
    break;
 800b776:	e002      	b.n	800b77e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b778:	2303      	movs	r3, #3
 800b77a:	73fb      	strb	r3, [r7, #15]
    break;
 800b77c:	bf00      	nop
  }
  return usb_status;
 800b77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	460b      	mov	r3, r1
 800b792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b794:	2300      	movs	r3, #0
 800b796:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7a2:	78fa      	ldrb	r2, [r7, #3]
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7f7 f9a9 	bl	8002afe <HAL_PCD_EP_Close>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b7b0:	7bbb      	ldrb	r3, [r7, #14]
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d816      	bhi.n	800b7e4 <USBD_LL_CloseEP+0x5c>
 800b7b6:	a201      	add	r2, pc, #4	; (adr r2, 800b7bc <USBD_LL_CloseEP+0x34>)
 800b7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7bc:	0800b7cd 	.word	0x0800b7cd
 800b7c0:	0800b7d3 	.word	0x0800b7d3
 800b7c4:	0800b7d9 	.word	0x0800b7d9
 800b7c8:	0800b7df 	.word	0x0800b7df
    case HAL_OK :
      usb_status = USBD_OK;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b7d0:	e00b      	b.n	800b7ea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b7d6:	e008      	b.n	800b7ea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	73fb      	strb	r3, [r7, #15]
    break;
 800b7dc:	e005      	b.n	800b7ea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b7de:	2303      	movs	r3, #3
 800b7e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b7e2:	e002      	b.n	800b7ea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7e8:	bf00      	nop
  }
  return usb_status;
 800b7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b804:	2300      	movs	r3, #0
 800b806:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b80e:	78fa      	ldrb	r2, [r7, #3]
 800b810:	4611      	mov	r1, r2
 800b812:	4618      	mov	r0, r3
 800b814:	f7f7 fa3b 	bl	8002c8e <HAL_PCD_EP_SetStall>
 800b818:	4603      	mov	r3, r0
 800b81a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
 800b81e:	2b03      	cmp	r3, #3
 800b820:	d816      	bhi.n	800b850 <USBD_LL_StallEP+0x5c>
 800b822:	a201      	add	r2, pc, #4	; (adr r2, 800b828 <USBD_LL_StallEP+0x34>)
 800b824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b828:	0800b839 	.word	0x0800b839
 800b82c:	0800b83f 	.word	0x0800b83f
 800b830:	0800b845 	.word	0x0800b845
 800b834:	0800b84b 	.word	0x0800b84b
    case HAL_OK :
      usb_status = USBD_OK;
 800b838:	2300      	movs	r3, #0
 800b83a:	73fb      	strb	r3, [r7, #15]
    break;
 800b83c:	e00b      	b.n	800b856 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b83e:	2303      	movs	r3, #3
 800b840:	73fb      	strb	r3, [r7, #15]
    break;
 800b842:	e008      	b.n	800b856 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b844:	2301      	movs	r3, #1
 800b846:	73fb      	strb	r3, [r7, #15]
    break;
 800b848:	e005      	b.n	800b856 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b84a:	2303      	movs	r3, #3
 800b84c:	73fb      	strb	r3, [r7, #15]
    break;
 800b84e:	e002      	b.n	800b856 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b850:	2303      	movs	r3, #3
 800b852:	73fb      	strb	r3, [r7, #15]
    break;
 800b854:	bf00      	nop
  }
  return usb_status;
 800b856:	7bfb      	ldrb	r3, [r7, #15]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b87a:	78fa      	ldrb	r2, [r7, #3]
 800b87c:	4611      	mov	r1, r2
 800b87e:	4618      	mov	r0, r3
 800b880:	f7f7 fa65 	bl	8002d4e <HAL_PCD_EP_ClrStall>
 800b884:	4603      	mov	r3, r0
 800b886:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b888:	7bbb      	ldrb	r3, [r7, #14]
 800b88a:	2b03      	cmp	r3, #3
 800b88c:	d816      	bhi.n	800b8bc <USBD_LL_ClearStallEP+0x5c>
 800b88e:	a201      	add	r2, pc, #4	; (adr r2, 800b894 <USBD_LL_ClearStallEP+0x34>)
 800b890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b894:	0800b8a5 	.word	0x0800b8a5
 800b898:	0800b8ab 	.word	0x0800b8ab
 800b89c:	0800b8b1 	.word	0x0800b8b1
 800b8a0:	0800b8b7 	.word	0x0800b8b7
    case HAL_OK :
      usb_status = USBD_OK;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a8:	e00b      	b.n	800b8c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ae:	e008      	b.n	800b8c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b4:	e005      	b.n	800b8c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ba:	e002      	b.n	800b8c2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	73fb      	strb	r3, [r7, #15]
    break;
 800b8c0:	bf00      	nop
  }
  return usb_status;
 800b8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b8e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	da0c      	bge.n	800b902 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b8e8:	78fb      	ldrb	r3, [r7, #3]
 800b8ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ee:	68f9      	ldr	r1, [r7, #12]
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4413      	add	r3, r2
 800b8f8:	00db      	lsls	r3, r3, #3
 800b8fa:	440b      	add	r3, r1
 800b8fc:	3302      	adds	r3, #2
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	e00b      	b.n	800b91a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b902:	78fb      	ldrb	r3, [r7, #3]
 800b904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b908:	68f9      	ldr	r1, [r7, #12]
 800b90a:	4613      	mov	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4413      	add	r3, r2
 800b910:	00db      	lsls	r3, r3, #3
 800b912:	440b      	add	r3, r1
 800b914:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b918:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
	...

0800b928 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b938:	2300      	movs	r3, #0
 800b93a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b942:	78fa      	ldrb	r2, [r7, #3]
 800b944:	4611      	mov	r1, r2
 800b946:	4618      	mov	r0, r3
 800b948:	f7f7 f857 	bl	80029fa <HAL_PCD_SetAddress>
 800b94c:	4603      	mov	r3, r0
 800b94e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b950:	7bbb      	ldrb	r3, [r7, #14]
 800b952:	2b03      	cmp	r3, #3
 800b954:	d816      	bhi.n	800b984 <USBD_LL_SetUSBAddress+0x5c>
 800b956:	a201      	add	r2, pc, #4	; (adr r2, 800b95c <USBD_LL_SetUSBAddress+0x34>)
 800b958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b95c:	0800b96d 	.word	0x0800b96d
 800b960:	0800b973 	.word	0x0800b973
 800b964:	0800b979 	.word	0x0800b979
 800b968:	0800b97f 	.word	0x0800b97f
    case HAL_OK :
      usb_status = USBD_OK;
 800b96c:	2300      	movs	r3, #0
 800b96e:	73fb      	strb	r3, [r7, #15]
    break;
 800b970:	e00b      	b.n	800b98a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b972:	2303      	movs	r3, #3
 800b974:	73fb      	strb	r3, [r7, #15]
    break;
 800b976:	e008      	b.n	800b98a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b978:	2301      	movs	r3, #1
 800b97a:	73fb      	strb	r3, [r7, #15]
    break;
 800b97c:	e005      	b.n	800b98a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b97e:	2303      	movs	r3, #3
 800b980:	73fb      	strb	r3, [r7, #15]
    break;
 800b982:	e002      	b.n	800b98a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b984:	2303      	movs	r3, #3
 800b986:	73fb      	strb	r3, [r7, #15]
    break;
 800b988:	bf00      	nop
  }
  return usb_status;
 800b98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	607a      	str	r2, [r7, #4]
 800b99e:	603b      	str	r3, [r7, #0]
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b9b2:	7af9      	ldrb	r1, [r7, #11]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	f7f7 f932 	bl	8002c20 <HAL_PCD_EP_Transmit>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b9c0:	7dbb      	ldrb	r3, [r7, #22]
 800b9c2:	2b03      	cmp	r3, #3
 800b9c4:	d816      	bhi.n	800b9f4 <USBD_LL_Transmit+0x60>
 800b9c6:	a201      	add	r2, pc, #4	; (adr r2, 800b9cc <USBD_LL_Transmit+0x38>)
 800b9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9cc:	0800b9dd 	.word	0x0800b9dd
 800b9d0:	0800b9e3 	.word	0x0800b9e3
 800b9d4:	0800b9e9 	.word	0x0800b9e9
 800b9d8:	0800b9ef 	.word	0x0800b9ef
    case HAL_OK :
      usb_status = USBD_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	75fb      	strb	r3, [r7, #23]
    break;
 800b9e0:	e00b      	b.n	800b9fa <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9e2:	2303      	movs	r3, #3
 800b9e4:	75fb      	strb	r3, [r7, #23]
    break;
 800b9e6:	e008      	b.n	800b9fa <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	75fb      	strb	r3, [r7, #23]
    break;
 800b9ec:	e005      	b.n	800b9fa <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9ee:	2303      	movs	r3, #3
 800b9f0:	75fb      	strb	r3, [r7, #23]
    break;
 800b9f2:	e002      	b.n	800b9fa <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	75fb      	strb	r3, [r7, #23]
    break;
 800b9f8:	bf00      	nop
  }
  return usb_status;
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	607a      	str	r2, [r7, #4]
 800ba0e:	603b      	str	r3, [r7, #0]
 800ba10:	460b      	mov	r3, r1
 800ba12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ba22:	7af9      	ldrb	r1, [r7, #11]
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	f7f7 f8b1 	bl	8002b8e <HAL_PCD_EP_Receive>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ba30:	7dbb      	ldrb	r3, [r7, #22]
 800ba32:	2b03      	cmp	r3, #3
 800ba34:	d816      	bhi.n	800ba64 <USBD_LL_PrepareReceive+0x60>
 800ba36:	a201      	add	r2, pc, #4	; (adr r2, 800ba3c <USBD_LL_PrepareReceive+0x38>)
 800ba38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3c:	0800ba4d 	.word	0x0800ba4d
 800ba40:	0800ba53 	.word	0x0800ba53
 800ba44:	0800ba59 	.word	0x0800ba59
 800ba48:	0800ba5f 	.word	0x0800ba5f
    case HAL_OK :
      usb_status = USBD_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	75fb      	strb	r3, [r7, #23]
    break;
 800ba50:	e00b      	b.n	800ba6a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba52:	2303      	movs	r3, #3
 800ba54:	75fb      	strb	r3, [r7, #23]
    break;
 800ba56:	e008      	b.n	800ba6a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	75fb      	strb	r3, [r7, #23]
    break;
 800ba5c:	e005      	b.n	800ba6a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	75fb      	strb	r3, [r7, #23]
    break;
 800ba62:	e002      	b.n	800ba6a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ba64:	2303      	movs	r3, #3
 800ba66:	75fb      	strb	r3, [r7, #23]
    break;
 800ba68:	bf00      	nop
  }
  return usb_status;
 800ba6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba86:	78fa      	ldrb	r2, [r7, #3]
 800ba88:	4611      	mov	r1, r2
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7f7 f8b0 	bl	8002bf0 <HAL_PCD_EP_GetRxCount>
 800ba90:	4603      	mov	r3, r0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3708      	adds	r7, #8
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
	...

0800ba9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	460b      	mov	r3, r1
 800baa6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800baa8:	78fb      	ldrb	r3, [r7, #3]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d002      	beq.n	800bab4 <HAL_PCDEx_LPM_Callback+0x18>
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d013      	beq.n	800bada <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bab2:	e023      	b.n	800bafc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	699b      	ldr	r3, [r3, #24]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d007      	beq.n	800bacc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800babc:	f000 f83c 	bl	800bb38 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bac0:	4b10      	ldr	r3, [pc, #64]	; (800bb04 <HAL_PCDEx_LPM_Callback+0x68>)
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	4a0f      	ldr	r2, [pc, #60]	; (800bb04 <HAL_PCDEx_LPM_Callback+0x68>)
 800bac6:	f023 0306 	bic.w	r3, r3, #6
 800baca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fabd 	bl	800a052 <USBD_LL_Resume>
    break;
 800bad8:	e010      	b.n	800bafc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7fe fa9a 	bl	800a01a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	699b      	ldr	r3, [r3, #24]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d005      	beq.n	800bafa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800baee:	4b05      	ldr	r3, [pc, #20]	; (800bb04 <HAL_PCDEx_LPM_Callback+0x68>)
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	4a04      	ldr	r2, [pc, #16]	; (800bb04 <HAL_PCDEx_LPM_Callback+0x68>)
 800baf4:	f043 0306 	orr.w	r3, r3, #6
 800baf8:	6113      	str	r3, [r2, #16]
    break;
 800bafa:	bf00      	nop
}
 800bafc:	bf00      	nop
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	e000ed00 	.word	0xe000ed00

0800bb08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb10:	4b03      	ldr	r3, [pc, #12]	; (800bb20 <USBD_static_malloc+0x18>)
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	200012a8 	.word	0x200012a8

0800bb24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]

}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bb3c:	f7f4 fe80 	bl	8000840 <SystemClock_Config>
}
 800bb40:	bf00      	nop
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <siprintf>:
 800bb44:	b40e      	push	{r1, r2, r3}
 800bb46:	b500      	push	{lr}
 800bb48:	b09c      	sub	sp, #112	; 0x70
 800bb4a:	ab1d      	add	r3, sp, #116	; 0x74
 800bb4c:	9002      	str	r0, [sp, #8]
 800bb4e:	9006      	str	r0, [sp, #24]
 800bb50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb54:	4809      	ldr	r0, [pc, #36]	; (800bb7c <siprintf+0x38>)
 800bb56:	9107      	str	r1, [sp, #28]
 800bb58:	9104      	str	r1, [sp, #16]
 800bb5a:	4909      	ldr	r1, [pc, #36]	; (800bb80 <siprintf+0x3c>)
 800bb5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb60:	9105      	str	r1, [sp, #20]
 800bb62:	6800      	ldr	r0, [r0, #0]
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	a902      	add	r1, sp, #8
 800bb68:	f000 f992 	bl	800be90 <_svfiprintf_r>
 800bb6c:	9b02      	ldr	r3, [sp, #8]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	b01c      	add	sp, #112	; 0x70
 800bb74:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb78:	b003      	add	sp, #12
 800bb7a:	4770      	bx	lr
 800bb7c:	20000158 	.word	0x20000158
 800bb80:	ffff0208 	.word	0xffff0208

0800bb84 <memset>:
 800bb84:	4402      	add	r2, r0
 800bb86:	4603      	mov	r3, r0
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d100      	bne.n	800bb8e <memset+0xa>
 800bb8c:	4770      	bx	lr
 800bb8e:	f803 1b01 	strb.w	r1, [r3], #1
 800bb92:	e7f9      	b.n	800bb88 <memset+0x4>

0800bb94 <__errno>:
 800bb94:	4b01      	ldr	r3, [pc, #4]	; (800bb9c <__errno+0x8>)
 800bb96:	6818      	ldr	r0, [r3, #0]
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	20000158 	.word	0x20000158

0800bba0 <__libc_init_array>:
 800bba0:	b570      	push	{r4, r5, r6, lr}
 800bba2:	4d0d      	ldr	r5, [pc, #52]	; (800bbd8 <__libc_init_array+0x38>)
 800bba4:	4c0d      	ldr	r4, [pc, #52]	; (800bbdc <__libc_init_array+0x3c>)
 800bba6:	1b64      	subs	r4, r4, r5
 800bba8:	10a4      	asrs	r4, r4, #2
 800bbaa:	2600      	movs	r6, #0
 800bbac:	42a6      	cmp	r6, r4
 800bbae:	d109      	bne.n	800bbc4 <__libc_init_array+0x24>
 800bbb0:	4d0b      	ldr	r5, [pc, #44]	; (800bbe0 <__libc_init_array+0x40>)
 800bbb2:	4c0c      	ldr	r4, [pc, #48]	; (800bbe4 <__libc_init_array+0x44>)
 800bbb4:	f000 fc6a 	bl	800c48c <_init>
 800bbb8:	1b64      	subs	r4, r4, r5
 800bbba:	10a4      	asrs	r4, r4, #2
 800bbbc:	2600      	movs	r6, #0
 800bbbe:	42a6      	cmp	r6, r4
 800bbc0:	d105      	bne.n	800bbce <__libc_init_array+0x2e>
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}
 800bbc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbc8:	4798      	blx	r3
 800bbca:	3601      	adds	r6, #1
 800bbcc:	e7ee      	b.n	800bbac <__libc_init_array+0xc>
 800bbce:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbd2:	4798      	blx	r3
 800bbd4:	3601      	adds	r6, #1
 800bbd6:	e7f2      	b.n	800bbbe <__libc_init_array+0x1e>
 800bbd8:	0800c578 	.word	0x0800c578
 800bbdc:	0800c578 	.word	0x0800c578
 800bbe0:	0800c578 	.word	0x0800c578
 800bbe4:	0800c57c 	.word	0x0800c57c

0800bbe8 <__retarget_lock_acquire_recursive>:
 800bbe8:	4770      	bx	lr

0800bbea <__retarget_lock_release_recursive>:
 800bbea:	4770      	bx	lr

0800bbec <_free_r>:
 800bbec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbee:	2900      	cmp	r1, #0
 800bbf0:	d044      	beq.n	800bc7c <_free_r+0x90>
 800bbf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbf6:	9001      	str	r0, [sp, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f1a1 0404 	sub.w	r4, r1, #4
 800bbfe:	bfb8      	it	lt
 800bc00:	18e4      	addlt	r4, r4, r3
 800bc02:	f000 f8df 	bl	800bdc4 <__malloc_lock>
 800bc06:	4a1e      	ldr	r2, [pc, #120]	; (800bc80 <_free_r+0x94>)
 800bc08:	9801      	ldr	r0, [sp, #4]
 800bc0a:	6813      	ldr	r3, [r2, #0]
 800bc0c:	b933      	cbnz	r3, 800bc1c <_free_r+0x30>
 800bc0e:	6063      	str	r3, [r4, #4]
 800bc10:	6014      	str	r4, [r2, #0]
 800bc12:	b003      	add	sp, #12
 800bc14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc18:	f000 b8da 	b.w	800bdd0 <__malloc_unlock>
 800bc1c:	42a3      	cmp	r3, r4
 800bc1e:	d908      	bls.n	800bc32 <_free_r+0x46>
 800bc20:	6825      	ldr	r5, [r4, #0]
 800bc22:	1961      	adds	r1, r4, r5
 800bc24:	428b      	cmp	r3, r1
 800bc26:	bf01      	itttt	eq
 800bc28:	6819      	ldreq	r1, [r3, #0]
 800bc2a:	685b      	ldreq	r3, [r3, #4]
 800bc2c:	1949      	addeq	r1, r1, r5
 800bc2e:	6021      	streq	r1, [r4, #0]
 800bc30:	e7ed      	b.n	800bc0e <_free_r+0x22>
 800bc32:	461a      	mov	r2, r3
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	b10b      	cbz	r3, 800bc3c <_free_r+0x50>
 800bc38:	42a3      	cmp	r3, r4
 800bc3a:	d9fa      	bls.n	800bc32 <_free_r+0x46>
 800bc3c:	6811      	ldr	r1, [r2, #0]
 800bc3e:	1855      	adds	r5, r2, r1
 800bc40:	42a5      	cmp	r5, r4
 800bc42:	d10b      	bne.n	800bc5c <_free_r+0x70>
 800bc44:	6824      	ldr	r4, [r4, #0]
 800bc46:	4421      	add	r1, r4
 800bc48:	1854      	adds	r4, r2, r1
 800bc4a:	42a3      	cmp	r3, r4
 800bc4c:	6011      	str	r1, [r2, #0]
 800bc4e:	d1e0      	bne.n	800bc12 <_free_r+0x26>
 800bc50:	681c      	ldr	r4, [r3, #0]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	6053      	str	r3, [r2, #4]
 800bc56:	440c      	add	r4, r1
 800bc58:	6014      	str	r4, [r2, #0]
 800bc5a:	e7da      	b.n	800bc12 <_free_r+0x26>
 800bc5c:	d902      	bls.n	800bc64 <_free_r+0x78>
 800bc5e:	230c      	movs	r3, #12
 800bc60:	6003      	str	r3, [r0, #0]
 800bc62:	e7d6      	b.n	800bc12 <_free_r+0x26>
 800bc64:	6825      	ldr	r5, [r4, #0]
 800bc66:	1961      	adds	r1, r4, r5
 800bc68:	428b      	cmp	r3, r1
 800bc6a:	bf04      	itt	eq
 800bc6c:	6819      	ldreq	r1, [r3, #0]
 800bc6e:	685b      	ldreq	r3, [r3, #4]
 800bc70:	6063      	str	r3, [r4, #4]
 800bc72:	bf04      	itt	eq
 800bc74:	1949      	addeq	r1, r1, r5
 800bc76:	6021      	streq	r1, [r4, #0]
 800bc78:	6054      	str	r4, [r2, #4]
 800bc7a:	e7ca      	b.n	800bc12 <_free_r+0x26>
 800bc7c:	b003      	add	sp, #12
 800bc7e:	bd30      	pop	{r4, r5, pc}
 800bc80:	20001608 	.word	0x20001608

0800bc84 <sbrk_aligned>:
 800bc84:	b570      	push	{r4, r5, r6, lr}
 800bc86:	4e0e      	ldr	r6, [pc, #56]	; (800bcc0 <sbrk_aligned+0x3c>)
 800bc88:	460c      	mov	r4, r1
 800bc8a:	6831      	ldr	r1, [r6, #0]
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	b911      	cbnz	r1, 800bc96 <sbrk_aligned+0x12>
 800bc90:	f000 fba6 	bl	800c3e0 <_sbrk_r>
 800bc94:	6030      	str	r0, [r6, #0]
 800bc96:	4621      	mov	r1, r4
 800bc98:	4628      	mov	r0, r5
 800bc9a:	f000 fba1 	bl	800c3e0 <_sbrk_r>
 800bc9e:	1c43      	adds	r3, r0, #1
 800bca0:	d00a      	beq.n	800bcb8 <sbrk_aligned+0x34>
 800bca2:	1cc4      	adds	r4, r0, #3
 800bca4:	f024 0403 	bic.w	r4, r4, #3
 800bca8:	42a0      	cmp	r0, r4
 800bcaa:	d007      	beq.n	800bcbc <sbrk_aligned+0x38>
 800bcac:	1a21      	subs	r1, r4, r0
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f000 fb96 	bl	800c3e0 <_sbrk_r>
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	d101      	bne.n	800bcbc <sbrk_aligned+0x38>
 800bcb8:	f04f 34ff 	mov.w	r4, #4294967295
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	bd70      	pop	{r4, r5, r6, pc}
 800bcc0:	2000160c 	.word	0x2000160c

0800bcc4 <_malloc_r>:
 800bcc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcc8:	1ccd      	adds	r5, r1, #3
 800bcca:	f025 0503 	bic.w	r5, r5, #3
 800bcce:	3508      	adds	r5, #8
 800bcd0:	2d0c      	cmp	r5, #12
 800bcd2:	bf38      	it	cc
 800bcd4:	250c      	movcc	r5, #12
 800bcd6:	2d00      	cmp	r5, #0
 800bcd8:	4607      	mov	r7, r0
 800bcda:	db01      	blt.n	800bce0 <_malloc_r+0x1c>
 800bcdc:	42a9      	cmp	r1, r5
 800bcde:	d905      	bls.n	800bcec <_malloc_r+0x28>
 800bce0:	230c      	movs	r3, #12
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	2600      	movs	r6, #0
 800bce6:	4630      	mov	r0, r6
 800bce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bdc0 <_malloc_r+0xfc>
 800bcf0:	f000 f868 	bl	800bdc4 <__malloc_lock>
 800bcf4:	f8d8 3000 	ldr.w	r3, [r8]
 800bcf8:	461c      	mov	r4, r3
 800bcfa:	bb5c      	cbnz	r4, 800bd54 <_malloc_r+0x90>
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	4638      	mov	r0, r7
 800bd00:	f7ff ffc0 	bl	800bc84 <sbrk_aligned>
 800bd04:	1c43      	adds	r3, r0, #1
 800bd06:	4604      	mov	r4, r0
 800bd08:	d155      	bne.n	800bdb6 <_malloc_r+0xf2>
 800bd0a:	f8d8 4000 	ldr.w	r4, [r8]
 800bd0e:	4626      	mov	r6, r4
 800bd10:	2e00      	cmp	r6, #0
 800bd12:	d145      	bne.n	800bda0 <_malloc_r+0xdc>
 800bd14:	2c00      	cmp	r4, #0
 800bd16:	d048      	beq.n	800bdaa <_malloc_r+0xe6>
 800bd18:	6823      	ldr	r3, [r4, #0]
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	4638      	mov	r0, r7
 800bd1e:	eb04 0903 	add.w	r9, r4, r3
 800bd22:	f000 fb5d 	bl	800c3e0 <_sbrk_r>
 800bd26:	4581      	cmp	r9, r0
 800bd28:	d13f      	bne.n	800bdaa <_malloc_r+0xe6>
 800bd2a:	6821      	ldr	r1, [r4, #0]
 800bd2c:	1a6d      	subs	r5, r5, r1
 800bd2e:	4629      	mov	r1, r5
 800bd30:	4638      	mov	r0, r7
 800bd32:	f7ff ffa7 	bl	800bc84 <sbrk_aligned>
 800bd36:	3001      	adds	r0, #1
 800bd38:	d037      	beq.n	800bdaa <_malloc_r+0xe6>
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	442b      	add	r3, r5
 800bd3e:	6023      	str	r3, [r4, #0]
 800bd40:	f8d8 3000 	ldr.w	r3, [r8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d038      	beq.n	800bdba <_malloc_r+0xf6>
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	42a2      	cmp	r2, r4
 800bd4c:	d12b      	bne.n	800bda6 <_malloc_r+0xe2>
 800bd4e:	2200      	movs	r2, #0
 800bd50:	605a      	str	r2, [r3, #4]
 800bd52:	e00f      	b.n	800bd74 <_malloc_r+0xb0>
 800bd54:	6822      	ldr	r2, [r4, #0]
 800bd56:	1b52      	subs	r2, r2, r5
 800bd58:	d41f      	bmi.n	800bd9a <_malloc_r+0xd6>
 800bd5a:	2a0b      	cmp	r2, #11
 800bd5c:	d917      	bls.n	800bd8e <_malloc_r+0xca>
 800bd5e:	1961      	adds	r1, r4, r5
 800bd60:	42a3      	cmp	r3, r4
 800bd62:	6025      	str	r5, [r4, #0]
 800bd64:	bf18      	it	ne
 800bd66:	6059      	strne	r1, [r3, #4]
 800bd68:	6863      	ldr	r3, [r4, #4]
 800bd6a:	bf08      	it	eq
 800bd6c:	f8c8 1000 	streq.w	r1, [r8]
 800bd70:	5162      	str	r2, [r4, r5]
 800bd72:	604b      	str	r3, [r1, #4]
 800bd74:	4638      	mov	r0, r7
 800bd76:	f104 060b 	add.w	r6, r4, #11
 800bd7a:	f000 f829 	bl	800bdd0 <__malloc_unlock>
 800bd7e:	f026 0607 	bic.w	r6, r6, #7
 800bd82:	1d23      	adds	r3, r4, #4
 800bd84:	1af2      	subs	r2, r6, r3
 800bd86:	d0ae      	beq.n	800bce6 <_malloc_r+0x22>
 800bd88:	1b9b      	subs	r3, r3, r6
 800bd8a:	50a3      	str	r3, [r4, r2]
 800bd8c:	e7ab      	b.n	800bce6 <_malloc_r+0x22>
 800bd8e:	42a3      	cmp	r3, r4
 800bd90:	6862      	ldr	r2, [r4, #4]
 800bd92:	d1dd      	bne.n	800bd50 <_malloc_r+0x8c>
 800bd94:	f8c8 2000 	str.w	r2, [r8]
 800bd98:	e7ec      	b.n	800bd74 <_malloc_r+0xb0>
 800bd9a:	4623      	mov	r3, r4
 800bd9c:	6864      	ldr	r4, [r4, #4]
 800bd9e:	e7ac      	b.n	800bcfa <_malloc_r+0x36>
 800bda0:	4634      	mov	r4, r6
 800bda2:	6876      	ldr	r6, [r6, #4]
 800bda4:	e7b4      	b.n	800bd10 <_malloc_r+0x4c>
 800bda6:	4613      	mov	r3, r2
 800bda8:	e7cc      	b.n	800bd44 <_malloc_r+0x80>
 800bdaa:	230c      	movs	r3, #12
 800bdac:	603b      	str	r3, [r7, #0]
 800bdae:	4638      	mov	r0, r7
 800bdb0:	f000 f80e 	bl	800bdd0 <__malloc_unlock>
 800bdb4:	e797      	b.n	800bce6 <_malloc_r+0x22>
 800bdb6:	6025      	str	r5, [r4, #0]
 800bdb8:	e7dc      	b.n	800bd74 <_malloc_r+0xb0>
 800bdba:	605b      	str	r3, [r3, #4]
 800bdbc:	deff      	udf	#255	; 0xff
 800bdbe:	bf00      	nop
 800bdc0:	20001608 	.word	0x20001608

0800bdc4 <__malloc_lock>:
 800bdc4:	4801      	ldr	r0, [pc, #4]	; (800bdcc <__malloc_lock+0x8>)
 800bdc6:	f7ff bf0f 	b.w	800bbe8 <__retarget_lock_acquire_recursive>
 800bdca:	bf00      	nop
 800bdcc:	20001604 	.word	0x20001604

0800bdd0 <__malloc_unlock>:
 800bdd0:	4801      	ldr	r0, [pc, #4]	; (800bdd8 <__malloc_unlock+0x8>)
 800bdd2:	f7ff bf0a 	b.w	800bbea <__retarget_lock_release_recursive>
 800bdd6:	bf00      	nop
 800bdd8:	20001604 	.word	0x20001604

0800bddc <__ssputs_r>:
 800bddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde0:	688e      	ldr	r6, [r1, #8]
 800bde2:	461f      	mov	r7, r3
 800bde4:	42be      	cmp	r6, r7
 800bde6:	680b      	ldr	r3, [r1, #0]
 800bde8:	4682      	mov	sl, r0
 800bdea:	460c      	mov	r4, r1
 800bdec:	4690      	mov	r8, r2
 800bdee:	d82c      	bhi.n	800be4a <__ssputs_r+0x6e>
 800bdf0:	898a      	ldrh	r2, [r1, #12]
 800bdf2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdf6:	d026      	beq.n	800be46 <__ssputs_r+0x6a>
 800bdf8:	6965      	ldr	r5, [r4, #20]
 800bdfa:	6909      	ldr	r1, [r1, #16]
 800bdfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be00:	eba3 0901 	sub.w	r9, r3, r1
 800be04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be08:	1c7b      	adds	r3, r7, #1
 800be0a:	444b      	add	r3, r9
 800be0c:	106d      	asrs	r5, r5, #1
 800be0e:	429d      	cmp	r5, r3
 800be10:	bf38      	it	cc
 800be12:	461d      	movcc	r5, r3
 800be14:	0553      	lsls	r3, r2, #21
 800be16:	d527      	bpl.n	800be68 <__ssputs_r+0x8c>
 800be18:	4629      	mov	r1, r5
 800be1a:	f7ff ff53 	bl	800bcc4 <_malloc_r>
 800be1e:	4606      	mov	r6, r0
 800be20:	b360      	cbz	r0, 800be7c <__ssputs_r+0xa0>
 800be22:	6921      	ldr	r1, [r4, #16]
 800be24:	464a      	mov	r2, r9
 800be26:	f000 faeb 	bl	800c400 <memcpy>
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be34:	81a3      	strh	r3, [r4, #12]
 800be36:	6126      	str	r6, [r4, #16]
 800be38:	6165      	str	r5, [r4, #20]
 800be3a:	444e      	add	r6, r9
 800be3c:	eba5 0509 	sub.w	r5, r5, r9
 800be40:	6026      	str	r6, [r4, #0]
 800be42:	60a5      	str	r5, [r4, #8]
 800be44:	463e      	mov	r6, r7
 800be46:	42be      	cmp	r6, r7
 800be48:	d900      	bls.n	800be4c <__ssputs_r+0x70>
 800be4a:	463e      	mov	r6, r7
 800be4c:	6820      	ldr	r0, [r4, #0]
 800be4e:	4632      	mov	r2, r6
 800be50:	4641      	mov	r1, r8
 800be52:	f000 faab 	bl	800c3ac <memmove>
 800be56:	68a3      	ldr	r3, [r4, #8]
 800be58:	1b9b      	subs	r3, r3, r6
 800be5a:	60a3      	str	r3, [r4, #8]
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	4433      	add	r3, r6
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	2000      	movs	r0, #0
 800be64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be68:	462a      	mov	r2, r5
 800be6a:	f000 fad7 	bl	800c41c <_realloc_r>
 800be6e:	4606      	mov	r6, r0
 800be70:	2800      	cmp	r0, #0
 800be72:	d1e0      	bne.n	800be36 <__ssputs_r+0x5a>
 800be74:	6921      	ldr	r1, [r4, #16]
 800be76:	4650      	mov	r0, sl
 800be78:	f7ff feb8 	bl	800bbec <_free_r>
 800be7c:	230c      	movs	r3, #12
 800be7e:	f8ca 3000 	str.w	r3, [sl]
 800be82:	89a3      	ldrh	r3, [r4, #12]
 800be84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be88:	81a3      	strh	r3, [r4, #12]
 800be8a:	f04f 30ff 	mov.w	r0, #4294967295
 800be8e:	e7e9      	b.n	800be64 <__ssputs_r+0x88>

0800be90 <_svfiprintf_r>:
 800be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	4698      	mov	r8, r3
 800be96:	898b      	ldrh	r3, [r1, #12]
 800be98:	061b      	lsls	r3, r3, #24
 800be9a:	b09d      	sub	sp, #116	; 0x74
 800be9c:	4607      	mov	r7, r0
 800be9e:	460d      	mov	r5, r1
 800bea0:	4614      	mov	r4, r2
 800bea2:	d50e      	bpl.n	800bec2 <_svfiprintf_r+0x32>
 800bea4:	690b      	ldr	r3, [r1, #16]
 800bea6:	b963      	cbnz	r3, 800bec2 <_svfiprintf_r+0x32>
 800bea8:	2140      	movs	r1, #64	; 0x40
 800beaa:	f7ff ff0b 	bl	800bcc4 <_malloc_r>
 800beae:	6028      	str	r0, [r5, #0]
 800beb0:	6128      	str	r0, [r5, #16]
 800beb2:	b920      	cbnz	r0, 800bebe <_svfiprintf_r+0x2e>
 800beb4:	230c      	movs	r3, #12
 800beb6:	603b      	str	r3, [r7, #0]
 800beb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bebc:	e0d0      	b.n	800c060 <_svfiprintf_r+0x1d0>
 800bebe:	2340      	movs	r3, #64	; 0x40
 800bec0:	616b      	str	r3, [r5, #20]
 800bec2:	2300      	movs	r3, #0
 800bec4:	9309      	str	r3, [sp, #36]	; 0x24
 800bec6:	2320      	movs	r3, #32
 800bec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800becc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bed0:	2330      	movs	r3, #48	; 0x30
 800bed2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c078 <_svfiprintf_r+0x1e8>
 800bed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800beda:	f04f 0901 	mov.w	r9, #1
 800bede:	4623      	mov	r3, r4
 800bee0:	469a      	mov	sl, r3
 800bee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bee6:	b10a      	cbz	r2, 800beec <_svfiprintf_r+0x5c>
 800bee8:	2a25      	cmp	r2, #37	; 0x25
 800beea:	d1f9      	bne.n	800bee0 <_svfiprintf_r+0x50>
 800beec:	ebba 0b04 	subs.w	fp, sl, r4
 800bef0:	d00b      	beq.n	800bf0a <_svfiprintf_r+0x7a>
 800bef2:	465b      	mov	r3, fp
 800bef4:	4622      	mov	r2, r4
 800bef6:	4629      	mov	r1, r5
 800bef8:	4638      	mov	r0, r7
 800befa:	f7ff ff6f 	bl	800bddc <__ssputs_r>
 800befe:	3001      	adds	r0, #1
 800bf00:	f000 80a9 	beq.w	800c056 <_svfiprintf_r+0x1c6>
 800bf04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf06:	445a      	add	r2, fp
 800bf08:	9209      	str	r2, [sp, #36]	; 0x24
 800bf0a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f000 80a1 	beq.w	800c056 <_svfiprintf_r+0x1c6>
 800bf14:	2300      	movs	r3, #0
 800bf16:	f04f 32ff 	mov.w	r2, #4294967295
 800bf1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf1e:	f10a 0a01 	add.w	sl, sl, #1
 800bf22:	9304      	str	r3, [sp, #16]
 800bf24:	9307      	str	r3, [sp, #28]
 800bf26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf2a:	931a      	str	r3, [sp, #104]	; 0x68
 800bf2c:	4654      	mov	r4, sl
 800bf2e:	2205      	movs	r2, #5
 800bf30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf34:	4850      	ldr	r0, [pc, #320]	; (800c078 <_svfiprintf_r+0x1e8>)
 800bf36:	f7f4 f953 	bl	80001e0 <memchr>
 800bf3a:	9a04      	ldr	r2, [sp, #16]
 800bf3c:	b9d8      	cbnz	r0, 800bf76 <_svfiprintf_r+0xe6>
 800bf3e:	06d0      	lsls	r0, r2, #27
 800bf40:	bf44      	itt	mi
 800bf42:	2320      	movmi	r3, #32
 800bf44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf48:	0711      	lsls	r1, r2, #28
 800bf4a:	bf44      	itt	mi
 800bf4c:	232b      	movmi	r3, #43	; 0x2b
 800bf4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf52:	f89a 3000 	ldrb.w	r3, [sl]
 800bf56:	2b2a      	cmp	r3, #42	; 0x2a
 800bf58:	d015      	beq.n	800bf86 <_svfiprintf_r+0xf6>
 800bf5a:	9a07      	ldr	r2, [sp, #28]
 800bf5c:	4654      	mov	r4, sl
 800bf5e:	2000      	movs	r0, #0
 800bf60:	f04f 0c0a 	mov.w	ip, #10
 800bf64:	4621      	mov	r1, r4
 800bf66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf6a:	3b30      	subs	r3, #48	; 0x30
 800bf6c:	2b09      	cmp	r3, #9
 800bf6e:	d94d      	bls.n	800c00c <_svfiprintf_r+0x17c>
 800bf70:	b1b0      	cbz	r0, 800bfa0 <_svfiprintf_r+0x110>
 800bf72:	9207      	str	r2, [sp, #28]
 800bf74:	e014      	b.n	800bfa0 <_svfiprintf_r+0x110>
 800bf76:	eba0 0308 	sub.w	r3, r0, r8
 800bf7a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	9304      	str	r3, [sp, #16]
 800bf82:	46a2      	mov	sl, r4
 800bf84:	e7d2      	b.n	800bf2c <_svfiprintf_r+0x9c>
 800bf86:	9b03      	ldr	r3, [sp, #12]
 800bf88:	1d19      	adds	r1, r3, #4
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	9103      	str	r1, [sp, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	bfbb      	ittet	lt
 800bf92:	425b      	neglt	r3, r3
 800bf94:	f042 0202 	orrlt.w	r2, r2, #2
 800bf98:	9307      	strge	r3, [sp, #28]
 800bf9a:	9307      	strlt	r3, [sp, #28]
 800bf9c:	bfb8      	it	lt
 800bf9e:	9204      	strlt	r2, [sp, #16]
 800bfa0:	7823      	ldrb	r3, [r4, #0]
 800bfa2:	2b2e      	cmp	r3, #46	; 0x2e
 800bfa4:	d10c      	bne.n	800bfc0 <_svfiprintf_r+0x130>
 800bfa6:	7863      	ldrb	r3, [r4, #1]
 800bfa8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfaa:	d134      	bne.n	800c016 <_svfiprintf_r+0x186>
 800bfac:	9b03      	ldr	r3, [sp, #12]
 800bfae:	1d1a      	adds	r2, r3, #4
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	9203      	str	r2, [sp, #12]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	bfb8      	it	lt
 800bfb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfbc:	3402      	adds	r4, #2
 800bfbe:	9305      	str	r3, [sp, #20]
 800bfc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c088 <_svfiprintf_r+0x1f8>
 800bfc4:	7821      	ldrb	r1, [r4, #0]
 800bfc6:	2203      	movs	r2, #3
 800bfc8:	4650      	mov	r0, sl
 800bfca:	f7f4 f909 	bl	80001e0 <memchr>
 800bfce:	b138      	cbz	r0, 800bfe0 <_svfiprintf_r+0x150>
 800bfd0:	9b04      	ldr	r3, [sp, #16]
 800bfd2:	eba0 000a 	sub.w	r0, r0, sl
 800bfd6:	2240      	movs	r2, #64	; 0x40
 800bfd8:	4082      	lsls	r2, r0
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	3401      	adds	r4, #1
 800bfde:	9304      	str	r3, [sp, #16]
 800bfe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfe4:	4825      	ldr	r0, [pc, #148]	; (800c07c <_svfiprintf_r+0x1ec>)
 800bfe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfea:	2206      	movs	r2, #6
 800bfec:	f7f4 f8f8 	bl	80001e0 <memchr>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d038      	beq.n	800c066 <_svfiprintf_r+0x1d6>
 800bff4:	4b22      	ldr	r3, [pc, #136]	; (800c080 <_svfiprintf_r+0x1f0>)
 800bff6:	bb1b      	cbnz	r3, 800c040 <_svfiprintf_r+0x1b0>
 800bff8:	9b03      	ldr	r3, [sp, #12]
 800bffa:	3307      	adds	r3, #7
 800bffc:	f023 0307 	bic.w	r3, r3, #7
 800c000:	3308      	adds	r3, #8
 800c002:	9303      	str	r3, [sp, #12]
 800c004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c006:	4433      	add	r3, r6
 800c008:	9309      	str	r3, [sp, #36]	; 0x24
 800c00a:	e768      	b.n	800bede <_svfiprintf_r+0x4e>
 800c00c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c010:	460c      	mov	r4, r1
 800c012:	2001      	movs	r0, #1
 800c014:	e7a6      	b.n	800bf64 <_svfiprintf_r+0xd4>
 800c016:	2300      	movs	r3, #0
 800c018:	3401      	adds	r4, #1
 800c01a:	9305      	str	r3, [sp, #20]
 800c01c:	4619      	mov	r1, r3
 800c01e:	f04f 0c0a 	mov.w	ip, #10
 800c022:	4620      	mov	r0, r4
 800c024:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c028:	3a30      	subs	r2, #48	; 0x30
 800c02a:	2a09      	cmp	r2, #9
 800c02c:	d903      	bls.n	800c036 <_svfiprintf_r+0x1a6>
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d0c6      	beq.n	800bfc0 <_svfiprintf_r+0x130>
 800c032:	9105      	str	r1, [sp, #20]
 800c034:	e7c4      	b.n	800bfc0 <_svfiprintf_r+0x130>
 800c036:	fb0c 2101 	mla	r1, ip, r1, r2
 800c03a:	4604      	mov	r4, r0
 800c03c:	2301      	movs	r3, #1
 800c03e:	e7f0      	b.n	800c022 <_svfiprintf_r+0x192>
 800c040:	ab03      	add	r3, sp, #12
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	462a      	mov	r2, r5
 800c046:	4b0f      	ldr	r3, [pc, #60]	; (800c084 <_svfiprintf_r+0x1f4>)
 800c048:	a904      	add	r1, sp, #16
 800c04a:	4638      	mov	r0, r7
 800c04c:	f3af 8000 	nop.w
 800c050:	1c42      	adds	r2, r0, #1
 800c052:	4606      	mov	r6, r0
 800c054:	d1d6      	bne.n	800c004 <_svfiprintf_r+0x174>
 800c056:	89ab      	ldrh	r3, [r5, #12]
 800c058:	065b      	lsls	r3, r3, #25
 800c05a:	f53f af2d 	bmi.w	800beb8 <_svfiprintf_r+0x28>
 800c05e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c060:	b01d      	add	sp, #116	; 0x74
 800c062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c066:	ab03      	add	r3, sp, #12
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	462a      	mov	r2, r5
 800c06c:	4b05      	ldr	r3, [pc, #20]	; (800c084 <_svfiprintf_r+0x1f4>)
 800c06e:	a904      	add	r1, sp, #16
 800c070:	4638      	mov	r0, r7
 800c072:	f000 f879 	bl	800c168 <_printf_i>
 800c076:	e7eb      	b.n	800c050 <_svfiprintf_r+0x1c0>
 800c078:	0800c53c 	.word	0x0800c53c
 800c07c:	0800c546 	.word	0x0800c546
 800c080:	00000000 	.word	0x00000000
 800c084:	0800bddd 	.word	0x0800bddd
 800c088:	0800c542 	.word	0x0800c542

0800c08c <_printf_common>:
 800c08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c090:	4616      	mov	r6, r2
 800c092:	4699      	mov	r9, r3
 800c094:	688a      	ldr	r2, [r1, #8]
 800c096:	690b      	ldr	r3, [r1, #16]
 800c098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c09c:	4293      	cmp	r3, r2
 800c09e:	bfb8      	it	lt
 800c0a0:	4613      	movlt	r3, r2
 800c0a2:	6033      	str	r3, [r6, #0]
 800c0a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0a8:	4607      	mov	r7, r0
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	b10a      	cbz	r2, 800c0b2 <_printf_common+0x26>
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	6033      	str	r3, [r6, #0]
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	0699      	lsls	r1, r3, #26
 800c0b6:	bf42      	ittt	mi
 800c0b8:	6833      	ldrmi	r3, [r6, #0]
 800c0ba:	3302      	addmi	r3, #2
 800c0bc:	6033      	strmi	r3, [r6, #0]
 800c0be:	6825      	ldr	r5, [r4, #0]
 800c0c0:	f015 0506 	ands.w	r5, r5, #6
 800c0c4:	d106      	bne.n	800c0d4 <_printf_common+0x48>
 800c0c6:	f104 0a19 	add.w	sl, r4, #25
 800c0ca:	68e3      	ldr	r3, [r4, #12]
 800c0cc:	6832      	ldr	r2, [r6, #0]
 800c0ce:	1a9b      	subs	r3, r3, r2
 800c0d0:	42ab      	cmp	r3, r5
 800c0d2:	dc26      	bgt.n	800c122 <_printf_common+0x96>
 800c0d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0d8:	1e13      	subs	r3, r2, #0
 800c0da:	6822      	ldr	r2, [r4, #0]
 800c0dc:	bf18      	it	ne
 800c0de:	2301      	movne	r3, #1
 800c0e0:	0692      	lsls	r2, r2, #26
 800c0e2:	d42b      	bmi.n	800c13c <_printf_common+0xb0>
 800c0e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0e8:	4649      	mov	r1, r9
 800c0ea:	4638      	mov	r0, r7
 800c0ec:	47c0      	blx	r8
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	d01e      	beq.n	800c130 <_printf_common+0xa4>
 800c0f2:	6823      	ldr	r3, [r4, #0]
 800c0f4:	6922      	ldr	r2, [r4, #16]
 800c0f6:	f003 0306 	and.w	r3, r3, #6
 800c0fa:	2b04      	cmp	r3, #4
 800c0fc:	bf02      	ittt	eq
 800c0fe:	68e5      	ldreq	r5, [r4, #12]
 800c100:	6833      	ldreq	r3, [r6, #0]
 800c102:	1aed      	subeq	r5, r5, r3
 800c104:	68a3      	ldr	r3, [r4, #8]
 800c106:	bf0c      	ite	eq
 800c108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c10c:	2500      	movne	r5, #0
 800c10e:	4293      	cmp	r3, r2
 800c110:	bfc4      	itt	gt
 800c112:	1a9b      	subgt	r3, r3, r2
 800c114:	18ed      	addgt	r5, r5, r3
 800c116:	2600      	movs	r6, #0
 800c118:	341a      	adds	r4, #26
 800c11a:	42b5      	cmp	r5, r6
 800c11c:	d11a      	bne.n	800c154 <_printf_common+0xc8>
 800c11e:	2000      	movs	r0, #0
 800c120:	e008      	b.n	800c134 <_printf_common+0xa8>
 800c122:	2301      	movs	r3, #1
 800c124:	4652      	mov	r2, sl
 800c126:	4649      	mov	r1, r9
 800c128:	4638      	mov	r0, r7
 800c12a:	47c0      	blx	r8
 800c12c:	3001      	adds	r0, #1
 800c12e:	d103      	bne.n	800c138 <_printf_common+0xac>
 800c130:	f04f 30ff 	mov.w	r0, #4294967295
 800c134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c138:	3501      	adds	r5, #1
 800c13a:	e7c6      	b.n	800c0ca <_printf_common+0x3e>
 800c13c:	18e1      	adds	r1, r4, r3
 800c13e:	1c5a      	adds	r2, r3, #1
 800c140:	2030      	movs	r0, #48	; 0x30
 800c142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c146:	4422      	add	r2, r4
 800c148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c14c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c150:	3302      	adds	r3, #2
 800c152:	e7c7      	b.n	800c0e4 <_printf_common+0x58>
 800c154:	2301      	movs	r3, #1
 800c156:	4622      	mov	r2, r4
 800c158:	4649      	mov	r1, r9
 800c15a:	4638      	mov	r0, r7
 800c15c:	47c0      	blx	r8
 800c15e:	3001      	adds	r0, #1
 800c160:	d0e6      	beq.n	800c130 <_printf_common+0xa4>
 800c162:	3601      	adds	r6, #1
 800c164:	e7d9      	b.n	800c11a <_printf_common+0x8e>
	...

0800c168 <_printf_i>:
 800c168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c16c:	7e0f      	ldrb	r7, [r1, #24]
 800c16e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c170:	2f78      	cmp	r7, #120	; 0x78
 800c172:	4691      	mov	r9, r2
 800c174:	4680      	mov	r8, r0
 800c176:	460c      	mov	r4, r1
 800c178:	469a      	mov	sl, r3
 800c17a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c17e:	d807      	bhi.n	800c190 <_printf_i+0x28>
 800c180:	2f62      	cmp	r7, #98	; 0x62
 800c182:	d80a      	bhi.n	800c19a <_printf_i+0x32>
 800c184:	2f00      	cmp	r7, #0
 800c186:	f000 80d4 	beq.w	800c332 <_printf_i+0x1ca>
 800c18a:	2f58      	cmp	r7, #88	; 0x58
 800c18c:	f000 80c0 	beq.w	800c310 <_printf_i+0x1a8>
 800c190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c198:	e03a      	b.n	800c210 <_printf_i+0xa8>
 800c19a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c19e:	2b15      	cmp	r3, #21
 800c1a0:	d8f6      	bhi.n	800c190 <_printf_i+0x28>
 800c1a2:	a101      	add	r1, pc, #4	; (adr r1, 800c1a8 <_printf_i+0x40>)
 800c1a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1a8:	0800c201 	.word	0x0800c201
 800c1ac:	0800c215 	.word	0x0800c215
 800c1b0:	0800c191 	.word	0x0800c191
 800c1b4:	0800c191 	.word	0x0800c191
 800c1b8:	0800c191 	.word	0x0800c191
 800c1bc:	0800c191 	.word	0x0800c191
 800c1c0:	0800c215 	.word	0x0800c215
 800c1c4:	0800c191 	.word	0x0800c191
 800c1c8:	0800c191 	.word	0x0800c191
 800c1cc:	0800c191 	.word	0x0800c191
 800c1d0:	0800c191 	.word	0x0800c191
 800c1d4:	0800c319 	.word	0x0800c319
 800c1d8:	0800c241 	.word	0x0800c241
 800c1dc:	0800c2d3 	.word	0x0800c2d3
 800c1e0:	0800c191 	.word	0x0800c191
 800c1e4:	0800c191 	.word	0x0800c191
 800c1e8:	0800c33b 	.word	0x0800c33b
 800c1ec:	0800c191 	.word	0x0800c191
 800c1f0:	0800c241 	.word	0x0800c241
 800c1f4:	0800c191 	.word	0x0800c191
 800c1f8:	0800c191 	.word	0x0800c191
 800c1fc:	0800c2db 	.word	0x0800c2db
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	1d1a      	adds	r2, r3, #4
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	602a      	str	r2, [r5, #0]
 800c208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c20c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c210:	2301      	movs	r3, #1
 800c212:	e09f      	b.n	800c354 <_printf_i+0x1ec>
 800c214:	6820      	ldr	r0, [r4, #0]
 800c216:	682b      	ldr	r3, [r5, #0]
 800c218:	0607      	lsls	r7, r0, #24
 800c21a:	f103 0104 	add.w	r1, r3, #4
 800c21e:	6029      	str	r1, [r5, #0]
 800c220:	d501      	bpl.n	800c226 <_printf_i+0xbe>
 800c222:	681e      	ldr	r6, [r3, #0]
 800c224:	e003      	b.n	800c22e <_printf_i+0xc6>
 800c226:	0646      	lsls	r6, r0, #25
 800c228:	d5fb      	bpl.n	800c222 <_printf_i+0xba>
 800c22a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c22e:	2e00      	cmp	r6, #0
 800c230:	da03      	bge.n	800c23a <_printf_i+0xd2>
 800c232:	232d      	movs	r3, #45	; 0x2d
 800c234:	4276      	negs	r6, r6
 800c236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c23a:	485a      	ldr	r0, [pc, #360]	; (800c3a4 <_printf_i+0x23c>)
 800c23c:	230a      	movs	r3, #10
 800c23e:	e012      	b.n	800c266 <_printf_i+0xfe>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	6820      	ldr	r0, [r4, #0]
 800c244:	1d19      	adds	r1, r3, #4
 800c246:	6029      	str	r1, [r5, #0]
 800c248:	0605      	lsls	r5, r0, #24
 800c24a:	d501      	bpl.n	800c250 <_printf_i+0xe8>
 800c24c:	681e      	ldr	r6, [r3, #0]
 800c24e:	e002      	b.n	800c256 <_printf_i+0xee>
 800c250:	0641      	lsls	r1, r0, #25
 800c252:	d5fb      	bpl.n	800c24c <_printf_i+0xe4>
 800c254:	881e      	ldrh	r6, [r3, #0]
 800c256:	4853      	ldr	r0, [pc, #332]	; (800c3a4 <_printf_i+0x23c>)
 800c258:	2f6f      	cmp	r7, #111	; 0x6f
 800c25a:	bf0c      	ite	eq
 800c25c:	2308      	moveq	r3, #8
 800c25e:	230a      	movne	r3, #10
 800c260:	2100      	movs	r1, #0
 800c262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c266:	6865      	ldr	r5, [r4, #4]
 800c268:	60a5      	str	r5, [r4, #8]
 800c26a:	2d00      	cmp	r5, #0
 800c26c:	bfa2      	ittt	ge
 800c26e:	6821      	ldrge	r1, [r4, #0]
 800c270:	f021 0104 	bicge.w	r1, r1, #4
 800c274:	6021      	strge	r1, [r4, #0]
 800c276:	b90e      	cbnz	r6, 800c27c <_printf_i+0x114>
 800c278:	2d00      	cmp	r5, #0
 800c27a:	d04b      	beq.n	800c314 <_printf_i+0x1ac>
 800c27c:	4615      	mov	r5, r2
 800c27e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c282:	fb03 6711 	mls	r7, r3, r1, r6
 800c286:	5dc7      	ldrb	r7, [r0, r7]
 800c288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c28c:	4637      	mov	r7, r6
 800c28e:	42bb      	cmp	r3, r7
 800c290:	460e      	mov	r6, r1
 800c292:	d9f4      	bls.n	800c27e <_printf_i+0x116>
 800c294:	2b08      	cmp	r3, #8
 800c296:	d10b      	bne.n	800c2b0 <_printf_i+0x148>
 800c298:	6823      	ldr	r3, [r4, #0]
 800c29a:	07de      	lsls	r6, r3, #31
 800c29c:	d508      	bpl.n	800c2b0 <_printf_i+0x148>
 800c29e:	6923      	ldr	r3, [r4, #16]
 800c2a0:	6861      	ldr	r1, [r4, #4]
 800c2a2:	4299      	cmp	r1, r3
 800c2a4:	bfde      	ittt	le
 800c2a6:	2330      	movle	r3, #48	; 0x30
 800c2a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c2b0:	1b52      	subs	r2, r2, r5
 800c2b2:	6122      	str	r2, [r4, #16]
 800c2b4:	f8cd a000 	str.w	sl, [sp]
 800c2b8:	464b      	mov	r3, r9
 800c2ba:	aa03      	add	r2, sp, #12
 800c2bc:	4621      	mov	r1, r4
 800c2be:	4640      	mov	r0, r8
 800c2c0:	f7ff fee4 	bl	800c08c <_printf_common>
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	d14a      	bne.n	800c35e <_printf_i+0x1f6>
 800c2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2cc:	b004      	add	sp, #16
 800c2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	f043 0320 	orr.w	r3, r3, #32
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	4833      	ldr	r0, [pc, #204]	; (800c3a8 <_printf_i+0x240>)
 800c2dc:	2778      	movs	r7, #120	; 0x78
 800c2de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	6829      	ldr	r1, [r5, #0]
 800c2e6:	061f      	lsls	r7, r3, #24
 800c2e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2ec:	d402      	bmi.n	800c2f4 <_printf_i+0x18c>
 800c2ee:	065f      	lsls	r7, r3, #25
 800c2f0:	bf48      	it	mi
 800c2f2:	b2b6      	uxthmi	r6, r6
 800c2f4:	07df      	lsls	r7, r3, #31
 800c2f6:	bf48      	it	mi
 800c2f8:	f043 0320 	orrmi.w	r3, r3, #32
 800c2fc:	6029      	str	r1, [r5, #0]
 800c2fe:	bf48      	it	mi
 800c300:	6023      	strmi	r3, [r4, #0]
 800c302:	b91e      	cbnz	r6, 800c30c <_printf_i+0x1a4>
 800c304:	6823      	ldr	r3, [r4, #0]
 800c306:	f023 0320 	bic.w	r3, r3, #32
 800c30a:	6023      	str	r3, [r4, #0]
 800c30c:	2310      	movs	r3, #16
 800c30e:	e7a7      	b.n	800c260 <_printf_i+0xf8>
 800c310:	4824      	ldr	r0, [pc, #144]	; (800c3a4 <_printf_i+0x23c>)
 800c312:	e7e4      	b.n	800c2de <_printf_i+0x176>
 800c314:	4615      	mov	r5, r2
 800c316:	e7bd      	b.n	800c294 <_printf_i+0x12c>
 800c318:	682b      	ldr	r3, [r5, #0]
 800c31a:	6826      	ldr	r6, [r4, #0]
 800c31c:	6961      	ldr	r1, [r4, #20]
 800c31e:	1d18      	adds	r0, r3, #4
 800c320:	6028      	str	r0, [r5, #0]
 800c322:	0635      	lsls	r5, r6, #24
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	d501      	bpl.n	800c32c <_printf_i+0x1c4>
 800c328:	6019      	str	r1, [r3, #0]
 800c32a:	e002      	b.n	800c332 <_printf_i+0x1ca>
 800c32c:	0670      	lsls	r0, r6, #25
 800c32e:	d5fb      	bpl.n	800c328 <_printf_i+0x1c0>
 800c330:	8019      	strh	r1, [r3, #0]
 800c332:	2300      	movs	r3, #0
 800c334:	6123      	str	r3, [r4, #16]
 800c336:	4615      	mov	r5, r2
 800c338:	e7bc      	b.n	800c2b4 <_printf_i+0x14c>
 800c33a:	682b      	ldr	r3, [r5, #0]
 800c33c:	1d1a      	adds	r2, r3, #4
 800c33e:	602a      	str	r2, [r5, #0]
 800c340:	681d      	ldr	r5, [r3, #0]
 800c342:	6862      	ldr	r2, [r4, #4]
 800c344:	2100      	movs	r1, #0
 800c346:	4628      	mov	r0, r5
 800c348:	f7f3 ff4a 	bl	80001e0 <memchr>
 800c34c:	b108      	cbz	r0, 800c352 <_printf_i+0x1ea>
 800c34e:	1b40      	subs	r0, r0, r5
 800c350:	6060      	str	r0, [r4, #4]
 800c352:	6863      	ldr	r3, [r4, #4]
 800c354:	6123      	str	r3, [r4, #16]
 800c356:	2300      	movs	r3, #0
 800c358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c35c:	e7aa      	b.n	800c2b4 <_printf_i+0x14c>
 800c35e:	6923      	ldr	r3, [r4, #16]
 800c360:	462a      	mov	r2, r5
 800c362:	4649      	mov	r1, r9
 800c364:	4640      	mov	r0, r8
 800c366:	47d0      	blx	sl
 800c368:	3001      	adds	r0, #1
 800c36a:	d0ad      	beq.n	800c2c8 <_printf_i+0x160>
 800c36c:	6823      	ldr	r3, [r4, #0]
 800c36e:	079b      	lsls	r3, r3, #30
 800c370:	d413      	bmi.n	800c39a <_printf_i+0x232>
 800c372:	68e0      	ldr	r0, [r4, #12]
 800c374:	9b03      	ldr	r3, [sp, #12]
 800c376:	4298      	cmp	r0, r3
 800c378:	bfb8      	it	lt
 800c37a:	4618      	movlt	r0, r3
 800c37c:	e7a6      	b.n	800c2cc <_printf_i+0x164>
 800c37e:	2301      	movs	r3, #1
 800c380:	4632      	mov	r2, r6
 800c382:	4649      	mov	r1, r9
 800c384:	4640      	mov	r0, r8
 800c386:	47d0      	blx	sl
 800c388:	3001      	adds	r0, #1
 800c38a:	d09d      	beq.n	800c2c8 <_printf_i+0x160>
 800c38c:	3501      	adds	r5, #1
 800c38e:	68e3      	ldr	r3, [r4, #12]
 800c390:	9903      	ldr	r1, [sp, #12]
 800c392:	1a5b      	subs	r3, r3, r1
 800c394:	42ab      	cmp	r3, r5
 800c396:	dcf2      	bgt.n	800c37e <_printf_i+0x216>
 800c398:	e7eb      	b.n	800c372 <_printf_i+0x20a>
 800c39a:	2500      	movs	r5, #0
 800c39c:	f104 0619 	add.w	r6, r4, #25
 800c3a0:	e7f5      	b.n	800c38e <_printf_i+0x226>
 800c3a2:	bf00      	nop
 800c3a4:	0800c54d 	.word	0x0800c54d
 800c3a8:	0800c55e 	.word	0x0800c55e

0800c3ac <memmove>:
 800c3ac:	4288      	cmp	r0, r1
 800c3ae:	b510      	push	{r4, lr}
 800c3b0:	eb01 0402 	add.w	r4, r1, r2
 800c3b4:	d902      	bls.n	800c3bc <memmove+0x10>
 800c3b6:	4284      	cmp	r4, r0
 800c3b8:	4623      	mov	r3, r4
 800c3ba:	d807      	bhi.n	800c3cc <memmove+0x20>
 800c3bc:	1e43      	subs	r3, r0, #1
 800c3be:	42a1      	cmp	r1, r4
 800c3c0:	d008      	beq.n	800c3d4 <memmove+0x28>
 800c3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3ca:	e7f8      	b.n	800c3be <memmove+0x12>
 800c3cc:	4402      	add	r2, r0
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	428a      	cmp	r2, r1
 800c3d2:	d100      	bne.n	800c3d6 <memmove+0x2a>
 800c3d4:	bd10      	pop	{r4, pc}
 800c3d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3de:	e7f7      	b.n	800c3d0 <memmove+0x24>

0800c3e0 <_sbrk_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4d06      	ldr	r5, [pc, #24]	; (800c3fc <_sbrk_r+0x1c>)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	602b      	str	r3, [r5, #0]
 800c3ec:	f7f4 fd60 	bl	8000eb0 <_sbrk>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d102      	bne.n	800c3fa <_sbrk_r+0x1a>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b103      	cbz	r3, 800c3fa <_sbrk_r+0x1a>
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	20001600 	.word	0x20001600

0800c400 <memcpy>:
 800c400:	440a      	add	r2, r1
 800c402:	4291      	cmp	r1, r2
 800c404:	f100 33ff 	add.w	r3, r0, #4294967295
 800c408:	d100      	bne.n	800c40c <memcpy+0xc>
 800c40a:	4770      	bx	lr
 800c40c:	b510      	push	{r4, lr}
 800c40e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c412:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c416:	4291      	cmp	r1, r2
 800c418:	d1f9      	bne.n	800c40e <memcpy+0xe>
 800c41a:	bd10      	pop	{r4, pc}

0800c41c <_realloc_r>:
 800c41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c420:	4680      	mov	r8, r0
 800c422:	4614      	mov	r4, r2
 800c424:	460e      	mov	r6, r1
 800c426:	b921      	cbnz	r1, 800c432 <_realloc_r+0x16>
 800c428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c42c:	4611      	mov	r1, r2
 800c42e:	f7ff bc49 	b.w	800bcc4 <_malloc_r>
 800c432:	b92a      	cbnz	r2, 800c440 <_realloc_r+0x24>
 800c434:	f7ff fbda 	bl	800bbec <_free_r>
 800c438:	4625      	mov	r5, r4
 800c43a:	4628      	mov	r0, r5
 800c43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c440:	f000 f81b 	bl	800c47a <_malloc_usable_size_r>
 800c444:	4284      	cmp	r4, r0
 800c446:	4607      	mov	r7, r0
 800c448:	d802      	bhi.n	800c450 <_realloc_r+0x34>
 800c44a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c44e:	d812      	bhi.n	800c476 <_realloc_r+0x5a>
 800c450:	4621      	mov	r1, r4
 800c452:	4640      	mov	r0, r8
 800c454:	f7ff fc36 	bl	800bcc4 <_malloc_r>
 800c458:	4605      	mov	r5, r0
 800c45a:	2800      	cmp	r0, #0
 800c45c:	d0ed      	beq.n	800c43a <_realloc_r+0x1e>
 800c45e:	42bc      	cmp	r4, r7
 800c460:	4622      	mov	r2, r4
 800c462:	4631      	mov	r1, r6
 800c464:	bf28      	it	cs
 800c466:	463a      	movcs	r2, r7
 800c468:	f7ff ffca 	bl	800c400 <memcpy>
 800c46c:	4631      	mov	r1, r6
 800c46e:	4640      	mov	r0, r8
 800c470:	f7ff fbbc 	bl	800bbec <_free_r>
 800c474:	e7e1      	b.n	800c43a <_realloc_r+0x1e>
 800c476:	4635      	mov	r5, r6
 800c478:	e7df      	b.n	800c43a <_realloc_r+0x1e>

0800c47a <_malloc_usable_size_r>:
 800c47a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c47e:	1f18      	subs	r0, r3, #4
 800c480:	2b00      	cmp	r3, #0
 800c482:	bfbc      	itt	lt
 800c484:	580b      	ldrlt	r3, [r1, r0]
 800c486:	18c0      	addlt	r0, r0, r3
 800c488:	4770      	bx	lr
	...

0800c48c <_init>:
 800c48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48e:	bf00      	nop
 800c490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c492:	bc08      	pop	{r3}
 800c494:	469e      	mov	lr, r3
 800c496:	4770      	bx	lr

0800c498 <_fini>:
 800c498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49a:	bf00      	nop
 800c49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c49e:	bc08      	pop	{r3}
 800c4a0:	469e      	mov	lr, r3
 800c4a2:	4770      	bx	lr
