
PQ9_raadioside_moodul_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf58  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  0800c0e4  0800c0e4  0001c0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7d0  0800c7d0  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7d0  0800c7d0  0001c7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7d8  0800c7d8  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7d8  0800c7d8  0001c7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7dc  0800c7dc  0001c7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800c7e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001774  20000110  0800c8f0  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001884  0800c8f0  00021884  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b04f  00000000  00000000  00020183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d7a  00000000  00000000  0003b1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  0003ef50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001090  00000000  00000000  00040510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e8b1  00000000  00000000  000415a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b3a5  00000000  00000000  0005fe51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8805  00000000  00000000  0007b1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b5c  00000000  00000000  001339fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00139558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000110 	.word	0x20000110
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800c0cc 	.word	0x0800c0cc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000114 	.word	0x20000114
 80001c8:	0800c0cc 	.word	0x0800c0cc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004cc:	f3bf 8f4f 	dsb	sy
}
 80004d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <__NVIC_SystemReset+0x24>)
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80004da:	4904      	ldr	r1, [pc, #16]	; (80004ec <__NVIC_SystemReset+0x24>)
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <__NVIC_SystemReset+0x28>)
 80004de:	4313      	orrs	r3, r2
 80004e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004e2:	f3bf 8f4f 	dsb	sy
}
 80004e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <__NVIC_SystemReset+0x20>
 80004ec:	e000ed00 	.word	0xe000ed00
 80004f0:	05fa0004 	.word	0x05fa0004

080004f4 <CDC_FS_RxDataReady_Callback>:
/* USER CODE BEGIN 0 */

/* A callback function for USB received data handling.
 * NB! Must be kept short because it is triggered by an interrupt.
 */
void CDC_FS_RxDataReady_Callback(uint8_t * RxBuf, uint8_t Length){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
	if (Length == 1){
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d154      	bne.n	80005b0 <CDC_FS_RxDataReady_Callback+0xbc>
		switch (*RxBuf){
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b7f      	cmp	r3, #127	; 0x7f
 800050c:	d018      	beq.n	8000540 <CDC_FS_RxDataReady_Callback+0x4c>
 800050e:	2b7f      	cmp	r3, #127	; 0x7f
 8000510:	dc21      	bgt.n	8000556 <CDC_FS_RxDataReady_Callback+0x62>
 8000512:	2b08      	cmp	r3, #8
 8000514:	d009      	beq.n	800052a <CDC_FS_RxDataReady_Callback+0x36>
 8000516:	2b0d      	cmp	r3, #13
 8000518:	d11d      	bne.n	8000556 <CDC_FS_RxDataReady_Callback+0x62>
		case '\r': // Marks the end of buffer
			CDC_Transmit_FS((uint8_t *) "\r\n", 2);
 800051a:	2102      	movs	r1, #2
 800051c:	482f      	ldr	r0, [pc, #188]	; (80005dc <CDC_FS_RxDataReady_Callback+0xe8>)
 800051e:	f00b f86d 	bl	800b5fc <CDC_Transmit_FS>
			USB_RxDataReadyFlag = 1; // The contents of the buffer are ready to be parsed
 8000522:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <CDC_FS_RxDataReady_Callback+0xec>)
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
			break;
 8000528:	e053      	b.n	80005d2 <CDC_FS_RxDataReady_Callback+0xde>
		case '\b': // BACKSPACE key (backspace for Minicom)
			if (USB_RxBufIndex > 0){
 800052a:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d04c      	beq.n	80005cc <CDC_FS_RxDataReady_Callback+0xd8>
				USB_RxBufIndex--; // Take a step back in the buffer
 8000532:	4b2c      	ldr	r3, [pc, #176]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	3b01      	subs	r3, #1
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b2a      	ldr	r3, [pc, #168]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 800053c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800053e:	e045      	b.n	80005cc <CDC_FS_RxDataReady_Callback+0xd8>
		case 0x7F: // DEL key (backspace for Picocom and Tio)
			if (USB_RxBufIndex > 0){
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d043      	beq.n	80005d0 <CDC_FS_RxDataReady_Callback+0xdc>
				USB_RxBufIndex--; // Take a step back in the buffer
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	3b01      	subs	r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000552:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000554:	e03c      	b.n	80005d0 <CDC_FS_RxDataReady_Callback+0xdc>
		default:
			if (USB_RxBufIndex < (USB_RxBufLen - 1)){
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	461a      	mov	r2, r3
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <CDC_FS_RxDataReady_Callback+0xf4>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	3b01      	subs	r3, #1
 8000562:	429a      	cmp	r2, r3
 8000564:	da0d      	bge.n	8000582 <CDC_FS_RxDataReady_Callback+0x8e>
				USB_RxBuf[USB_RxBufIndex] = *RxBuf;
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	7819      	ldrb	r1, [r3, #0]
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <CDC_FS_RxDataReady_Callback+0xf8>)
 8000572:	5499      	strb	r1, [r3, r2]
				USB_RxBufIndex++;
 8000574:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 800057e:	701a      	strb	r2, [r3, #0]
		// Copy the contents of the main USB buffer to a secondary buffer for parsing
		strncpy((char *) USB_RxBuf, (char *) RxBuf, Length);
		USB_RxBufLen = Length;
		USB_RxDataReadyFlag = 1;
	}
}
 8000580:	e027      	b.n	80005d2 <CDC_FS_RxDataReady_Callback+0xde>
			else if (USB_RxBufIndex == USB_RxBufLen - 1){
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <CDC_FS_RxDataReady_Callback+0xf4>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	429a      	cmp	r2, r3
 8000590:	d10a      	bne.n	80005a8 <CDC_FS_RxDataReady_Callback+0xb4>
				USB_RxBuf[USB_RxBufIndex] = *RxBuf;
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7819      	ldrb	r1, [r3, #0]
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <CDC_FS_RxDataReady_Callback+0xf8>)
 800059e:	5499      	strb	r1, [r3, r2]
				USB_RxBufFull = 1;
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <CDC_FS_RxDataReady_Callback+0xfc>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	e014      	b.n	80005d2 <CDC_FS_RxDataReady_Callback+0xde>
				USB_RxBufOverflow = 1;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <CDC_FS_RxDataReady_Callback+0x100>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
}
 80005ae:	e010      	b.n	80005d2 <CDC_FS_RxDataReady_Callback+0xde>
		strncpy((char *) USB_RxBuf, (char *) RxBuf, Length);
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	461a      	mov	r2, r3
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	480d      	ldr	r0, [pc, #52]	; (80005ec <CDC_FS_RxDataReady_Callback+0xf8>)
 80005b8:	f00b fd50 	bl	800c05c <strncpy>
		USB_RxBufLen = Length;
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <CDC_FS_RxDataReady_Callback+0xf4>)
 80005c2:	801a      	strh	r2, [r3, #0]
		USB_RxDataReadyFlag = 1;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <CDC_FS_RxDataReady_Callback+0xec>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	e002      	b.n	80005d2 <CDC_FS_RxDataReady_Callback+0xde>
			break;
 80005cc:	bf00      	nop
 80005ce:	e000      	b.n	80005d2 <CDC_FS_RxDataReady_Callback+0xde>
			break;
 80005d0:	bf00      	nop
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	0800c0e4 	.word	0x0800c0e4
 80005e0:	20000681 	.word	0x20000681
 80005e4:	2000067c 	.word	0x2000067c
 80005e8:	20000002 	.word	0x20000002
 80005ec:	2000027c 	.word	0x2000027c
 80005f0:	2000067d 	.word	0x2000067d
 80005f4:	2000067e 	.word	0x2000067e

080005f8 <USB_Rx_Parser>:

void USB_Rx_Parser(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	if (USB_RxDataReadyFlag){
 80005fc:	4bbe      	ldr	r3, [pc, #760]	; (80008f8 <USB_Rx_Parser+0x300>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	f000 8231 	beq.w	8000a68 <USB_Rx_Parser+0x470>
		if (Reset){
 8000606:	4bbd      	ldr	r3, [pc, #756]	; (80008fc <USB_Rx_Parser+0x304>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d03c      	beq.n	8000688 <USB_Rx_Parser+0x90>
			if (USB_RxBufIndex == 1){
 800060e:	4bbc      	ldr	r3, [pc, #752]	; (8000900 <USB_Rx_Parser+0x308>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d130      	bne.n	8000678 <USB_Rx_Parser+0x80>
				switch (*USB_RxBuf){
 8000616:	4bbb      	ldr	r3, [pc, #748]	; (8000904 <USB_Rx_Parser+0x30c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b6e      	cmp	r3, #110	; 0x6e
 800061c:	d019      	beq.n	8000652 <USB_Rx_Parser+0x5a>
 800061e:	2b79      	cmp	r3, #121	; 0x79
 8000620:	d122      	bne.n	8000668 <USB_Rx_Parser+0x70>
					case 'y':
						if (ANSI_ColorsOn){
 8000622:	4bb9      	ldr	r3, [pc, #740]	; (8000908 <USB_Rx_Parser+0x310>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d007      	beq.n	800063a <USB_Rx_Parser+0x42>
							HAL_Delay(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 ff80 	bl	8001530 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "\e[1m\e[31mRESTARTING!\r\n\e[37m\e[0m", 31);
 8000630:	211f      	movs	r1, #31
 8000632:	48b6      	ldr	r0, [pc, #728]	; (800090c <USB_Rx_Parser+0x314>)
 8000634:	f00a ffe2 	bl	800b5fc <CDC_Transmit_FS>
 8000638:	e006      	b.n	8000648 <USB_Rx_Parser+0x50>
						}
						else{
							HAL_Delay(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f000 ff78 	bl	8001530 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "RESTARTING!\r\n", 13);
 8000640:	210d      	movs	r1, #13
 8000642:	48b3      	ldr	r0, [pc, #716]	; (8000910 <USB_Rx_Parser+0x318>)
 8000644:	f00a ffda 	bl	800b5fc <CDC_Transmit_FS>
						}
						HAL_Delay(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f000 ff71 	bl	8001530 <HAL_Delay>
						NVIC_SystemReset(); // Reset the device
 800064e:	f7ff ff3b 	bl	80004c8 <__NVIC_SystemReset>
					case 'n':
						Reset = 0;
 8000652:	4baa      	ldr	r3, [pc, #680]	; (80008fc <USB_Rx_Parser+0x304>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
						HAL_Delay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f000 ff69 	bl	8001530 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 800065e:	2111      	movs	r1, #17
 8000660:	48ac      	ldr	r0, [pc, #688]	; (8000914 <USB_Rx_Parser+0x31c>)
 8000662:	f00a ffcb 	bl	800b5fc <CDC_Transmit_FS>
						break;
 8000666:	e1f9      	b.n	8000a5c <USB_Rx_Parser+0x464>
					default:
						HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f000 ff61 	bl	8001530 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 800066e:	2119      	movs	r1, #25
 8000670:	48a9      	ldr	r0, [pc, #676]	; (8000918 <USB_Rx_Parser+0x320>)
 8000672:	f00a ffc3 	bl	800b5fc <CDC_Transmit_FS>
 8000676:	e1f1      	b.n	8000a5c <USB_Rx_Parser+0x464>
				}
			}
			else{
				HAL_Delay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f000 ff59 	bl	8001530 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 800067e:	2119      	movs	r1, #25
 8000680:	48a5      	ldr	r0, [pc, #660]	; (8000918 <USB_Rx_Parser+0x320>)
 8000682:	f00a ffbb 	bl	800b5fc <CDC_Transmit_FS>
 8000686:	e1e9      	b.n	8000a5c <USB_Rx_Parser+0x464>
			}
		}
		else if (USB_RxBufIndex == 1){
 8000688:	4b9d      	ldr	r3, [pc, #628]	; (8000900 <USB_Rx_Parser+0x308>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	f040 81b0 	bne.w	80009f2 <USB_Rx_Parser+0x3fa>
			switch (*USB_RxBuf){
 8000692:	4b9c      	ldr	r3, [pc, #624]	; (8000904 <USB_Rx_Parser+0x30c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	3b52      	subs	r3, #82	; 0x52
 8000698:	2b22      	cmp	r3, #34	; 0x22
 800069a:	f200 818f 	bhi.w	80009bc <USB_Rx_Parser+0x3c4>
 800069e:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <USB_Rx_Parser+0xac>)
 80006a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a4:	080007ad 	.word	0x080007ad
 80006a8:	080009bd 	.word	0x080009bd
 80006ac:	080009bd 	.word	0x080009bd
 80006b0:	080009bd 	.word	0x080009bd
 80006b4:	080009bd 	.word	0x080009bd
 80006b8:	080009bd 	.word	0x080009bd
 80006bc:	080009bd 	.word	0x080009bd
 80006c0:	080009bd 	.word	0x080009bd
 80006c4:	080009bd 	.word	0x080009bd
 80006c8:	080009bd 	.word	0x080009bd
 80006cc:	080009bd 	.word	0x080009bd
 80006d0:	080009bd 	.word	0x080009bd
 80006d4:	080009bd 	.word	0x080009bd
 80006d8:	080009bd 	.word	0x080009bd
 80006dc:	080009bd 	.word	0x080009bd
 80006e0:	080009bd 	.word	0x080009bd
 80006e4:	080009bd 	.word	0x080009bd
 80006e8:	08000769 	.word	0x08000769
 80006ec:	080009bd 	.word	0x080009bd
 80006f0:	080009bd 	.word	0x080009bd
 80006f4:	080009bd 	.word	0x080009bd
 80006f8:	080009bd 	.word	0x080009bd
 80006fc:	080009bd 	.word	0x080009bd
 8000700:	08000813 	.word	0x08000813
 8000704:	080009bd 	.word	0x080009bd
 8000708:	080009bd 	.word	0x080009bd
 800070c:	08000731 	.word	0x08000731
 8000710:	080009bd 	.word	0x080009bd
 8000714:	080009bd 	.word	0x080009bd
 8000718:	080009bd 	.word	0x080009bd
 800071c:	0800083b 	.word	0x0800083b
 8000720:	080009bd 	.word	0x080009bd
 8000724:	080007c3 	.word	0x080007c3
 8000728:	080009bd 	.word	0x080009bd
 800072c:	080007eb 	.word	0x080007eb
			case 'l':
				if (ANSI_ColorsOn){
 8000730:	4b75      	ldr	r3, [pc, #468]	; (8000908 <USB_Rx_Parser+0x310>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d008      	beq.n	800074a <USB_Rx_Parser+0x152>
					HAL_Delay(1);
 8000738:	2001      	movs	r0, #1
 800073a:	f000 fef9 	bl	8001530 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[36m\r\nLIST OF COMMANDS:\r\n\e[37m"
 800073e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000742:	4876      	ldr	r0, [pc, #472]	; (800091c <USB_Rx_Parser+0x324>)
 8000744:	f00a ff5a 	bl	800b5fc <CDC_Transmit_FS>
 8000748:	e006      	b.n	8000758 <USB_Rx_Parser+0x160>
						"\tR - Reset the device\r\n"
						"\tt - Put the device into transmit mode\r\n\n"
						, 262);
				}
				else{
					HAL_Delay(1);
 800074a:	2001      	movs	r0, #1
 800074c:	f000 fef0 	bl	8001530 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\r\nLIST OF COMMANDS:\r\n"
 8000750:	21fc      	movs	r1, #252	; 0xfc
 8000752:	4873      	ldr	r0, [pc, #460]	; (8000920 <USB_Rx_Parser+0x328>)
 8000754:	f00a ff52 	bl	800b5fc <CDC_Transmit_FS>
							"\tr - Put the device into receive mode\r\n"
							"\tR - Reset the device\r\n"
							"\tt - Put the device into transmit mode\r\n\n"
							, 252);
				}
				HAL_Delay(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f000 fee9 	bl	8001530 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 800075e:	2111      	movs	r1, #17
 8000760:	486c      	ldr	r0, [pc, #432]	; (8000914 <USB_Rx_Parser+0x31c>)
 8000762:	f00a ff4b 	bl	800b5fc <CDC_Transmit_FS>
				break;
 8000766:	e179      	b.n	8000a5c <USB_Rx_Parser+0x464>
			case 'c':
				ANSI_ColorsOn ^= 0x01; // Toggle the terminal color mode
 8000768:	4b67      	ldr	r3, [pc, #412]	; (8000908 <USB_Rx_Parser+0x310>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	f083 0301 	eor.w	r3, r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b65      	ldr	r3, [pc, #404]	; (8000908 <USB_Rx_Parser+0x310>)
 8000774:	701a      	strb	r2, [r3, #0]
				if (ANSI_ColorsOn){
 8000776:	4b64      	ldr	r3, [pc, #400]	; (8000908 <USB_Rx_Parser+0x310>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d007      	beq.n	800078e <USB_Rx_Parser+0x196>
					HAL_Delay(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f000 fed6 	bl	8001530 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[32mANSI COLORS ACTIVATED!\e[37m\r\n", 36);
 8000784:	2124      	movs	r1, #36	; 0x24
 8000786:	4867      	ldr	r0, [pc, #412]	; (8000924 <USB_Rx_Parser+0x32c>)
 8000788:	f00a ff38 	bl	800b5fc <CDC_Transmit_FS>
 800078c:	e006      	b.n	800079c <USB_Rx_Parser+0x1a4>
				}
				else{
					HAL_Delay(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f000 fece 	bl	8001530 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[31mANSI COLORS DEACTIVATED!\e[37m\r\n", 36);
 8000794:	2124      	movs	r1, #36	; 0x24
 8000796:	4864      	ldr	r0, [pc, #400]	; (8000928 <USB_Rx_Parser+0x330>)
 8000798:	f00a ff30 	bl	800b5fc <CDC_Transmit_FS>
				}
				HAL_Delay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f000 fec7 	bl	8001530 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 80007a2:	2111      	movs	r1, #17
 80007a4:	485b      	ldr	r0, [pc, #364]	; (8000914 <USB_Rx_Parser+0x31c>)
 80007a6:	f00a ff29 	bl	800b5fc <CDC_Transmit_FS>
				break;
 80007aa:	e157      	b.n	8000a5c <USB_Rx_Parser+0x464>
			case 'R':
				HAL_Delay(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f000 febf 	bl	8001530 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 80007b2:	2119      	movs	r1, #25
 80007b4:	4858      	ldr	r0, [pc, #352]	; (8000918 <USB_Rx_Parser+0x320>)
 80007b6:	f00a ff21 	bl	800b5fc <CDC_Transmit_FS>
				Reset = 1;
 80007ba:	4b50      	ldr	r3, [pc, #320]	; (80008fc <USB_Rx_Parser+0x304>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
				break;
 80007c0:	e14c      	b.n	8000a5c <USB_Rx_Parser+0x464>
			case 'r':
				if (ANSI_ColorsOn){
 80007c2:	4b51      	ldr	r3, [pc, #324]	; (8000908 <USB_Rx_Parser+0x310>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d007      	beq.n	80007da <USB_Rx_Parser+0x1e2>
					HAL_Delay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 feb0 	bl	8001530 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[32mReceive mode active!\e[37m\r\n", 32);
 80007d0:	2120      	movs	r1, #32
 80007d2:	4856      	ldr	r0, [pc, #344]	; (800092c <USB_Rx_Parser+0x334>)
 80007d4:	f00a ff12 	bl	800b5fc <CDC_Transmit_FS>
				}
				else{
					HAL_Delay(1);
					CDC_Transmit_FS((uint8_t *) "Receive mode active!\r\n", 22);
				}
				break;
 80007d8:	e140      	b.n	8000a5c <USB_Rx_Parser+0x464>
					HAL_Delay(1);
 80007da:	2001      	movs	r0, #1
 80007dc:	f000 fea8 	bl	8001530 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "Receive mode active!\r\n", 22);
 80007e0:	2116      	movs	r1, #22
 80007e2:	4853      	ldr	r0, [pc, #332]	; (8000930 <USB_Rx_Parser+0x338>)
 80007e4:	f00a ff0a 	bl	800b5fc <CDC_Transmit_FS>
				break;
 80007e8:	e138      	b.n	8000a5c <USB_Rx_Parser+0x464>
			case 't':
				if (ANSI_ColorsOn){
 80007ea:	4b47      	ldr	r3, [pc, #284]	; (8000908 <USB_Rx_Parser+0x310>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d007      	beq.n	8000802 <USB_Rx_Parser+0x20a>
					HAL_Delay(1);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 fe9c 	bl	8001530 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[32mTransmit mode active!\e[37m\r\n", 33);
 80007f8:	2121      	movs	r1, #33	; 0x21
 80007fa:	484e      	ldr	r0, [pc, #312]	; (8000934 <USB_Rx_Parser+0x33c>)
 80007fc:	f00a fefe 	bl	800b5fc <CDC_Transmit_FS>
				}
				else{
					HAL_Delay(1);
					CDC_Transmit_FS((uint8_t *) "Transmit mode active!\r\n", 23);
				}
				break;
 8000800:	e12c      	b.n	8000a5c <USB_Rx_Parser+0x464>
					HAL_Delay(1);
 8000802:	2001      	movs	r0, #1
 8000804:	f000 fe94 	bl	8001530 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "Transmit mode active!\r\n", 23);
 8000808:	2117      	movs	r1, #23
 800080a:	484b      	ldr	r0, [pc, #300]	; (8000938 <USB_Rx_Parser+0x340>)
 800080c:	f00a fef6 	bl	800b5fc <CDC_Transmit_FS>
				break;
 8000810:	e124      	b.n	8000a5c <USB_Rx_Parser+0x464>
			case 'i':
				if (ANSI_ColorsOn){
 8000812:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <USB_Rx_Parser+0x310>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d007      	beq.n	800082a <USB_Rx_Parser+0x232>
					HAL_Delay(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f000 fe88 	bl	8001530 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[32m\r\nDevice info mode!\e[37m\r\n", 31);
 8000820:	211f      	movs	r1, #31
 8000822:	4846      	ldr	r0, [pc, #280]	; (800093c <USB_Rx_Parser+0x344>)
 8000824:	f00a feea 	bl	800b5fc <CDC_Transmit_FS>
				}
				else{
					HAL_Delay(1);
					CDC_Transmit_FS((uint8_t *) "Device info mode!\r\n", 19);
				}
				break;
 8000828:	e118      	b.n	8000a5c <USB_Rx_Parser+0x464>
					HAL_Delay(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f000 fe80 	bl	8001530 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "Device info mode!\r\n", 19);
 8000830:	2113      	movs	r1, #19
 8000832:	4843      	ldr	r0, [pc, #268]	; (8000940 <USB_Rx_Parser+0x348>)
 8000834:	f00a fee2 	bl	800b5fc <CDC_Transmit_FS>
				break;
 8000838:	e110      	b.n	8000a5c <USB_Rx_Parser+0x464>
			case 'p':
				if (RF_AmpSupplyOnWarning){
 800083a:	4b42      	ldr	r3, [pc, #264]	; (8000944 <USB_Rx_Parser+0x34c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d024      	beq.n	800088c <USB_Rx_Parser+0x294>
					if (ANSI_ColorsOn){
 8000842:	4b31      	ldr	r3, [pc, #196]	; (8000908 <USB_Rx_Parser+0x310>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00e      	beq.n	8000868 <USB_Rx_Parser+0x270>
						HAL_Delay(1);
 800084a:	2001      	movs	r0, #1
 800084c:	f000 fe70 	bl	8001530 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "\e[31m\e[1mWARNING!\e[0m\e[31m When the amplifier is turned on, the current\r\n"
 8000850:	21c6      	movs	r1, #198	; 0xc6
 8000852:	483d      	ldr	r0, [pc, #244]	; (8000948 <USB_Rx_Parser+0x350>)
 8000854:	f00a fed2 	bl	800b5fc <CDC_Transmit_FS>
								"consumption increases way above 500 mA. Make sure your USB port\r\n"
								"can handle this load. To proceed, repeat the command.\e[37m\r\n"
								, 198);
						HAL_Delay(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f000 fe69 	bl	8001530 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 800085e:	2111      	movs	r1, #17
 8000860:	482c      	ldr	r0, [pc, #176]	; (8000914 <USB_Rx_Parser+0x31c>)
 8000862:	f00a fecb 	bl	800b5fc <CDC_Transmit_FS>
 8000866:	e00d      	b.n	8000884 <USB_Rx_Parser+0x28c>
					}
					else{
						HAL_Delay(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f000 fe61 	bl	8001530 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "WARNING! When the amplifier is turned on, the current\r\n"
 800086e:	21af      	movs	r1, #175	; 0xaf
 8000870:	4836      	ldr	r0, [pc, #216]	; (800094c <USB_Rx_Parser+0x354>)
 8000872:	f00a fec3 	bl	800b5fc <CDC_Transmit_FS>
								"consumption increases way above 500 mA. Make sure your USB port\r\n"
								"can handle this load. To proceed, repeat the command.\r\n"
								, 175);
						HAL_Delay(1);
 8000876:	2001      	movs	r0, #1
 8000878:	f000 fe5a 	bl	8001530 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 800087c:	2111      	movs	r1, #17
 800087e:	4825      	ldr	r0, [pc, #148]	; (8000914 <USB_Rx_Parser+0x31c>)
 8000880:	f00a febc 	bl	800b5fc <CDC_Transmit_FS>
					}
					RF_AmpSupplyOnWarning = 0;
 8000884:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <USB_Rx_Parser+0x34c>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
						HAL_Delay(1);
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the RF amplifier OFF
						RF_AmpSupplyOnWarning = 1; // Reset the warning flag for next turn-on event
					}
				}
				break;
 800088a:	e0e7      	b.n	8000a5c <USB_Rx_Parser+0x464>
					RF_AmpSupplyOn ^= 0x01; // Toggle the RF amp flag
 800088c:	4b30      	ldr	r3, [pc, #192]	; (8000950 <USB_Rx_Parser+0x358>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	f083 0301 	eor.w	r3, r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <USB_Rx_Parser+0x358>)
 8000898:	701a      	strb	r2, [r3, #0]
					if (RF_AmpSupplyOn){
 800089a:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <USB_Rx_Parser+0x358>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d05e      	beq.n	8000960 <USB_Rx_Parser+0x368>
						if (ANSI_ColorsOn){
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <USB_Rx_Parser+0x310>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00e      	beq.n	80008c8 <USB_Rx_Parser+0x2d0>
							HAL_Delay(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 fe40 	bl	8001530 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "\e[1m\e[32m# RF AMPLIFIER SUPPLY ON!\e[37m\r\n\e[0m", 45);
 80008b0:	212d      	movs	r1, #45	; 0x2d
 80008b2:	4828      	ldr	r0, [pc, #160]	; (8000954 <USB_Rx_Parser+0x35c>)
 80008b4:	f00a fea2 	bl	800b5fc <CDC_Transmit_FS>
							HAL_Delay(1);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f000 fe39 	bl	8001530 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 80008be:	2111      	movs	r1, #17
 80008c0:	4814      	ldr	r0, [pc, #80]	; (8000914 <USB_Rx_Parser+0x31c>)
 80008c2:	f00a fe9b 	bl	800b5fc <CDC_Transmit_FS>
 80008c6:	e00d      	b.n	80008e4 <USB_Rx_Parser+0x2ec>
							HAL_Delay(1);
 80008c8:	2001      	movs	r0, #1
 80008ca:	f000 fe31 	bl	8001530 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "# RF AMPLIFIER SUPPLY ON!\r\n", 27);
 80008ce:	211b      	movs	r1, #27
 80008d0:	4821      	ldr	r0, [pc, #132]	; (8000958 <USB_Rx_Parser+0x360>)
 80008d2:	f00a fe93 	bl	800b5fc <CDC_Transmit_FS>
							HAL_Delay(1);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f000 fe2a 	bl	8001530 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 80008dc:	2111      	movs	r1, #17
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <USB_Rx_Parser+0x31c>)
 80008e0:	f00a fe8c 	bl	800b5fc <CDC_Transmit_FS>
						HAL_Delay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f000 fe23 	bl	8001530 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); // Turn the RF amplifier ON
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f0:	481a      	ldr	r0, [pc, #104]	; (800095c <USB_Rx_Parser+0x364>)
 80008f2:	f002 f875 	bl	80029e0 <HAL_GPIO_WritePin>
				break;
 80008f6:	e0b1      	b.n	8000a5c <USB_Rx_Parser+0x464>
 80008f8:	20000681 	.word	0x20000681
 80008fc:	20000682 	.word	0x20000682
 8000900:	2000067c 	.word	0x2000067c
 8000904:	2000027c 	.word	0x2000027c
 8000908:	2000067f 	.word	0x2000067f
 800090c:	0800c0e8 	.word	0x0800c0e8
 8000910:	0800c108 	.word	0x0800c108
 8000914:	0800c118 	.word	0x0800c118
 8000918:	0800c12c 	.word	0x0800c12c
 800091c:	0800c148 	.word	0x0800c148
 8000920:	0800c250 	.word	0x0800c250
 8000924:	0800c350 	.word	0x0800c350
 8000928:	0800c374 	.word	0x0800c374
 800092c:	0800c39c 	.word	0x0800c39c
 8000930:	0800c3c0 	.word	0x0800c3c0
 8000934:	0800c3d8 	.word	0x0800c3d8
 8000938:	0800c3fc 	.word	0x0800c3fc
 800093c:	0800c414 	.word	0x0800c414
 8000940:	0800c434 	.word	0x0800c434
 8000944:	20000000 	.word	0x20000000
 8000948:	0800c448 	.word	0x0800c448
 800094c:	0800c510 	.word	0x0800c510
 8000950:	20000680 	.word	0x20000680
 8000954:	0800c5c0 	.word	0x0800c5c0
 8000958:	0800c5f0 	.word	0x0800c5f0
 800095c:	48000800 	.word	0x48000800
						if (ANSI_ColorsOn){
 8000960:	4b42      	ldr	r3, [pc, #264]	; (8000a6c <USB_Rx_Parser+0x474>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00e      	beq.n	8000986 <USB_Rx_Parser+0x38e>
							HAL_Delay(1);
 8000968:	2001      	movs	r0, #1
 800096a:	f000 fde1 	bl	8001530 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "\e[1m\e[31m# RF AMPLIFIER SUPPLY OFF!\e[37m\r\n\e[0m", 46);
 800096e:	212e      	movs	r1, #46	; 0x2e
 8000970:	483f      	ldr	r0, [pc, #252]	; (8000a70 <USB_Rx_Parser+0x478>)
 8000972:	f00a fe43 	bl	800b5fc <CDC_Transmit_FS>
							HAL_Delay(1);
 8000976:	2001      	movs	r0, #1
 8000978:	f000 fdda 	bl	8001530 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 800097c:	2111      	movs	r1, #17
 800097e:	483d      	ldr	r0, [pc, #244]	; (8000a74 <USB_Rx_Parser+0x47c>)
 8000980:	f00a fe3c 	bl	800b5fc <CDC_Transmit_FS>
 8000984:	e00d      	b.n	80009a2 <USB_Rx_Parser+0x3aa>
							HAL_Delay(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f000 fdd2 	bl	8001530 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "# RF AMPLIFIER SUPPLY OFF!\r\n", 28);
 800098c:	211c      	movs	r1, #28
 800098e:	483a      	ldr	r0, [pc, #232]	; (8000a78 <USB_Rx_Parser+0x480>)
 8000990:	f00a fe34 	bl	800b5fc <CDC_Transmit_FS>
							HAL_Delay(1);
 8000994:	2001      	movs	r0, #1
 8000996:	f000 fdcb 	bl	8001530 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 800099a:	2111      	movs	r1, #17
 800099c:	4835      	ldr	r0, [pc, #212]	; (8000a74 <USB_Rx_Parser+0x47c>)
 800099e:	f00a fe2d 	bl	800b5fc <CDC_Transmit_FS>
						HAL_Delay(1);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f000 fdc4 	bl	8001530 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the RF amplifier OFF
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ae:	4833      	ldr	r0, [pc, #204]	; (8000a7c <USB_Rx_Parser+0x484>)
 80009b0:	f002 f816 	bl	80029e0 <HAL_GPIO_WritePin>
						RF_AmpSupplyOnWarning = 1; // Reset the warning flag for next turn-on event
 80009b4:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <USB_Rx_Parser+0x488>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
				break;
 80009ba:	e04f      	b.n	8000a5c <USB_Rx_Parser+0x464>
			default:
				if (ANSI_ColorsOn){
 80009bc:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <USB_Rx_Parser+0x474>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d007      	beq.n	80009d4 <USB_Rx_Parser+0x3dc>
					HAL_Delay(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 fdb3 	bl	8001530 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[1m\e[31mCOMMAND NOT FOUND!\e[37m\e[0m\r\n", 38);
 80009ca:	2126      	movs	r1, #38	; 0x26
 80009cc:	482d      	ldr	r0, [pc, #180]	; (8000a84 <USB_Rx_Parser+0x48c>)
 80009ce:	f00a fe15 	bl	800b5fc <CDC_Transmit_FS>
 80009d2:	e006      	b.n	80009e2 <USB_Rx_Parser+0x3ea>
				}
				else{
					HAL_Delay(1);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f000 fdab 	bl	8001530 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "COMMAND NOT FOUND!\r\n", 20);
 80009da:	2114      	movs	r1, #20
 80009dc:	482a      	ldr	r0, [pc, #168]	; (8000a88 <USB_Rx_Parser+0x490>)
 80009de:	f00a fe0d 	bl	800b5fc <CDC_Transmit_FS>
				}
				HAL_Delay(1);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f000 fda4 	bl	8001530 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Enter a command (\"l\" for a list of available commands): ", 56);
 80009e8:	2138      	movs	r1, #56	; 0x38
 80009ea:	4828      	ldr	r0, [pc, #160]	; (8000a8c <USB_Rx_Parser+0x494>)
 80009ec:	f00a fe06 	bl	800b5fc <CDC_Transmit_FS>
 80009f0:	e034      	b.n	8000a5c <USB_Rx_Parser+0x464>
			}
		}
		else if((strncmp((char *)USB_RxBuf, "test", 4) == 0) && (USB_RxBufIndex == 4)){
 80009f2:	2204      	movs	r2, #4
 80009f4:	4926      	ldr	r1, [pc, #152]	; (8000a90 <USB_Rx_Parser+0x498>)
 80009f6:	4827      	ldr	r0, [pc, #156]	; (8000a94 <USB_Rx_Parser+0x49c>)
 80009f8:	f00b fb1e 	bl	800c038 <strncmp>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d112      	bne.n	8000a28 <USB_Rx_Parser+0x430>
 8000a02:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <USB_Rx_Parser+0x4a0>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d10e      	bne.n	8000a28 <USB_Rx_Parser+0x430>
			HAL_Delay(1);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f000 fd90 	bl	8001530 <HAL_Delay>
			CDC_Transmit_FS((uint8_t *) "\r\nTested!\r\n", 11);
 8000a10:	210b      	movs	r1, #11
 8000a12:	4822      	ldr	r0, [pc, #136]	; (8000a9c <USB_Rx_Parser+0x4a4>)
 8000a14:	f00a fdf2 	bl	800b5fc <CDC_Transmit_FS>
			HAL_Delay(1);
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f000 fd89 	bl	8001530 <HAL_Delay>
			CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 8000a1e:	2111      	movs	r1, #17
 8000a20:	4814      	ldr	r0, [pc, #80]	; (8000a74 <USB_Rx_Parser+0x47c>)
 8000a22:	f00a fdeb 	bl	800b5fc <CDC_Transmit_FS>
 8000a26:	e019      	b.n	8000a5c <USB_Rx_Parser+0x464>
		}
		else{
			if (ANSI_ColorsOn){
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <USB_Rx_Parser+0x474>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d007      	beq.n	8000a40 <USB_Rx_Parser+0x448>
				HAL_Delay(1);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f000 fd7d 	bl	8001530 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "\e[1m\e[31mCOMMAND NOT FOUND!\e[37m\e[0m\r\n", 38);
 8000a36:	2126      	movs	r1, #38	; 0x26
 8000a38:	4812      	ldr	r0, [pc, #72]	; (8000a84 <USB_Rx_Parser+0x48c>)
 8000a3a:	f00a fddf 	bl	800b5fc <CDC_Transmit_FS>
 8000a3e:	e006      	b.n	8000a4e <USB_Rx_Parser+0x456>
			}
			else{
				HAL_Delay(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f000 fd75 	bl	8001530 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "COMMAND NOT FOUND!\r\n", 20);
 8000a46:	2114      	movs	r1, #20
 8000a48:	480f      	ldr	r0, [pc, #60]	; (8000a88 <USB_Rx_Parser+0x490>)
 8000a4a:	f00a fdd7 	bl	800b5fc <CDC_Transmit_FS>
			}
			HAL_Delay(1);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f000 fd6e 	bl	8001530 <HAL_Delay>
			CDC_Transmit_FS((uint8_t *) "Enter a command (\"l\" for a list of available commands): ", 56);
 8000a54:	2138      	movs	r1, #56	; 0x38
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <USB_Rx_Parser+0x494>)
 8000a58:	f00a fdd0 	bl	800b5fc <CDC_Transmit_FS>
		}
		USB_RxDataReadyFlag = 0; // Clear the flag
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <USB_Rx_Parser+0x4a8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
		USB_RxBufIndex = 0; // Reset the index
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <USB_Rx_Parser+0x4a0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
	}
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2000067f 	.word	0x2000067f
 8000a70:	0800c60c 	.word	0x0800c60c
 8000a74:	0800c118 	.word	0x0800c118
 8000a78:	0800c63c 	.word	0x0800c63c
 8000a7c:	48000800 	.word	0x48000800
 8000a80:	20000000 	.word	0x20000000
 8000a84:	0800c65c 	.word	0x0800c65c
 8000a88:	0800c684 	.word	0x0800c684
 8000a8c:	0800c69c 	.word	0x0800c69c
 8000a90:	0800c6d8 	.word	0x0800c6d8
 8000a94:	2000027c 	.word	0x2000027c
 8000a98:	2000067c 	.word	0x2000067c
 8000a9c:	0800c6e0 	.word	0x0800c6e0
 8000aa0:	20000681 	.word	0x20000681

08000aa4 <Si4468_CmdTransmitReceive>:

uint8_t Si4468_CmdTransmitReceive(uint8_t * TxBuf, uint8_t * RxBuf, uint8_t Length){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abc:	f001 ff90 	bl	80029e0 <HAL_GPIO_WritePin>
	uint8_t result = HAL_SPI_TransmitReceive(&hspi1, TxBuf, RxBuf, Length, HAL_MAX_DELAY);
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	9200      	str	r2, [sp, #0]
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	68f9      	ldr	r1, [r7, #12]
 8000ace:	480b      	ldr	r0, [pc, #44]	; (8000afc <Si4468_CmdTransmitReceive+0x58>)
 8000ad0:	f005 f8eb 	bl	8005caa <HAL_SPI_TransmitReceive>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f001 ff7d 	bl	80029e0 <HAL_GPIO_WritePin>
	if (result != HAL_OK) return 1;
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <Si4468_CmdTransmitReceive+0x4c>
 8000aec:	2301      	movs	r3, #1
 8000aee:	e000      	b.n	8000af2 <Si4468_CmdTransmitReceive+0x4e>
	return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000218 	.word	0x20000218

08000b00 <Si4468_CmdTransmit>:

uint8_t Si4468_CmdTransmit(uint8_t * RxBuf, uint8_t Length){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f001 ff63 	bl	80029e0 <HAL_GPIO_WritePin>
	uint8_t result = HAL_SPI_Transmit(&hspi1, RxBuf, Length, HAL_MAX_DELAY);
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	480a      	ldr	r0, [pc, #40]	; (8000b50 <Si4468_CmdTransmit+0x50>)
 8000b26:	f004 fe14 	bl	8005752 <HAL_SPI_Transmit>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f001 ff52 	bl	80029e0 <HAL_GPIO_WritePin>
	if (result != HAL_OK) return 1;
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <Si4468_CmdTransmit+0x46>
 8000b42:	2301      	movs	r3, #1
 8000b44:	e000      	b.n	8000b48 <Si4468_CmdTransmit+0x48>
	return 0;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000218 	.word	0x20000218

08000b54 <Si4468_CmdReadCmdReplyWhenReady>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
	if (result != HAL_OK) return 1;
	return 0;
}

uint8_t Si4468_CmdReadCmdReplyWhenReady(uint8_t * RxBuf, uint8_t Length){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	70fb      	strb	r3, [r7, #3]
	uint8_t CmdTxBuf[2] = {Si4468_READ_CMD_BUFF, 0};
 8000b60:	2344      	movs	r3, #68	; 0x44
 8000b62:	81bb      	strh	r3, [r7, #12]
	uint8_t CmdRxBuf[2] = {0, 0};
 8000b64:	2300      	movs	r3, #0
 8000b66:	813b      	strh	r3, [r7, #8]
	uint8_t result;
	while(1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f001 ff35 	bl	80029e0 <HAL_GPIO_WritePin>
		result = HAL_SPI_TransmitReceive(&hspi1, CmdTxBuf, CmdRxBuf, 2, HAL_MAX_DELAY);
 8000b76:	f107 0208 	add.w	r2, r7, #8
 8000b7a:	f107 010c 	add.w	r1, r7, #12
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2302      	movs	r3, #2
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <Si4468_CmdReadCmdReplyWhenReady+0x88>)
 8000b88:	f005 f88f 	bl	8005caa <HAL_SPI_TransmitReceive>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	73fb      	strb	r3, [r7, #15]
		if (CmdRxBuf[1] == 0xFF) break;
 8000b90:	7a7b      	ldrb	r3, [r7, #9]
 8000b92:	2bff      	cmp	r3, #255	; 0xff
 8000b94:	d00a      	beq.n	8000bac <Si4468_CmdReadCmdReplyWhenReady+0x58>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba0:	f001 ff1e 	bl	80029e0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f000 fcc3 	bl	8001530 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000baa:	e7dd      	b.n	8000b68 <Si4468_CmdReadCmdReplyWhenReady+0x14>
		if (CmdRxBuf[1] == 0xFF) break;
 8000bac:	bf00      	nop
	}
	result += HAL_SPI_Receive(&hspi1, RxBuf, Length, HAL_MAX_DELAY);
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <Si4468_CmdReadCmdReplyWhenReady+0x88>)
 8000bba:	f004 ff3f 	bl	8005a3c <HAL_SPI_Receive>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	73fb      	strb	r3, [r7, #15]
	if (result != HAL_OK) return 1;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <Si4468_CmdReadCmdReplyWhenReady+0x7e>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e000      	b.n	8000bd4 <Si4468_CmdReadCmdReplyWhenReady+0x80>
	return 0;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000218 	.word	0x20000218

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0e0      	sub	sp, #384	; 0x180
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t Si4468_TxBuf[64] = {0}; // For writing to Si4468 FIFO registers
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000bec:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000bf0:	223c      	movs	r2, #60	; 0x3c
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f00b fa17 	bl	800c028 <memset>
	uint8_t Si4468_RxBuf[64] = {0}; // For reading from Si4468 FIFO registers
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000c00:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000c04:	223c      	movs	r2, #60	; 0x3c
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f00b fa0d 	bl	800c028 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0e:	f000 fc1a 	bl	8001446 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c12:	f000 f8a5 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c16:	f000 f9df 	bl	8000fd8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c1a:	f000 f8f7 	bl	8000e0c <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000c1e:	f000 f96b 	bl	8000ef8 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000c22:	f000 f99b 	bl	8000f5c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000c26:	f00a fc13 	bl	800b450 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Set SPI NSS high
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f001 fed4 	bl	80029e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the amplifier OFF (drive EN low)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c3e:	4842      	ldr	r0, [pc, #264]	; (8000d48 <main+0x168>)
 8000c40:	f001 fece 	bl	80029e0 <HAL_GPIO_WritePin>

  // ### Si4468 TRANSCEIVER STARTUP
  // Perform a POR (Power on reset)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f001 fec7 	bl	80029e0 <HAL_GPIO_WritePin>
  HAL_Delay(1); // A minimum of 10 us is required
 8000c52:	2001      	movs	r0, #1
 8000c54:	f000 fc6c 	bl	8001530 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f001 febd 	bl	80029e0 <HAL_GPIO_WritePin>
  HAL_Delay(10); // POR should not take more than 6 ms, but let's be safe...
 8000c66:	200a      	movs	r0, #10
 8000c68:	f000 fc62 	bl	8001530 <HAL_Delay>
  // Send a POWER_UP command to Si4468
  Si4468_CmdTxBuf[0] = Si4468_POWER_UP;
 8000c6c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000c74:	2202      	movs	r2, #2
 8000c76:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x01;
 8000c78:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000c80:	2201      	movs	r2, #1
 8000c82:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x01; // Using an external drive (TCXO) as clock source
 8000c84:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000c88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	709a      	strb	r2, [r3, #2]
  /* TCXO frequency is 30 MHz (30'000'000 Hz; in hex: 0x01C9C380).
   * NB! The byte order of the following hex value is reversed due to Endianness!
   * Si4468 expects most significant byte first, but STM32L412 seems to
   * be Little-Endian.
   */
  *((uint32_t *) &Si4468_CmdTxBuf[3]) = 0x80C3C901;
 8000c90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000c94:	3303      	adds	r3, #3
 8000c96:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <main+0x16c>)
 8000c98:	601a      	str	r2, [r3, #0]
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 7);
 8000c9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000c9e:	2107      	movs	r1, #7
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff2d 	bl	8000b00 <Si4468_CmdTransmit>

  /* Wait until Si4468 has finished the power-up sequence.
   * The transceiver will be ready when the returned value of
   * CTS (clear to send) byte will be equal to 0xFF
   */
  Si4468_CmdTxBuf[0] = Si4468_READ_CMD_BUFF;
 8000ca6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000caa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000cae:	2244      	movs	r2, #68	; 0x44
 8000cb0:	701a      	strb	r2, [r3, #0]
  Si4468_CmdRxBuf[1] = 0;
 8000cb2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000cb6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000cba:	2200      	movs	r2, #0
 8000cbc:	705a      	strb	r2, [r3, #1]
  while(Si4468_CmdRxBuf[1] != 0xFF){
 8000cbe:	e006      	b.n	8000cce <main+0xee>
	  Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff feeb 	bl	8000aa4 <Si4468_CmdTransmitReceive>
  while(Si4468_CmdRxBuf[1] != 0xFF){
 8000cce:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000cd2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000cd6:	785b      	ldrb	r3, [r3, #1]
 8000cd8:	2bff      	cmp	r3, #255	; 0xff
 8000cda:	d1f1      	bne.n	8000cc0 <main+0xe0>
  }

  /* Read the "part info" of the device to make sure the initialization worked
   * and we have a good SPI communication going...
   */
  Si4468_CmdTxBuf[0] = Si4468_PART_INFO;
 8000cdc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000ce0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
  Si4468_CmdRxBuf[1] = 0;
 8000ce8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000cec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fed1 	bl	8000aa4 <Si4468_CmdTransmitReceive>
  Si4468_CmdReadCmdReplyWhenReady(Si4468_CmdRxBuf, 8);
 8000d02:	463b      	mov	r3, r7
 8000d04:	2108      	movs	r1, #8
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff24 	bl	8000b54 <Si4468_CmdReadCmdReplyWhenReady>

  // Wait for the COM port to open:
  while(!USB_COM_Port_open){
 8000d0c:	bf00      	nop
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <main+0x170>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0fb      	beq.n	8000d0e <main+0x12e>
	  //
  };
  HAL_Delay(1000);
 8000d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1a:	f000 fc09 	bl	8001530 <HAL_Delay>
  // Send the welcome message:
  CDC_Transmit_FS((uint8_t *) "PQ9 COM module V1.1 by 213415IACB\r\n", 35);
 8000d1e:	2123      	movs	r1, #35	; 0x23
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <main+0x174>)
 8000d22:	f00a fc6b 	bl	800b5fc <CDC_Transmit_FS>
  HAL_Delay(1);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f000 fc02 	bl	8001530 <HAL_Delay>
  CDC_Transmit_FS((uint8_t *) "Copyright (c): Ergo Haavasalu 2024, TalTech\r\n", 45);
 8000d2c:	212d      	movs	r1, #45	; 0x2d
 8000d2e:	480a      	ldr	r0, [pc, #40]	; (8000d58 <main+0x178>)
 8000d30:	f00a fc64 	bl	800b5fc <CDC_Transmit_FS>
  HAL_Delay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f000 fbfb 	bl	8001530 <HAL_Delay>
  CDC_Transmit_FS((uint8_t *) "Enter a command (\"l\" for a list of available commands): ", 56);
 8000d3a:	2138      	movs	r1, #56	; 0x38
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <main+0x17c>)
 8000d3e:	f00a fc5d 	bl	800b5fc <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  USB_Rx_Parser();
 8000d42:	f7ff fc59 	bl	80005f8 <USB_Rx_Parser>
 8000d46:	e7fc      	b.n	8000d42 <main+0x162>
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	80c3c901 	.word	0x80c3c901
 8000d50:	20000968 	.word	0x20000968
 8000d54:	0800c6ec 	.word	0x0800c6ec
 8000d58:	0800c710 	.word	0x0800c710
 8000d5c:	0800c69c 	.word	0x0800c69c

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b096      	sub	sp, #88	; 0x58
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	2244      	movs	r2, #68	; 0x44
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00b f95a 	bl	800c028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d86:	f003 fbcf 	bl	8004528 <HAL_PWREx_ControlVoltageScaling>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d90:	f000 f9c8 	bl	8001124 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000d94:	2312      	movs	r3, #18
 8000d96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9e:	2340      	movs	r3, #64	; 0x40
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000da2:	2301      	movs	r3, #1
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000daa:	23b0      	movs	r3, #176	; 0xb0
 8000dac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db2:	2302      	movs	r3, #2
 8000db4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000dba:	230a      	movs	r3, #10
 8000dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 fc12 	bl	80045f4 <HAL_RCC_OscConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000dd6:	f000 f9a5 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dda:	230f      	movs	r3, #15
 8000ddc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dde:	2303      	movs	r3, #3
 8000de0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	2104      	movs	r1, #4
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 f860 	bl	8004eb8 <HAL_RCC_ClockConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000dfe:	f000 f991 	bl	8001124 <Error_Handler>
  }
}
 8000e02:	bf00      	nop
 8000e04:	3758      	adds	r7, #88	; 0x58
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e30:	4a2f      	ldr	r2, [pc, #188]	; (8000ef0 <MX_ADC1_Init+0xe4>)
 8000e32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e34:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e40:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e46:	4b29      	ldr	r3, [pc, #164]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e4c:	4b27      	ldr	r3, [pc, #156]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e4e:	2204      	movs	r2, #4
 8000e50:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e5e:	4b23      	ldr	r3, [pc, #140]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e8e:	4817      	ldr	r0, [pc, #92]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000e90:	f000 fd12 	bl	80018b8 <HAL_ADC_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e9a:	f000 f943 	bl	8001124 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4810      	ldr	r0, [pc, #64]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000eaa:	f001 fa71 	bl	8002390 <HAL_ADCEx_MultiModeConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000eb4:	f000 f936 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_ADC1_Init+0xe8>)
 8000eba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ec4:	237f      	movs	r3, #127	; 0x7f
 8000ec6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_ADC1_Init+0xe0>)
 8000ed6:	f000 fe39 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ee0:	f000 f920 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	; 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000012c 	.word	0x2000012c
 8000ef0:	50040000 	.word	0x50040000
 8000ef4:	2e300800 	.word	0x2e300800

08000ef8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_LPUART1_UART_Init+0x58>)
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <MX_LPUART1_UART_Init+0x5c>)
 8000f00:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_LPUART1_UART_Init+0x58>)
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <MX_LPUART1_UART_Init+0x60>)
 8000f06:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_LPUART1_UART_Init+0x58>)
 8000f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f0e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_LPUART1_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_LPUART1_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_LPUART1_UART_Init+0x58>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_LPUART1_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_LPUART1_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_LPUART1_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000f34:	2300      	movs	r3, #0
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_LPUART1_UART_Init+0x58>)
 8000f3c:	f005 ff03 	bl	8006d46 <HAL_RS485Ex_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f46:	f000 f8ed 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000190 	.word	0x20000190
 8000f54:	40008000 	.word	0x40008000
 8000f58:	00033324 	.word	0x00033324

08000f5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f62:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <MX_SPI1_Init+0x78>)
 8000f64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f92:	2210      	movs	r2, #16
 8000f94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000faa:	2207      	movs	r2, #7
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000fbc:	f004 fb26 	bl	800560c <HAL_SPI_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fc6:	f000 f8ad 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000218 	.word	0x20000218
 8000fd4:	40013000 	.word	0x40013000

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <MX_GPIO_Init+0x140>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a49      	ldr	r2, [pc, #292]	; (8001118 <MX_GPIO_Init+0x140>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b47      	ldr	r3, [pc, #284]	; (8001118 <MX_GPIO_Init+0x140>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b44      	ldr	r3, [pc, #272]	; (8001118 <MX_GPIO_Init+0x140>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a43      	ldr	r2, [pc, #268]	; (8001118 <MX_GPIO_Init+0x140>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b41      	ldr	r3, [pc, #260]	; (8001118 <MX_GPIO_Init+0x140>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b3e      	ldr	r3, [pc, #248]	; (8001118 <MX_GPIO_Init+0x140>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a3d      	ldr	r2, [pc, #244]	; (8001118 <MX_GPIO_Init+0x140>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <MX_GPIO_Init+0x140>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOST_EN_GPIO_Port, BOOST_EN_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800103c:	4837      	ldr	r0, [pc, #220]	; (800111c <MX_GPIO_Init+0x144>)
 800103e:	f001 fccf 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYS_RST_Pin|TRANS_SDN_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f248 4110 	movw	r1, #33808	; 0x8410
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f001 fcc8 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FWD_MEAS_AMP_EN_Pin|REV_MEAS_AMP_EN_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	21c0      	movs	r1, #192	; 0xc0
 8001054:	4832      	ldr	r0, [pc, #200]	; (8001120 <MX_GPIO_Init+0x148>)
 8001056:	f001 fcc3 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOOST_EN_Pin */
  GPIO_InitStruct.Pin = BOOST_EN_Pin;
 800105a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOST_EN_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4619      	mov	r1, r3
 8001072:	482a      	ldr	r0, [pc, #168]	; (800111c <MX_GPIO_Init+0x144>)
 8001074:	f001 fb42 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SYS_RST_Pin TRANS_SDN_Pin */
  GPIO_InitStruct.Pin = SYS_RST_Pin|TRANS_SDN_Pin;
 8001078:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f001 fb32 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : TRANS_NIRQ_Pin */
  GPIO_InitStruct.Pin = TRANS_NIRQ_Pin;
 8001098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800109e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TRANS_NIRQ_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f001 fb23 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LDO_PG_Pin */
  GPIO_InitStruct.Pin = LDO_PG_Pin;
 80010b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LDO_PG_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f001 fb15 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80010d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	4619      	mov	r1, r3
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f001 fb05 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : FWD_MEAS_AMP_EN_Pin REV_MEAS_AMP_EN_Pin */
  GPIO_InitStruct.Pin = FWD_MEAS_AMP_EN_Pin|REV_MEAS_AMP_EN_Pin;
 80010f2:	23c0      	movs	r3, #192	; 0xc0
 80010f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_GPIO_Init+0x148>)
 800110a:	f001 faf7 	bl	80026fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	48000800 	.word	0x48000800
 8001120:	48000400 	.word	0x48000400

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	e7fe      	b.n	800112c <Error_Handler+0x8>
	...

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_MspInit+0x44>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_MspInit+0x44>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6613      	str	r3, [r2, #96]	; 0x60
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_MspInit+0x44>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_MspInit+0x44>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_MspInit+0x44>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	6593      	str	r3, [r2, #88]	; 0x58
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_MspInit+0x44>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a15      	ldr	r2, [pc, #84]	; (80011ec <HAL_ADC_MspInit+0x74>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d124      	bne.n	80011e4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_ADC_MspInit+0x78>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <HAL_ADC_MspInit+0x78>)
 80011a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_ADC_MspInit+0x78>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_ADC_MspInit+0x78>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_ADC_MspInit+0x78>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_ADC_MspInit+0x78>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ca:	23c0      	movs	r3, #192	; 0xc0
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011ce:	230b      	movs	r3, #11
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f001 fa8c 	bl	80026fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	50040000 	.word	0x50040000
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b098      	sub	sp, #96	; 0x60
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800120c:	f107 0318 	add.w	r3, r7, #24
 8001210:	2234      	movs	r2, #52	; 0x34
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f00a ff07 	bl	800c028 <memset>
  if(huart->Instance==LPUART1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a2d      	ldr	r2, [pc, #180]	; (80012d4 <HAL_UART_MspInit+0xe0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d152      	bne.n	80012ca <HAL_UART_MspInit+0xd6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001224:	2320      	movs	r3, #32
 8001226:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122c:	f107 0318 	add.w	r3, r7, #24
 8001230:	4618      	mov	r0, r3
 8001232:	f004 f865 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800123c:	f7ff ff72 	bl	8001124 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001240:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_UART_MspInit+0xe4>)
 8001242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001244:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <HAL_UART_MspInit+0xe4>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_UART_MspInit+0xe4>)
 800124e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <HAL_UART_MspInit+0xe4>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <HAL_UART_MspInit+0xe4>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <HAL_UART_MspInit+0xe4>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_UART_MspInit+0xe4>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <HAL_UART_MspInit+0xe4>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_UART_MspInit+0xe4>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001288:	230c      	movs	r3, #12
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001298:	2308      	movs	r3, #8
 800129a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f001 fa29 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012aa:	2302      	movs	r3, #2
 80012ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80012ba:	2308      	movs	r3, #8
 80012bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_UART_MspInit+0xe8>)
 80012c6:	f001 fa19 	bl	80026fc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3760      	adds	r7, #96	; 0x60
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40008000 	.word	0x40008000
 80012d8:	40021000 	.word	0x40021000
 80012dc:	48000400 	.word	0x48000400

080012e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_SPI_MspInit+0x7c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d127      	bne.n	8001352 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_SPI_MspInit+0x80>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	4a16      	ldr	r2, [pc, #88]	; (8001360 <HAL_SPI_MspInit+0x80>)
 8001308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800130c:	6613      	str	r3, [r2, #96]	; 0x60
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_SPI_MspInit+0x80>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_SPI_MspInit+0x80>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_SPI_MspInit+0x80>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_SPI_MspInit+0x80>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001332:	2338      	movs	r3, #56	; 0x38
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001342:	2305      	movs	r3, #5
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_SPI_MspInit+0x84>)
 800134e:	f001 f9d5 	bl	80026fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40013000 	.word	0x40013000
 8001360:	40021000 	.word	0x40021000
 8001364:	48000400 	.word	0x48000400

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800136c:	e7fe      	b.n	800136c <NMI_Handler+0x4>

0800136e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <MemManage_Handler+0x4>

0800137a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <UsageFault_Handler+0x4>

08001386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b4:	f000 f89c 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <USB_IRQHandler+0x10>)
 80013c2:	f001 fc4d 	bl	8002c60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000136c 	.word	0x2000136c

080013d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <SystemInit+0x20>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <SystemInit+0x20>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800142c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f8:	f7ff ffea 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <LoopForever+0x6>)
  ldr r1, =_edata
 80013fe:	490d      	ldr	r1, [pc, #52]	; (8001434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <LoopForever+0xe>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001414:	4c0a      	ldr	r4, [pc, #40]	; (8001440 <LoopForever+0x16>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001422:	f00a fe2f 	bl	800c084 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001426:	f7ff fbdb 	bl	8000be0 <main>

0800142a <LoopForever>:

LoopForever:
    b LoopForever
 800142a:	e7fe      	b.n	800142a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800142c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001434:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001438:	0800c7e0 	.word	0x0800c7e0
  ldr r2, =_sbss
 800143c:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001440:	20001884 	.word	0x20001884

08001444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC1_2_IRQHandler>

08001446 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f001 f911 	bl	8002678 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f80e 	bl	8001478 <HAL_InitTick>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	e001      	b.n	800146c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001468:	f7ff fe62 	bl	8001130 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800146c:	79fb      	ldrb	r3, [r7, #7]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_InitTick+0x6c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d023      	beq.n	80014d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_InitTick+0x70>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_InitTick+0x6c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 f91d 	bl	80026e2 <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d809      	bhi.n	80014c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b4:	2200      	movs	r2, #0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f001 f8e7 	bl	800268e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_InitTick+0x74>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e007      	b.n	80014d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e004      	b.n	80014d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	e001      	b.n	80014d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000000c 	.word	0x2000000c
 80014e8:	20000004 	.word	0x20000004
 80014ec:	20000008 	.word	0x20000008

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000000c 	.word	0x2000000c
 8001514:	20000684 	.word	0x20000684

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000684 	.word	0x20000684

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff ffee 	bl	8001518 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_Delay+0x44>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffde 	bl	8001518 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000000c 	.word	0x2000000c

08001578 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	609a      	str	r2, [r3, #8]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	609a      	str	r2, [r3, #8]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3360      	adds	r3, #96	; 0x60
 80015f2:	461a      	mov	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <LL_ADC_SetOffset+0x44>)
 8001602:	4013      	ands	r3, r2
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	4313      	orrs	r3, r2
 8001610:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001618:	bf00      	nop
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	03fff000 	.word	0x03fff000

08001628 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3360      	adds	r3, #96	; 0x60
 8001636:	461a      	mov	r2, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3360      	adds	r3, #96	; 0x60
 8001664:	461a      	mov	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	431a      	orrs	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800167e:	bf00      	nop
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	615a      	str	r2, [r3, #20]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3330      	adds	r3, #48	; 0x30
 80016c0:	461a      	mov	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	4413      	add	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	211f      	movs	r1, #31
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	401a      	ands	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	0e9b      	lsrs	r3, r3, #26
 80016e8:	f003 011f 	and.w	r1, r3, #31
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	431a      	orrs	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016fc:	bf00      	nop
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3314      	adds	r3, #20
 8001718:	461a      	mov	r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	0e5b      	lsrs	r3, r3, #25
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	4413      	add	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	0d1b      	lsrs	r3, r3, #20
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	2107      	movs	r1, #7
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	401a      	ands	r2, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	0d1b      	lsrs	r3, r3, #20
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	431a      	orrs	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001752:	bf00      	nop
 8001754:	371c      	adds	r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001778:	43db      	mvns	r3, r3
 800177a:	401a      	ands	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0318 	and.w	r3, r3, #24
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001784:	40d9      	lsrs	r1, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	400b      	ands	r3, r1
 800178a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178e:	431a      	orrs	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	0007ffff 	.word	0x0007ffff

080017a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6093      	str	r3, [r2, #8]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017e0:	d101      	bne.n	80017e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001804:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001808:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001830:	d101      	bne.n	8001836 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <LL_ADC_IsEnabled+0x18>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <LL_ADC_IsEnabled+0x1a>
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b04      	cmp	r3, #4
 800187c:	d101      	bne.n	8001882 <LL_ADC_REG_IsConversionOngoing+0x18>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d101      	bne.n	80018a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e12b      	b.n	8001b2a <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d109      	bne.n	80018f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fc49 	bl	8001178 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff67 	bl	80017cc <LL_ADC_IsDeepPowerDownEnabled>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff4d 	bl	80017a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff82 	bl	800181c <LL_ADC_IsInternalRegulatorEnabled>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d115      	bne.n	800194a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff66 	bl	80017f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001928:	4b82      	ldr	r3, [pc, #520]	; (8001b34 <HAL_ADC_Init+0x27c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	4a82      	ldr	r2, [pc, #520]	; (8001b38 <HAL_ADC_Init+0x280>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	099b      	lsrs	r3, r3, #6
 8001936:	3301      	adds	r3, #1
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800193c:	e002      	b.n	8001944 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3b01      	subs	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f9      	bne.n	800193e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff64 	bl	800181c <LL_ADC_IsInternalRegulatorEnabled>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10d      	bne.n	8001976 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195e:	f043 0210 	orr.w	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	f043 0201 	orr.w	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff75 	bl	800186a <LL_ADC_REG_IsConversionOngoing>
 8001980:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 80c4 	bne.w	8001b18 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 80c0 	bne.w	8001b18 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019a0:	f043 0202 	orr.w	r2, r3, #2
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff49 	bl	8001844 <LL_ADC_IsEnabled>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d110      	bne.n	80019da <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019b8:	4860      	ldr	r0, [pc, #384]	; (8001b3c <HAL_ADC_Init+0x284>)
 80019ba:	f7ff ff43 	bl	8001844 <LL_ADC_IsEnabled>
 80019be:	4604      	mov	r4, r0
 80019c0:	485f      	ldr	r0, [pc, #380]	; (8001b40 <HAL_ADC_Init+0x288>)
 80019c2:	f7ff ff3f 	bl	8001844 <LL_ADC_IsEnabled>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4323      	orrs	r3, r4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d105      	bne.n	80019da <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4619      	mov	r1, r3
 80019d4:	485b      	ldr	r0, [pc, #364]	; (8001b44 <HAL_ADC_Init+0x28c>)
 80019d6:	f7ff fdcf 	bl	8001578 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7e5b      	ldrb	r3, [r3, #25]
 80019de:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019e4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019ea:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019f0:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f8:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d106      	bne.n	8001a16 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	045b      	lsls	r3, r3, #17
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_ADC_Init+0x290>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	69b9      	ldr	r1, [r7, #24]
 8001a42:	430b      	orrs	r3, r1
 8001a44:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff20 	bl	8001890 <LL_ADC_INJ_IsConversionOngoing>
 8001a50:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d13d      	bne.n	8001ad4 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d13a      	bne.n	8001ad4 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a62:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a6a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a7a:	f023 0302 	bic.w	r3, r3, #2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	430b      	orrs	r3, r1
 8001a86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d118      	bne.n	8001ac4 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a9c:	f023 0304 	bic.w	r3, r3, #4
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001aae:	4311      	orrs	r1, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0201 	orr.w	r2, r2, #1
 8001ac0:	611a      	str	r2, [r3, #16]
 8001ac2:	e007      	b.n	8001ad4 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d10c      	bne.n	8001af6 <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f023 010f 	bic.w	r1, r3, #15
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	1e5a      	subs	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
 8001af4:	e007      	b.n	8001b06 <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 020f 	bic.w	r2, r2, #15
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	f043 0201 	orr.w	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	655a      	str	r2, [r3, #84]	; 0x54
 8001b16:	e007      	b.n	8001b28 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	f043 0210 	orr.w	r2, r3, #16
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b28:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000004 	.word	0x20000004
 8001b38:	053e2d63 	.word	0x053e2d63
 8001b3c:	50040000 	.word	0x50040000
 8001b40:	50040100 	.word	0x50040100
 8001b44:	50040300 	.word	0x50040300
 8001b48:	fff0c007 	.word	0xfff0c007

08001b4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0b6      	sub	sp, #216	; 0xd8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x22>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e3d5      	b.n	800231a <HAL_ADC_ConfigChannel+0x7ce>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fe75 	bl	800186a <LL_ADC_REG_IsConversionOngoing>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 83ba 	bne.w	80022fc <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d824      	bhi.n	8001be2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	3b02      	subs	r3, #2
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d81b      	bhi.n	8001bda <HAL_ADC_ConfigChannel+0x8e>
 8001ba2:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <HAL_ADC_ConfigChannel+0x5c>)
 8001ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba8:	08001bb9 	.word	0x08001bb9
 8001bac:	08001bc1 	.word	0x08001bc1
 8001bb0:	08001bc9 	.word	0x08001bc9
 8001bb4:	08001bd1 	.word	0x08001bd1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001bb8:	230c      	movs	r3, #12
 8001bba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001bbe:	e010      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001bc0:	2312      	movs	r3, #18
 8001bc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001bc6:	e00c      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001bc8:	2318      	movs	r3, #24
 8001bca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001bce:	e008      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001bd8:	e003      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001bda:	2306      	movs	r3, #6
 8001bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001be0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001bf0:	f7ff fd5e 	bl	80016b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe36 	bl	800186a <LL_ADC_REG_IsConversionOngoing>
 8001bfe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fe42 	bl	8001890 <LL_ADC_INJ_IsConversionOngoing>
 8001c0c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f040 81bf 	bne.w	8001f98 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f040 81ba 	bne.w	8001f98 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c2c:	d10f      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2200      	movs	r2, #0
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f7ff fd65 	bl	8001708 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fd1f 	bl	800168a <LL_ADC_SetSamplingTimeCommonConfig>
 8001c4c:	e00e      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6819      	ldr	r1, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f7ff fd54 	bl	8001708 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fd0f 	bl	800168a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	08db      	lsrs	r3, r3, #3
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6919      	ldr	r1, [r3, #16]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c9e:	f7ff fc9f 	bl	80015e0 <LL_ADC_SetOffset>
 8001ca2:	e179      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fcbc 	bl	8001628 <LL_ADC_GetOffsetChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x184>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fcb1 	bl	8001628 <LL_ADC_GetOffsetChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	f003 021f 	and.w	r2, r3, #31
 8001cce:	e01e      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x1c2>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fca6 	bl	8001628 <LL_ADC_GetOffsetChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	e004      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001d02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x1da>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0e9b      	lsrs	r3, r3, #26
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	e018      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x20c>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001d42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e004      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001d4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d106      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fc75 	bl	8001654 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2101      	movs	r1, #1
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fc59 	bl	8001628 <LL_ADC_GetOffsetChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10a      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x24a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2101      	movs	r1, #1
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fc4e 	bl	8001628 <LL_ADC_GetOffsetChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	0e9b      	lsrs	r3, r3, #26
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	e01e      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x288>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fc43 	bl	8001628 <LL_ADC_GetOffsetChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001db8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001dbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e004      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001dc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x2a0>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	e018      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x2d2>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001e10:	2320      	movs	r3, #32
 8001e12:	e004      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d106      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fc12 	bl	8001654 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2102      	movs	r1, #2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fbf6 	bl	8001628 <LL_ADC_GetOffsetChannel>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10a      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x310>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fbeb 	bl	8001628 <LL_ADC_GetOffsetChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	0e9b      	lsrs	r3, r3, #26
 8001e56:	f003 021f 	and.w	r2, r3, #31
 8001e5a:	e01e      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x34e>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2102      	movs	r1, #2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fbe0 	bl	8001628 <LL_ADC_GetOffsetChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	e004      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x366>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	e014      	b.n	8001edc <HAL_ADC_ConfigChannel+0x390>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001ec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	e004      	b.n	8001edc <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001ed2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d106      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fbb3 	bl	8001654 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2103      	movs	r1, #3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fb97 	bl	8001628 <LL_ADC_GetOffsetChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10a      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x3ce>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2103      	movs	r1, #3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fb8c 	bl	8001628 <LL_ADC_GetOffsetChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	0e9b      	lsrs	r3, r3, #26
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	e017      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x3fe>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2103      	movs	r1, #3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fb81 	bl	8001628 <LL_ADC_GetOffsetChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f34:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001f3c:	2320      	movs	r3, #32
 8001f3e:	e003      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x416>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	0e9b      	lsrs	r3, r3, #26
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	e011      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x43a>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001f70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f72:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	e003      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001f7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d106      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2103      	movs	r1, #3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fb5e 	bl	8001654 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fc51 	bl	8001844 <LL_ADC_IsEnabled>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f040 813f 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f7ff fbd2 	bl	8001760 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a8e      	ldr	r2, [pc, #568]	; (80021fc <HAL_ADC_ConfigChannel+0x6b0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	f040 8130 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x4a4>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	bf94      	ite	ls
 8001fe8:	2301      	movls	r3, #1
 8001fea:	2300      	movhi	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	e019      	b.n	8002024 <HAL_ADC_ConfigChannel+0x4d8>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002000:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002008:	2320      	movs	r3, #32
 800200a:	e003      	b.n	8002014 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800200c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	3301      	adds	r3, #1
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2b09      	cmp	r3, #9
 800201c:	bf94      	ite	ls
 800201e:	2301      	movls	r3, #1
 8002020:	2300      	movhi	r3, #0
 8002022:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002024:	2b00      	cmp	r3, #0
 8002026:	d079      	beq.n	800211c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002030:	2b00      	cmp	r3, #0
 8002032:	d107      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x4f8>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	3301      	adds	r3, #1
 800203c:	069b      	lsls	r3, r3, #26
 800203e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002042:	e015      	b.n	8002070 <HAL_ADC_ConfigChannel+0x524>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002054:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800205c:	2320      	movs	r3, #32
 800205e:	e003      	b.n	8002068 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3301      	adds	r3, #1
 800206a:	069b      	lsls	r3, r3, #26
 800206c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x544>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0e9b      	lsrs	r3, r3, #26
 8002082:	3301      	adds	r3, #1
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	e017      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x574>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800209e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80020a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80020a8:	2320      	movs	r3, #32
 80020aa:	e003      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80020ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	ea42 0103 	orr.w	r1, r2, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10a      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x59a>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	3301      	adds	r3, #1
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	051b      	lsls	r3, r3, #20
 80020e4:	e018      	b.n	8002118 <HAL_ADC_ConfigChannel+0x5cc>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80020f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80020f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80020fe:	2320      	movs	r3, #32
 8002100:	e003      	b.n	800210a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002118:	430b      	orrs	r3, r1
 800211a:	e080      	b.n	800221e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x5ec>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0e9b      	lsrs	r3, r3, #26
 800212e:	3301      	adds	r3, #1
 8002130:	069b      	lsls	r3, r3, #26
 8002132:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002136:	e015      	b.n	8002164 <HAL_ADC_ConfigChannel+0x618>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e003      	b.n	800215c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3301      	adds	r3, #1
 800215e:	069b      	lsls	r3, r3, #26
 8002160:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x638>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	0e9b      	lsrs	r3, r3, #26
 8002176:	3301      	adds	r3, #1
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	2101      	movs	r1, #1
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	e017      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x668>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	61bb      	str	r3, [r7, #24]
  return result;
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800219c:	2320      	movs	r3, #32
 800219e:	e003      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	2101      	movs	r1, #1
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	ea42 0103 	orr.w	r1, r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10d      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x694>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	3301      	adds	r3, #1
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	3b1e      	subs	r3, #30
 80021d8:	051b      	lsls	r3, r3, #20
 80021da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021de:	e01d      	b.n	800221c <HAL_ADC_ConfigChannel+0x6d0>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	60fb      	str	r3, [r7, #12]
  return result;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d103      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80021f8:	2320      	movs	r3, #32
 80021fa:	e005      	b.n	8002208 <HAL_ADC_ConfigChannel+0x6bc>
 80021fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	f003 021f 	and.w	r2, r3, #31
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	3b1e      	subs	r3, #30
 8002216:	051b      	lsls	r3, r3, #20
 8002218:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800221c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002222:	4619      	mov	r1, r3
 8002224:	f7ff fa70 	bl	8001708 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b3d      	ldr	r3, [pc, #244]	; (8002324 <HAL_ADC_ConfigChannel+0x7d8>)
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d06c      	beq.n	800230e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002234:	483c      	ldr	r0, [pc, #240]	; (8002328 <HAL_ADC_ConfigChannel+0x7dc>)
 8002236:	f7ff f9c5 	bl	80015c4 <LL_ADC_GetCommonPathInternalCh>
 800223a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a3a      	ldr	r2, [pc, #232]	; (800232c <HAL_ADC_ConfigChannel+0x7e0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d127      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800224c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d121      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a35      	ldr	r2, [pc, #212]	; (8002330 <HAL_ADC_ConfigChannel+0x7e4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d157      	bne.n	800230e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800225e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002262:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002266:	4619      	mov	r1, r3
 8002268:	482f      	ldr	r0, [pc, #188]	; (8002328 <HAL_ADC_ConfigChannel+0x7dc>)
 800226a:	f7ff f998 	bl	800159e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800226e:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_ADC_ConfigChannel+0x7e8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	099b      	lsrs	r3, r3, #6
 8002274:	4a30      	ldr	r2, [pc, #192]	; (8002338 <HAL_ADC_ConfigChannel+0x7ec>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	099b      	lsrs	r3, r3, #6
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002288:	e002      	b.n	8002290 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3b01      	subs	r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f9      	bne.n	800228a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002296:	e03a      	b.n	800230e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a27      	ldr	r2, [pc, #156]	; (800233c <HAL_ADC_ConfigChannel+0x7f0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d113      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_ADC_ConfigChannel+0x7e4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d12a      	bne.n	800230e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c0:	4619      	mov	r1, r3
 80022c2:	4819      	ldr	r0, [pc, #100]	; (8002328 <HAL_ADC_ConfigChannel+0x7dc>)
 80022c4:	f7ff f96b 	bl	800159e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022c8:	e021      	b.n	800230e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_ADC_ConfigChannel+0x7f4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d11c      	bne.n	800230e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d116      	bne.n	800230e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a12      	ldr	r2, [pc, #72]	; (8002330 <HAL_ADC_ConfigChannel+0x7e4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d111      	bne.n	800230e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f2:	4619      	mov	r1, r3
 80022f4:	480c      	ldr	r0, [pc, #48]	; (8002328 <HAL_ADC_ConfigChannel+0x7dc>)
 80022f6:	f7ff f952 	bl	800159e <LL_ADC_SetCommonPathInternalCh>
 80022fa:	e008      	b.n	800230e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002300:	f043 0220 	orr.w	r2, r3, #32
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002316:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800231a:	4618      	mov	r0, r3
 800231c:	37d8      	adds	r7, #216	; 0xd8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	80080000 	.word	0x80080000
 8002328:	50040300 	.word	0x50040300
 800232c:	c7520000 	.word	0xc7520000
 8002330:	50040000 	.word	0x50040000
 8002334:	20000004 	.word	0x20000004
 8002338:	053e2d63 	.word	0x053e2d63
 800233c:	cb840000 	.word	0xcb840000
 8002340:	80000001 	.word	0x80000001

08002344 <LL_ADC_IsEnabled>:
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <LL_ADC_IsEnabled+0x18>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <LL_ADC_IsEnabled+0x1a>
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_ADC_REG_IsConversionOngoing>:
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b04      	cmp	r3, #4
 800237c:	d101      	bne.n	8002382 <LL_ADC_REG_IsConversionOngoing+0x18>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b09f      	sub	sp, #124	; 0x7c
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e089      	b.n	80024c2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80023b6:	2300      	movs	r3, #0
 80023b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80023ba:	2300      	movs	r3, #0
 80023bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a42      	ldr	r2, [pc, #264]	; (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d102      	bne.n	80023ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023c8:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	e001      	b.n	80023d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e068      	b.n	80024c2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ffb9 	bl	800236a <LL_ADC_REG_IsConversionOngoing>
 80023f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ffb3 	bl	800236a <LL_ADC_REG_IsConversionOngoing>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d14a      	bne.n	80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800240a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800240c:	2b00      	cmp	r3, #0
 800240e:	d147      	bne.n	80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002410:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002412:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d027      	beq.n	800246c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800241c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800242e:	035b      	lsls	r3, r3, #13
 8002430:	430b      	orrs	r3, r1
 8002432:	431a      	orrs	r2, r3
 8002434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002436:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002438:	4824      	ldr	r0, [pc, #144]	; (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800243a:	f7ff ff83 	bl	8002344 <LL_ADC_IsEnabled>
 800243e:	4604      	mov	r4, r0
 8002440:	4823      	ldr	r0, [pc, #140]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002442:	f7ff ff7f 	bl	8002344 <LL_ADC_IsEnabled>
 8002446:	4603      	mov	r3, r0
 8002448:	4323      	orrs	r3, r4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d132      	bne.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800244e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002456:	f023 030f 	bic.w	r3, r3, #15
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	6811      	ldr	r1, [r2, #0]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6892      	ldr	r2, [r2, #8]
 8002462:	430a      	orrs	r2, r1
 8002464:	431a      	orrs	r2, r3
 8002466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002468:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800246a:	e023      	b.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800246c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002476:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002478:	4814      	ldr	r0, [pc, #80]	; (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800247a:	f7ff ff63 	bl	8002344 <LL_ADC_IsEnabled>
 800247e:	4604      	mov	r4, r0
 8002480:	4813      	ldr	r0, [pc, #76]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002482:	f7ff ff5f 	bl	8002344 <LL_ADC_IsEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	4323      	orrs	r3, r4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d112      	bne.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800248e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002496:	f023 030f 	bic.w	r3, r3, #15
 800249a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800249c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800249e:	e009      	b.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80024b2:	e000      	b.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	377c      	adds	r7, #124	; 0x7c
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	bf00      	nop
 80024cc:	50040000 	.word	0x50040000
 80024d0:	50040100 	.word	0x50040100
 80024d4:	50040300 	.word	0x50040300

080024d8 <__NVIC_SetPriorityGrouping>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f4:	4013      	ands	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250a:	4a04      	ldr	r2, [pc, #16]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	60d3      	str	r3, [r2, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_GetPriorityGrouping>:
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <__NVIC_GetPriorityGrouping+0x18>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0307 	and.w	r3, r3, #7
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_EnableIRQ>:
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db0b      	blt.n	8002566 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	4907      	ldr	r1, [pc, #28]	; (8002574 <__NVIC_EnableIRQ+0x38>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2001      	movs	r0, #1
 800255e:	fa00 f202 	lsl.w	r2, r0, r2
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000e100 	.word	0xe000e100

08002578 <__NVIC_SetPriority>:
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	; (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	4313      	orrs	r3, r2
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002644:	d301      	bcc.n	800264a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002646:	2301      	movs	r3, #1
 8002648:	e00f      	b.n	800266a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <SysTick_Config+0x40>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002652:	210f      	movs	r1, #15
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f7ff ff8e 	bl	8002578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <SysTick_Config+0x40>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <SysTick_Config+0x40>)
 8002664:	2207      	movs	r2, #7
 8002666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	e000e010 	.word	0xe000e010

08002678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff29 	bl	80024d8 <__NVIC_SetPriorityGrouping>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026a0:	f7ff ff3e 	bl	8002520 <__NVIC_GetPriorityGrouping>
 80026a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff ff8e 	bl	80025cc <NVIC_EncodePriority>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff5d 	bl	8002578 <__NVIC_SetPriority>
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff31 	bl	800253c <__NVIC_EnableIRQ>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffa2 	bl	8002634 <SysTick_Config>
 80026f0:	4603      	mov	r3, r0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270a:	e14e      	b.n	80029aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8140 	beq.w	80029a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d005      	beq.n	800273c <HAL_GPIO_Init+0x40>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d130      	bne.n	800279e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002772:	2201      	movs	r2, #1
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	f003 0201 	and.w	r2, r3, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d017      	beq.n	80027da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d123      	bne.n	800282e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	08da      	lsrs	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3208      	adds	r2, #8
 80027ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	08da      	lsrs	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3208      	adds	r2, #8
 8002828:	6939      	ldr	r1, [r7, #16]
 800282a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	2203      	movs	r2, #3
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0203 	and.w	r2, r3, #3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 809a 	beq.w	80029a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002870:	4b55      	ldr	r3, [pc, #340]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 8002872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002874:	4a54      	ldr	r2, [pc, #336]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6613      	str	r3, [r2, #96]	; 0x60
 800287c:	4b52      	ldr	r3, [pc, #328]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 800287e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002888:	4a50      	ldr	r2, [pc, #320]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	3302      	adds	r3, #2
 8002890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	220f      	movs	r2, #15
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028b2:	d013      	beq.n	80028dc <HAL_GPIO_Init+0x1e0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a46      	ldr	r2, [pc, #280]	; (80029d0 <HAL_GPIO_Init+0x2d4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00d      	beq.n	80028d8 <HAL_GPIO_Init+0x1dc>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a45      	ldr	r2, [pc, #276]	; (80029d4 <HAL_GPIO_Init+0x2d8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <HAL_GPIO_Init+0x1d8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a44      	ldr	r2, [pc, #272]	; (80029d8 <HAL_GPIO_Init+0x2dc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <HAL_GPIO_Init+0x1d4>
 80028cc:	2303      	movs	r3, #3
 80028ce:	e006      	b.n	80028de <HAL_GPIO_Init+0x1e2>
 80028d0:	2307      	movs	r3, #7
 80028d2:	e004      	b.n	80028de <HAL_GPIO_Init+0x1e2>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e002      	b.n	80028de <HAL_GPIO_Init+0x1e2>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_GPIO_Init+0x1e2>
 80028dc:	2300      	movs	r3, #0
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	f002 0203 	and.w	r2, r2, #3
 80028e4:	0092      	lsls	r2, r2, #2
 80028e6:	4093      	lsls	r3, r2
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028ee:	4937      	ldr	r1, [pc, #220]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028fc:	4b37      	ldr	r3, [pc, #220]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002920:	4a2e      	ldr	r2, [pc, #184]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002926:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800294a:	4a24      	ldr	r2, [pc, #144]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <HAL_GPIO_Init+0x2e0>)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	3301      	adds	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f47f aea9 	bne.w	800270c <HAL_GPIO_Init+0x10>
  }
}
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40010000 	.word	0x40010000
 80029d0:	48000400 	.word	0x48000400
 80029d4:	48000800 	.word	0x48000800
 80029d8:	48000c00 	.word	0x48000c00
 80029dc:	40010400 	.word	0x40010400

080029e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
 80029ec:	4613      	mov	r3, r2
 80029ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f0:	787b      	ldrb	r3, [r7, #1]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029fc:	e002      	b.n	8002a04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a12:	b08b      	sub	sp, #44	; 0x2c
 8002a14:	af06      	add	r7, sp, #24
 8002a16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0f8      	b.n	8002c14 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f008 ff3a 	bl	800b8b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2203      	movs	r2, #3
 8002a40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 fa0b 	bl	8006e64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	687e      	ldr	r6, [r7, #4]
 8002a56:	466d      	mov	r5, sp
 8002a58:	f106 0410 	add.w	r4, r6, #16
 8002a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	602b      	str	r3, [r5, #0]
 8002a64:	1d33      	adds	r3, r6, #4
 8002a66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a68:	6838      	ldr	r0, [r7, #0]
 8002a6a:	f004 f9d3 	bl	8006e14 <USB_CoreInit>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0c9      	b.n	8002c14 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 fa07 	bl	8006e9a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	e040      	b.n	8002b14 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	3303      	adds	r3, #3
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	3338      	adds	r3, #56	; 0x38
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	333c      	adds	r3, #60	; 0x3c
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	3340      	adds	r3, #64	; 0x40
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	3301      	adds	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d3b9      	bcc.n	8002a92 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	e044      	b.n	8002bae <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	440b      	add	r3, r1
 8002b74:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	440b      	add	r3, r1
 8002b8a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	3301      	adds	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d3b5      	bcc.n	8002b24 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	687e      	ldr	r6, [r7, #4]
 8002bc0:	466d      	mov	r5, sp
 8002bc2:	f106 0410 	add.w	r4, r6, #16
 8002bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	602b      	str	r3, [r5, #0]
 8002bce:	1d33      	adds	r3, r6, #4
 8002bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd2:	6838      	ldr	r0, [r7, #0]
 8002bd4:	f004 f96e 	bl	8006eb4 <USB_DevInit>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e014      	b.n	8002c14 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d102      	bne.n	8002c08 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f001 fc58 	bl	80044b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f006 fbff 	bl	8009410 <USB_DevDisconnect>

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_PCD_Start+0x16>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e012      	b.n	8002c58 <HAL_PCD_Start+0x3c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f004 f8f9 	bl	8006e36 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f006 fbca 	bl	80093e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f006 fbe4 	bl	800943a <USB_ReadInterrupts>
 8002c72:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fb13 	bl	80032aa <PCD_EP_ISR_Handler>

    return;
 8002c84:	e110      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca2:	b292      	uxth	r2, r2
 8002ca4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f008 feb8 	bl	800ba1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002cae:	2100      	movs	r1, #0
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f8fc 	bl	8002eae <HAL_PCD_SetAddress>

    return;
 8002cb6:	e0f7      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00c      	beq.n	8002cdc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002cda:	e0e5      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00c      	beq.n	8002d00 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cf8:	b292      	uxth	r2, r2
 8002cfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002cfe:	e0d3      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d034      	beq.n	8002d74 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0204 	bic.w	r2, r2, #4
 8002d1c:	b292      	uxth	r2, r2
 8002d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0208 	bic.w	r2, r2, #8
 8002d34:	b292      	uxth	r2, r2
 8002d36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f009 f916 	bl	800bf80 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f008 fe9b 	bl	800ba90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002d72:	e099      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d027      	beq.n	8002dce <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0208 	orr.w	r2, r2, #8
 8002d90:	b292      	uxth	r2, r2
 8002d92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da8:	b292      	uxth	r2, r2
 8002daa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0204 	orr.w	r2, r2, #4
 8002dc0:	b292      	uxth	r2, r2
 8002dc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f008 fe48 	bl	800ba5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002dcc:	e06c      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d040      	beq.n	8002e5a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dea:	b292      	uxth	r2, r2
 8002dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d12b      	bne.n	8002e52 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0204 	orr.w	r2, r2, #4
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0208 	orr.w	r2, r2, #8
 8002e24:	b292      	uxth	r2, r2
 8002e26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e48:	2101      	movs	r1, #1
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f009 f898 	bl	800bf80 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002e50:	e02a      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f008 fe02 	bl	800ba5c <HAL_PCD_SuspendCallback>
    return;
 8002e58:	e026      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00f      	beq.n	8002e84 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e76:	b292      	uxth	r2, r2
 8002e78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f008 fdc0 	bl	800ba02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e82:	e011      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00c      	beq.n	8002ea8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ea0:	b292      	uxth	r2, r2
 8002ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ea6:	bf00      	nop
  }
}
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_PCD_SetAddress+0x1a>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e013      	b.n	8002ef0 <HAL_PCD_SetAddress+0x42>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f006 fa6a 	bl	80093ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	4608      	mov	r0, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	461a      	mov	r2, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	70fb      	strb	r3, [r7, #3]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	803b      	strh	r3, [r7, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da0e      	bge.n	8002f3c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4413      	add	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	705a      	strb	r2, [r3, #1]
 8002f3a:	e00e      	b.n	8002f5a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 0207 	and.w	r2, r3, #7
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f66:	883a      	ldrh	r2, [r7, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	78ba      	ldrb	r2, [r7, #2]
 8002f70:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f72:	78bb      	ldrb	r3, [r7, #2]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d102      	bne.n	8002f7e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_PCD_EP_Open+0x94>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e00e      	b.n	8002faa <HAL_PCD_EP_Open+0xb2>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68f9      	ldr	r1, [r7, #12]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 ffac 	bl	8006ef8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002fa8:	7afb      	ldrb	r3, [r7, #11]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	da0e      	bge.n	8002fe4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	705a      	strb	r2, [r3, #1]
 8002fe2:	e00e      	b.n	8003002 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	f003 0207 	and.w	r2, r3, #7
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_PCD_EP_Close+0x6a>
 8003018:	2302      	movs	r3, #2
 800301a:	e00e      	b.n	800303a <HAL_PCD_EP_Close+0x88>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68f9      	ldr	r1, [r7, #12]
 800302a:	4618      	mov	r0, r3
 800302c:	f004 fb28 	bl	8007680 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	460b      	mov	r3, r1
 8003050:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003052:	7afb      	ldrb	r3, [r7, #11]
 8003054:	f003 0207 	and.w	r2, r3, #7
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2200      	movs	r2, #0
 8003080:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003082:	7afb      	ldrb	r3, [r7, #11]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	b2da      	uxtb	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6979      	ldr	r1, [r7, #20]
 8003094:	4618      	mov	r0, r3
 8003096:	f004 fce0 	bl	8007a5a <USB_EPStartXfer>

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	f003 0207 	and.w	r2, r3, #7
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	460b      	mov	r3, r1
 80030e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e4:	7afb      	ldrb	r3, [r7, #11]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2200      	movs	r2, #0
 8003118:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2201      	movs	r2, #1
 800311e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003120:	7afb      	ldrb	r3, [r7, #11]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	b2da      	uxtb	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6979      	ldr	r1, [r7, #20]
 8003132:	4618      	mov	r0, r3
 8003134:	f004 fc91 	bl	8007a5a <USB_EPStartXfer>

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	f003 0207 	and.w	r2, r3, #7
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	429a      	cmp	r2, r3
 800315a:	d901      	bls.n	8003160 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e04c      	b.n	80031fa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003164:	2b00      	cmp	r3, #0
 8003166:	da0e      	bge.n	8003186 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4413      	add	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	705a      	strb	r2, [r3, #1]
 8003184:	e00c      	b.n	80031a0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_PCD_EP_SetStall+0x7e>
 80031bc:	2302      	movs	r3, #2
 80031be:	e01c      	b.n	80031fa <HAL_PCD_EP_SetStall+0xb8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68f9      	ldr	r1, [r7, #12]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f005 fff4 	bl	80091bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d108      	bne.n	80031f0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f006 f935 	bl	800945a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d901      	bls.n	8003220 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e040      	b.n	80032a2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da0e      	bge.n	8003246 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	705a      	strb	r2, [r3, #1]
 8003244:	e00e      	b.n	8003264 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 0207 	and.w	r2, r3, #7
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_PCD_EP_ClrStall+0x82>
 8003280:	2302      	movs	r3, #2
 8003282:	e00e      	b.n	80032a2 <HAL_PCD_EP_ClrStall+0xa0>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68f9      	ldr	r1, [r7, #12]
 8003292:	4618      	mov	r0, r3
 8003294:	f005 ffe3 	bl	800925e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b096      	sub	sp, #88	; 0x58
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032b2:	e3b1      	b.n	8003a18 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80032ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 8173 	bne.w	80035be <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d150      	bne.n	8003386 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	81fb      	strh	r3, [r7, #14]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003304:	b29b      	uxth	r3, r3
 8003306:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3328      	adds	r3, #40	; 0x28
 800330c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	4413      	add	r3, r2
 8003328:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003334:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	441a      	add	r2, r3
 8003340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003342:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003344:	2100      	movs	r1, #0
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f008 fb41 	bl	800b9ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 835f 	beq.w	8003a18 <PCD_EP_ISR_Handler+0x76e>
 800335a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 835a 	bne.w	8003a18 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003370:	b2da      	uxtb	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	b292      	uxth	r2, r2
 8003378:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003384:	e348      	b.n	8003a18 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800338c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003398:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800339c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d032      	beq.n	800340a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	4413      	add	r3, r2
 80033be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ca:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80033d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033dc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033de:	b29b      	uxth	r3, r3
 80033e0:	f006 f889 	bl	80094f6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033f0:	4013      	ands	r3, r2
 80033f2:	823b      	strh	r3, [r7, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	8a3a      	ldrh	r2, [r7, #16]
 80033fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033fe:	b292      	uxth	r2, r2
 8003400:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f008 fab6 	bl	800b974 <HAL_PCD_SetupStageCallback>
 8003408:	e306      	b.n	8003a18 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800340a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800340e:	2b00      	cmp	r3, #0
 8003410:	f280 8302 	bge.w	8003a18 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b29a      	uxth	r2, r3
 800341c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003420:	4013      	ands	r3, r2
 8003422:	83fb      	strh	r3, [r7, #30]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	8bfa      	ldrh	r2, [r7, #30]
 800342a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800342e:	b292      	uxth	r2, r2
 8003430:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	4413      	add	r3, r2
 800344c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003458:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800345a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d019      	beq.n	8003496 <PCD_EP_ISR_Handler+0x1ec>
 8003462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d015      	beq.n	8003496 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003470:	6959      	ldr	r1, [r3, #20]
 8003472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003474:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003478:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800347a:	b29b      	uxth	r3, r3
 800347c:	f006 f83b 	bl	80094f6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	441a      	add	r2, r3
 800348a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800348e:	2100      	movs	r1, #0
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f008 fa81 	bl	800b998 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80034a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f040 82b5 	bne.w	8003a18 <PCD_EP_ISR_Handler+0x76e>
 80034ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80034b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034ba:	f000 82ad 	beq.w	8003a18 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	4413      	add	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	801a      	strh	r2, [r3, #0]
 80034ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b3e      	cmp	r3, #62	; 0x3e
 80034f4:	d91d      	bls.n	8003532 <PCD_EP_ISR_Handler+0x288>
 80034f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	647b      	str	r3, [r7, #68]	; 0x44
 80034fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <PCD_EP_ISR_Handler+0x266>
 800350a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800350c:	3b01      	subs	r3, #1
 800350e:	647b      	str	r3, [r7, #68]	; 0x44
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29a      	uxth	r2, r3
 8003516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003518:	b29b      	uxth	r3, r3
 800351a:	029b      	lsls	r3, r3, #10
 800351c:	b29b      	uxth	r3, r3
 800351e:	4313      	orrs	r3, r2
 8003520:	b29b      	uxth	r3, r3
 8003522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800352a:	b29a      	uxth	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	801a      	strh	r2, [r3, #0]
 8003530:	e026      	b.n	8003580 <PCD_EP_ISR_Handler+0x2d6>
 8003532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <PCD_EP_ISR_Handler+0x2a6>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003548:	b29a      	uxth	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	801a      	strh	r2, [r3, #0]
 800354e:	e017      	b.n	8003580 <PCD_EP_ISR_Handler+0x2d6>
 8003550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	647b      	str	r3, [r7, #68]	; 0x44
 8003558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <PCD_EP_ISR_Handler+0x2c0>
 8003564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003566:	3301      	adds	r3, #1
 8003568:	647b      	str	r3, [r7, #68]	; 0x44
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	b29a      	uxth	r2, r3
 8003570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003572:	b29b      	uxth	r3, r3
 8003574:	029b      	lsls	r3, r3, #10
 8003576:	b29b      	uxth	r3, r3
 8003578:	4313      	orrs	r3, r2
 800357a:	b29a      	uxth	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800358c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003590:	827b      	strh	r3, [r7, #18]
 8003592:	8a7b      	ldrh	r3, [r7, #18]
 8003594:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003598:	827b      	strh	r3, [r7, #18]
 800359a:	8a7b      	ldrh	r3, [r7, #18]
 800359c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035a0:	827b      	strh	r3, [r7, #18]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	8a7b      	ldrh	r3, [r7, #18]
 80035a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	8013      	strh	r3, [r2, #0]
 80035bc:	e22c      	b.n	8003a18 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035d2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f280 80f6 	bge.w	80037c8 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035f2:	4013      	ands	r3, r2
 80035f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800360a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800360e:	b292      	uxth	r2, r2
 8003610:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003612:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362a:	7b1b      	ldrb	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d123      	bne.n	8003678 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003638:	b29b      	uxth	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	4413      	add	r3, r2
 800364a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003654:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003658:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 808e 	beq.w	800377e <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003668:	6959      	ldr	r1, [r3, #20]
 800366a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366c:	88da      	ldrh	r2, [r3, #6]
 800366e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003672:	f005 ff40 	bl	80094f6 <USB_ReadPMA>
 8003676:	e082      	b.n	800377e <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367a:	78db      	ldrb	r3, [r3, #3]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d10a      	bne.n	8003696 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003680:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003684:	461a      	mov	r2, r3
 8003686:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f9d3 	bl	8003a34 <HAL_PCD_EP_DB_Receive>
 800368e:	4603      	mov	r3, r0
 8003690:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003694:	e073      	b.n	800377e <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d022      	beq.n	800373a <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	4413      	add	r3, r2
 800370e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003718:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800371c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003720:	2b00      	cmp	r3, #0
 8003722:	d02c      	beq.n	800377e <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800372a:	6959      	ldr	r1, [r3, #20]
 800372c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800372e:	891a      	ldrh	r2, [r3, #8]
 8003730:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003734:	f005 fedf 	bl	80094f6 <USB_ReadPMA>
 8003738:	e021      	b.n	800377e <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003742:	b29b      	uxth	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	4413      	add	r3, r2
 8003754:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003762:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003770:	6959      	ldr	r1, [r3, #20]
 8003772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003774:	895a      	ldrh	r2, [r3, #10]
 8003776:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800377a:	f005 febc 	bl	80094f6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800377e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003786:	441a      	add	r2, r3
 8003788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800378c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003794:	441a      	add	r2, r3
 8003796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003798:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800379a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <PCD_EP_ISR_Handler+0x504>
 80037a2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80037a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d206      	bcs.n	80037bc <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	4619      	mov	r1, r3
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f008 f8ef 	bl	800b998 <HAL_PCD_DataOutStageCallback>
 80037ba:	e005      	b.n	80037c8 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 f949 	bl	8007a5a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8121 	beq.w	8003a18 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 80037d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4413      	add	r3, r2
 80037e8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003804:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	441a      	add	r2, r3
 8003816:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800381a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800381e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003822:	b29b      	uxth	r3, r3
 8003824:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003828:	78db      	ldrb	r3, [r3, #3]
 800382a:	2b01      	cmp	r3, #1
 800382c:	f040 80a2 	bne.w	8003974 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8003830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003832:	2200      	movs	r2, #0
 8003834:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003838:	7b1b      	ldrb	r3, [r3, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8093 	beq.w	8003966 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003840:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d046      	beq.n	80038da <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800384c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d126      	bne.n	80038a2 <PCD_EP_ISR_Handler+0x5f8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003862:	b29b      	uxth	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	4413      	add	r3, r2
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
 800386c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	00da      	lsls	r2, r3, #3
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	4413      	add	r3, r2
 8003876:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	b29b      	uxth	r3, r3
 8003882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003886:	b29a      	uxth	r2, r3
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	801a      	strh	r2, [r3, #0]
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800389a:	b29a      	uxth	r2, r3
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	801a      	strh	r2, [r3, #0]
 80038a0:	e061      	b.n	8003966 <PCD_EP_ISR_Handler+0x6bc>
 80038a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a4:	785b      	ldrb	r3, [r3, #1]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d15d      	bne.n	8003966 <PCD_EP_ISR_Handler+0x6bc>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	4413      	add	r3, r2
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	00da      	lsls	r2, r3, #3
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	4413      	add	r3, r2
 80038cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	2200      	movs	r2, #0
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e045      	b.n	8003966 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d126      	bne.n	8003936 <PCD_EP_ISR_Handler+0x68c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fc:	4413      	add	r3, r2
 80038fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	00da      	lsls	r2, r3, #3
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	4413      	add	r3, r2
 800390a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800390e:	633b      	str	r3, [r7, #48]	; 0x30
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391a:	b29a      	uxth	r2, r3
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	801a      	strh	r2, [r3, #0]
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	b29b      	uxth	r3, r3
 8003926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800392a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800392e:	b29a      	uxth	r2, r3
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	801a      	strh	r2, [r3, #0]
 8003934:	e017      	b.n	8003966 <PCD_EP_ISR_Handler+0x6bc>
 8003936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003938:	785b      	ldrb	r3, [r3, #1]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d113      	bne.n	8003966 <PCD_EP_ISR_Handler+0x6bc>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003946:	b29b      	uxth	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394c:	4413      	add	r3, r2
 800394e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	00da      	lsls	r2, r3, #3
 8003956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003958:	4413      	add	r3, r2
 800395a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800395e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	2200      	movs	r2, #0
 8003964:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	4619      	mov	r1, r3
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f008 f82e 	bl	800b9ce <HAL_PCD_DataInStageCallback>
 8003972:	e051      	b.n	8003a18 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003974:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d144      	bne.n	8003a0a <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003988:	b29b      	uxth	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4413      	add	r3, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	4413      	add	r3, r2
 800399a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80039a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d907      	bls.n	80039c4 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 80039b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039bc:	1ad2      	subs	r2, r2, r3
 80039be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c0:	619a      	str	r2, [r3, #24]
 80039c2:	e002      	b.n	80039ca <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 80039c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c6:	2200      	movs	r2, #0
 80039c8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80039ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f007 fff8 	bl	800b9ce <HAL_PCD_DataInStageCallback>
 80039de:	e01b      	b.n	8003a18 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80039e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039e8:	441a      	add	r2, r3
 80039ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ec:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80039ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f0:	69da      	ldr	r2, [r3, #28]
 80039f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039f6:	441a      	add	r2, r3
 80039f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a02:	4618      	mov	r0, r3
 8003a04:	f004 f829 	bl	8007a5a <USB_EPStartXfer>
 8003a08:	e006      	b.n	8003a18 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a0e:	461a      	mov	r2, r3
 8003a10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f917 	bl	8003c46 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	b21b      	sxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f6ff ac45 	blt.w	80032b4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3758      	adds	r7, #88	; 0x58
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d07c      	beq.n	8003b46 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4413      	add	r3, r2
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	4413      	add	r3, r2
 8003a66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a70:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	8b7b      	ldrh	r3, [r7, #26]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d306      	bcc.n	8003a8a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	8b7b      	ldrh	r3, [r7, #26]
 8003a82:	1ad2      	subs	r2, r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	619a      	str	r2, [r3, #24]
 8003a88:	e002      	b.n	8003a90 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d123      	bne.n	8003ae0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab2:	833b      	strh	r3, [r7, #24]
 8003ab4:	8b3b      	ldrh	r3, [r7, #24]
 8003ab6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003aba:	833b      	strh	r3, [r7, #24]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	441a      	add	r2, r3
 8003aca:	8b3b      	ldrh	r3, [r7, #24]
 8003acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01f      	beq.n	8003b2a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b04:	82fb      	strh	r3, [r7, #22]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	441a      	add	r2, r3
 8003b14:	8afb      	ldrh	r3, [r7, #22]
 8003b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b2a:	8b7b      	ldrh	r3, [r7, #26]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8085 	beq.w	8003c3c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	6959      	ldr	r1, [r3, #20]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	891a      	ldrh	r2, [r3, #8]
 8003b3e:	8b7b      	ldrh	r3, [r7, #26]
 8003b40:	f005 fcd9 	bl	80094f6 <USB_ReadPMA>
 8003b44:	e07a      	b.n	8003c3c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	8b7b      	ldrh	r3, [r7, #26]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d306      	bcc.n	8003b84 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	8b7b      	ldrh	r3, [r7, #26]
 8003b7c:	1ad2      	subs	r2, r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	619a      	str	r2, [r3, #24]
 8003b82:	e002      	b.n	8003b8a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2200      	movs	r2, #0
 8003b88:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d123      	bne.n	8003bda <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bac:	83fb      	strh	r3, [r7, #30]
 8003bae:	8bfb      	ldrh	r3, [r7, #30]
 8003bb0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bb4:	83fb      	strh	r3, [r7, #30]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	441a      	add	r2, r3
 8003bc4:	8bfb      	ldrh	r3, [r7, #30]
 8003bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d11f      	bne.n	8003c24 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfe:	83bb      	strh	r3, [r7, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	441a      	add	r2, r3
 8003c0e:	8bbb      	ldrh	r3, [r7, #28]
 8003c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c24:	8b7b      	ldrh	r3, [r7, #26]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6959      	ldr	r1, [r3, #20]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	895a      	ldrh	r2, [r3, #10]
 8003c36:	8b7b      	ldrh	r3, [r7, #26]
 8003c38:	f005 fc5d 	bl	80094f6 <USB_ReadPMA>
    }
  }

  return count;
 8003c3c:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b0a4      	sub	sp, #144	; 0x90
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	4613      	mov	r3, r2
 8003c52:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 81db 	beq.w	8004016 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c84:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d907      	bls.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003c9c:	1ad2      	subs	r2, r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	619a      	str	r2, [r3, #24]
 8003ca2:	e002      	b.n	8003caa <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f040 80b9 	bne.w	8003e26 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	785b      	ldrb	r3, [r3, #1]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d126      	bne.n	8003d0a <HAL_PCD_EP_DB_Transmit+0xc4>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	4413      	add	r3, r2
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	00da      	lsls	r2, r3, #3
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	4413      	add	r3, r2
 8003cde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	801a      	strh	r2, [r3, #0]
 8003d08:	e01a      	b.n	8003d40 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d116      	bne.n	8003d40 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d26:	4413      	add	r3, r2
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	00da      	lsls	r2, r3, #3
 8003d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d32:	4413      	add	r3, r2
 8003d34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d38:	633b      	str	r3, [r7, #48]	; 0x30
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	785b      	ldrb	r3, [r3, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d126      	bne.n	8003d9c <HAL_PCD_EP_DB_Transmit+0x156>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	00da      	lsls	r2, r3, #3
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	801a      	strh	r2, [r3, #0]
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	801a      	strh	r2, [r3, #0]
 8003d9a:	e017      	b.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x186>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d113      	bne.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x186>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	4413      	add	r3, r2
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	00da      	lsls	r2, r3, #3
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dc4:	623b      	str	r3, [r7, #32]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f007 fdfb 	bl	800b9ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 82fa 	beq.w	80043d8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	82fb      	strh	r3, [r7, #22]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	441a      	add	r2, r3
 8003e0e:	8afb      	ldrh	r3, [r7, #22]
 8003e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	8013      	strh	r3, [r2, #0]
 8003e24:	e2d8      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d021      	beq.n	8003e74 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	441a      	add	r2, r3
 8003e5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	f040 82ac 	bne.w	80043d8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e88:	441a      	add	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e96:	441a      	add	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	6a1a      	ldr	r2, [r3, #32]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d30b      	bcc.n	8003ec0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	6a1a      	ldr	r2, [r3, #32]
 8003eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eb8:	1ad2      	subs	r2, r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	621a      	str	r2, [r3, #32]
 8003ebe:	e017      	b.n	8003ef0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d108      	bne.n	8003eda <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003ec8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ecc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ed8:	e00a      	b.n	8003ef0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2200      	movs	r2, #0
 8003eee:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d165      	bne.n	8003fc4 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0c:	4413      	add	r3, r2
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	00da      	lsls	r2, r3, #3
 8003f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f18:	4413      	add	r3, r2
 8003f1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f34:	2b3e      	cmp	r3, #62	; 0x3e
 8003f36:	d91d      	bls.n	8003f74 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	029b      	lsls	r3, r3, #10
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	4313      	orrs	r3, r2
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	e044      	b.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	801a      	strh	r2, [r3, #0]
 8003f90:	e035      	b.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_PCD_EP_DB_Transmit+0x366>
 8003fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa8:	3301      	adds	r3, #1
 8003faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	029b      	lsls	r3, r3, #10
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	e01c      	b.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	785b      	ldrb	r3, [r3, #1]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d118      	bne.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe0:	4413      	add	r3, r2
 8003fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	00da      	lsls	r2, r3, #3
 8003fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fec:	4413      	add	r3, r2
 8003fee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6959      	ldr	r1, [r3, #20]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	891a      	ldrh	r2, [r3, #8]
 800400a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800400e:	b29b      	uxth	r3, r3
 8004010:	f005 fa2f 	bl	8009472 <USB_WritePMA>
 8004014:	e1e0      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401e:	b29b      	uxth	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	4413      	add	r3, r2
 8004030:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800403a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004046:	429a      	cmp	r2, r3
 8004048:	d307      	bcc.n	800405a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004052:	1ad2      	subs	r2, r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	619a      	str	r2, [r3, #24]
 8004058:	e002      	b.n	8004060 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2200      	movs	r2, #0
 800405e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f040 80c0 	bne.w	80041ea <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	785b      	ldrb	r3, [r3, #1]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d126      	bne.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004080:	b29b      	uxth	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004086:	4413      	add	r3, r2
 8004088:	67fb      	str	r3, [r7, #124]	; 0x7c
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	00da      	lsls	r2, r3, #3
 8004090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004092:	4413      	add	r3, r2
 8004094:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004098:	67bb      	str	r3, [r7, #120]	; 0x78
 800409a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040bc:	801a      	strh	r2, [r3, #0]
 80040be:	e01a      	b.n	80040f6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d116      	bne.n	80040f6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	667b      	str	r3, [r7, #100]	; 0x64
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040dc:	4413      	add	r3, r2
 80040de:	667b      	str	r3, [r7, #100]	; 0x64
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	00da      	lsls	r2, r3, #3
 80040e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040e8:	4413      	add	r3, r2
 80040ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040ee:	663b      	str	r3, [r7, #96]	; 0x60
 80040f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040f2:	2200      	movs	r2, #0
 80040f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	677b      	str	r3, [r7, #116]	; 0x74
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d12b      	bne.n	800415c <HAL_PCD_EP_DB_Transmit+0x516>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	66fb      	str	r3, [r7, #108]	; 0x6c
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004112:	b29b      	uxth	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004118:	4413      	add	r3, r2
 800411a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	00da      	lsls	r2, r3, #3
 8004122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004124:	4413      	add	r3, r2
 8004126:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800412a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800412e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800413a:	b29a      	uxth	r2, r3
 800413c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004140:	801a      	strh	r2, [r3, #0]
 8004142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800414e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004152:	b29a      	uxth	r2, r3
 8004154:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	e017      	b.n	800418c <HAL_PCD_EP_DB_Transmit+0x546>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d113      	bne.n	800418c <HAL_PCD_EP_DB_Transmit+0x546>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416c:	b29b      	uxth	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004172:	4413      	add	r3, r2
 8004174:	677b      	str	r3, [r7, #116]	; 0x74
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	00da      	lsls	r2, r3, #3
 800417c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800417e:	4413      	add	r3, r2
 8004180:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004184:	673b      	str	r3, [r7, #112]	; 0x70
 8004186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004188:	2200      	movs	r2, #0
 800418a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	4619      	mov	r1, r3
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f007 fc1b 	bl	800b9ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 811a 	bne.w	80043d8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041be:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	441a      	add	r2, r3
 80041d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80041d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	8013      	strh	r3, [r2, #0]
 80041e8:	e0f6      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d121      	bne.n	8004238 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004234:	b29b      	uxth	r3, r3
 8004236:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800423e:	2b01      	cmp	r3, #1
 8004240:	f040 80ca 	bne.w	80043d8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	695a      	ldr	r2, [r3, #20]
 8004248:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800424c:	441a      	add	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800425a:	441a      	add	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	429a      	cmp	r2, r3
 800426a:	d30b      	bcc.n	8004284 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6a1a      	ldr	r2, [r3, #32]
 8004278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800427c:	1ad2      	subs	r2, r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	621a      	str	r2, [r3, #32]
 8004282:	e017      	b.n	80042b4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d108      	bne.n	800429e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800428c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004290:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800429c:	e00a      	b.n	80042b4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2200      	movs	r2, #0
 80042aa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	657b      	str	r3, [r7, #84]	; 0x54
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d165      	bne.n	800438e <HAL_PCD_EP_DB_Transmit+0x748>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d6:	4413      	add	r3, r2
 80042d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	00da      	lsls	r2, r3, #3
 80042e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e2:	4413      	add	r3, r2
 80042e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80042ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042fe:	2b3e      	cmp	r3, #62	; 0x3e
 8004300:	d91d      	bls.n	800433e <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	66bb      	str	r3, [r7, #104]	; 0x68
 800430a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2b00      	cmp	r3, #0
 8004314:	d102      	bne.n	800431c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004318:	3b01      	subs	r3, #1
 800431a:	66bb      	str	r3, [r7, #104]	; 0x68
 800431c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29a      	uxth	r2, r3
 8004322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004324:	b29b      	uxth	r3, r3
 8004326:	029b      	lsls	r3, r3, #10
 8004328:	b29b      	uxth	r3, r3
 800432a:	4313      	orrs	r3, r2
 800432c:	b29b      	uxth	r3, r3
 800432e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004336:	b29a      	uxth	r2, r3
 8004338:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800433a:	801a      	strh	r2, [r3, #0]
 800433c:	e041      	b.n	80043c2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800433e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <HAL_PCD_EP_DB_Transmit+0x716>
 8004346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004354:	b29a      	uxth	r2, r3
 8004356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	e032      	b.n	80043c2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800435c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	66bb      	str	r3, [r7, #104]	; 0x68
 8004364:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_PCD_EP_DB_Transmit+0x730>
 8004370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004372:	3301      	adds	r3, #1
 8004374:	66bb      	str	r3, [r7, #104]	; 0x68
 8004376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29a      	uxth	r2, r3
 800437c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800437e:	b29b      	uxth	r3, r3
 8004380:	029b      	lsls	r3, r3, #10
 8004382:	b29b      	uxth	r3, r3
 8004384:	4313      	orrs	r3, r2
 8004386:	b29a      	uxth	r2, r3
 8004388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800438a:	801a      	strh	r2, [r3, #0]
 800438c:	e019      	b.n	80043c2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d115      	bne.n	80043c2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800439e:	b29b      	uxth	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a4:	4413      	add	r3, r2
 80043a6:	657b      	str	r3, [r7, #84]	; 0x54
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	00da      	lsls	r2, r3, #3
 80043ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b0:	4413      	add	r3, r2
 80043b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043b6:	653b      	str	r3, [r7, #80]	; 0x50
 80043b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043bc:	b29a      	uxth	r2, r3
 80043be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6959      	ldr	r1, [r3, #20]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	895a      	ldrh	r2, [r3, #10]
 80043ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f005 f84d 	bl	8009472 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f2:	82bb      	strh	r3, [r7, #20]
 80043f4:	8abb      	ldrh	r3, [r7, #20]
 80043f6:	f083 0310 	eor.w	r3, r3, #16
 80043fa:	82bb      	strh	r3, [r7, #20]
 80043fc:	8abb      	ldrh	r3, [r7, #20]
 80043fe:	f083 0320 	eor.w	r3, r3, #32
 8004402:	82bb      	strh	r3, [r7, #20]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	8abb      	ldrh	r3, [r7, #20]
 8004414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004424:	b29b      	uxth	r3, r3
 8004426:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3790      	adds	r7, #144	; 0x90
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004432:	b480      	push	{r7}
 8004434:	b087      	sub	sp, #28
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	817b      	strh	r3, [r7, #10]
 8004440:	4613      	mov	r3, r2
 8004442:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004444:	897b      	ldrh	r3, [r7, #10]
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00b      	beq.n	8004468 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004450:	897b      	ldrh	r3, [r7, #10]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e009      	b.n	800447c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004468:	897a      	ldrh	r2, [r7, #10]
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4413      	add	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800447c:	893b      	ldrh	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d107      	bne.n	8004492 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	b29a      	uxth	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	80da      	strh	r2, [r3, #6]
 8004490:	e00b      	b.n	80044aa <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2201      	movs	r2, #1
 8004496:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	b29a      	uxth	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f043 0302 	orr.w	r3, r3, #2
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004510:	4b04      	ldr	r3, [pc, #16]	; (8004524 <HAL_PWREx_GetVoltageRange+0x18>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40007000 	.word	0x40007000

08004528 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004536:	d130      	bne.n	800459a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004538:	4b23      	ldr	r3, [pc, #140]	; (80045c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004544:	d038      	beq.n	80045b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800454e:	4a1e      	ldr	r2, [pc, #120]	; (80045c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004554:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004556:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2232      	movs	r2, #50	; 0x32
 800455c:	fb02 f303 	mul.w	r3, r2, r3
 8004560:	4a1b      	ldr	r2, [pc, #108]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	0c9b      	lsrs	r3, r3, #18
 8004568:	3301      	adds	r3, #1
 800456a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800456c:	e002      	b.n	8004574 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3b01      	subs	r3, #1
 8004572:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004574:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004580:	d102      	bne.n	8004588 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f2      	bne.n	800456e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004588:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004594:	d110      	bne.n	80045b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e00f      	b.n	80045ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a6:	d007      	beq.n	80045b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045a8:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045b0:	4a05      	ldr	r2, [pc, #20]	; (80045c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40007000 	.word	0x40007000
 80045cc:	20000004 	.word	0x20000004
 80045d0:	431bde83 	.word	0x431bde83

080045d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045e2:	6053      	str	r3, [r2, #4]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40007000 	.word	0x40007000

080045f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f000 bc4f 	b.w	8004ea6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004608:	4b97      	ldr	r3, [pc, #604]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004612:	4b95      	ldr	r3, [pc, #596]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80e6 	beq.w	80047f6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <HAL_RCC_OscConfig+0x4c>
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	2b0c      	cmp	r3, #12
 8004634:	f040 808d 	bne.w	8004752 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b01      	cmp	r3, #1
 800463c:	f040 8089 	bne.w	8004752 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004640:	4b89      	ldr	r3, [pc, #548]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d006      	beq.n	800465a <HAL_RCC_OscConfig+0x66>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d102      	bne.n	800465a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f000 bc26 	b.w	8004ea6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800465e:	4b82      	ldr	r3, [pc, #520]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d004      	beq.n	8004674 <HAL_RCC_OscConfig+0x80>
 800466a:	4b7f      	ldr	r3, [pc, #508]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004672:	e005      	b.n	8004680 <HAL_RCC_OscConfig+0x8c>
 8004674:	4b7c      	ldr	r3, [pc, #496]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004680:	4293      	cmp	r3, r2
 8004682:	d224      	bcs.n	80046ce <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fdd9 	bl	8005240 <RCC_SetFlashLatencyFromMSIRange>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	f000 bc06 	b.w	8004ea6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800469a:	4b73      	ldr	r3, [pc, #460]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a72      	ldr	r2, [pc, #456]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80046a0:	f043 0308 	orr.w	r3, r3, #8
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	4b70      	ldr	r3, [pc, #448]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	496d      	ldr	r1, [pc, #436]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046b8:	4b6b      	ldr	r3, [pc, #428]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	4968      	ldr	r1, [pc, #416]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
 80046cc:	e025      	b.n	800471a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ce:	4b66      	ldr	r3, [pc, #408]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a65      	ldr	r2, [pc, #404]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80046d4:	f043 0308 	orr.w	r3, r3, #8
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4b63      	ldr	r3, [pc, #396]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	4960      	ldr	r1, [pc, #384]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ec:	4b5e      	ldr	r3, [pc, #376]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	495b      	ldr	r1, [pc, #364]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fd98 	bl	8005240 <RCC_SetFlashLatencyFromMSIRange>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e3c5      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800471a:	f000 fccd 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 800471e:	4602      	mov	r2, r0
 8004720:	4b51      	ldr	r3, [pc, #324]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	4950      	ldr	r1, [pc, #320]	; (800486c <HAL_RCC_OscConfig+0x278>)
 800472c:	5ccb      	ldrb	r3, [r1, r3]
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	fa22 f303 	lsr.w	r3, r2, r3
 8004736:	4a4e      	ldr	r2, [pc, #312]	; (8004870 <HAL_RCC_OscConfig+0x27c>)
 8004738:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800473a:	4b4e      	ldr	r3, [pc, #312]	; (8004874 <HAL_RCC_OscConfig+0x280>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fc fe9a 	bl	8001478 <HAL_InitTick>
 8004744:	4603      	mov	r3, r0
 8004746:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d052      	beq.n	80047f4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	e3a9      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d032      	beq.n	80047c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800475a:	4b43      	ldr	r3, [pc, #268]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a42      	ldr	r2, [pc, #264]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004766:	f7fc fed7 	bl	8001518 <HAL_GetTick>
 800476a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800476e:	f7fc fed3 	bl	8001518 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e392      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004780:	4b39      	ldr	r3, [pc, #228]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800478c:	4b36      	ldr	r3, [pc, #216]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a35      	ldr	r2, [pc, #212]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004792:	f043 0308 	orr.w	r3, r3, #8
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b33      	ldr	r3, [pc, #204]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	4930      	ldr	r1, [pc, #192]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047aa:	4b2f      	ldr	r3, [pc, #188]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	492b      	ldr	r1, [pc, #172]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]
 80047be:	e01a      	b.n	80047f6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047c0:	4b29      	ldr	r3, [pc, #164]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a28      	ldr	r2, [pc, #160]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047cc:	f7fc fea4 	bl	8001518 <HAL_GetTick>
 80047d0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047d4:	f7fc fea0 	bl	8001518 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e35f      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047e6:	4b20      	ldr	r3, [pc, #128]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x1e0>
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d073      	beq.n	80048ea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2b08      	cmp	r3, #8
 8004806:	d005      	beq.n	8004814 <HAL_RCC_OscConfig+0x220>
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	2b0c      	cmp	r3, #12
 800480c:	d10e      	bne.n	800482c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d10b      	bne.n	800482c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004814:	4b14      	ldr	r3, [pc, #80]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d063      	beq.n	80048e8 <HAL_RCC_OscConfig+0x2f4>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d15f      	bne.n	80048e8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e33c      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004834:	d106      	bne.n	8004844 <HAL_RCC_OscConfig+0x250>
 8004836:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a0b      	ldr	r2, [pc, #44]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 800483c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	e025      	b.n	8004890 <HAL_RCC_OscConfig+0x29c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800484c:	d114      	bne.n	8004878 <HAL_RCC_OscConfig+0x284>
 800484e:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a05      	ldr	r2, [pc, #20]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	4b03      	ldr	r3, [pc, #12]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a02      	ldr	r2, [pc, #8]	; (8004868 <HAL_RCC_OscConfig+0x274>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	e013      	b.n	8004890 <HAL_RCC_OscConfig+0x29c>
 8004868:	40021000 	.word	0x40021000
 800486c:	0800c788 	.word	0x0800c788
 8004870:	20000004 	.word	0x20000004
 8004874:	20000008 	.word	0x20000008
 8004878:	4b8f      	ldr	r3, [pc, #572]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a8e      	ldr	r2, [pc, #568]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 800487e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	4b8c      	ldr	r3, [pc, #560]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a8b      	ldr	r2, [pc, #556]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 800488a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d013      	beq.n	80048c0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fc fe3e 	bl	8001518 <HAL_GetTick>
 800489c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a0:	f7fc fe3a 	bl	8001518 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	; 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e2f9      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b2:	4b81      	ldr	r3, [pc, #516]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x2ac>
 80048be:	e014      	b.n	80048ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fc fe2a 	bl	8001518 <HAL_GetTick>
 80048c4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c8:	f7fc fe26 	bl	8001518 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e2e5      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048da:	4b77      	ldr	r3, [pc, #476]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x2d4>
 80048e6:	e000      	b.n	80048ea <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d060      	beq.n	80049b8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_OscConfig+0x314>
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d119      	bne.n	8004936 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b02      	cmp	r3, #2
 8004906:	d116      	bne.n	8004936 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004908:	4b6b      	ldr	r3, [pc, #428]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_OscConfig+0x32c>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e2c2      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004920:	4b65      	ldr	r3, [pc, #404]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	4962      	ldr	r1, [pc, #392]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004934:	e040      	b.n	80049b8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d023      	beq.n	8004986 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800493e:	4b5e      	ldr	r3, [pc, #376]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a5d      	ldr	r2, [pc, #372]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494a:	f7fc fde5 	bl	8001518 <HAL_GetTick>
 800494e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004952:	f7fc fde1 	bl	8001518 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e2a0      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004964:	4b54      	ldr	r3, [pc, #336]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b51      	ldr	r3, [pc, #324]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	494e      	ldr	r1, [pc, #312]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004980:	4313      	orrs	r3, r2
 8004982:	604b      	str	r3, [r1, #4]
 8004984:	e018      	b.n	80049b8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004986:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a4b      	ldr	r2, [pc, #300]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 800498c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fc fdc1 	bl	8001518 <HAL_GetTick>
 8004996:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499a:	f7fc fdbd 	bl	8001518 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e27c      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ac:	4b42      	ldr	r3, [pc, #264]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f0      	bne.n	800499a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8082 	beq.w	8004aca <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d05f      	beq.n	8004a8e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80049ce:	4b3a      	ldr	r3, [pc, #232]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 80049d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d037      	beq.n	8004a54 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d006      	beq.n	80049fc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e254      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01b      	beq.n	8004a3e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004a06:	4b2c      	ldr	r3, [pc, #176]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0c:	4a2a      	ldr	r2, [pc, #168]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a16:	f7fc fd7f 	bl	8001518 <HAL_GetTick>
 8004a1a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fc fd7b 	bl	8001518 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b11      	cmp	r3, #17
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e23a      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a30:	4b21      	ldr	r3, [pc, #132]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1ef      	bne.n	8004a1e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004a3e:	4b1e      	ldr	r3, [pc, #120]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a44:	f023 0210 	bic.w	r2, r3, #16
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	491a      	ldr	r1, [pc, #104]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a54:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5a:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a64:	f7fc fd58 	bl	8001518 <HAL_GetTick>
 8004a68:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a6c:	f7fc fd54 	bl	8001518 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b11      	cmp	r3, #17
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e213      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0ef      	beq.n	8004a6c <HAL_RCC_OscConfig+0x478>
 8004a8c:	e01d      	b.n	8004aca <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a94:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <HAL_RCC_OscConfig+0x4c4>)
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9e:	f7fc fd3b 	bl	8001518 <HAL_GetTick>
 8004aa2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004aa4:	e00a      	b.n	8004abc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa6:	f7fc fd37 	bl	8001518 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b11      	cmp	r3, #17
 8004ab2:	d903      	bls.n	8004abc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e1f6      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
 8004ab8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004abc:	4ba9      	ldr	r3, [pc, #676]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1ed      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80bd 	beq.w	8004c52 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ade:	4ba1      	ldr	r3, [pc, #644]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10e      	bne.n	8004b08 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aea:	4b9e      	ldr	r3, [pc, #632]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	4a9d      	ldr	r2, [pc, #628]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6593      	str	r3, [r2, #88]	; 0x58
 8004af6:	4b9b      	ldr	r3, [pc, #620]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b08:	4b97      	ldr	r3, [pc, #604]	; (8004d68 <HAL_RCC_OscConfig+0x774>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d118      	bne.n	8004b46 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b14:	4b94      	ldr	r3, [pc, #592]	; (8004d68 <HAL_RCC_OscConfig+0x774>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a93      	ldr	r2, [pc, #588]	; (8004d68 <HAL_RCC_OscConfig+0x774>)
 8004b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b20:	f7fc fcfa 	bl	8001518 <HAL_GetTick>
 8004b24:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b28:	f7fc fcf6 	bl	8001518 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e1b5      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b3a:	4b8b      	ldr	r3, [pc, #556]	; (8004d68 <HAL_RCC_OscConfig+0x774>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d02c      	beq.n	8004bac <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004b52:	4b84      	ldr	r3, [pc, #528]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b64:	497f      	ldr	r1, [pc, #508]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d010      	beq.n	8004b9a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b78:	4b7a      	ldr	r3, [pc, #488]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	4a79      	ldr	r2, [pc, #484]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004b80:	f043 0304 	orr.w	r3, r3, #4
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b88:	4b76      	ldr	r3, [pc, #472]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8e:	4a75      	ldr	r2, [pc, #468]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b98:	e018      	b.n	8004bcc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b9a:	4b72      	ldr	r3, [pc, #456]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba0:	4a70      	ldr	r2, [pc, #448]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004baa:	e00f      	b.n	8004bcc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004bac:	4b6d      	ldr	r3, [pc, #436]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	4a6c      	ldr	r2, [pc, #432]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004bbc:	4b69      	ldr	r3, [pc, #420]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	4a68      	ldr	r2, [pc, #416]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004bc4:	f023 0304 	bic.w	r3, r3, #4
 8004bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d016      	beq.n	8004c02 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fc fca0 	bl	8001518 <HAL_GetTick>
 8004bd8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fc fc9c 	bl	8001518 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e159      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf2:	4b5c      	ldr	r3, [pc, #368]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ed      	beq.n	8004bdc <HAL_RCC_OscConfig+0x5e8>
 8004c00:	e01d      	b.n	8004c3e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c02:	f7fc fc89 	bl	8001518 <HAL_GetTick>
 8004c06:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c08:	e00a      	b.n	8004c20 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f7fc fc85 	bl	8001518 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e142      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c20:	4b50      	ldr	r3, [pc, #320]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ed      	bne.n	8004c0a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004c2e:	4b4d      	ldr	r3, [pc, #308]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c34:	4a4b      	ldr	r2, [pc, #300]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d105      	bne.n	8004c52 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c46:	4b47      	ldr	r3, [pc, #284]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4a:	4a46      	ldr	r2, [pc, #280]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d03c      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01c      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c66:	4b3f      	ldr	r3, [pc, #252]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c6c:	4a3d      	ldr	r2, [pc, #244]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fc fc4f 	bl	8001518 <HAL_GetTick>
 8004c7a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c7e:	f7fc fc4b 	bl	8001518 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e10a      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c90:	4b34      	ldr	r3, [pc, #208]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ef      	beq.n	8004c7e <HAL_RCC_OscConfig+0x68a>
 8004c9e:	e01b      	b.n	8004cd8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ca0:	4b30      	ldr	r3, [pc, #192]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ca6:	4a2f      	ldr	r2, [pc, #188]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb0:	f7fc fc32 	bl	8001518 <HAL_GetTick>
 8004cb4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cb8:	f7fc fc2e 	bl	8001518 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e0ed      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cca:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1ef      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80e1 	beq.w	8004ea4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	f040 80b5 	bne.w	8004e56 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004cec:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f003 0203 	and.w	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d124      	bne.n	8004d4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d11b      	bne.n	8004d4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d113      	bne.n	8004d4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2c:	085b      	lsrs	r3, r3, #1
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d109      	bne.n	8004d4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	3b01      	subs	r3, #1
 8004d44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d05f      	beq.n	8004e0a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	2b0c      	cmp	r3, #12
 8004d4e:	d05a      	beq.n	8004e06 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a03      	ldr	r2, [pc, #12]	; (8004d64 <HAL_RCC_OscConfig+0x770>)
 8004d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d5c:	f7fc fbdc 	bl	8001518 <HAL_GetTick>
 8004d60:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d62:	e00c      	b.n	8004d7e <HAL_RCC_OscConfig+0x78a>
 8004d64:	40021000 	.word	0x40021000
 8004d68:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6c:	f7fc fbd4 	bl	8001518 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e093      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d7e:	4b4c      	ldr	r3, [pc, #304]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d8a:	4b49      	ldr	r3, [pc, #292]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	4b49      	ldr	r3, [pc, #292]	; (8004eb4 <HAL_RCC_OscConfig+0x8c0>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d9a:	3a01      	subs	r2, #1
 8004d9c:	0112      	lsls	r2, r2, #4
 8004d9e:	4311      	orrs	r1, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004da4:	0212      	lsls	r2, r2, #8
 8004da6:	4311      	orrs	r1, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004dac:	0852      	lsrs	r2, r2, #1
 8004dae:	3a01      	subs	r2, #1
 8004db0:	0552      	lsls	r2, r2, #21
 8004db2:	4311      	orrs	r1, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004db8:	0852      	lsrs	r2, r2, #1
 8004dba:	3a01      	subs	r2, #1
 8004dbc:	0652      	lsls	r2, r2, #25
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	493b      	ldr	r1, [pc, #236]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004dc6:	4b3a      	ldr	r3, [pc, #232]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a39      	ldr	r2, [pc, #228]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004dcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dd0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dd2:	4b37      	ldr	r3, [pc, #220]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	4a36      	ldr	r2, [pc, #216]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004dd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ddc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dde:	f7fc fb9b 	bl	8001518 <HAL_GetTick>
 8004de2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de6:	f7fc fb97 	bl	8001518 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e056      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df8:	4b2d      	ldr	r3, [pc, #180]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e04:	e04e      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e04d      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e0a:	4b29      	ldr	r3, [pc, #164]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d146      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e16:	4b26      	ldr	r3, [pc, #152]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a25      	ldr	r2, [pc, #148]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e20:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e22:	4b23      	ldr	r3, [pc, #140]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	4a22      	ldr	r2, [pc, #136]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004e28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e2c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e2e:	f7fc fb73 	bl	8001518 <HAL_GetTick>
 8004e32:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e36:	f7fc fb6f 	bl	8001518 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e02e      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e48:	4b19      	ldr	r3, [pc, #100]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x842>
 8004e54:	e026      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	d021      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fc fb56 	bl	8001518 <HAL_GetTick>
 8004e6c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fc fb52 	bl	8001518 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e011      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e82:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	4a07      	ldr	r2, [pc, #28]	; (8004eb0 <HAL_RCC_OscConfig+0x8bc>)
 8004e94:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e98:	f023 0303 	bic.w	r3, r3, #3
 8004e9c:	60d3      	str	r3, [r2, #12]
 8004e9e:	e001      	b.n	8004ea4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3728      	adds	r7, #40	; 0x28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	f99f808c 	.word	0xf99f808c

08004eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0e7      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ecc:	4b75      	ldr	r3, [pc, #468]	; (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d910      	bls.n	8004efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eda:	4b72      	ldr	r3, [pc, #456]	; (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f023 0207 	bic.w	r2, r3, #7
 8004ee2:	4970      	ldr	r1, [pc, #448]	; (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eea:	4b6e      	ldr	r3, [pc, #440]	; (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0cf      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d010      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	4b66      	ldr	r3, [pc, #408]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d908      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f18:	4b63      	ldr	r3, [pc, #396]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4960      	ldr	r1, [pc, #384]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d04c      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3e:	4b5a      	ldr	r3, [pc, #360]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d121      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e0a6      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d107      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f56:	4b54      	ldr	r3, [pc, #336]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d115      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e09a      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f6e:	4b4e      	ldr	r3, [pc, #312]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e08e      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f7e:	4b4a      	ldr	r3, [pc, #296]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e086      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f8e:	4b46      	ldr	r3, [pc, #280]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 0203 	bic.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4943      	ldr	r1, [pc, #268]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa0:	f7fc faba 	bl	8001518 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa8:	f7fc fab6 	bl	8001518 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e06e      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	4b3a      	ldr	r3, [pc, #232]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 020c 	and.w	r2, r3, #12
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d1eb      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d010      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	4b31      	ldr	r3, [pc, #196]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d208      	bcs.n	8004ffe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fec:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	492b      	ldr	r1, [pc, #172]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ffe:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d210      	bcs.n	800502e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500c:	4b25      	ldr	r3, [pc, #148]	; (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f023 0207 	bic.w	r2, r3, #7
 8005014:	4923      	ldr	r1, [pc, #140]	; (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	4313      	orrs	r3, r2
 800501a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501c:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d001      	beq.n	800502e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e036      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d008      	beq.n	800504c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	4918      	ldr	r1, [pc, #96]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005048:	4313      	orrs	r3, r2
 800504a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005058:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4910      	ldr	r1, [pc, #64]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005068:	4313      	orrs	r3, r2
 800506a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800506c:	f000 f824 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	091b      	lsrs	r3, r3, #4
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	490b      	ldr	r1, [pc, #44]	; (80050ac <HAL_RCC_ClockConfig+0x1f4>)
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	f003 031f 	and.w	r3, r3, #31
 8005084:	fa22 f303 	lsr.w	r3, r2, r3
 8005088:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <HAL_RCC_ClockConfig+0x1f8>)
 800508a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800508c:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <HAL_RCC_ClockConfig+0x1fc>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f7fc f9f1 	bl	8001478 <HAL_InitTick>
 8005096:	4603      	mov	r3, r0
 8005098:	72fb      	strb	r3, [r7, #11]

  return status;
 800509a:	7afb      	ldrb	r3, [r7, #11]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40022000 	.word	0x40022000
 80050a8:	40021000 	.word	0x40021000
 80050ac:	0800c788 	.word	0x0800c788
 80050b0:	20000004 	.word	0x20000004
 80050b4:	20000008 	.word	0x20000008

080050b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b089      	sub	sp, #36	; 0x24
 80050bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050c6:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 030c 	and.w	r3, r3, #12
 80050ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050d0:	4b3b      	ldr	r3, [pc, #236]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_GetSysClockFreq+0x34>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b0c      	cmp	r3, #12
 80050e4:	d121      	bne.n	800512a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d11e      	bne.n	800512a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050ec:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050f8:	4b31      	ldr	r3, [pc, #196]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	e005      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005108:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005114:	4a2b      	ldr	r2, [pc, #172]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10d      	bne.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005128:	e00a      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b04      	cmp	r3, #4
 800512e:	d102      	bne.n	8005136 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	e004      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d101      	bne.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800513c:	4b23      	ldr	r3, [pc, #140]	; (80051cc <HAL_RCC_GetSysClockFreq+0x114>)
 800513e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d134      	bne.n	80051b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005146:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d003      	beq.n	800515e <HAL_RCC_GetSysClockFreq+0xa6>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b03      	cmp	r3, #3
 800515a:	d003      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0xac>
 800515c:	e005      	b.n	800516a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800515e:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005160:	617b      	str	r3, [r7, #20]
      break;
 8005162:	e005      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005164:	4b19      	ldr	r3, [pc, #100]	; (80051cc <HAL_RCC_GetSysClockFreq+0x114>)
 8005166:	617b      	str	r3, [r7, #20]
      break;
 8005168:	e002      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	617b      	str	r3, [r7, #20]
      break;
 800516e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005170:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	3301      	adds	r3, #1
 800517c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800517e:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	fb03 f202 	mul.w	r2, r3, r2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	0e5b      	lsrs	r3, r3, #25
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	3301      	adds	r3, #1
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051b0:	69bb      	ldr	r3, [r7, #24]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3724      	adds	r7, #36	; 0x24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40021000 	.word	0x40021000
 80051c4:	0800c7a0 	.word	0x0800c7a0
 80051c8:	00f42400 	.word	0x00f42400
 80051cc:	007a1200 	.word	0x007a1200

080051d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d4:	4b03      	ldr	r3, [pc, #12]	; (80051e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051d6:	681b      	ldr	r3, [r3, #0]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000004 	.word	0x20000004

080051e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051ec:	f7ff fff0 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4904      	ldr	r1, [pc, #16]	; (8005210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005208:	4618      	mov	r0, r3
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40021000 	.word	0x40021000
 8005210:	0800c798 	.word	0x0800c798

08005214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005218:	f7ff ffda 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 800521c:	4602      	mov	r2, r0
 800521e:	4b06      	ldr	r3, [pc, #24]	; (8005238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	0adb      	lsrs	r3, r3, #11
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	4904      	ldr	r1, [pc, #16]	; (800523c <HAL_RCC_GetPCLK2Freq+0x28>)
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005234:	4618      	mov	r0, r3
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40021000 	.word	0x40021000
 800523c:	0800c798 	.word	0x0800c798

08005240 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800524c:	4b2a      	ldr	r3, [pc, #168]	; (80052f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800524e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005258:	f7ff f958 	bl	800450c <HAL_PWREx_GetVoltageRange>
 800525c:	6178      	str	r0, [r7, #20]
 800525e:	e014      	b.n	800528a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005260:	4b25      	ldr	r3, [pc, #148]	; (80052f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005264:	4a24      	ldr	r2, [pc, #144]	; (80052f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526a:	6593      	str	r3, [r2, #88]	; 0x58
 800526c:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800526e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005278:	f7ff f948 	bl	800450c <HAL_PWREx_GetVoltageRange>
 800527c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800527e:	4b1e      	ldr	r3, [pc, #120]	; (80052f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005282:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005288:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005290:	d10b      	bne.n	80052aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d919      	bls.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2ba0      	cmp	r3, #160	; 0xa0
 800529c:	d902      	bls.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800529e:	2302      	movs	r3, #2
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	e013      	b.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052a4:	2301      	movs	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	e010      	b.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b80      	cmp	r3, #128	; 0x80
 80052ae:	d902      	bls.n	80052b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052b0:	2303      	movs	r3, #3
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	e00a      	b.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b80      	cmp	r3, #128	; 0x80
 80052ba:	d102      	bne.n	80052c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052bc:	2302      	movs	r3, #2
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	e004      	b.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b70      	cmp	r3, #112	; 0x70
 80052c6:	d101      	bne.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052c8:	2301      	movs	r3, #1
 80052ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f023 0207 	bic.w	r2, r3, #7
 80052d4:	4909      	ldr	r1, [pc, #36]	; (80052fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052dc:	4b07      	ldr	r3, [pc, #28]	; (80052fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d001      	beq.n	80052ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40022000 	.word	0x40022000

08005300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005308:	2300      	movs	r3, #0
 800530a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800530c:	2300      	movs	r3, #0
 800530e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 809e 	beq.w	800545a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800531e:	2300      	movs	r3, #0
 8005320:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005322:	4b46      	ldr	r3, [pc, #280]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005332:	2300      	movs	r3, #0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00d      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005338:	4b40      	ldr	r3, [pc, #256]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800533a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533c:	4a3f      	ldr	r2, [pc, #252]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800533e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005342:	6593      	str	r3, [r2, #88]	; 0x58
 8005344:	4b3d      	ldr	r3, [pc, #244]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005350:	2301      	movs	r3, #1
 8005352:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005354:	4b3a      	ldr	r3, [pc, #232]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a39      	ldr	r2, [pc, #228]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800535a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005360:	f7fc f8da 	bl	8001518 <HAL_GetTick>
 8005364:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005366:	e009      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005368:	f7fc f8d6 	bl	8001518 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d902      	bls.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	74fb      	strb	r3, [r7, #19]
        break;
 800537a:	e005      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800537c:	4b30      	ldr	r3, [pc, #192]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0ef      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005388:	7cfb      	ldrb	r3, [r7, #19]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d15a      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800538e:	4b2b      	ldr	r3, [pc, #172]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005398:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01e      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d019      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053aa:	4b24      	ldr	r3, [pc, #144]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053b6:	4b21      	ldr	r3, [pc, #132]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053bc:	4a1f      	ldr	r2, [pc, #124]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80053be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053c6:	4b1d      	ldr	r3, [pc, #116]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80053ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053d6:	4a19      	ldr	r2, [pc, #100]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d016      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e8:	f7fc f896 	bl	8001518 <HAL_GetTick>
 80053ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ee:	e00b      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f0:	f7fc f892 	bl	8001518 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d902      	bls.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	74fb      	strb	r3, [r7, #19]
            break;
 8005406:	e006      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005408:	4b0c      	ldr	r3, [pc, #48]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0ec      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005416:	7cfb      	ldrb	r3, [r7, #19]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800541c:	4b07      	ldr	r3, [pc, #28]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005422:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	4904      	ldr	r1, [pc, #16]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005432:	e009      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005434:	7cfb      	ldrb	r3, [r7, #19]
 8005436:	74bb      	strb	r3, [r7, #18]
 8005438:	e006      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800543a:	bf00      	nop
 800543c:	40021000 	.word	0x40021000
 8005440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005448:	7c7b      	ldrb	r3, [r7, #17]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d105      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800544e:	4b6e      	ldr	r3, [pc, #440]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	4a6d      	ldr	r2, [pc, #436]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005458:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005466:	4b68      	ldr	r3, [pc, #416]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f023 0203 	bic.w	r2, r3, #3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4964      	ldr	r1, [pc, #400]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005488:	4b5f      	ldr	r3, [pc, #380]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	f023 020c 	bic.w	r2, r3, #12
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	495c      	ldr	r1, [pc, #368]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054aa:	4b57      	ldr	r3, [pc, #348]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4953      	ldr	r1, [pc, #332]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054cc:	4b4e      	ldr	r3, [pc, #312]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	494b      	ldr	r1, [pc, #300]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ee:	4b46      	ldr	r3, [pc, #280]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	4942      	ldr	r1, [pc, #264]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005510:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	493a      	ldr	r1, [pc, #232]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005532:	4b35      	ldr	r3, [pc, #212]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	4931      	ldr	r1, [pc, #196]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005554:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	4929      	ldr	r1, [pc, #164]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005576:	4b24      	ldr	r3, [pc, #144]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	4920      	ldr	r1, [pc, #128]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d015      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	4918      	ldr	r1, [pc, #96]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b6:	d105      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b8:	4b13      	ldr	r3, [pc, #76]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4a12      	ldr	r2, [pc, #72]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d015      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055d0:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	490a      	ldr	r1, [pc, #40]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ee:	d105      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4a04      	ldr	r2, [pc, #16]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000

0800560c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e095      	b.n	800574a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d108      	bne.n	8005638 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800562e:	d009      	beq.n	8005644 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	61da      	str	r2, [r3, #28]
 8005636:	e005      	b.n	8005644 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fb fe3e 	bl	80012e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005684:	d902      	bls.n	800568c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	e002      	b.n	8005692 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800568c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005690:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800569a:	d007      	beq.n	80056ac <HAL_SPI_Init+0xa0>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056a4:	d002      	beq.n	80056ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	ea42 0103 	orr.w	r1, r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	0c1b      	lsrs	r3, r3, #16
 8005708:	f003 0204 	and.w	r2, r3, #4
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005728:	ea42 0103 	orr.w	r1, r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b088      	sub	sp, #32
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	603b      	str	r3, [r7, #0]
 800575e:	4613      	mov	r3, r2
 8005760:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_SPI_Transmit+0x22>
 8005770:	2302      	movs	r3, #2
 8005772:	e15f      	b.n	8005a34 <HAL_SPI_Transmit+0x2e2>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800577c:	f7fb fecc 	bl	8001518 <HAL_GetTick>
 8005780:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005782:	88fb      	ldrh	r3, [r7, #6]
 8005784:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b01      	cmp	r3, #1
 8005790:	d002      	beq.n	8005798 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005792:	2302      	movs	r3, #2
 8005794:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005796:	e148      	b.n	8005a2a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <HAL_SPI_Transmit+0x52>
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057a8:	e13f      	b.n	8005a2a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2203      	movs	r2, #3
 80057ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	88fa      	ldrh	r2, [r7, #6]
 80057c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	88fa      	ldrh	r2, [r7, #6]
 80057c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f4:	d10f      	bne.n	8005816 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005804:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005814:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d007      	beq.n	8005834 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005832:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800583c:	d94f      	bls.n	80058de <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <HAL_SPI_Transmit+0xfa>
 8005846:	8afb      	ldrh	r3, [r7, #22]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d142      	bne.n	80058d2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	881a      	ldrh	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	1c9a      	adds	r2, r3, #2
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005870:	e02f      	b.n	80058d2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d112      	bne.n	80058a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	881a      	ldrh	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	1c9a      	adds	r2, r3, #2
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058a4:	e015      	b.n	80058d2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058a6:	f7fb fe37 	bl	8001518 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d803      	bhi.n	80058be <HAL_SPI_Transmit+0x16c>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058bc:	d102      	bne.n	80058c4 <HAL_SPI_Transmit+0x172>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d106      	bne.n	80058d2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80058d0:	e0ab      	b.n	8005a2a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1ca      	bne.n	8005872 <HAL_SPI_Transmit+0x120>
 80058dc:	e080      	b.n	80059e0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_SPI_Transmit+0x19a>
 80058e6:	8afb      	ldrh	r3, [r7, #22]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d174      	bne.n	80059d6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d912      	bls.n	800591c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	881a      	ldrh	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	1c9a      	adds	r2, r3, #2
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b02      	subs	r3, #2
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	87da      	strh	r2, [r3, #62]	; 0x3e
 800591a:	e05c      	b.n	80059d6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	7812      	ldrb	r2, [r2, #0]
 8005928:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005942:	e048      	b.n	80059d6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b02      	cmp	r3, #2
 8005950:	d12b      	bne.n	80059aa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005956:	b29b      	uxth	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d912      	bls.n	8005982 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	881a      	ldrh	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	1c9a      	adds	r2, r3, #2
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b02      	subs	r3, #2
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005980:	e029      	b.n	80059d6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	330c      	adds	r3, #12
 800598c:	7812      	ldrb	r2, [r2, #0]
 800598e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059a8:	e015      	b.n	80059d6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059aa:	f7fb fdb5 	bl	8001518 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d803      	bhi.n	80059c2 <HAL_SPI_Transmit+0x270>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d102      	bne.n	80059c8 <HAL_SPI_Transmit+0x276>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80059d4:	e029      	b.n	8005a2a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1b1      	bne.n	8005944 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 fcf9 	bl	80063dc <SPI_EndRxTxTransaction>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059fe:	2300      	movs	r3, #0
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	77fb      	strb	r3, [r7, #31]
 8005a20:	e003      	b.n	8005a2a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a32:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3720      	adds	r7, #32
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d002      	beq.n	8005a62 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a60:	e11a      	b.n	8005c98 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a6a:	d112      	bne.n	8005a92 <HAL_SPI_Receive+0x56>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10e      	bne.n	8005a92 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2204      	movs	r2, #4
 8005a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a7c:	88fa      	ldrh	r2, [r7, #6]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	4613      	mov	r3, r2
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f90e 	bl	8005caa <HAL_SPI_TransmitReceive>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	e107      	b.n	8005ca2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_SPI_Receive+0x64>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e100      	b.n	8005ca2 <HAL_SPI_Receive+0x266>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aa8:	f7fb fd36 	bl	8001518 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_SPI_Receive+0x7e>
 8005ab4:	88fb      	ldrh	r3, [r7, #6]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005abe:	e0eb      	b.n	8005c98 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2204      	movs	r2, #4
 8005ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	88fa      	ldrh	r2, [r7, #6]
 8005ad8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b0a:	d908      	bls.n	8005b1e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b1a:	605a      	str	r2, [r3, #4]
 8005b1c:	e007      	b.n	8005b2e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b2c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b36:	d10f      	bne.n	8005b58 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b62:	2b40      	cmp	r3, #64	; 0x40
 8005b64:	d007      	beq.n	8005b76 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b7e:	d86f      	bhi.n	8005c60 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b80:	e034      	b.n	8005bec <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d117      	bne.n	8005bc0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f103 020c 	add.w	r2, r3, #12
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	7812      	ldrb	r2, [r2, #0]
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005bbe:	e015      	b.n	8005bec <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc0:	f7fb fcaa 	bl	8001518 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d803      	bhi.n	8005bd8 <HAL_SPI_Receive+0x19c>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d102      	bne.n	8005bde <HAL_SPI_Receive+0x1a2>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005bea:	e055      	b.n	8005c98 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1c4      	bne.n	8005b82 <HAL_SPI_Receive+0x146>
 8005bf8:	e038      	b.n	8005c6c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d115      	bne.n	8005c34 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	b292      	uxth	r2, r2
 8005c14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c32:	e015      	b.n	8005c60 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c34:	f7fb fc70 	bl	8001518 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d803      	bhi.n	8005c4c <HAL_SPI_Receive+0x210>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4a:	d102      	bne.n	8005c52 <HAL_SPI_Receive+0x216>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005c5e:	e01b      	b.n	8005c98 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1c6      	bne.n	8005bfa <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fb5b 	bl	800632c <SPI_EndRxTransaction>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
 8005c8e:	e003      	b.n	8005c98 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b08a      	sub	sp, #40	; 0x28
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_SPI_TransmitReceive+0x26>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e20a      	b.n	80060e6 <HAL_SPI_TransmitReceive+0x43c>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cd8:	f7fb fc1e 	bl	8001518 <HAL_GetTick>
 8005cdc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ce4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005cec:	887b      	ldrh	r3, [r7, #2]
 8005cee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005cf0:	887b      	ldrh	r3, [r7, #2]
 8005cf2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005cf4:	7efb      	ldrb	r3, [r7, #27]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d00e      	beq.n	8005d18 <HAL_SPI_TransmitReceive+0x6e>
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d00:	d106      	bne.n	8005d10 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <HAL_SPI_TransmitReceive+0x66>
 8005d0a:	7efb      	ldrb	r3, [r7, #27]
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d003      	beq.n	8005d18 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005d10:	2302      	movs	r3, #2
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d16:	e1e0      	b.n	80060da <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d005      	beq.n	8005d2a <HAL_SPI_TransmitReceive+0x80>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <HAL_SPI_TransmitReceive+0x80>
 8005d24:	887b      	ldrh	r3, [r7, #2]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d103      	bne.n	8005d32 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d30:	e1d3      	b.n	80060da <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d003      	beq.n	8005d46 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2205      	movs	r2, #5
 8005d42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	887a      	ldrh	r2, [r7, #2]
 8005d56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	887a      	ldrh	r2, [r7, #2]
 8005d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	887a      	ldrh	r2, [r7, #2]
 8005d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	887a      	ldrh	r2, [r7, #2]
 8005d72:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d88:	d802      	bhi.n	8005d90 <HAL_SPI_TransmitReceive+0xe6>
 8005d8a:	8a3b      	ldrh	r3, [r7, #16]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d908      	bls.n	8005da2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d9e:	605a      	str	r2, [r3, #4]
 8005da0:	e007      	b.n	8005db2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005db0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	d007      	beq.n	8005dd0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dd8:	f240 8081 	bls.w	8005ede <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <HAL_SPI_TransmitReceive+0x140>
 8005de4:	8a7b      	ldrh	r3, [r7, #18]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d16d      	bne.n	8005ec6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	881a      	ldrh	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	1c9a      	adds	r2, r3, #2
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e0e:	e05a      	b.n	8005ec6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d11b      	bne.n	8005e56 <HAL_SPI_TransmitReceive+0x1ac>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d016      	beq.n	8005e56 <HAL_SPI_TransmitReceive+0x1ac>
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d113      	bne.n	8005e56 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	881a      	ldrh	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	1c9a      	adds	r2, r3, #2
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d11c      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x1f4>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d016      	beq.n	8005e9e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	b292      	uxth	r2, r2
 8005e7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	1c9a      	adds	r2, r3, #2
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e9e:	f7fb fb3b 	bl	8001518 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d80b      	bhi.n	8005ec6 <HAL_SPI_TransmitReceive+0x21c>
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb4:	d007      	beq.n	8005ec6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005ec4:	e109      	b.n	80060da <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d19f      	bne.n	8005e10 <HAL_SPI_TransmitReceive+0x166>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d199      	bne.n	8005e10 <HAL_SPI_TransmitReceive+0x166>
 8005edc:	e0e3      	b.n	80060a6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_SPI_TransmitReceive+0x244>
 8005ee6:	8a7b      	ldrh	r3, [r7, #18]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	f040 80cf 	bne.w	800608c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d912      	bls.n	8005f1e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	881a      	ldrh	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	1c9a      	adds	r2, r3, #2
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b02      	subs	r3, #2
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f1c:	e0b6      	b.n	800608c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	7812      	ldrb	r2, [r2, #0]
 8005f2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f44:	e0a2      	b.n	800608c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d134      	bne.n	8005fbe <HAL_SPI_TransmitReceive+0x314>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d02f      	beq.n	8005fbe <HAL_SPI_TransmitReceive+0x314>
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d12c      	bne.n	8005fbe <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d912      	bls.n	8005f94 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	881a      	ldrh	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	1c9a      	adds	r2, r3, #2
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b02      	subs	r3, #2
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f92:	e012      	b.n	8005fba <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	7812      	ldrb	r2, [r2, #0]
 8005fa0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d148      	bne.n	800605e <HAL_SPI_TransmitReceive+0x3b4>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d042      	beq.n	800605e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d923      	bls.n	800602c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	b292      	uxth	r2, r2
 8005ff0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	1c9a      	adds	r2, r3, #2
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b02      	subs	r3, #2
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b01      	cmp	r3, #1
 8006018:	d81f      	bhi.n	800605a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	e016      	b.n	800605a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f103 020c 	add.w	r2, r3, #12
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	7812      	ldrb	r2, [r2, #0]
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800605a:	2301      	movs	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800605e:	f7fb fa5b 	bl	8001518 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606a:	429a      	cmp	r2, r3
 800606c:	d803      	bhi.n	8006076 <HAL_SPI_TransmitReceive+0x3cc>
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d102      	bne.n	800607c <HAL_SPI_TransmitReceive+0x3d2>
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	2b00      	cmp	r3, #0
 800607a:	d107      	bne.n	800608c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800608a:	e026      	b.n	80060da <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	f47f af57 	bne.w	8005f46 <HAL_SPI_TransmitReceive+0x29c>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f47f af50 	bne.w	8005f46 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f996 	bl	80063dc <SPI_EndRxTxTransaction>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d0:	e003      	b.n	80060da <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3728      	adds	r7, #40	; 0x28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	4613      	mov	r3, r2
 80060fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006100:	f7fb fa0a 	bl	8001518 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	1a9b      	subs	r3, r3, r2
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	4413      	add	r3, r2
 800610e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006110:	f7fb fa02 	bl	8001518 <HAL_GetTick>
 8006114:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006116:	4b39      	ldr	r3, [pc, #228]	; (80061fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	015b      	lsls	r3, r3, #5
 800611c:	0d1b      	lsrs	r3, r3, #20
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	fb02 f303 	mul.w	r3, r2, r3
 8006124:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006126:	e054      	b.n	80061d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612e:	d050      	beq.n	80061d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006130:	f7fb f9f2 	bl	8001518 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	429a      	cmp	r2, r3
 800613e:	d902      	bls.n	8006146 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d13d      	bne.n	80061c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006154:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800615e:	d111      	bne.n	8006184 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006168:	d004      	beq.n	8006174 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006172:	d107      	bne.n	8006184 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006182:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618c:	d10f      	bne.n	80061ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e017      	b.n	80061f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4013      	ands	r3, r2
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	429a      	cmp	r2, r3
 80061e0:	bf0c      	ite	eq
 80061e2:	2301      	moveq	r3, #1
 80061e4:	2300      	movne	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d19b      	bne.n	8006128 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000004 	.word	0x20000004

08006200 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08a      	sub	sp, #40	; 0x28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006212:	f7fb f981 	bl	8001518 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	4413      	add	r3, r2
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006222:	f7fb f979 	bl	8001518 <HAL_GetTick>
 8006226:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	330c      	adds	r3, #12
 800622e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006230:	4b3d      	ldr	r3, [pc, #244]	; (8006328 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	00da      	lsls	r2, r3, #3
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	0d1b      	lsrs	r3, r3, #20
 8006240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006242:	fb02 f303 	mul.w	r3, r2, r3
 8006246:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006248:	e060      	b.n	800630c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006250:	d107      	bne.n	8006262 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006260:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d050      	beq.n	800630c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800626a:	f7fb f955 	bl	8001518 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006276:	429a      	cmp	r2, r3
 8006278:	d902      	bls.n	8006280 <SPI_WaitFifoStateUntilTimeout+0x80>
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d13d      	bne.n	80062fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800628e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006298:	d111      	bne.n	80062be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a2:	d004      	beq.n	80062ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ac:	d107      	bne.n	80062be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c6:	d10f      	bne.n	80062e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e010      	b.n	800631e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	3b01      	subs	r3, #1
 800630a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	4013      	ands	r3, r2
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d196      	bne.n	800624a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3728      	adds	r7, #40	; 0x28
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000004 	.word	0x20000004

0800632c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006340:	d111      	bne.n	8006366 <SPI_EndRxTransaction+0x3a>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634a:	d004      	beq.n	8006356 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006354:	d107      	bne.n	8006366 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006364:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2200      	movs	r2, #0
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff febd 	bl	80060f0 <SPI_WaitFlagStateUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006380:	f043 0220 	orr.w	r2, r3, #32
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e023      	b.n	80063d4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006394:	d11d      	bne.n	80063d2 <SPI_EndRxTransaction+0xa6>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639e:	d004      	beq.n	80063aa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a8:	d113      	bne.n	80063d2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff ff22 	bl	8006200 <SPI_WaitFifoStateUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c6:	f043 0220 	orr.w	r2, r3, #32
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e000      	b.n	80063d4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f7ff ff03 	bl	8006200 <SPI_WaitFifoStateUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d007      	beq.n	8006410 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006404:	f043 0220 	orr.w	r2, r3, #32
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e027      	b.n	8006460 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2200      	movs	r2, #0
 8006418:	2180      	movs	r1, #128	; 0x80
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff fe68 	bl	80060f0 <SPI_WaitFlagStateUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642a:	f043 0220 	orr.w	r2, r3, #32
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e014      	b.n	8006460 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2200      	movs	r2, #0
 800643e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff fedc 	bl	8006200 <SPI_WaitFifoStateUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d007      	beq.n	800645e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006452:	f043 0220 	orr.w	r2, r3, #32
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e000      	b.n	8006460 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800646c:	b08a      	sub	sp, #40	; 0x28
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	431a      	orrs	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	431a      	orrs	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	4313      	orrs	r3, r2
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b9e      	ldr	r3, [pc, #632]	; (8006710 <UART_SetConfig+0x2a8>)
 8006498:	4013      	ands	r3, r2
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064a0:	430b      	orrs	r3, r1
 80064a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a93      	ldr	r2, [pc, #588]	; (8006714 <UART_SetConfig+0x2ac>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d004      	beq.n	80064d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d0:	4313      	orrs	r3, r2
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e4:	430a      	orrs	r2, r1
 80064e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a8a      	ldr	r2, [pc, #552]	; (8006718 <UART_SetConfig+0x2b0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d126      	bne.n	8006540 <UART_SetConfig+0xd8>
 80064f2:	4b8a      	ldr	r3, [pc, #552]	; (800671c <UART_SetConfig+0x2b4>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d81b      	bhi.n	8006538 <UART_SetConfig+0xd0>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <UART_SetConfig+0xa0>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	08006519 	.word	0x08006519
 800650c:	08006529 	.word	0x08006529
 8006510:	08006521 	.word	0x08006521
 8006514:	08006531 	.word	0x08006531
 8006518:	2301      	movs	r3, #1
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651e:	e0ab      	b.n	8006678 <UART_SetConfig+0x210>
 8006520:	2302      	movs	r3, #2
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006526:	e0a7      	b.n	8006678 <UART_SetConfig+0x210>
 8006528:	2304      	movs	r3, #4
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652e:	e0a3      	b.n	8006678 <UART_SetConfig+0x210>
 8006530:	2308      	movs	r3, #8
 8006532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006536:	e09f      	b.n	8006678 <UART_SetConfig+0x210>
 8006538:	2310      	movs	r3, #16
 800653a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800653e:	e09b      	b.n	8006678 <UART_SetConfig+0x210>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a76      	ldr	r2, [pc, #472]	; (8006720 <UART_SetConfig+0x2b8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d138      	bne.n	80065bc <UART_SetConfig+0x154>
 800654a:	4b74      	ldr	r3, [pc, #464]	; (800671c <UART_SetConfig+0x2b4>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006550:	f003 030c 	and.w	r3, r3, #12
 8006554:	2b0c      	cmp	r3, #12
 8006556:	d82d      	bhi.n	80065b4 <UART_SetConfig+0x14c>
 8006558:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <UART_SetConfig+0xf8>)
 800655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655e:	bf00      	nop
 8006560:	08006595 	.word	0x08006595
 8006564:	080065b5 	.word	0x080065b5
 8006568:	080065b5 	.word	0x080065b5
 800656c:	080065b5 	.word	0x080065b5
 8006570:	080065a5 	.word	0x080065a5
 8006574:	080065b5 	.word	0x080065b5
 8006578:	080065b5 	.word	0x080065b5
 800657c:	080065b5 	.word	0x080065b5
 8006580:	0800659d 	.word	0x0800659d
 8006584:	080065b5 	.word	0x080065b5
 8006588:	080065b5 	.word	0x080065b5
 800658c:	080065b5 	.word	0x080065b5
 8006590:	080065ad 	.word	0x080065ad
 8006594:	2300      	movs	r3, #0
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800659a:	e06d      	b.n	8006678 <UART_SetConfig+0x210>
 800659c:	2302      	movs	r3, #2
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a2:	e069      	b.n	8006678 <UART_SetConfig+0x210>
 80065a4:	2304      	movs	r3, #4
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065aa:	e065      	b.n	8006678 <UART_SetConfig+0x210>
 80065ac:	2308      	movs	r3, #8
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b2:	e061      	b.n	8006678 <UART_SetConfig+0x210>
 80065b4:	2310      	movs	r3, #16
 80065b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ba:	e05d      	b.n	8006678 <UART_SetConfig+0x210>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a58      	ldr	r2, [pc, #352]	; (8006724 <UART_SetConfig+0x2bc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d125      	bne.n	8006612 <UART_SetConfig+0x1aa>
 80065c6:	4b55      	ldr	r3, [pc, #340]	; (800671c <UART_SetConfig+0x2b4>)
 80065c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065d0:	2b30      	cmp	r3, #48	; 0x30
 80065d2:	d016      	beq.n	8006602 <UART_SetConfig+0x19a>
 80065d4:	2b30      	cmp	r3, #48	; 0x30
 80065d6:	d818      	bhi.n	800660a <UART_SetConfig+0x1a2>
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d00a      	beq.n	80065f2 <UART_SetConfig+0x18a>
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d814      	bhi.n	800660a <UART_SetConfig+0x1a2>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <UART_SetConfig+0x182>
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d008      	beq.n	80065fa <UART_SetConfig+0x192>
 80065e8:	e00f      	b.n	800660a <UART_SetConfig+0x1a2>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f0:	e042      	b.n	8006678 <UART_SetConfig+0x210>
 80065f2:	2302      	movs	r3, #2
 80065f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f8:	e03e      	b.n	8006678 <UART_SetConfig+0x210>
 80065fa:	2304      	movs	r3, #4
 80065fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006600:	e03a      	b.n	8006678 <UART_SetConfig+0x210>
 8006602:	2308      	movs	r3, #8
 8006604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006608:	e036      	b.n	8006678 <UART_SetConfig+0x210>
 800660a:	2310      	movs	r3, #16
 800660c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006610:	e032      	b.n	8006678 <UART_SetConfig+0x210>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a3f      	ldr	r2, [pc, #252]	; (8006714 <UART_SetConfig+0x2ac>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d12a      	bne.n	8006672 <UART_SetConfig+0x20a>
 800661c:	4b3f      	ldr	r3, [pc, #252]	; (800671c <UART_SetConfig+0x2b4>)
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006626:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800662a:	d01a      	beq.n	8006662 <UART_SetConfig+0x1fa>
 800662c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006630:	d81b      	bhi.n	800666a <UART_SetConfig+0x202>
 8006632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006636:	d00c      	beq.n	8006652 <UART_SetConfig+0x1ea>
 8006638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800663c:	d815      	bhi.n	800666a <UART_SetConfig+0x202>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <UART_SetConfig+0x1e2>
 8006642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006646:	d008      	beq.n	800665a <UART_SetConfig+0x1f2>
 8006648:	e00f      	b.n	800666a <UART_SetConfig+0x202>
 800664a:	2300      	movs	r3, #0
 800664c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006650:	e012      	b.n	8006678 <UART_SetConfig+0x210>
 8006652:	2302      	movs	r3, #2
 8006654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006658:	e00e      	b.n	8006678 <UART_SetConfig+0x210>
 800665a:	2304      	movs	r3, #4
 800665c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006660:	e00a      	b.n	8006678 <UART_SetConfig+0x210>
 8006662:	2308      	movs	r3, #8
 8006664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006668:	e006      	b.n	8006678 <UART_SetConfig+0x210>
 800666a:	2310      	movs	r3, #16
 800666c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006670:	e002      	b.n	8006678 <UART_SetConfig+0x210>
 8006672:	2310      	movs	r3, #16
 8006674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a25      	ldr	r2, [pc, #148]	; (8006714 <UART_SetConfig+0x2ac>)
 800667e:	4293      	cmp	r3, r2
 8006680:	f040 808a 	bne.w	8006798 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006688:	2b08      	cmp	r3, #8
 800668a:	d824      	bhi.n	80066d6 <UART_SetConfig+0x26e>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <UART_SetConfig+0x22c>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066d7 	.word	0x080066d7
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066d7 	.word	0x080066d7
 80066a4:	080066c7 	.word	0x080066c7
 80066a8:	080066d7 	.word	0x080066d7
 80066ac:	080066d7 	.word	0x080066d7
 80066b0:	080066d7 	.word	0x080066d7
 80066b4:	080066cf 	.word	0x080066cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b8:	f7fe fd96 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 80066bc:	61f8      	str	r0, [r7, #28]
        break;
 80066be:	e010      	b.n	80066e2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c0:	4b19      	ldr	r3, [pc, #100]	; (8006728 <UART_SetConfig+0x2c0>)
 80066c2:	61fb      	str	r3, [r7, #28]
        break;
 80066c4:	e00d      	b.n	80066e2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066c6:	f7fe fcf7 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 80066ca:	61f8      	str	r0, [r7, #28]
        break;
 80066cc:	e009      	b.n	80066e2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d2:	61fb      	str	r3, [r7, #28]
        break;
 80066d4:	e005      	b.n	80066e2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8109 	beq.w	80068fc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	4613      	mov	r3, r2
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	4413      	add	r3, r2
 80066f4:	69fa      	ldr	r2, [r7, #28]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d305      	bcc.n	8006706 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	429a      	cmp	r2, r3
 8006704:	d912      	bls.n	800672c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800670c:	e0f6      	b.n	80068fc <UART_SetConfig+0x494>
 800670e:	bf00      	nop
 8006710:	efff69f3 	.word	0xefff69f3
 8006714:	40008000 	.word	0x40008000
 8006718:	40013800 	.word	0x40013800
 800671c:	40021000 	.word	0x40021000
 8006720:	40004400 	.word	0x40004400
 8006724:	40004800 	.word	0x40004800
 8006728:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	2200      	movs	r2, #0
 8006730:	461c      	mov	r4, r3
 8006732:	4615      	mov	r5, r2
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	f04f 0300 	mov.w	r3, #0
 800673c:	022b      	lsls	r3, r5, #8
 800673e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006742:	0222      	lsls	r2, r4, #8
 8006744:	68f9      	ldr	r1, [r7, #12]
 8006746:	6849      	ldr	r1, [r1, #4]
 8006748:	0849      	lsrs	r1, r1, #1
 800674a:	2000      	movs	r0, #0
 800674c:	4688      	mov	r8, r1
 800674e:	4681      	mov	r9, r0
 8006750:	eb12 0a08 	adds.w	sl, r2, r8
 8006754:	eb43 0b09 	adc.w	fp, r3, r9
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006766:	4650      	mov	r0, sl
 8006768:	4659      	mov	r1, fp
 800676a:	f7f9 fd2f 	bl	80001cc <__aeabi_uldivmod>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4613      	mov	r3, r2
 8006774:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800677c:	d308      	bcc.n	8006790 <UART_SetConfig+0x328>
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006784:	d204      	bcs.n	8006790 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	60da      	str	r2, [r3, #12]
 800678e:	e0b5      	b.n	80068fc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006796:	e0b1      	b.n	80068fc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a0:	d15d      	bne.n	800685e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80067a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	d827      	bhi.n	80067fa <UART_SetConfig+0x392>
 80067aa:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x348>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080067dd 	.word	0x080067dd
 80067b8:	080067e5 	.word	0x080067e5
 80067bc:	080067fb 	.word	0x080067fb
 80067c0:	080067eb 	.word	0x080067eb
 80067c4:	080067fb 	.word	0x080067fb
 80067c8:	080067fb 	.word	0x080067fb
 80067cc:	080067fb 	.word	0x080067fb
 80067d0:	080067f3 	.word	0x080067f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d4:	f7fe fd08 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 80067d8:	61f8      	str	r0, [r7, #28]
        break;
 80067da:	e014      	b.n	8006806 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067dc:	f7fe fd1a 	bl	8005214 <HAL_RCC_GetPCLK2Freq>
 80067e0:	61f8      	str	r0, [r7, #28]
        break;
 80067e2:	e010      	b.n	8006806 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067e4:	4b4c      	ldr	r3, [pc, #304]	; (8006918 <UART_SetConfig+0x4b0>)
 80067e6:	61fb      	str	r3, [r7, #28]
        break;
 80067e8:	e00d      	b.n	8006806 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ea:	f7fe fc65 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 80067ee:	61f8      	str	r0, [r7, #28]
        break;
 80067f0:	e009      	b.n	8006806 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067f6:	61fb      	str	r3, [r7, #28]
        break;
 80067f8:	e005      	b.n	8006806 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006804:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d077      	beq.n	80068fc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	005a      	lsls	r2, r3, #1
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	085b      	lsrs	r3, r3, #1
 8006816:	441a      	add	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b0f      	cmp	r3, #15
 8006826:	d916      	bls.n	8006856 <UART_SetConfig+0x3ee>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682e:	d212      	bcs.n	8006856 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f023 030f 	bic.w	r3, r3, #15
 8006838:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	085b      	lsrs	r3, r3, #1
 800683e:	b29b      	uxth	r3, r3
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	b29a      	uxth	r2, r3
 8006846:	8afb      	ldrh	r3, [r7, #22]
 8006848:	4313      	orrs	r3, r2
 800684a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	8afa      	ldrh	r2, [r7, #22]
 8006852:	60da      	str	r2, [r3, #12]
 8006854:	e052      	b.n	80068fc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800685c:	e04e      	b.n	80068fc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800685e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006862:	2b08      	cmp	r3, #8
 8006864:	d827      	bhi.n	80068b6 <UART_SetConfig+0x44e>
 8006866:	a201      	add	r2, pc, #4	; (adr r2, 800686c <UART_SetConfig+0x404>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	08006891 	.word	0x08006891
 8006870:	08006899 	.word	0x08006899
 8006874:	080068a1 	.word	0x080068a1
 8006878:	080068b7 	.word	0x080068b7
 800687c:	080068a7 	.word	0x080068a7
 8006880:	080068b7 	.word	0x080068b7
 8006884:	080068b7 	.word	0x080068b7
 8006888:	080068b7 	.word	0x080068b7
 800688c:	080068af 	.word	0x080068af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006890:	f7fe fcaa 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8006894:	61f8      	str	r0, [r7, #28]
        break;
 8006896:	e014      	b.n	80068c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006898:	f7fe fcbc 	bl	8005214 <HAL_RCC_GetPCLK2Freq>
 800689c:	61f8      	str	r0, [r7, #28]
        break;
 800689e:	e010      	b.n	80068c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a0:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <UART_SetConfig+0x4b0>)
 80068a2:	61fb      	str	r3, [r7, #28]
        break;
 80068a4:	e00d      	b.n	80068c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068a6:	f7fe fc07 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 80068aa:	61f8      	str	r0, [r7, #28]
        break;
 80068ac:	e009      	b.n	80068c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b2:	61fb      	str	r3, [r7, #28]
        break;
 80068b4:	e005      	b.n	80068c2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068c0:	bf00      	nop
    }

    if (pclk != 0U)
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d019      	beq.n	80068fc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	085a      	lsrs	r2, r3, #1
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	441a      	add	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	2b0f      	cmp	r3, #15
 80068e0:	d909      	bls.n	80068f6 <UART_SetConfig+0x48e>
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e8:	d205      	bcs.n	80068f6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60da      	str	r2, [r3, #12]
 80068f4:	e002      	b.n	80068fc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006908:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800690c:	4618      	mov	r0, r3
 800690e:	3728      	adds	r7, #40	; 0x28
 8006910:	46bd      	mov	sp, r7
 8006912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006916:	bf00      	nop
 8006918:	00f42400 	.word	0x00f42400

0800691c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00a      	beq.n	8006946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	f003 0304 	and.w	r3, r3, #4
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00a      	beq.n	80069ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01a      	beq.n	8006a32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a1a:	d10a      	bne.n	8006a32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
  }
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b098      	sub	sp, #96	; 0x60
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a70:	f7fa fd52 	bl	8001518 <HAL_GetTick>
 8006a74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d12e      	bne.n	8006ae2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f88c 	bl	8006bb0 <UART_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d021      	beq.n	8006ae2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006abc:	647b      	str	r3, [r7, #68]	; 0x44
 8006abe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e6      	bne.n	8006a9e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e062      	b.n	8006ba8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d149      	bne.n	8006b84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af8:	2200      	movs	r2, #0
 8006afa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f856 	bl	8006bb0 <UART_WaitOnFlagUntilTimeout>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d03c      	beq.n	8006b84 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	623b      	str	r3, [r7, #32]
   return(result);
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b28:	633b      	str	r3, [r7, #48]	; 0x30
 8006b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e6      	bne.n	8006b0a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3308      	adds	r3, #8
 8006b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0301 	bic.w	r3, r3, #1
 8006b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b5c:	61fa      	str	r2, [r7, #28]
 8006b5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	69b9      	ldr	r1, [r7, #24]
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	617b      	str	r3, [r7, #20]
   return(result);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e5      	bne.n	8006b3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e011      	b.n	8006ba8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3758      	adds	r7, #88	; 0x58
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc0:	e049      	b.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc8:	d045      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bca:	f7fa fca5 	bl	8001518 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d302      	bcc.n	8006be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e048      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d031      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d110      	bne.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2208      	movs	r2, #8
 8006c06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 f838 	bl	8006c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2208      	movs	r2, #8
 8006c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e029      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c30:	d111      	bne.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f81e 	bl	8006c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e00f      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	bf0c      	ite	eq
 8006c66:	2301      	moveq	r3, #1
 8006c68:	2300      	movne	r3, #0
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	79fb      	ldrb	r3, [r7, #7]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d0a6      	beq.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b095      	sub	sp, #84	; 0x54
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e6      	bne.n	8006c86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f023 0301 	bic.w	r3, r3, #1
 8006cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e5      	bne.n	8006cb8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d118      	bne.n	8006d26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f023 0310 	bic.w	r3, r3, #16
 8006d08:	647b      	str	r3, [r7, #68]	; 0x44
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d12:	61bb      	str	r3, [r7, #24]
 8006d14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6979      	ldr	r1, [r7, #20]
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e6      	bne.n	8006cf4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d3a:	bf00      	nop
 8006d3c:	3754      	adds	r7, #84	; 0x54
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b086      	sub	sp, #24
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
 8006d52:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e056      	b.n	8006e0c <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d106      	bne.n	8006d74 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7fa fa40 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2224      	movs	r2, #36	; 0x24
 8006d78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0201 	bic.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7ff fdc2 	bl	800691c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f7ff fb65 	bl	8006468 <UART_SetConfig>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e031      	b.n	8006e0c <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006db6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	055b      	lsls	r3, r3, #21
 8006dd0:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8006de6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	6812      	ldr	r2, [r2, #0]
 8006dee:	6979      	ldr	r1, [r7, #20]
 8006df0:	430b      	orrs	r3, r1
 8006df2:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7ff fe2b 	bl	8006a60 <UART_CheckIdleState>
 8006e0a:	4603      	mov	r3, r0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006e14:	b084      	sub	sp, #16
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	f107 0014 	add.w	r0, r7, #20
 8006e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	b004      	add	sp, #16
 8006e34:	4770      	bx	lr

08006e36 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b085      	sub	sp, #20
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e46:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006e4a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e6c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006e70:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	43db      	mvns	r3, r3
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	4013      	ands	r3, r2
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	f107 0014 	add.w	r0, r7, #20
 8006ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	b004      	add	sp, #16
 8006ef4:	4770      	bx	lr
	...

08006ef8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b09d      	sub	sp, #116	; 0x74
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	78db      	ldrb	r3, [r3, #3]
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d81f      	bhi.n	8006f6a <USB_ActivateEndpoint+0x72>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <USB_ActivateEndpoint+0x38>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f41 	.word	0x08006f41
 8006f34:	08006f5d 	.word	0x08006f5d
 8006f38:	08006f73 	.word	0x08006f73
 8006f3c:	08006f4f 	.word	0x08006f4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006f40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006f44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f48:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006f4c:	e012      	b.n	8006f74 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006f4e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006f52:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006f56:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006f5a:	e00b      	b.n	8006f74 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006f5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006f60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006f68:	e004      	b.n	8006f74 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006f70:	e000      	b.n	8006f74 <USB_ActivateEndpoint+0x7c>
      break;
 8006f72:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	441a      	add	r2, r3
 8006f7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	b21b      	sxth	r3, r3
 8006fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fae:	b21a      	sxth	r2, r3
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	b21b      	sxth	r3, r3
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	b21b      	sxth	r3, r3
 8006fba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	441a      	add	r2, r3
 8006fc8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	7b1b      	ldrb	r3, [r3, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f040 8178 	bne.w	80072da <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 8084 	beq.w	80070fc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	461a      	mov	r2, r3
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	4413      	add	r3, r2
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	00da      	lsls	r2, r3, #3
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	88db      	ldrh	r3, [r3, #6]
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	b29b      	uxth	r3, r3
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	827b      	strh	r3, [r7, #18]
 8007036:	8a7b      	ldrh	r3, [r7, #18]
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01b      	beq.n	8007078 <USB_ActivateEndpoint+0x180>
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b29b      	uxth	r3, r3
 800704e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007056:	823b      	strh	r3, [r7, #16]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	441a      	add	r2, r3
 8007062:	8a3b      	ldrh	r3, [r7, #16]
 8007064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007070:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007074:	b29b      	uxth	r3, r3
 8007076:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	78db      	ldrb	r3, [r3, #3]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d020      	beq.n	80070c2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007096:	81bb      	strh	r3, [r7, #12]
 8007098:	89bb      	ldrh	r3, [r7, #12]
 800709a:	f083 0320 	eor.w	r3, r3, #32
 800709e:	81bb      	strh	r3, [r7, #12]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	441a      	add	r2, r3
 80070aa:	89bb      	ldrh	r3, [r7, #12]
 80070ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070bc:	b29b      	uxth	r3, r3
 80070be:	8013      	strh	r3, [r2, #0]
 80070c0:	e2d5      	b.n	800766e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d8:	81fb      	strh	r3, [r7, #14]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	441a      	add	r2, r3
 80070e4:	89fb      	ldrh	r3, [r7, #14]
 80070e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	8013      	strh	r3, [r2, #0]
 80070fa:	e2b8      	b.n	800766e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007106:	b29b      	uxth	r3, r3
 8007108:	461a      	mov	r2, r3
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	4413      	add	r3, r2
 800710e:	633b      	str	r3, [r7, #48]	; 0x30
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	00da      	lsls	r2, r3, #3
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	4413      	add	r3, r2
 800711a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800711e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	88db      	ldrh	r3, [r3, #6]
 8007124:	085b      	lsrs	r3, r3, #1
 8007126:	b29b      	uxth	r3, r3
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800713a:	b29b      	uxth	r3, r3
 800713c:	461a      	mov	r2, r3
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	4413      	add	r3, r2
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	00da      	lsls	r2, r3, #3
 800714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714c:	4413      	add	r3, r2
 800714e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b29b      	uxth	r3, r3
 800715a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800715e:	b29a      	uxth	r2, r3
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	2b3e      	cmp	r3, #62	; 0x3e
 800716a:	d91d      	bls.n	80071a8 <USB_ActivateEndpoint+0x2b0>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	66bb      	str	r3, [r7, #104]	; 0x68
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	2b00      	cmp	r3, #0
 800717e:	d102      	bne.n	8007186 <USB_ActivateEndpoint+0x28e>
 8007180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007182:	3b01      	subs	r3, #1
 8007184:	66bb      	str	r3, [r7, #104]	; 0x68
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29a      	uxth	r2, r3
 800718c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800718e:	b29b      	uxth	r3, r3
 8007190:	029b      	lsls	r3, r3, #10
 8007192:	b29b      	uxth	r3, r3
 8007194:	4313      	orrs	r3, r2
 8007196:	b29b      	uxth	r3, r3
 8007198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	801a      	strh	r2, [r3, #0]
 80071a6:	e026      	b.n	80071f6 <USB_ActivateEndpoint+0x2fe>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10a      	bne.n	80071c6 <USB_ActivateEndpoint+0x2ce>
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071be:	b29a      	uxth	r2, r3
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	801a      	strh	r2, [r3, #0]
 80071c4:	e017      	b.n	80071f6 <USB_ActivateEndpoint+0x2fe>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <USB_ActivateEndpoint+0x2e8>
 80071da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071dc:	3301      	adds	r3, #1
 80071de:	66bb      	str	r3, [r7, #104]	; 0x68
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	029b      	lsls	r3, r3, #10
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	4313      	orrs	r3, r2
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	847b      	strh	r3, [r7, #34]	; 0x22
 8007204:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01b      	beq.n	8007246 <USB_ActivateEndpoint+0x34e>
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007224:	843b      	strh	r3, [r7, #32]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	8c3b      	ldrh	r3, [r7, #32]
 8007232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800723a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800723e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007242:	b29b      	uxth	r3, r3
 8007244:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d124      	bne.n	8007298 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007264:	83bb      	strh	r3, [r7, #28]
 8007266:	8bbb      	ldrh	r3, [r7, #28]
 8007268:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800726c:	83bb      	strh	r3, [r7, #28]
 800726e:	8bbb      	ldrh	r3, [r7, #28]
 8007270:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007274:	83bb      	strh	r3, [r7, #28]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	441a      	add	r2, r3
 8007280:	8bbb      	ldrh	r3, [r7, #28]
 8007282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800728a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800728e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007292:	b29b      	uxth	r3, r3
 8007294:	8013      	strh	r3, [r2, #0]
 8007296:	e1ea      	b.n	800766e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ae:	83fb      	strh	r3, [r7, #30]
 80072b0:	8bfb      	ldrh	r3, [r7, #30]
 80072b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072b6:	83fb      	strh	r3, [r7, #30]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	441a      	add	r2, r3
 80072c2:	8bfb      	ldrh	r3, [r7, #30]
 80072c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	8013      	strh	r3, [r2, #0]
 80072d8:	e1c9      	b.n	800766e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	78db      	ldrb	r3, [r3, #3]
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d11e      	bne.n	8007320 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	441a      	add	r2, r3
 8007306:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800730a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800730e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007312:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731a:	b29b      	uxth	r3, r3
 800731c:	8013      	strh	r3, [r2, #0]
 800731e:	e01d      	b.n	800735c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007336:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	441a      	add	r2, r3
 8007344:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800734c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007358:	b29b      	uxth	r3, r3
 800735a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007366:	b29b      	uxth	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800736c:	4413      	add	r3, r2
 800736e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	00da      	lsls	r2, r3, #3
 8007376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007378:	4413      	add	r3, r2
 800737a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800737e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	891b      	ldrh	r3, [r3, #8]
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	b29b      	uxth	r3, r3
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	b29a      	uxth	r2, r3
 800738c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800738e:	801a      	strh	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	657b      	str	r3, [r7, #84]	; 0x54
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739a:	b29b      	uxth	r3, r3
 800739c:	461a      	mov	r2, r3
 800739e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073a0:	4413      	add	r3, r2
 80073a2:	657b      	str	r3, [r7, #84]	; 0x54
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	00da      	lsls	r2, r3, #3
 80073aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ac:	4413      	add	r3, r2
 80073ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073b2:	653b      	str	r3, [r7, #80]	; 0x50
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	895b      	ldrh	r3, [r3, #10]
 80073b8:	085b      	lsrs	r3, r3, #1
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	785b      	ldrb	r3, [r3, #1]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f040 8093 	bne.w	80074f4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80073de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80073e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01b      	beq.n	8007422 <USB_ActivateEndpoint+0x52a>
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007400:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	441a      	add	r2, r3
 800740c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800740e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007416:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800741a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800741e:	b29b      	uxth	r3, r3
 8007420:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007430:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01b      	beq.n	8007472 <USB_ActivateEndpoint+0x57a>
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b29b      	uxth	r3, r3
 8007448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800744c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007450:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	441a      	add	r2, r3
 800745c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800745e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800746a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800746e:	b29b      	uxth	r3, r3
 8007470:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007488:	873b      	strh	r3, [r7, #56]	; 0x38
 800748a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800748c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007490:	873b      	strh	r3, [r7, #56]	; 0x38
 8007492:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007494:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007498:	873b      	strh	r3, [r7, #56]	; 0x38
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	441a      	add	r2, r3
 80074a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80074a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	441a      	add	r2, r3
 80074dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80074de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	8013      	strh	r3, [r2, #0]
 80074f2:	e0bc      	b.n	800766e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007504:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01d      	beq.n	800754c <USB_ActivateEndpoint+0x654>
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007526:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	441a      	add	r2, r3
 8007534:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800753c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007548:	b29b      	uxth	r3, r3
 800754a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800755c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01d      	beq.n	80075a4 <USB_ActivateEndpoint+0x6ac>
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800757a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	441a      	add	r2, r3
 800758c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800759c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	78db      	ldrb	r3, [r3, #3]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d024      	beq.n	80075f6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80075c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80075ca:	f083 0320 	eor.w	r3, r3, #32
 80075ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	441a      	add	r2, r3
 80075dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80075e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	8013      	strh	r3, [r2, #0]
 80075f4:	e01d      	b.n	8007632 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	441a      	add	r2, r3
 800761a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800761e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800762a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800762e:	b29b      	uxth	r3, r3
 8007630:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007648:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	441a      	add	r2, r3
 8007656:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800765a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800765e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766a:	b29b      	uxth	r3, r3
 800766c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800766e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007672:	4618      	mov	r0, r3
 8007674:	3774      	adds	r7, #116	; 0x74
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop

08007680 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007680:	b480      	push	{r7}
 8007682:	b08d      	sub	sp, #52	; 0x34
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	7b1b      	ldrb	r3, [r3, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	f040 808e 	bne.w	80077b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	785b      	ldrb	r3, [r3, #1]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d044      	beq.n	8007726 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	81bb      	strh	r3, [r7, #12]
 80076aa:	89bb      	ldrh	r3, [r7, #12]
 80076ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01b      	beq.n	80076ec <USB_DeactivateEndpoint+0x6c>
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ca:	817b      	strh	r3, [r7, #10]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	441a      	add	r2, r3
 80076d6:	897b      	ldrh	r3, [r7, #10]
 80076d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007702:	813b      	strh	r3, [r7, #8]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	441a      	add	r2, r3
 800770e:	893b      	ldrh	r3, [r7, #8]
 8007710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007720:	b29b      	uxth	r3, r3
 8007722:	8013      	strh	r3, [r2, #0]
 8007724:	e192      	b.n	8007a4c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	827b      	strh	r3, [r7, #18]
 8007734:	8a7b      	ldrh	r3, [r7, #18]
 8007736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d01b      	beq.n	8007776 <USB_DeactivateEndpoint+0xf6>
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007754:	823b      	strh	r3, [r7, #16]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	441a      	add	r2, r3
 8007760:	8a3b      	ldrh	r3, [r7, #16]
 8007762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800776e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007772:	b29b      	uxth	r3, r3
 8007774:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778c:	81fb      	strh	r3, [r7, #14]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	441a      	add	r2, r3
 8007798:	89fb      	ldrh	r3, [r7, #14]
 800779a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800779e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	8013      	strh	r3, [r2, #0]
 80077ae:	e14d      	b.n	8007a4c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	785b      	ldrb	r3, [r3, #1]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f040 80a5 	bne.w	8007904 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	843b      	strh	r3, [r7, #32]
 80077c8:	8c3b      	ldrh	r3, [r7, #32]
 80077ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d01b      	beq.n	800780a <USB_DeactivateEndpoint+0x18a>
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e8:	83fb      	strh	r3, [r7, #30]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	441a      	add	r2, r3
 80077f4:	8bfb      	ldrh	r3, [r7, #30]
 80077f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007806:	b29b      	uxth	r3, r3
 8007808:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	83bb      	strh	r3, [r7, #28]
 8007818:	8bbb      	ldrh	r3, [r7, #28]
 800781a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01b      	beq.n	800785a <USB_DeactivateEndpoint+0x1da>
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	b29b      	uxth	r3, r3
 8007830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007838:	837b      	strh	r3, [r7, #26]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	441a      	add	r2, r3
 8007844:	8b7b      	ldrh	r3, [r7, #26]
 8007846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800784a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800784e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007852:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007856:	b29b      	uxth	r3, r3
 8007858:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	b29b      	uxth	r3, r3
 8007868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800786c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007870:	833b      	strh	r3, [r7, #24]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	441a      	add	r2, r3
 800787c:	8b3b      	ldrh	r3, [r7, #24]
 800787e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800788e:	b29b      	uxth	r3, r3
 8007890:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a8:	82fb      	strh	r3, [r7, #22]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	441a      	add	r2, r3
 80078b4:	8afb      	ldrh	r3, [r7, #22]
 80078b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e0:	82bb      	strh	r3, [r7, #20]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	441a      	add	r2, r3
 80078ec:	8abb      	ldrh	r3, [r7, #20]
 80078ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fe:	b29b      	uxth	r3, r3
 8007900:	8013      	strh	r3, [r2, #0]
 8007902:	e0a3      	b.n	8007a4c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007912:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01b      	beq.n	8007954 <USB_DeactivateEndpoint+0x2d4>
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800792e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007932:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	441a      	add	r2, r3
 800793e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800794c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007950:	b29b      	uxth	r3, r3
 8007952:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007962:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01b      	beq.n	80079a4 <USB_DeactivateEndpoint+0x324>
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800797e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007982:	853b      	strh	r3, [r7, #40]	; 0x28
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	441a      	add	r2, r3
 800798e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800799c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	441a      	add	r2, r3
 80079c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d8:	b29b      	uxth	r3, r3
 80079da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	441a      	add	r2, r3
 80079fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	441a      	add	r2, r3
 8007a36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3734      	adds	r7, #52	; 0x34
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b0c2      	sub	sp, #264	; 0x108
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a68:	6018      	str	r0, [r3, #0]
 8007a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a72:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	785b      	ldrb	r3, [r3, #1]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	f040 86b7 	bne.w	80087f4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d908      	bls.n	8007ab4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ab2:	e007      	b.n	8007ac4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	7b1b      	ldrb	r3, [r3, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d13a      	bne.n	8007b4a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6959      	ldr	r1, [r3, #20]
 8007ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	88da      	ldrh	r2, [r3, #6]
 8007aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007af6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007afa:	6800      	ldr	r0, [r0, #0]
 8007afc:	f001 fcb9 	bl	8009472 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	613b      	str	r3, [r7, #16]
 8007b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	4413      	add	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	00da      	lsls	r2, r3, #3
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4413      	add	r3, r2
 8007b36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	f000 be1f 	b.w	8008788 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	78db      	ldrb	r3, [r3, #3]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	f040 8462 	bne.w	8008420 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6a1a      	ldr	r2, [r3, #32]
 8007b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	f240 83df 	bls.w	8008338 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	441a      	add	r2, r3
 8007bbe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6a1a      	ldr	r2, [r3, #32]
 8007be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be6:	1ad2      	subs	r2, r2, r3
 8007be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 81c7 	beq.w	8007faa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	633b      	str	r3, [r7, #48]	; 0x30
 8007c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	785b      	ldrb	r3, [r3, #1]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d177      	bne.n	8007d28 <USB_EPStartXfer+0x2ce>
 8007c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	461a      	mov	r2, r3
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	4413      	add	r3, r2
 8007c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	00da      	lsls	r2, r3, #3
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c72:	627b      	str	r3, [r7, #36]	; 0x24
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c88:	2b3e      	cmp	r3, #62	; 0x3e
 8007c8a:	d921      	bls.n	8007cd0 <USB_EPStartXfer+0x276>
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c90:	095b      	lsrs	r3, r3, #5
 8007c92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c9a:	f003 031f 	and.w	r3, r3, #31
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d104      	bne.n	8007cac <USB_EPStartXfer+0x252>
 8007ca2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	029b      	lsls	r3, r3, #10
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	801a      	strh	r2, [r3, #0]
 8007cce:	e050      	b.n	8007d72 <USB_EPStartXfer+0x318>
 8007cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <USB_EPStartXfer+0x294>
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	801a      	strh	r2, [r3, #0]
 8007cec:	e041      	b.n	8007d72 <USB_EPStartXfer+0x318>
 8007cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cf2:	085b      	lsrs	r3, r3, #1
 8007cf4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d004      	beq.n	8007d0e <USB_EPStartXfer+0x2b4>
 8007d04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d08:	3301      	adds	r3, #1
 8007d0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	029b      	lsls	r3, r3, #10
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	801a      	strh	r2, [r3, #0]
 8007d26:	e024      	b.n	8007d72 <USB_EPStartXfer+0x318>
 8007d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	785b      	ldrb	r3, [r3, #1]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d11c      	bne.n	8007d72 <USB_EPStartXfer+0x318>
 8007d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	4413      	add	r3, r2
 8007d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	00da      	lsls	r2, r3, #3
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	4413      	add	r3, r2
 8007d62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	895b      	ldrh	r3, [r3, #10]
 8007d7e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6959      	ldr	r1, [r3, #20]
 8007d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d98:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007d9c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007da0:	6800      	ldr	r0, [r0, #0]
 8007da2:	f001 fb66 	bl	8009472 <USB_WritePMA>
            ep->xfer_buff += len;
 8007da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695a      	ldr	r2, [r3, #20]
 8007db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db6:	441a      	add	r2, r3
 8007db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6a1a      	ldr	r2, [r3, #32]
 8007dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d90f      	bls.n	8007e00 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6a1a      	ldr	r2, [r3, #32]
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df0:	1ad2      	subs	r2, r2, r3
 8007df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	621a      	str	r2, [r3, #32]
 8007dfe:	e00e      	b.n	8007e1e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d177      	bne.n	8007f1e <USB_EPStartXfer+0x4c4>
 8007e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	61bb      	str	r3, [r7, #24]
 8007e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	4413      	add	r3, r2
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	00da      	lsls	r2, r3, #3
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	4413      	add	r3, r2
 8007e64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e7e:	2b3e      	cmp	r3, #62	; 0x3e
 8007e80:	d921      	bls.n	8007ec6 <USB_EPStartXfer+0x46c>
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e86:	095b      	lsrs	r3, r3, #5
 8007e88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e90:	f003 031f 	and.w	r3, r3, #31
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d104      	bne.n	8007ea2 <USB_EPStartXfer+0x448>
 8007e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	029b      	lsls	r3, r3, #10
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	801a      	strh	r2, [r3, #0]
 8007ec4:	e056      	b.n	8007f74 <USB_EPStartXfer+0x51a>
 8007ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10a      	bne.n	8007ee4 <USB_EPStartXfer+0x48a>
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	801a      	strh	r2, [r3, #0]
 8007ee2:	e047      	b.n	8007f74 <USB_EPStartXfer+0x51a>
 8007ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee8:	085b      	lsrs	r3, r3, #1
 8007eea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <USB_EPStartXfer+0x4aa>
 8007efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007efe:	3301      	adds	r3, #1
 8007f00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	029b      	lsls	r3, r3, #10
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	4313      	orrs	r3, r2
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	801a      	strh	r2, [r3, #0]
 8007f1c:	e02a      	b.n	8007f74 <USB_EPStartXfer+0x51a>
 8007f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	785b      	ldrb	r3, [r3, #1]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d122      	bne.n	8007f74 <USB_EPStartXfer+0x51a>
 8007f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	623b      	str	r3, [r7, #32]
 8007f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	4413      	add	r3, r2
 8007f50:	623b      	str	r3, [r7, #32]
 8007f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	00da      	lsls	r2, r3, #3
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	4413      	add	r3, r2
 8007f64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f68:	61fb      	str	r3, [r7, #28]
 8007f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	891b      	ldrh	r3, [r3, #8]
 8007f80:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6959      	ldr	r1, [r3, #20]
 8007f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f9a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f9e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007fa2:	6800      	ldr	r0, [r0, #0]
 8007fa4:	f001 fa65 	bl	8009472 <USB_WritePMA>
 8007fa8:	e3ee      	b.n	8008788 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	785b      	ldrb	r3, [r3, #1]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d177      	bne.n	80080aa <USB_EPStartXfer+0x650>
 8007fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fda:	4413      	add	r3, r2
 8007fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	00da      	lsls	r2, r3, #3
 8007fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fee:	4413      	add	r3, r2
 8007ff0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008000:	b29a      	uxth	r2, r3
 8008002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800800a:	2b3e      	cmp	r3, #62	; 0x3e
 800800c:	d921      	bls.n	8008052 <USB_EPStartXfer+0x5f8>
 800800e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008012:	095b      	lsrs	r3, r3, #5
 8008014:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800801c:	f003 031f 	and.w	r3, r3, #31
 8008020:	2b00      	cmp	r3, #0
 8008022:	d104      	bne.n	800802e <USB_EPStartXfer+0x5d4>
 8008024:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008028:	3b01      	subs	r3, #1
 800802a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800802e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29a      	uxth	r2, r3
 8008034:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008038:	b29b      	uxth	r3, r3
 800803a:	029b      	lsls	r3, r3, #10
 800803c:	b29b      	uxth	r3, r3
 800803e:	4313      	orrs	r3, r2
 8008040:	b29b      	uxth	r3, r3
 8008042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804a:	b29a      	uxth	r2, r3
 800804c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800804e:	801a      	strh	r2, [r3, #0]
 8008050:	e056      	b.n	8008100 <USB_EPStartXfer+0x6a6>
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <USB_EPStartXfer+0x616>
 800805a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008068:	b29a      	uxth	r2, r3
 800806a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800806c:	801a      	strh	r2, [r3, #0]
 800806e:	e047      	b.n	8008100 <USB_EPStartXfer+0x6a6>
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008074:	085b      	lsrs	r3, r3, #1
 8008076:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800807a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <USB_EPStartXfer+0x636>
 8008086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800808a:	3301      	adds	r3, #1
 800808c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	b29a      	uxth	r2, r3
 8008096:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800809a:	b29b      	uxth	r3, r3
 800809c:	029b      	lsls	r3, r3, #10
 800809e:	b29b      	uxth	r3, r3
 80080a0:	4313      	orrs	r3, r2
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a6:	801a      	strh	r2, [r3, #0]
 80080a8:	e02a      	b.n	8008100 <USB_EPStartXfer+0x6a6>
 80080aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d122      	bne.n	8008100 <USB_EPStartXfer+0x6a6>
 80080ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	653b      	str	r3, [r7, #80]	; 0x50
 80080c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	461a      	mov	r2, r3
 80080d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080da:	4413      	add	r3, r2
 80080dc:	653b      	str	r3, [r7, #80]	; 0x50
 80080de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	00da      	lsls	r2, r3, #3
 80080ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ee:	4413      	add	r3, r2
 80080f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	891b      	ldrh	r3, [r3, #8]
 800810c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6959      	ldr	r1, [r3, #20]
 800811c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008120:	b29b      	uxth	r3, r3
 8008122:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008126:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800812a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800812e:	6800      	ldr	r0, [r0, #0]
 8008130:	f001 f99f 	bl	8009472 <USB_WritePMA>
            ep->xfer_buff += len;
 8008134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	695a      	ldr	r2, [r3, #20]
 8008140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008144:	441a      	add	r2, r3
 8008146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6a1a      	ldr	r2, [r3, #32]
 800815e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	429a      	cmp	r2, r3
 800816c:	d90f      	bls.n	800818e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6a1a      	ldr	r2, [r3, #32]
 800817a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	621a      	str	r2, [r3, #32]
 800818c:	e00e      	b.n	80081ac <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800818e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800819e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2200      	movs	r2, #0
 80081aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	643b      	str	r3, [r7, #64]	; 0x40
 80081b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	785b      	ldrb	r3, [r3, #1]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d177      	bne.n	80082b8 <USB_EPStartXfer+0x85e>
 80081c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80081d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	4413      	add	r3, r2
 80081ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80081ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	00da      	lsls	r2, r3, #3
 80081fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fc:	4413      	add	r3, r2
 80081fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008202:	637b      	str	r3, [r7, #52]	; 0x34
 8008204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	b29b      	uxth	r3, r3
 800820a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800820e:	b29a      	uxth	r2, r3
 8008210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008212:	801a      	strh	r2, [r3, #0]
 8008214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008218:	2b3e      	cmp	r3, #62	; 0x3e
 800821a:	d921      	bls.n	8008260 <USB_EPStartXfer+0x806>
 800821c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008220:	095b      	lsrs	r3, r3, #5
 8008222:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800822a:	f003 031f 	and.w	r3, r3, #31
 800822e:	2b00      	cmp	r3, #0
 8008230:	d104      	bne.n	800823c <USB_EPStartXfer+0x7e2>
 8008232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008236:	3b01      	subs	r3, #1
 8008238:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800823c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29a      	uxth	r2, r3
 8008242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008246:	b29b      	uxth	r3, r3
 8008248:	029b      	lsls	r3, r3, #10
 800824a:	b29b      	uxth	r3, r3
 800824c:	4313      	orrs	r3, r2
 800824e:	b29b      	uxth	r3, r3
 8008250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008258:	b29a      	uxth	r2, r3
 800825a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825c:	801a      	strh	r2, [r3, #0]
 800825e:	e050      	b.n	8008302 <USB_EPStartXfer+0x8a8>
 8008260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <USB_EPStartXfer+0x824>
 8008268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008276:	b29a      	uxth	r2, r3
 8008278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827a:	801a      	strh	r2, [r3, #0]
 800827c:	e041      	b.n	8008302 <USB_EPStartXfer+0x8a8>
 800827e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008282:	085b      	lsrs	r3, r3, #1
 8008284:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <USB_EPStartXfer+0x844>
 8008294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008298:	3301      	adds	r3, #1
 800829a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800829e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	029b      	lsls	r3, r3, #10
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	4313      	orrs	r3, r2
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b4:	801a      	strh	r2, [r3, #0]
 80082b6:	e024      	b.n	8008302 <USB_EPStartXfer+0x8a8>
 80082b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	785b      	ldrb	r3, [r3, #1]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d11c      	bne.n	8008302 <USB_EPStartXfer+0x8a8>
 80082c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082dc:	4413      	add	r3, r2
 80082de:	643b      	str	r3, [r7, #64]	; 0x40
 80082e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	00da      	lsls	r2, r3, #3
 80082ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f0:	4413      	add	r3, r2
 80082f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008300:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	895b      	ldrh	r3, [r3, #10]
 800830e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6959      	ldr	r1, [r3, #20]
 800831e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008322:	b29b      	uxth	r3, r3
 8008324:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008328:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800832c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008330:	6800      	ldr	r0, [r0, #0]
 8008332:	f001 f89e 	bl	8009472 <USB_WritePMA>
 8008336:	e227      	b.n	8008788 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800834c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	b29b      	uxth	r3, r3
 8008366:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800836a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	441a      	add	r2, r3
 800838c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800839c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80083a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083be:	b29b      	uxth	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083c4:	4413      	add	r3, r2
 80083c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	00da      	lsls	r2, r3, #3
 80083d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d8:	4413      	add	r3, r2
 80083da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083de:	65bb      	str	r3, [r7, #88]	; 0x58
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80083ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	891b      	ldrh	r3, [r3, #8]
 80083f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6959      	ldr	r1, [r3, #20]
 8008406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800840a:	b29b      	uxth	r3, r3
 800840c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008410:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008414:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008418:	6800      	ldr	r0, [r0, #0]
 800841a:	f001 f82a 	bl	8009472 <USB_WritePMA>
 800841e:	e1b3      	b.n	8008788 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6a1a      	ldr	r2, [r3, #32]
 800842c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008430:	1ad2      	subs	r2, r2, r3
 8008432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800843e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	b29b      	uxth	r3, r3
 800845c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80c6 	beq.w	80085f2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	673b      	str	r3, [r7, #112]	; 0x70
 8008472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	785b      	ldrb	r3, [r3, #1]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d177      	bne.n	8008572 <USB_EPStartXfer+0xb18>
 8008482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	66bb      	str	r3, [r7, #104]	; 0x68
 800848e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800849c:	b29b      	uxth	r3, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084a2:	4413      	add	r3, r2
 80084a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80084a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	00da      	lsls	r2, r3, #3
 80084b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084b6:	4413      	add	r3, r2
 80084b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084bc:	667b      	str	r3, [r7, #100]	; 0x64
 80084be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084cc:	801a      	strh	r2, [r3, #0]
 80084ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084d2:	2b3e      	cmp	r3, #62	; 0x3e
 80084d4:	d921      	bls.n	800851a <USB_EPStartXfer+0xac0>
 80084d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084da:	095b      	lsrs	r3, r3, #5
 80084dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e4:	f003 031f 	and.w	r3, r3, #31
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <USB_EPStartXfer+0xa9c>
 80084ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80084f0:	3b01      	subs	r3, #1
 80084f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80084f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008500:	b29b      	uxth	r3, r3
 8008502:	029b      	lsls	r3, r3, #10
 8008504:	b29b      	uxth	r3, r3
 8008506:	4313      	orrs	r3, r2
 8008508:	b29b      	uxth	r3, r3
 800850a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008512:	b29a      	uxth	r2, r3
 8008514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008516:	801a      	strh	r2, [r3, #0]
 8008518:	e050      	b.n	80085bc <USB_EPStartXfer+0xb62>
 800851a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10a      	bne.n	8008538 <USB_EPStartXfer+0xade>
 8008522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800852c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008530:	b29a      	uxth	r2, r3
 8008532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008534:	801a      	strh	r2, [r3, #0]
 8008536:	e041      	b.n	80085bc <USB_EPStartXfer+0xb62>
 8008538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800853c:	085b      	lsrs	r3, r3, #1
 800853e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <USB_EPStartXfer+0xafe>
 800854e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008552:	3301      	adds	r3, #1
 8008554:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	b29a      	uxth	r2, r3
 800855e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008562:	b29b      	uxth	r3, r3
 8008564:	029b      	lsls	r3, r3, #10
 8008566:	b29b      	uxth	r3, r3
 8008568:	4313      	orrs	r3, r2
 800856a:	b29a      	uxth	r2, r3
 800856c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800856e:	801a      	strh	r2, [r3, #0]
 8008570:	e024      	b.n	80085bc <USB_EPStartXfer+0xb62>
 8008572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d11c      	bne.n	80085bc <USB_EPStartXfer+0xb62>
 8008582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008590:	b29b      	uxth	r3, r3
 8008592:	461a      	mov	r2, r3
 8008594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008596:	4413      	add	r3, r2
 8008598:	673b      	str	r3, [r7, #112]	; 0x70
 800859a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	00da      	lsls	r2, r3, #3
 80085a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085aa:	4413      	add	r3, r2
 80085ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80085bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	895b      	ldrh	r3, [r3, #10]
 80085c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6959      	ldr	r1, [r3, #20]
 80085d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085dc:	b29b      	uxth	r3, r3
 80085de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80085e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80085e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80085ea:	6800      	ldr	r0, [r0, #0]
 80085ec:	f000 ff41 	bl	8009472 <USB_WritePMA>
 80085f0:	e0ca      	b.n	8008788 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	785b      	ldrb	r3, [r3, #1]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d177      	bne.n	80086f2 <USB_EPStartXfer+0xc98>
 8008602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800860e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800861c:	b29b      	uxth	r3, r3
 800861e:	461a      	mov	r2, r3
 8008620:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008622:	4413      	add	r3, r2
 8008624:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	00da      	lsls	r2, r3, #3
 8008634:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008636:	4413      	add	r3, r2
 8008638:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800863c:	67bb      	str	r3, [r7, #120]	; 0x78
 800863e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	b29b      	uxth	r3, r3
 8008644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008648:	b29a      	uxth	r2, r3
 800864a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800864c:	801a      	strh	r2, [r3, #0]
 800864e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008652:	2b3e      	cmp	r3, #62	; 0x3e
 8008654:	d921      	bls.n	800869a <USB_EPStartXfer+0xc40>
 8008656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008664:	f003 031f 	and.w	r3, r3, #31
 8008668:	2b00      	cmp	r3, #0
 800866a:	d104      	bne.n	8008676 <USB_EPStartXfer+0xc1c>
 800866c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008670:	3b01      	subs	r3, #1
 8008672:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	b29a      	uxth	r2, r3
 800867c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008680:	b29b      	uxth	r3, r3
 8008682:	029b      	lsls	r3, r3, #10
 8008684:	b29b      	uxth	r3, r3
 8008686:	4313      	orrs	r3, r2
 8008688:	b29b      	uxth	r3, r3
 800868a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800868e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008692:	b29a      	uxth	r2, r3
 8008694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008696:	801a      	strh	r2, [r3, #0]
 8008698:	e05c      	b.n	8008754 <USB_EPStartXfer+0xcfa>
 800869a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10a      	bne.n	80086b8 <USB_EPStartXfer+0xc5e>
 80086a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086b4:	801a      	strh	r2, [r3, #0]
 80086b6:	e04d      	b.n	8008754 <USB_EPStartXfer+0xcfa>
 80086b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086bc:	085b      	lsrs	r3, r3, #1
 80086be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80086c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d004      	beq.n	80086d8 <USB_EPStartXfer+0xc7e>
 80086ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086d2:	3301      	adds	r3, #1
 80086d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80086d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	b29a      	uxth	r2, r3
 80086de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	029b      	lsls	r3, r3, #10
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	4313      	orrs	r3, r2
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ee:	801a      	strh	r2, [r3, #0]
 80086f0:	e030      	b.n	8008754 <USB_EPStartXfer+0xcfa>
 80086f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d128      	bne.n	8008754 <USB_EPStartXfer+0xcfa>
 8008702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008706:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800871e:	b29b      	uxth	r3, r3
 8008720:	461a      	mov	r2, r3
 8008722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008726:	4413      	add	r3, r2
 8008728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800872c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	00da      	lsls	r2, r3, #3
 800873a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800873e:	4413      	add	r3, r2
 8008740:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800874c:	b29a      	uxth	r2, r3
 800874e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008752:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	891b      	ldrh	r3, [r3, #8]
 8008760:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6959      	ldr	r1, [r3, #20]
 8008770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008774:	b29b      	uxth	r3, r3
 8008776:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800877a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800877e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008782:	6800      	ldr	r0, [r0, #0]
 8008784:	f000 fe75 	bl	8009472 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ae:	817b      	strh	r3, [r7, #10]
 80087b0:	897b      	ldrh	r3, [r7, #10]
 80087b2:	f083 0310 	eor.w	r3, r3, #16
 80087b6:	817b      	strh	r3, [r7, #10]
 80087b8:	897b      	ldrh	r3, [r7, #10]
 80087ba:	f083 0320 	eor.w	r3, r3, #32
 80087be:	817b      	strh	r3, [r7, #10]
 80087c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	441a      	add	r2, r3
 80087da:	897b      	ldrh	r3, [r7, #10]
 80087dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	8013      	strh	r3, [r2, #0]
 80087f0:	f000 bcde 	b.w	80091b0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80087f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	7b1b      	ldrb	r3, [r3, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f040 80bb 	bne.w	800897c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800880a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699a      	ldr	r2, [r3, #24]
 8008812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	429a      	cmp	r2, r3
 8008820:	d917      	bls.n	8008852 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	699a      	ldr	r2, [r3, #24]
 800883e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008842:	1ad2      	subs	r2, r2, r3
 8008844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	619a      	str	r2, [r3, #24]
 8008850:	e00e      	b.n	8008870 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2200      	movs	r2, #0
 800886e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800887e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800888c:	b29b      	uxth	r3, r3
 800888e:	461a      	mov	r2, r3
 8008890:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008894:	4413      	add	r3, r2
 8008896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800889a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	00da      	lsls	r2, r3, #3
 80088a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088ac:	4413      	add	r3, r2
 80088ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80088b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088c8:	801a      	strh	r2, [r3, #0]
 80088ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ce:	2b3e      	cmp	r3, #62	; 0x3e
 80088d0:	d924      	bls.n	800891c <USB_EPStartXfer+0xec2>
 80088d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088d6:	095b      	lsrs	r3, r3, #5
 80088d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088e0:	f003 031f 	and.w	r3, r3, #31
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d104      	bne.n	80088f2 <USB_EPStartXfer+0xe98>
 80088e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088ec:	3b01      	subs	r3, #1
 80088ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088fe:	b29b      	uxth	r3, r3
 8008900:	029b      	lsls	r3, r3, #10
 8008902:	b29b      	uxth	r3, r3
 8008904:	4313      	orrs	r3, r2
 8008906:	b29b      	uxth	r3, r3
 8008908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800890c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008910:	b29a      	uxth	r2, r3
 8008912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008916:	801a      	strh	r2, [r3, #0]
 8008918:	f000 bc10 	b.w	800913c <USB_EPStartXfer+0x16e2>
 800891c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10c      	bne.n	800893e <USB_EPStartXfer+0xee4>
 8008924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	b29b      	uxth	r3, r3
 800892c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008934:	b29a      	uxth	r2, r3
 8008936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800893a:	801a      	strh	r2, [r3, #0]
 800893c:	e3fe      	b.n	800913c <USB_EPStartXfer+0x16e2>
 800893e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008942:	085b      	lsrs	r3, r3, #1
 8008944:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b00      	cmp	r3, #0
 8008952:	d004      	beq.n	800895e <USB_EPStartXfer+0xf04>
 8008954:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008958:	3301      	adds	r3, #1
 800895a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800895e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008962:	881b      	ldrh	r3, [r3, #0]
 8008964:	b29a      	uxth	r2, r3
 8008966:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800896a:	b29b      	uxth	r3, r3
 800896c:	029b      	lsls	r3, r3, #10
 800896e:	b29b      	uxth	r3, r3
 8008970:	4313      	orrs	r3, r2
 8008972:	b29a      	uxth	r2, r3
 8008974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008978:	801a      	strh	r2, [r3, #0]
 800897a:	e3df      	b.n	800913c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800897c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	78db      	ldrb	r3, [r3, #3]
 8008988:	2b02      	cmp	r3, #2
 800898a:	f040 8218 	bne.w	8008dbe <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800898e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	785b      	ldrb	r3, [r3, #1]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f040 809d 	bne.w	8008ada <USB_EPStartXfer+0x1080>
 80089a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089bc:	b29b      	uxth	r3, r3
 80089be:	461a      	mov	r2, r3
 80089c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089c4:	4413      	add	r3, r2
 80089c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	00da      	lsls	r2, r3, #3
 80089d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089dc:	4413      	add	r3, r2
 80089de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80089e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80089e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089f8:	801a      	strh	r2, [r3, #0]
 80089fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	2b3e      	cmp	r3, #62	; 0x3e
 8008a08:	d92b      	bls.n	8008a62 <USB_EPStartXfer+0x1008>
 8008a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	f003 031f 	and.w	r3, r3, #31
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d104      	bne.n	8008a3a <USB_EPStartXfer+0xfe0>
 8008a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a34:	3b01      	subs	r3, #1
 8008a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	029b      	lsls	r3, r3, #10
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a5e:	801a      	strh	r2, [r3, #0]
 8008a60:	e070      	b.n	8008b44 <USB_EPStartXfer+0x10ea>
 8008a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10c      	bne.n	8008a8c <USB_EPStartXfer+0x1032>
 8008a72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a88:	801a      	strh	r2, [r3, #0]
 8008a8a:	e05b      	b.n	8008b44 <USB_EPStartXfer+0x10ea>
 8008a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	085b      	lsrs	r3, r3, #1
 8008a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d004      	beq.n	8008abc <USB_EPStartXfer+0x1062>
 8008ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	029b      	lsls	r3, r3, #10
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ad6:	801a      	strh	r2, [r3, #0]
 8008ad8:	e034      	b.n	8008b44 <USB_EPStartXfer+0x10ea>
 8008ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d12c      	bne.n	8008b44 <USB_EPStartXfer+0x10ea>
 8008aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008afc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	461a      	mov	r2, r3
 8008b0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b0e:	4413      	add	r3, r2
 8008b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	00da      	lsls	r2, r3, #3
 8008b22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b26:	4413      	add	r3, r2
 8008b28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b42:	801a      	strh	r2, [r3, #0]
 8008b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	785b      	ldrb	r3, [r3, #1]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f040 809d 	bne.w	8008c9e <USB_EPStartXfer+0x1244>
 8008b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	461a      	mov	r2, r3
 8008b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b88:	4413      	add	r3, r2
 8008b8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	00da      	lsls	r2, r3, #3
 8008b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ba6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008baa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bbc:	801a      	strh	r2, [r3, #0]
 8008bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	2b3e      	cmp	r3, #62	; 0x3e
 8008bcc:	d92b      	bls.n	8008c26 <USB_EPStartXfer+0x11cc>
 8008bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	095b      	lsrs	r3, r3, #5
 8008bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	f003 031f 	and.w	r3, r3, #31
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d104      	bne.n	8008bfe <USB_EPStartXfer+0x11a4>
 8008bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	029b      	lsls	r3, r3, #10
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	4313      	orrs	r3, r2
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c22:	801a      	strh	r2, [r3, #0]
 8008c24:	e069      	b.n	8008cfa <USB_EPStartXfer+0x12a0>
 8008c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10c      	bne.n	8008c50 <USB_EPStartXfer+0x11f6>
 8008c36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c4c:	801a      	strh	r2, [r3, #0]
 8008c4e:	e054      	b.n	8008cfa <USB_EPStartXfer+0x12a0>
 8008c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	085b      	lsrs	r3, r3, #1
 8008c5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d004      	beq.n	8008c80 <USB_EPStartXfer+0x1226>
 8008c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	029b      	lsls	r3, r3, #10
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	4313      	orrs	r3, r2
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c9a:	801a      	strh	r2, [r3, #0]
 8008c9c:	e02d      	b.n	8008cfa <USB_EPStartXfer+0x12a0>
 8008c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	785b      	ldrb	r3, [r3, #1]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d125      	bne.n	8008cfa <USB_EPStartXfer+0x12a0>
 8008cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	00da      	lsls	r2, r3, #3
 8008cd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008cdc:	4413      	add	r3, r2
 8008cde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cf8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 8218 	beq.w	800913c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008d2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d005      	beq.n	8008d44 <USB_EPStartXfer+0x12ea>
 8008d38:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10d      	bne.n	8008d60 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008d44:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f040 81f5 	bne.w	800913c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008d52:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f040 81ee 	bne.w	800913c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d86:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	441a      	add	r2, r3
 8008da4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008db4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	8013      	strh	r3, [r2, #0]
 8008dbc:	e1be      	b.n	800913c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	78db      	ldrb	r3, [r3, #3]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	f040 81b4 	bne.w	8009138 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	699a      	ldr	r2, [r3, #24]
 8008ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d917      	bls.n	8008e1c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	699a      	ldr	r2, [r3, #24]
 8008e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e0c:	1ad2      	subs	r2, r2, r3
 8008e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	619a      	str	r2, [r3, #24]
 8008e1a:	e00e      	b.n	8008e3a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2200      	movs	r2, #0
 8008e38:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	785b      	ldrb	r3, [r3, #1]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f040 8085 	bne.w	8008f56 <USB_EPStartXfer+0x14fc>
 8008e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e70:	4413      	add	r3, r2
 8008e72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	00da      	lsls	r2, r3, #3
 8008e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e88:	4413      	add	r3, r2
 8008e8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ea4:	801a      	strh	r2, [r3, #0]
 8008ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eaa:	2b3e      	cmp	r3, #62	; 0x3e
 8008eac:	d923      	bls.n	8008ef6 <USB_EPStartXfer+0x149c>
 8008eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb2:	095b      	lsrs	r3, r3, #5
 8008eb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ebc:	f003 031f 	and.w	r3, r3, #31
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d104      	bne.n	8008ece <USB_EPStartXfer+0x1474>
 8008ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	029b      	lsls	r3, r3, #10
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ef2:	801a      	strh	r2, [r3, #0]
 8008ef4:	e060      	b.n	8008fb8 <USB_EPStartXfer+0x155e>
 8008ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10c      	bne.n	8008f18 <USB_EPStartXfer+0x14be>
 8008efe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f14:	801a      	strh	r2, [r3, #0]
 8008f16:	e04f      	b.n	8008fb8 <USB_EPStartXfer+0x155e>
 8008f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f1c:	085b      	lsrs	r3, r3, #1
 8008f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d004      	beq.n	8008f38 <USB_EPStartXfer+0x14de>
 8008f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f32:	3301      	adds	r3, #1
 8008f34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	029b      	lsls	r3, r3, #10
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f52:	801a      	strh	r2, [r3, #0]
 8008f54:	e030      	b.n	8008fb8 <USB_EPStartXfer+0x155e>
 8008f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	785b      	ldrb	r3, [r3, #1]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d128      	bne.n	8008fb8 <USB_EPStartXfer+0x155e>
 8008f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	461a      	mov	r2, r3
 8008f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	00da      	lsls	r2, r3, #3
 8008f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008fb6:	801a      	strh	r2, [r3, #0]
 8008fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	785b      	ldrb	r3, [r3, #1]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f040 8085 	bne.w	80090e2 <USB_EPStartXfer+0x1688>
 8008fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	00da      	lsls	r2, r3, #3
 8009010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009014:	4413      	add	r3, r2
 8009016:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800901a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800901e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	b29b      	uxth	r3, r3
 8009026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800902a:	b29a      	uxth	r2, r3
 800902c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009030:	801a      	strh	r2, [r3, #0]
 8009032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009036:	2b3e      	cmp	r3, #62	; 0x3e
 8009038:	d923      	bls.n	8009082 <USB_EPStartXfer+0x1628>
 800903a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800903e:	095b      	lsrs	r3, r3, #5
 8009040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009048:	f003 031f 	and.w	r3, r3, #31
 800904c:	2b00      	cmp	r3, #0
 800904e:	d104      	bne.n	800905a <USB_EPStartXfer+0x1600>
 8009050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009054:	3b01      	subs	r3, #1
 8009056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800905a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	b29a      	uxth	r2, r3
 8009062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009066:	b29b      	uxth	r3, r3
 8009068:	029b      	lsls	r3, r3, #10
 800906a:	b29b      	uxth	r3, r3
 800906c:	4313      	orrs	r3, r2
 800906e:	b29b      	uxth	r3, r3
 8009070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009078:	b29a      	uxth	r2, r3
 800907a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800907e:	801a      	strh	r2, [r3, #0]
 8009080:	e05c      	b.n	800913c <USB_EPStartXfer+0x16e2>
 8009082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10c      	bne.n	80090a4 <USB_EPStartXfer+0x164a>
 800908a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	b29b      	uxth	r3, r3
 8009092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800909a:	b29a      	uxth	r2, r3
 800909c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090a0:	801a      	strh	r2, [r3, #0]
 80090a2:	e04b      	b.n	800913c <USB_EPStartXfer+0x16e2>
 80090a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090a8:	085b      	lsrs	r3, r3, #1
 80090aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <USB_EPStartXfer+0x166a>
 80090ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090be:	3301      	adds	r3, #1
 80090c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	029b      	lsls	r3, r3, #10
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	4313      	orrs	r3, r2
 80090d8:	b29a      	uxth	r2, r3
 80090da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090de:	801a      	strh	r2, [r3, #0]
 80090e0:	e02c      	b.n	800913c <USB_EPStartXfer+0x16e2>
 80090e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d124      	bne.n	800913c <USB_EPStartXfer+0x16e2>
 80090f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009100:	b29b      	uxth	r3, r3
 8009102:	461a      	mov	r2, r3
 8009104:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009108:	4413      	add	r3, r2
 800910a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800910e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	00da      	lsls	r2, r3, #3
 800911c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009120:	4413      	add	r3, r2
 8009122:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009126:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800912a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800912e:	b29a      	uxth	r2, r3
 8009130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009134:	801a      	strh	r2, [r3, #0]
 8009136:	e001      	b.n	800913c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e03a      	b.n	80091b2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800913c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	b29b      	uxth	r3, r3
 800915a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800915e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009162:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009166:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800916a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800916e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009172:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009176:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800917a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800917e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	441a      	add	r2, r3
 8009198:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800919c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	785b      	ldrb	r3, [r3, #1]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d020      	beq.n	8009210 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091e4:	81bb      	strh	r3, [r7, #12]
 80091e6:	89bb      	ldrh	r3, [r7, #12]
 80091e8:	f083 0310 	eor.w	r3, r3, #16
 80091ec:	81bb      	strh	r3, [r7, #12]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	441a      	add	r2, r3
 80091f8:	89bb      	ldrh	r3, [r7, #12]
 80091fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800920a:	b29b      	uxth	r3, r3
 800920c:	8013      	strh	r3, [r2, #0]
 800920e:	e01f      	b.n	8009250 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009226:	81fb      	strh	r3, [r7, #14]
 8009228:	89fb      	ldrh	r3, [r7, #14]
 800922a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800922e:	81fb      	strh	r3, [r7, #14]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	441a      	add	r2, r3
 800923a:	89fb      	ldrh	r3, [r7, #14]
 800923c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800924c:	b29b      	uxth	r3, r3
 800924e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800925e:	b480      	push	{r7}
 8009260:	b087      	sub	sp, #28
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	7b1b      	ldrb	r3, [r3, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	f040 809d 	bne.w	80093ac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	785b      	ldrb	r3, [r3, #1]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d04c      	beq.n	8009314 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	823b      	strh	r3, [r7, #16]
 8009288:	8a3b      	ldrh	r3, [r7, #16]
 800928a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928e:	2b00      	cmp	r3, #0
 8009290:	d01b      	beq.n	80092ca <USB_EPClearStall+0x6c>
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	b29b      	uxth	r3, r3
 80092a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092a8:	81fb      	strh	r3, [r7, #14]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	441a      	add	r2, r3
 80092b4:	89fb      	ldrh	r3, [r7, #14]
 80092b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	78db      	ldrb	r3, [r3, #3]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d06c      	beq.n	80093ac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092e8:	81bb      	strh	r3, [r7, #12]
 80092ea:	89bb      	ldrh	r3, [r7, #12]
 80092ec:	f083 0320 	eor.w	r3, r3, #32
 80092f0:	81bb      	strh	r3, [r7, #12]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	441a      	add	r2, r3
 80092fc:	89bb      	ldrh	r3, [r7, #12]
 80092fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800930a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800930e:	b29b      	uxth	r3, r3
 8009310:	8013      	strh	r3, [r2, #0]
 8009312:	e04b      	b.n	80093ac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	82fb      	strh	r3, [r7, #22]
 8009322:	8afb      	ldrh	r3, [r7, #22]
 8009324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d01b      	beq.n	8009364 <USB_EPClearStall+0x106>
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b29b      	uxth	r3, r3
 800933a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800933e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009342:	82bb      	strh	r3, [r7, #20]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	441a      	add	r2, r3
 800934e:	8abb      	ldrh	r3, [r7, #20]
 8009350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800935c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009360:	b29b      	uxth	r3, r3
 8009362:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800937a:	827b      	strh	r3, [r7, #18]
 800937c:	8a7b      	ldrh	r3, [r7, #18]
 800937e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009382:	827b      	strh	r3, [r7, #18]
 8009384:	8a7b      	ldrh	r3, [r7, #18]
 8009386:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800938a:	827b      	strh	r3, [r7, #18]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	441a      	add	r2, r3
 8009396:	8a7b      	ldrh	r3, [r7, #18]
 8009398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800939c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	371c      	adds	r7, #28
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	460b      	mov	r3, r1
 80093c4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80093c6:	78fb      	ldrb	r3, [r7, #3]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d103      	bne.n	80093d4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2280      	movs	r2, #128	; 0x80
 80093d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800941e:	b29b      	uxth	r3, r3
 8009420:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009424:	b29a      	uxth	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009448:	b29b      	uxth	r3, r3
 800944a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800944c:	68fb      	ldr	r3, [r7, #12]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800945a:	b480      	push	{r7}
 800945c:	b083      	sub	sp, #12
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	370c      	adds	r7, #12
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009472:	b480      	push	{r7}
 8009474:	b08b      	sub	sp, #44	; 0x2c
 8009476:	af00      	add	r7, sp, #0
 8009478:	60f8      	str	r0, [r7, #12]
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	4611      	mov	r1, r2
 800947e:	461a      	mov	r2, r3
 8009480:	460b      	mov	r3, r1
 8009482:	80fb      	strh	r3, [r7, #6]
 8009484:	4613      	mov	r3, r2
 8009486:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009488:	88bb      	ldrh	r3, [r7, #4]
 800948a:	3301      	adds	r3, #1
 800948c:	085b      	lsrs	r3, r3, #1
 800948e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009498:	88fa      	ldrh	r2, [r7, #6]
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094a2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	627b      	str	r3, [r7, #36]	; 0x24
 80094a8:	e01b      	b.n	80094e2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	3301      	adds	r3, #1
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	021b      	lsls	r3, r3, #8
 80094b8:	b21a      	sxth	r2, r3
 80094ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094be:	4313      	orrs	r3, r2
 80094c0:	b21b      	sxth	r3, r3
 80094c2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	8a7a      	ldrh	r2, [r7, #18]
 80094c8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80094ca:	6a3b      	ldr	r3, [r7, #32]
 80094cc:	3302      	adds	r3, #2
 80094ce:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	3301      	adds	r3, #1
 80094d4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	3301      	adds	r3, #1
 80094da:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	3b01      	subs	r3, #1
 80094e0:	627b      	str	r3, [r7, #36]	; 0x24
 80094e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e0      	bne.n	80094aa <USB_WritePMA+0x38>
  }
}
 80094e8:	bf00      	nop
 80094ea:	bf00      	nop
 80094ec:	372c      	adds	r7, #44	; 0x2c
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b08b      	sub	sp, #44	; 0x2c
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	4611      	mov	r1, r2
 8009502:	461a      	mov	r2, r3
 8009504:	460b      	mov	r3, r1
 8009506:	80fb      	strh	r3, [r7, #6]
 8009508:	4613      	mov	r3, r2
 800950a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800950c:	88bb      	ldrh	r3, [r7, #4]
 800950e:	085b      	lsrs	r3, r3, #1
 8009510:	b29b      	uxth	r3, r3
 8009512:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800951c:	88fa      	ldrh	r2, [r7, #6]
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	4413      	add	r3, r2
 8009522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009526:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
 800952c:	e018      	b.n	8009560 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	b29b      	uxth	r3, r3
 8009534:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	3302      	adds	r3, #2
 800953a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	b2da      	uxtb	r2, r3
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	3301      	adds	r3, #1
 8009548:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	0a1b      	lsrs	r3, r3, #8
 800954e:	b2da      	uxtb	r2, r3
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	3301      	adds	r3, #1
 8009558:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955c:	3b01      	subs	r3, #1
 800955e:	627b      	str	r3, [r7, #36]	; 0x24
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1e3      	bne.n	800952e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009566:	88bb      	ldrh	r3, [r7, #4]
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	b29b      	uxth	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d007      	beq.n	8009582 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	b29b      	uxth	r3, r3
 8009578:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	b2da      	uxtb	r2, r3
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	701a      	strb	r2, [r3, #0]
  }
}
 8009582:	bf00      	nop
 8009584:	372c      	adds	r7, #44	; 0x2c
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
	...

08009590 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800959c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80095a0:	f002 fd24 	bl	800bfec <USBD_static_malloc>
 80095a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d109      	bne.n	80095c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	32b0      	adds	r2, #176	; 0xb0
 80095b6:	2100      	movs	r1, #0
 80095b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80095bc:	2302      	movs	r3, #2
 80095be:	e0d4      	b.n	800976a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80095c0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80095c4:	2100      	movs	r1, #0
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f002 fd2e 	bl	800c028 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	32b0      	adds	r2, #176	; 0xb0
 80095d6:	68f9      	ldr	r1, [r7, #12]
 80095d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	32b0      	adds	r2, #176	; 0xb0
 80095e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	7c1b      	ldrb	r3, [r3, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d138      	bne.n	800966a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80095f8:	4b5e      	ldr	r3, [pc, #376]	; (8009774 <USBD_CDC_Init+0x1e4>)
 80095fa:	7819      	ldrb	r1, [r3, #0]
 80095fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009600:	2202      	movs	r2, #2
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f002 faf4 	bl	800bbf0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009608:	4b5a      	ldr	r3, [pc, #360]	; (8009774 <USBD_CDC_Init+0x1e4>)
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	f003 020f 	and.w	r2, r3, #15
 8009610:	6879      	ldr	r1, [r7, #4]
 8009612:	4613      	mov	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	440b      	add	r3, r1
 800961c:	3324      	adds	r3, #36	; 0x24
 800961e:	2201      	movs	r2, #1
 8009620:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009622:	4b55      	ldr	r3, [pc, #340]	; (8009778 <USBD_CDC_Init+0x1e8>)
 8009624:	7819      	ldrb	r1, [r3, #0]
 8009626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800962a:	2202      	movs	r2, #2
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f002 fadf 	bl	800bbf0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009632:	4b51      	ldr	r3, [pc, #324]	; (8009778 <USBD_CDC_Init+0x1e8>)
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	f003 020f 	and.w	r2, r3, #15
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	4613      	mov	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	440b      	add	r3, r1
 8009646:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800964a:	2201      	movs	r2, #1
 800964c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800964e:	4b4b      	ldr	r3, [pc, #300]	; (800977c <USBD_CDC_Init+0x1ec>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	f003 020f 	and.w	r2, r3, #15
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	4613      	mov	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	440b      	add	r3, r1
 8009662:	3326      	adds	r3, #38	; 0x26
 8009664:	2210      	movs	r2, #16
 8009666:	801a      	strh	r2, [r3, #0]
 8009668:	e035      	b.n	80096d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800966a:	4b42      	ldr	r3, [pc, #264]	; (8009774 <USBD_CDC_Init+0x1e4>)
 800966c:	7819      	ldrb	r1, [r3, #0]
 800966e:	2340      	movs	r3, #64	; 0x40
 8009670:	2202      	movs	r2, #2
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f002 fabc 	bl	800bbf0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009678:	4b3e      	ldr	r3, [pc, #248]	; (8009774 <USBD_CDC_Init+0x1e4>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	f003 020f 	and.w	r2, r3, #15
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	3324      	adds	r3, #36	; 0x24
 800968e:	2201      	movs	r2, #1
 8009690:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009692:	4b39      	ldr	r3, [pc, #228]	; (8009778 <USBD_CDC_Init+0x1e8>)
 8009694:	7819      	ldrb	r1, [r3, #0]
 8009696:	2340      	movs	r3, #64	; 0x40
 8009698:	2202      	movs	r2, #2
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f002 faa8 	bl	800bbf0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80096a0:	4b35      	ldr	r3, [pc, #212]	; (8009778 <USBD_CDC_Init+0x1e8>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	f003 020f 	and.w	r2, r3, #15
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	440b      	add	r3, r1
 80096b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80096b8:	2201      	movs	r2, #1
 80096ba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80096bc:	4b2f      	ldr	r3, [pc, #188]	; (800977c <USBD_CDC_Init+0x1ec>)
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	f003 020f 	and.w	r2, r3, #15
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	4613      	mov	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	440b      	add	r3, r1
 80096d0:	3326      	adds	r3, #38	; 0x26
 80096d2:	2210      	movs	r2, #16
 80096d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80096d6:	4b29      	ldr	r3, [pc, #164]	; (800977c <USBD_CDC_Init+0x1ec>)
 80096d8:	7819      	ldrb	r1, [r3, #0]
 80096da:	2308      	movs	r3, #8
 80096dc:	2203      	movs	r2, #3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f002 fa86 	bl	800bbf0 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80096e4:	4b25      	ldr	r3, [pc, #148]	; (800977c <USBD_CDC_Init+0x1ec>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	f003 020f 	and.w	r2, r3, #15
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	4613      	mov	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	440b      	add	r3, r1
 80096f8:	3324      	adds	r3, #36	; 0x24
 80096fa:	2201      	movs	r2, #1
 80096fc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	33b0      	adds	r3, #176	; 0xb0
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009734:	2302      	movs	r3, #2
 8009736:	e018      	b.n	800976a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	7c1b      	ldrb	r3, [r3, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10a      	bne.n	8009756 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009740:	4b0d      	ldr	r3, [pc, #52]	; (8009778 <USBD_CDC_Init+0x1e8>)
 8009742:	7819      	ldrb	r1, [r3, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800974a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f002 fbca 	bl	800bee8 <USBD_LL_PrepareReceive>
 8009754:	e008      	b.n	8009768 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009756:	4b08      	ldr	r3, [pc, #32]	; (8009778 <USBD_CDC_Init+0x1e8>)
 8009758:	7819      	ldrb	r1, [r3, #0]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009760:	2340      	movs	r3, #64	; 0x40
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f002 fbc0 	bl	800bee8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20000097 	.word	0x20000097
 8009778:	20000098 	.word	0x20000098
 800977c:	20000099 	.word	0x20000099

08009780 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800978c:	4b3a      	ldr	r3, [pc, #232]	; (8009878 <USBD_CDC_DeInit+0xf8>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f002 fa6a 	bl	800bc6c <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009798:	4b37      	ldr	r3, [pc, #220]	; (8009878 <USBD_CDC_DeInit+0xf8>)
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	f003 020f 	and.w	r2, r3, #15
 80097a0:	6879      	ldr	r1, [r7, #4]
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	440b      	add	r3, r1
 80097ac:	3324      	adds	r3, #36	; 0x24
 80097ae:	2200      	movs	r2, #0
 80097b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80097b2:	4b32      	ldr	r3, [pc, #200]	; (800987c <USBD_CDC_DeInit+0xfc>)
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	4619      	mov	r1, r3
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f002 fa57 	bl	800bc6c <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80097be:	4b2f      	ldr	r3, [pc, #188]	; (800987c <USBD_CDC_DeInit+0xfc>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	f003 020f 	and.w	r2, r3, #15
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	4613      	mov	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097d6:	2200      	movs	r2, #0
 80097d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80097da:	4b29      	ldr	r3, [pc, #164]	; (8009880 <USBD_CDC_DeInit+0x100>)
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f002 fa43 	bl	800bc6c <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80097e6:	4b26      	ldr	r3, [pc, #152]	; (8009880 <USBD_CDC_DeInit+0x100>)
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	f003 020f 	and.w	r2, r3, #15
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	4613      	mov	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	440b      	add	r3, r1
 80097fa:	3324      	adds	r3, #36	; 0x24
 80097fc:	2200      	movs	r2, #0
 80097fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009800:	4b1f      	ldr	r3, [pc, #124]	; (8009880 <USBD_CDC_DeInit+0x100>)
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	f003 020f 	and.w	r2, r3, #15
 8009808:	6879      	ldr	r1, [r7, #4]
 800980a:	4613      	mov	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	440b      	add	r3, r1
 8009814:	3326      	adds	r3, #38	; 0x26
 8009816:	2200      	movs	r2, #0
 8009818:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	32b0      	adds	r2, #176	; 0xb0
 8009824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d01f      	beq.n	800986c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	33b0      	adds	r3, #176	; 0xb0
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	32b0      	adds	r2, #176	; 0xb0
 800984a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984e:	4618      	mov	r0, r3
 8009850:	f002 fbda 	bl	800c008 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	32b0      	adds	r2, #176	; 0xb0
 800985e:	2100      	movs	r1, #0
 8009860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20000097 	.word	0x20000097
 800987c:	20000098 	.word	0x20000098
 8009880:	20000099 	.word	0x20000099

08009884 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	32b0      	adds	r2, #176	; 0xb0
 8009898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80098a2:	2300      	movs	r3, #0
 80098a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e0bf      	b.n	8009a34 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d050      	beq.n	8009962 <USBD_CDC_Setup+0xde>
 80098c0:	2b20      	cmp	r3, #32
 80098c2:	f040 80af 	bne.w	8009a24 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	88db      	ldrh	r3, [r3, #6]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d03a      	beq.n	8009944 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	b25b      	sxtb	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	da1b      	bge.n	8009910 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	33b0      	adds	r3, #176	; 0xb0
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80098ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	88d2      	ldrh	r2, [r2, #6]
 80098f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	88db      	ldrh	r3, [r3, #6]
 80098fa:	2b07      	cmp	r3, #7
 80098fc:	bf28      	it	cs
 80098fe:	2307      	movcs	r3, #7
 8009900:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	89fa      	ldrh	r2, [r7, #14]
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f001 fd21 	bl	800b350 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800990e:	e090      	b.n	8009a32 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	785a      	ldrb	r2, [r3, #1]
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	88db      	ldrh	r3, [r3, #6]
 800991e:	2b3f      	cmp	r3, #63	; 0x3f
 8009920:	d803      	bhi.n	800992a <USBD_CDC_Setup+0xa6>
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	88db      	ldrh	r3, [r3, #6]
 8009926:	b2da      	uxtb	r2, r3
 8009928:	e000      	b.n	800992c <USBD_CDC_Setup+0xa8>
 800992a:	2240      	movs	r2, #64	; 0x40
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009932:	6939      	ldr	r1, [r7, #16]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800993a:	461a      	mov	r2, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 fd33 	bl	800b3a8 <USBD_CtlPrepareRx>
      break;
 8009942:	e076      	b.n	8009a32 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	33b0      	adds	r3, #176	; 0xb0
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	7850      	ldrb	r0, [r2, #1]
 800995a:	2200      	movs	r2, #0
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	4798      	blx	r3
      break;
 8009960:	e067      	b.n	8009a32 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	785b      	ldrb	r3, [r3, #1]
 8009966:	2b0b      	cmp	r3, #11
 8009968:	d851      	bhi.n	8009a0e <USBD_CDC_Setup+0x18a>
 800996a:	a201      	add	r2, pc, #4	; (adr r2, 8009970 <USBD_CDC_Setup+0xec>)
 800996c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009970:	080099a1 	.word	0x080099a1
 8009974:	08009a1d 	.word	0x08009a1d
 8009978:	08009a0f 	.word	0x08009a0f
 800997c:	08009a0f 	.word	0x08009a0f
 8009980:	08009a0f 	.word	0x08009a0f
 8009984:	08009a0f 	.word	0x08009a0f
 8009988:	08009a0f 	.word	0x08009a0f
 800998c:	08009a0f 	.word	0x08009a0f
 8009990:	08009a0f 	.word	0x08009a0f
 8009994:	08009a0f 	.word	0x08009a0f
 8009998:	080099cb 	.word	0x080099cb
 800999c:	080099f5 	.word	0x080099f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b03      	cmp	r3, #3
 80099aa:	d107      	bne.n	80099bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099ac:	f107 030a 	add.w	r3, r7, #10
 80099b0:	2202      	movs	r2, #2
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f001 fccb 	bl	800b350 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099ba:	e032      	b.n	8009a22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f001 fc55 	bl	800b26e <USBD_CtlError>
            ret = USBD_FAIL;
 80099c4:	2303      	movs	r3, #3
 80099c6:	75fb      	strb	r3, [r7, #23]
          break;
 80099c8:	e02b      	b.n	8009a22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d107      	bne.n	80099e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80099d6:	f107 030d 	add.w	r3, r7, #13
 80099da:	2201      	movs	r2, #1
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 fcb6 	bl	800b350 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099e4:	e01d      	b.n	8009a22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f001 fc40 	bl	800b26e <USBD_CtlError>
            ret = USBD_FAIL;
 80099ee:	2303      	movs	r3, #3
 80099f0:	75fb      	strb	r3, [r7, #23]
          break;
 80099f2:	e016      	b.n	8009a22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d00f      	beq.n	8009a20 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f001 fc33 	bl	800b26e <USBD_CtlError>
            ret = USBD_FAIL;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009a0c:	e008      	b.n	8009a20 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f001 fc2c 	bl	800b26e <USBD_CtlError>
          ret = USBD_FAIL;
 8009a16:	2303      	movs	r3, #3
 8009a18:	75fb      	strb	r3, [r7, #23]
          break;
 8009a1a:	e002      	b.n	8009a22 <USBD_CDC_Setup+0x19e>
          break;
 8009a1c:	bf00      	nop
 8009a1e:	e008      	b.n	8009a32 <USBD_CDC_Setup+0x1ae>
          break;
 8009a20:	bf00      	nop
      }
      break;
 8009a22:	e006      	b.n	8009a32 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f001 fc21 	bl	800b26e <USBD_CtlError>
      ret = USBD_FAIL;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a30:	bf00      	nop
  }

  return (uint8_t)ret;
 8009a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3718      	adds	r7, #24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	460b      	mov	r3, r1
 8009a46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	32b0      	adds	r2, #176	; 0xb0
 8009a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e065      	b.n	8009b32 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	32b0      	adds	r2, #176	; 0xb0
 8009a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	f003 020f 	and.w	r2, r3, #15
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	440b      	add	r3, r1
 8009a88:	3318      	adds	r3, #24
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d02f      	beq.n	8009af0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	f003 020f 	and.w	r2, r3, #15
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	440b      	add	r3, r1
 8009aa2:	3318      	adds	r3, #24
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	78fb      	ldrb	r3, [r7, #3]
 8009aa8:	f003 010f 	and.w	r1, r3, #15
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	440b      	add	r3, r1
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	4403      	add	r3, r0
 8009ab8:	3338      	adds	r3, #56	; 0x38
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	fbb2 f1f3 	udiv	r1, r2, r3
 8009ac0:	fb01 f303 	mul.w	r3, r1, r3
 8009ac4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d112      	bne.n	8009af0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009aca:	78fb      	ldrb	r3, [r7, #3]
 8009acc:	f003 020f 	and.w	r2, r3, #15
 8009ad0:	6879      	ldr	r1, [r7, #4]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	440b      	add	r3, r1
 8009adc:	3318      	adds	r3, #24
 8009ade:	2200      	movs	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009ae2:	78f9      	ldrb	r1, [r7, #3]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f002 f9c5 	bl	800be78 <USBD_LL_Transmit>
 8009aee:	e01f      	b.n	8009b30 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	33b0      	adds	r3, #176	; 0xb0
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d010      	beq.n	8009b30 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	33b0      	adds	r3, #176	; 0xb0
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4413      	add	r3, r2
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009b2c:	78fa      	ldrb	r2, [r7, #3]
 8009b2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	460b      	mov	r3, r1
 8009b44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	32b0      	adds	r2, #176	; 0xb0
 8009b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	32b0      	adds	r2, #176	; 0xb0
 8009b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e01a      	b.n	8009ba2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b6c:	78fb      	ldrb	r3, [r7, #3]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f002 f9f1 	bl	800bf58 <USBD_LL_GetRxDataSize>
 8009b76:	4602      	mov	r2, r0
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	33b0      	adds	r3, #176	; 0xb0
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	32b0      	adds	r2, #176	; 0xb0
 8009bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e025      	b.n	8009c18 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	33b0      	adds	r3, #176	; 0xb0
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01a      	beq.n	8009c16 <USBD_CDC_EP0_RxReady+0x6c>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009be6:	2bff      	cmp	r3, #255	; 0xff
 8009be8:	d015      	beq.n	8009c16 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	33b0      	adds	r3, #176	; 0xb0
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009c02:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c0a:	b292      	uxth	r2, r2
 8009c0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	22ff      	movs	r2, #255	; 0xff
 8009c12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c28:	2182      	movs	r1, #130	; 0x82
 8009c2a:	4818      	ldr	r0, [pc, #96]	; (8009c8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c2c:	f000 fcbd 	bl	800a5aa <USBD_GetEpDesc>
 8009c30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c32:	2101      	movs	r1, #1
 8009c34:	4815      	ldr	r0, [pc, #84]	; (8009c8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c36:	f000 fcb8 	bl	800a5aa <USBD_GetEpDesc>
 8009c3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c3c:	2181      	movs	r1, #129	; 0x81
 8009c3e:	4813      	ldr	r0, [pc, #76]	; (8009c8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c40:	f000 fcb3 	bl	800a5aa <USBD_GetEpDesc>
 8009c44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2210      	movs	r2, #16
 8009c50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d006      	beq.n	8009c66 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c60:	711a      	strb	r2, [r3, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d006      	beq.n	8009c7a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c74:	711a      	strb	r2, [r3, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2243      	movs	r2, #67	; 0x43
 8009c7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c80:	4b02      	ldr	r3, [pc, #8]	; (8009c8c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20000054 	.word	0x20000054

08009c90 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c98:	2182      	movs	r1, #130	; 0x82
 8009c9a:	4818      	ldr	r0, [pc, #96]	; (8009cfc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009c9c:	f000 fc85 	bl	800a5aa <USBD_GetEpDesc>
 8009ca0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	4815      	ldr	r0, [pc, #84]	; (8009cfc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ca6:	f000 fc80 	bl	800a5aa <USBD_GetEpDesc>
 8009caa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009cac:	2181      	movs	r1, #129	; 0x81
 8009cae:	4813      	ldr	r0, [pc, #76]	; (8009cfc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cb0:	f000 fc7b 	bl	800a5aa <USBD_GetEpDesc>
 8009cb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	2210      	movs	r2, #16
 8009cc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d006      	beq.n	8009cd6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	711a      	strb	r2, [r3, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f042 0202 	orr.w	r2, r2, #2
 8009cd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d006      	beq.n	8009cea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	711a      	strb	r2, [r3, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f042 0202 	orr.w	r2, r2, #2
 8009ce8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2243      	movs	r2, #67	; 0x43
 8009cee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009cf0:	4b02      	ldr	r3, [pc, #8]	; (8009cfc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3718      	adds	r7, #24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	20000054 	.word	0x20000054

08009d00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d08:	2182      	movs	r1, #130	; 0x82
 8009d0a:	4818      	ldr	r0, [pc, #96]	; (8009d6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d0c:	f000 fc4d 	bl	800a5aa <USBD_GetEpDesc>
 8009d10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d12:	2101      	movs	r1, #1
 8009d14:	4815      	ldr	r0, [pc, #84]	; (8009d6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d16:	f000 fc48 	bl	800a5aa <USBD_GetEpDesc>
 8009d1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d1c:	2181      	movs	r1, #129	; 0x81
 8009d1e:	4813      	ldr	r0, [pc, #76]	; (8009d6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d20:	f000 fc43 	bl	800a5aa <USBD_GetEpDesc>
 8009d24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2210      	movs	r2, #16
 8009d30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d006      	beq.n	8009d46 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d40:	711a      	strb	r2, [r3, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d006      	beq.n	8009d5a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d54:	711a      	strb	r2, [r3, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2243      	movs	r2, #67	; 0x43
 8009d5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d60:	4b02      	ldr	r3, [pc, #8]	; (8009d6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20000054 	.word	0x20000054

08009d70 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	220a      	movs	r2, #10
 8009d7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009d7e:	4b03      	ldr	r3, [pc, #12]	; (8009d8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	20000010 	.word	0x20000010

08009d90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e009      	b.n	8009db8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	33b0      	adds	r3, #176	; 0xb0
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	32b0      	adds	r2, #176	; 0xb0
 8009dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dde:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d101      	bne.n	8009dea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e008      	b.n	8009dfc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	371c      	adds	r7, #28
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	32b0      	adds	r2, #176	; 0xb0
 8009e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d101      	bne.n	8009e2c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e004      	b.n	8009e36 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
	...

08009e44 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	32b0      	adds	r2, #176	; 0xb0
 8009e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e025      	b.n	8009eb6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d11f      	bne.n	8009eb4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009e7c:	4b10      	ldr	r3, [pc, #64]	; (8009ec0 <USBD_CDC_TransmitPacket+0x7c>)
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	f003 020f 	and.w	r2, r3, #15
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4403      	add	r3, r0
 8009e96:	3318      	adds	r3, #24
 8009e98:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009e9a:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <USBD_CDC_TransmitPacket+0x7c>)
 8009e9c:	7819      	ldrb	r1, [r3, #0]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 ffe4 	bl	800be78 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20000097 	.word	0x20000097

08009ec4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	32b0      	adds	r2, #176	; 0xb0
 8009ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eda:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	32b0      	adds	r2, #176	; 0xb0
 8009ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009eee:	2303      	movs	r3, #3
 8009ef0:	e018      	b.n	8009f24 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	7c1b      	ldrb	r3, [r3, #16]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009efa:	4b0c      	ldr	r3, [pc, #48]	; (8009f2c <USBD_CDC_ReceivePacket+0x68>)
 8009efc:	7819      	ldrb	r1, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 ffed 	bl	800bee8 <USBD_LL_PrepareReceive>
 8009f0e:	e008      	b.n	8009f22 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f10:	4b06      	ldr	r3, [pc, #24]	; (8009f2c <USBD_CDC_ReceivePacket+0x68>)
 8009f12:	7819      	ldrb	r1, [r3, #0]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f1a:	2340      	movs	r3, #64	; 0x40
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f001 ffe3 	bl	800bee8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	20000098 	.word	0x20000098

08009f30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d101      	bne.n	8009f48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e01f      	b.n	8009f88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d003      	beq.n	8009f6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	79fa      	ldrb	r2, [r7, #7]
 8009f7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f001 fda3 	bl	800bac8 <USBD_LL_Init>
 8009f82:	4603      	mov	r3, r0
 8009f84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d101      	bne.n	8009fa8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e025      	b.n	8009ff4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	32ae      	adds	r2, #174	; 0xae
 8009fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00f      	beq.n	8009fe4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	32ae      	adds	r2, #174	; 0xae
 8009fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	f107 020e 	add.w	r2, r7, #14
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4798      	blx	r3
 8009fdc:	4602      	mov	r2, r0
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f001 fdc1 	bl	800bb8c <USBD_LL_Start>
 800a00a:	4603      	mov	r3, r0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a01c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a01e:	4618      	mov	r0, r3
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	460b      	mov	r3, r1
 800a034:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a040:	2b00      	cmp	r3, #0
 800a042:	d009      	beq.n	800a058 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	78fa      	ldrb	r2, [r7, #3]
 800a04e:	4611      	mov	r1, r2
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	4798      	blx	r3
 800a054:	4603      	mov	r3, r0
 800a056:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a058:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b084      	sub	sp, #16
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	460b      	mov	r3, r1
 800a06c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	78fa      	ldrb	r2, [r7, #3]
 800a07c:	4611      	mov	r1, r2
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	4798      	blx	r3
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a088:	2303      	movs	r3, #3
 800a08a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b084      	sub	sp, #16
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f001 f8a6 	bl	800b1fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a0bc:	461a      	mov	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0ca:	f003 031f 	and.w	r3, r3, #31
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d01a      	beq.n	800a108 <USBD_LL_SetupStage+0x72>
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d822      	bhi.n	800a11c <USBD_LL_SetupStage+0x86>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <USBD_LL_SetupStage+0x4a>
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d00a      	beq.n	800a0f4 <USBD_LL_SetupStage+0x5e>
 800a0de:	e01d      	b.n	800a11c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fad3 	bl	800a694 <USBD_StdDevReq>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f2:	e020      	b.n	800a136 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fb3b 	bl	800a778 <USBD_StdItfReq>
 800a102:	4603      	mov	r3, r0
 800a104:	73fb      	strb	r3, [r7, #15]
      break;
 800a106:	e016      	b.n	800a136 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fb9d 	bl	800a850 <USBD_StdEPReq>
 800a116:	4603      	mov	r3, r0
 800a118:	73fb      	strb	r3, [r7, #15]
      break;
 800a11a:	e00c      	b.n	800a136 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a122:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a126:	b2db      	uxtb	r3, r3
 800a128:	4619      	mov	r1, r3
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f001 fdd4 	bl	800bcd8 <USBD_LL_StallEP>
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]
      break;
 800a134:	bf00      	nop
  }

  return ret;
 800a136:	7bfb      	ldrb	r3, [r7, #15]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	460b      	mov	r3, r1
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a152:	7afb      	ldrb	r3, [r7, #11]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d16e      	bne.n	800a236 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a15e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a166:	2b03      	cmp	r3, #3
 800a168:	f040 8098 	bne.w	800a29c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	429a      	cmp	r2, r3
 800a176:	d913      	bls.n	800a1a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	689a      	ldr	r2, [r3, #8]
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	1ad2      	subs	r2, r2, r3
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	68da      	ldr	r2, [r3, #12]
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	4293      	cmp	r3, r2
 800a190:	bf28      	it	cs
 800a192:	4613      	movcs	r3, r2
 800a194:	461a      	mov	r2, r3
 800a196:	6879      	ldr	r1, [r7, #4]
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f001 f922 	bl	800b3e2 <USBD_CtlContinueRx>
 800a19e:	e07d      	b.n	800a29c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1a6:	f003 031f 	and.w	r3, r3, #31
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d014      	beq.n	800a1d8 <USBD_LL_DataOutStage+0x98>
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d81d      	bhi.n	800a1ee <USBD_LL_DataOutStage+0xae>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d002      	beq.n	800a1bc <USBD_LL_DataOutStage+0x7c>
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d003      	beq.n	800a1c2 <USBD_LL_DataOutStage+0x82>
 800a1ba:	e018      	b.n	800a1ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	75bb      	strb	r3, [r7, #22]
            break;
 800a1c0:	e018      	b.n	800a1f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 f9d2 	bl	800a576 <USBD_CoreFindIF>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	75bb      	strb	r3, [r7, #22]
            break;
 800a1d6:	e00d      	b.n	800a1f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 f9d4 	bl	800a590 <USBD_CoreFindEP>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	75bb      	strb	r3, [r7, #22]
            break;
 800a1ec:	e002      	b.n	800a1f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	75bb      	strb	r3, [r7, #22]
            break;
 800a1f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a1f4:	7dbb      	ldrb	r3, [r7, #22]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d119      	bne.n	800a22e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b03      	cmp	r3, #3
 800a204:	d113      	bne.n	800a22e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a206:	7dba      	ldrb	r2, [r7, #22]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	32ae      	adds	r2, #174	; 0xae
 800a20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00b      	beq.n	800a22e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a216:	7dba      	ldrb	r2, [r7, #22]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a21e:	7dba      	ldrb	r2, [r7, #22]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	32ae      	adds	r2, #174	; 0xae
 800a224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f001 f8e8 	bl	800b404 <USBD_CtlSendStatus>
 800a234:	e032      	b.n	800a29c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a236:	7afb      	ldrb	r3, [r7, #11]
 800a238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	4619      	mov	r1, r3
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 f9a5 	bl	800a590 <USBD_CoreFindEP>
 800a246:	4603      	mov	r3, r0
 800a248:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a24a:	7dbb      	ldrb	r3, [r7, #22]
 800a24c:	2bff      	cmp	r3, #255	; 0xff
 800a24e:	d025      	beq.n	800a29c <USBD_LL_DataOutStage+0x15c>
 800a250:	7dbb      	ldrb	r3, [r7, #22]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d122      	bne.n	800a29c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d117      	bne.n	800a292 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a262:	7dba      	ldrb	r2, [r7, #22]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	32ae      	adds	r2, #174	; 0xae
 800a268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00f      	beq.n	800a292 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a272:	7dba      	ldrb	r2, [r7, #22]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a27a:	7dba      	ldrb	r2, [r7, #22]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	32ae      	adds	r2, #174	; 0xae
 800a280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	7afa      	ldrb	r2, [r7, #11]
 800a288:	4611      	mov	r1, r2
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	4798      	blx	r3
 800a28e:	4603      	mov	r3, r0
 800a290:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a292:	7dfb      	ldrb	r3, [r7, #23]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a298:	7dfb      	ldrb	r3, [r7, #23]
 800a29a:	e000      	b.n	800a29e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b086      	sub	sp, #24
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	60f8      	str	r0, [r7, #12]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	607a      	str	r2, [r7, #4]
 800a2b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a2b4:	7afb      	ldrb	r3, [r7, #11]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d16f      	bne.n	800a39a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3314      	adds	r3, #20
 800a2be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d15a      	bne.n	800a380 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	689a      	ldr	r2, [r3, #8]
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d914      	bls.n	800a300 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	689a      	ldr	r2, [r3, #8]
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	1ad2      	subs	r2, r2, r3
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	6879      	ldr	r1, [r7, #4]
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f001 f84a 	bl	800b386 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f001 fdf5 	bl	800bee8 <USBD_LL_PrepareReceive>
 800a2fe:	e03f      	b.n	800a380 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	68da      	ldr	r2, [r3, #12]
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d11c      	bne.n	800a346 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a314:	429a      	cmp	r2, r3
 800a316:	d316      	bcc.n	800a346 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a322:	429a      	cmp	r2, r3
 800a324:	d20f      	bcs.n	800a346 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a326:	2200      	movs	r2, #0
 800a328:	2100      	movs	r1, #0
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f001 f82b 	bl	800b386 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a338:	2300      	movs	r3, #0
 800a33a:	2200      	movs	r2, #0
 800a33c:	2100      	movs	r1, #0
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f001 fdd2 	bl	800bee8 <USBD_LL_PrepareReceive>
 800a344:	e01c      	b.n	800a380 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d10f      	bne.n	800a372 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d009      	beq.n	800a372 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a372:	2180      	movs	r1, #128	; 0x80
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f001 fcaf 	bl	800bcd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f001 f855 	bl	800b42a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d03a      	beq.n	800a400 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f7ff fe42 	bl	800a014 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a398:	e032      	b.n	800a400 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a39a:	7afb      	ldrb	r3, [r7, #11]
 800a39c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f8f3 	bl	800a590 <USBD_CoreFindEP>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
 800a3b0:	2bff      	cmp	r3, #255	; 0xff
 800a3b2:	d025      	beq.n	800a400 <USBD_LL_DataInStage+0x15a>
 800a3b4:	7dfb      	ldrb	r3, [r7, #23]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d122      	bne.n	800a400 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d11c      	bne.n	800a400 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a3c6:	7dfa      	ldrb	r2, [r7, #23]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	32ae      	adds	r2, #174	; 0xae
 800a3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d014      	beq.n	800a400 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a3d6:	7dfa      	ldrb	r2, [r7, #23]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a3de:	7dfa      	ldrb	r2, [r7, #23]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	32ae      	adds	r2, #174	; 0xae
 800a3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	7afa      	ldrb	r2, [r7, #11]
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	4798      	blx	r3
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a3f6:	7dbb      	ldrb	r3, [r7, #22]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a3fc:	7dbb      	ldrb	r3, [r7, #22]
 800a3fe:	e000      	b.n	800a402 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b084      	sub	sp, #16
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a442:	2b00      	cmp	r3, #0
 800a444:	d014      	beq.n	800a470 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00e      	beq.n	800a470 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	6852      	ldr	r2, [r2, #4]
 800a45e:	b2d2      	uxtb	r2, r2
 800a460:	4611      	mov	r1, r2
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	4798      	blx	r3
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a46c:	2303      	movs	r3, #3
 800a46e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a470:	2340      	movs	r3, #64	; 0x40
 800a472:	2200      	movs	r2, #0
 800a474:	2100      	movs	r1, #0
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f001 fbba 	bl	800bbf0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2240      	movs	r2, #64	; 0x40
 800a488:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a48c:	2340      	movs	r3, #64	; 0x40
 800a48e:	2200      	movs	r2, #0
 800a490:	2180      	movs	r1, #128	; 0x80
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f001 fbac 	bl	800bbf0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2240      	movs	r2, #64	; 0x40
 800a4a2:	621a      	str	r2, [r3, #32]

  return ret;
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b083      	sub	sp, #12
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	78fa      	ldrb	r2, [r7, #3]
 800a4be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b04      	cmp	r3, #4
 800a4e0:	d006      	beq.n	800a4f0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2204      	movs	r2, #4
 800a4f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a506:	b480      	push	{r7}
 800a508:	b083      	sub	sp, #12
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b04      	cmp	r3, #4
 800a518:	d106      	bne.n	800a528 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a520:	b2da      	uxtb	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b03      	cmp	r3, #3
 800a548:	d110      	bne.n	800a56c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00b      	beq.n	800a56c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d005      	beq.n	800a56c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a566:	69db      	ldr	r3, [r3, #28]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a576:	b480      	push	{r7}
 800a578:	b083      	sub	sp, #12
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	460b      	mov	r3, r1
 800a580:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a582:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	460b      	mov	r3, r1
 800a59a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a59c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b086      	sub	sp, #24
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	885b      	ldrh	r3, [r3, #2]
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d920      	bls.n	800a614 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a5da:	e013      	b.n	800a604 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a5dc:	f107 030a 	add.w	r3, r7, #10
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6978      	ldr	r0, [r7, #20]
 800a5e4:	f000 f81b 	bl	800a61e <USBD_GetNextDesc>
 800a5e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	785b      	ldrb	r3, [r3, #1]
 800a5ee:	2b05      	cmp	r3, #5
 800a5f0:	d108      	bne.n	800a604 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	789b      	ldrb	r3, [r3, #2]
 800a5fa:	78fa      	ldrb	r2, [r7, #3]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d008      	beq.n	800a612 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a600:	2300      	movs	r3, #0
 800a602:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	885b      	ldrh	r3, [r3, #2]
 800a608:	b29a      	uxth	r2, r3
 800a60a:	897b      	ldrh	r3, [r7, #10]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d8e5      	bhi.n	800a5dc <USBD_GetEpDesc+0x32>
 800a610:	e000      	b.n	800a614 <USBD_GetEpDesc+0x6a>
          break;
 800a612:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a614:	693b      	ldr	r3, [r7, #16]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a61e:	b480      	push	{r7}
 800a620:	b085      	sub	sp, #20
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	881a      	ldrh	r2, [r3, #0]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	b29b      	uxth	r3, r3
 800a636:	4413      	add	r3, r2
 800a638:	b29a      	uxth	r2, r3
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	461a      	mov	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4413      	add	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a64a:	68fb      	ldr	r3, [r7, #12]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a658:	b480      	push	{r7}
 800a65a:	b087      	sub	sp, #28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	3301      	adds	r3, #1
 800a66e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a676:	8a3b      	ldrh	r3, [r7, #16]
 800a678:	021b      	lsls	r3, r3, #8
 800a67a:	b21a      	sxth	r2, r3
 800a67c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a680:	4313      	orrs	r3, r2
 800a682:	b21b      	sxth	r3, r3
 800a684:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a686:	89fb      	ldrh	r3, [r7, #14]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	371c      	adds	r7, #28
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6aa:	2b40      	cmp	r3, #64	; 0x40
 800a6ac:	d005      	beq.n	800a6ba <USBD_StdDevReq+0x26>
 800a6ae:	2b40      	cmp	r3, #64	; 0x40
 800a6b0:	d857      	bhi.n	800a762 <USBD_StdDevReq+0xce>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00f      	beq.n	800a6d6 <USBD_StdDevReq+0x42>
 800a6b6:	2b20      	cmp	r3, #32
 800a6b8:	d153      	bne.n	800a762 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	32ae      	adds	r2, #174	; 0xae
 800a6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	4798      	blx	r3
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d4:	e04a      	b.n	800a76c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	785b      	ldrb	r3, [r3, #1]
 800a6da:	2b09      	cmp	r3, #9
 800a6dc:	d83b      	bhi.n	800a756 <USBD_StdDevReq+0xc2>
 800a6de:	a201      	add	r2, pc, #4	; (adr r2, 800a6e4 <USBD_StdDevReq+0x50>)
 800a6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e4:	0800a739 	.word	0x0800a739
 800a6e8:	0800a74d 	.word	0x0800a74d
 800a6ec:	0800a757 	.word	0x0800a757
 800a6f0:	0800a743 	.word	0x0800a743
 800a6f4:	0800a757 	.word	0x0800a757
 800a6f8:	0800a717 	.word	0x0800a717
 800a6fc:	0800a70d 	.word	0x0800a70d
 800a700:	0800a757 	.word	0x0800a757
 800a704:	0800a72f 	.word	0x0800a72f
 800a708:	0800a721 	.word	0x0800a721
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fa3c 	bl	800ab8c <USBD_GetDescriptor>
          break;
 800a714:	e024      	b.n	800a760 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fbcb 	bl	800aeb4 <USBD_SetAddress>
          break;
 800a71e:	e01f      	b.n	800a760 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fc0a 	bl	800af3c <USBD_SetConfig>
 800a728:	4603      	mov	r3, r0
 800a72a:	73fb      	strb	r3, [r7, #15]
          break;
 800a72c:	e018      	b.n	800a760 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fcad 	bl	800b090 <USBD_GetConfig>
          break;
 800a736:	e013      	b.n	800a760 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fcde 	bl	800b0fc <USBD_GetStatus>
          break;
 800a740:	e00e      	b.n	800a760 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fd0d 	bl	800b164 <USBD_SetFeature>
          break;
 800a74a:	e009      	b.n	800a760 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fd31 	bl	800b1b6 <USBD_ClrFeature>
          break;
 800a754:	e004      	b.n	800a760 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 fd88 	bl	800b26e <USBD_CtlError>
          break;
 800a75e:	bf00      	nop
      }
      break;
 800a760:	e004      	b.n	800a76c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fd82 	bl	800b26e <USBD_CtlError>
      break;
 800a76a:	bf00      	nop
  }

  return ret;
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop

0800a778 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a78e:	2b40      	cmp	r3, #64	; 0x40
 800a790:	d005      	beq.n	800a79e <USBD_StdItfReq+0x26>
 800a792:	2b40      	cmp	r3, #64	; 0x40
 800a794:	d852      	bhi.n	800a83c <USBD_StdItfReq+0xc4>
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <USBD_StdItfReq+0x26>
 800a79a:	2b20      	cmp	r3, #32
 800a79c:	d14e      	bne.n	800a83c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	d840      	bhi.n	800a82e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	889b      	ldrh	r3, [r3, #4]
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d836      	bhi.n	800a824 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	889b      	ldrh	r3, [r3, #4]
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	4619      	mov	r1, r3
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7ff fed9 	bl	800a576 <USBD_CoreFindIF>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ca:	2bff      	cmp	r3, #255	; 0xff
 800a7cc:	d01d      	beq.n	800a80a <USBD_StdItfReq+0x92>
 800a7ce:	7bbb      	ldrb	r3, [r7, #14]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d11a      	bne.n	800a80a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a7d4:	7bba      	ldrb	r2, [r7, #14]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	32ae      	adds	r2, #174	; 0xae
 800a7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00f      	beq.n	800a804 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a7e4:	7bba      	ldrb	r2, [r7, #14]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a7ec:	7bba      	ldrb	r2, [r7, #14]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	32ae      	adds	r2, #174	; 0xae
 800a7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
 800a7fe:	4603      	mov	r3, r0
 800a800:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a802:	e004      	b.n	800a80e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a804:	2303      	movs	r3, #3
 800a806:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a808:	e001      	b.n	800a80e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a80a:	2303      	movs	r3, #3
 800a80c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	88db      	ldrh	r3, [r3, #6]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d110      	bne.n	800a838 <USBD_StdItfReq+0xc0>
 800a816:	7bfb      	ldrb	r3, [r7, #15]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10d      	bne.n	800a838 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fdf1 	bl	800b404 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a822:	e009      	b.n	800a838 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fd21 	bl	800b26e <USBD_CtlError>
          break;
 800a82c:	e004      	b.n	800a838 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fd1c 	bl	800b26e <USBD_CtlError>
          break;
 800a836:	e000      	b.n	800a83a <USBD_StdItfReq+0xc2>
          break;
 800a838:	bf00      	nop
      }
      break;
 800a83a:	e004      	b.n	800a846 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fd15 	bl	800b26e <USBD_CtlError>
      break;
 800a844:	bf00      	nop
  }

  return ret;
 800a846:	7bfb      	ldrb	r3, [r7, #15]
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	889b      	ldrh	r3, [r3, #4]
 800a862:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a86c:	2b40      	cmp	r3, #64	; 0x40
 800a86e:	d007      	beq.n	800a880 <USBD_StdEPReq+0x30>
 800a870:	2b40      	cmp	r3, #64	; 0x40
 800a872:	f200 817f 	bhi.w	800ab74 <USBD_StdEPReq+0x324>
 800a876:	2b00      	cmp	r3, #0
 800a878:	d02a      	beq.n	800a8d0 <USBD_StdEPReq+0x80>
 800a87a:	2b20      	cmp	r3, #32
 800a87c:	f040 817a 	bne.w	800ab74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	4619      	mov	r1, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff fe83 	bl	800a590 <USBD_CoreFindEP>
 800a88a:	4603      	mov	r3, r0
 800a88c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a88e:	7b7b      	ldrb	r3, [r7, #13]
 800a890:	2bff      	cmp	r3, #255	; 0xff
 800a892:	f000 8174 	beq.w	800ab7e <USBD_StdEPReq+0x32e>
 800a896:	7b7b      	ldrb	r3, [r7, #13]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f040 8170 	bne.w	800ab7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a89e:	7b7a      	ldrb	r2, [r7, #13]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a8a6:	7b7a      	ldrb	r2, [r7, #13]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	32ae      	adds	r2, #174	; 0xae
 800a8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 8163 	beq.w	800ab7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a8b8:	7b7a      	ldrb	r2, [r7, #13]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	32ae      	adds	r2, #174	; 0xae
 800a8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	6839      	ldr	r1, [r7, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	4798      	blx	r3
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a8ce:	e156      	b.n	800ab7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	785b      	ldrb	r3, [r3, #1]
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d008      	beq.n	800a8ea <USBD_StdEPReq+0x9a>
 800a8d8:	2b03      	cmp	r3, #3
 800a8da:	f300 8145 	bgt.w	800ab68 <USBD_StdEPReq+0x318>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f000 809b 	beq.w	800aa1a <USBD_StdEPReq+0x1ca>
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d03c      	beq.n	800a962 <USBD_StdEPReq+0x112>
 800a8e8:	e13e      	b.n	800ab68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d002      	beq.n	800a8fc <USBD_StdEPReq+0xac>
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d016      	beq.n	800a928 <USBD_StdEPReq+0xd8>
 800a8fa:	e02c      	b.n	800a956 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00d      	beq.n	800a91e <USBD_StdEPReq+0xce>
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	2b80      	cmp	r3, #128	; 0x80
 800a906:	d00a      	beq.n	800a91e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a908:	7bbb      	ldrb	r3, [r7, #14]
 800a90a:	4619      	mov	r1, r3
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f001 f9e3 	bl	800bcd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a912:	2180      	movs	r1, #128	; 0x80
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f001 f9df 	bl	800bcd8 <USBD_LL_StallEP>
 800a91a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a91c:	e020      	b.n	800a960 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fca4 	bl	800b26e <USBD_CtlError>
              break;
 800a926:	e01b      	b.n	800a960 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	885b      	ldrh	r3, [r3, #2]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10e      	bne.n	800a94e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a930:	7bbb      	ldrb	r3, [r7, #14]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00b      	beq.n	800a94e <USBD_StdEPReq+0xfe>
 800a936:	7bbb      	ldrb	r3, [r7, #14]
 800a938:	2b80      	cmp	r3, #128	; 0x80
 800a93a:	d008      	beq.n	800a94e <USBD_StdEPReq+0xfe>
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	88db      	ldrh	r3, [r3, #6]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d104      	bne.n	800a94e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a944:	7bbb      	ldrb	r3, [r7, #14]
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 f9c5 	bl	800bcd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fd58 	bl	800b404 <USBD_CtlSendStatus>

              break;
 800a954:	e004      	b.n	800a960 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fc88 	bl	800b26e <USBD_CtlError>
              break;
 800a95e:	bf00      	nop
          }
          break;
 800a960:	e107      	b.n	800ab72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b02      	cmp	r3, #2
 800a96c:	d002      	beq.n	800a974 <USBD_StdEPReq+0x124>
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d016      	beq.n	800a9a0 <USBD_StdEPReq+0x150>
 800a972:	e04b      	b.n	800aa0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00d      	beq.n	800a996 <USBD_StdEPReq+0x146>
 800a97a:	7bbb      	ldrb	r3, [r7, #14]
 800a97c:	2b80      	cmp	r3, #128	; 0x80
 800a97e:	d00a      	beq.n	800a996 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f001 f9a7 	bl	800bcd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a98a:	2180      	movs	r1, #128	; 0x80
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 f9a3 	bl	800bcd8 <USBD_LL_StallEP>
 800a992:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a994:	e040      	b.n	800aa18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a996:	6839      	ldr	r1, [r7, #0]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 fc68 	bl	800b26e <USBD_CtlError>
              break;
 800a99e:	e03b      	b.n	800aa18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	885b      	ldrh	r3, [r3, #2]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d136      	bne.n	800aa16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d004      	beq.n	800a9bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f001 f9c4 	bl	800bd44 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fd21 	bl	800b404 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9c2:	7bbb      	ldrb	r3, [r7, #14]
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7ff fde2 	bl	800a590 <USBD_CoreFindEP>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9d0:	7b7b      	ldrb	r3, [r7, #13]
 800a9d2:	2bff      	cmp	r3, #255	; 0xff
 800a9d4:	d01f      	beq.n	800aa16 <USBD_StdEPReq+0x1c6>
 800a9d6:	7b7b      	ldrb	r3, [r7, #13]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d11c      	bne.n	800aa16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a9dc:	7b7a      	ldrb	r2, [r7, #13]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a9e4:	7b7a      	ldrb	r2, [r7, #13]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	32ae      	adds	r2, #174	; 0xae
 800a9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d010      	beq.n	800aa16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a9f4:	7b7a      	ldrb	r2, [r7, #13]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	32ae      	adds	r2, #174	; 0xae
 800a9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	6839      	ldr	r1, [r7, #0]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	4798      	blx	r3
 800aa06:	4603      	mov	r3, r0
 800aa08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aa0a:	e004      	b.n	800aa16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fc2d 	bl	800b26e <USBD_CtlError>
              break;
 800aa14:	e000      	b.n	800aa18 <USBD_StdEPReq+0x1c8>
              break;
 800aa16:	bf00      	nop
          }
          break;
 800aa18:	e0ab      	b.n	800ab72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d002      	beq.n	800aa2c <USBD_StdEPReq+0x1dc>
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	d032      	beq.n	800aa90 <USBD_StdEPReq+0x240>
 800aa2a:	e097      	b.n	800ab5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa2c:	7bbb      	ldrb	r3, [r7, #14]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d007      	beq.n	800aa42 <USBD_StdEPReq+0x1f2>
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
 800aa34:	2b80      	cmp	r3, #128	; 0x80
 800aa36:	d004      	beq.n	800aa42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aa38:	6839      	ldr	r1, [r7, #0]
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fc17 	bl	800b26e <USBD_CtlError>
                break;
 800aa40:	e091      	b.n	800ab66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	da0b      	bge.n	800aa62 <USBD_StdEPReq+0x212>
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa50:	4613      	mov	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4413      	add	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	3310      	adds	r3, #16
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	3304      	adds	r3, #4
 800aa60:	e00b      	b.n	800aa7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
 800aa64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa68:	4613      	mov	r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	4413      	add	r3, r2
 800aa78:	3304      	adds	r3, #4
 800aa7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2202      	movs	r2, #2
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fc61 	bl	800b350 <USBD_CtlSendData>
              break;
 800aa8e:	e06a      	b.n	800ab66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	da11      	bge.n	800aabc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	f003 020f 	and.w	r2, r3, #15
 800aa9e:	6879      	ldr	r1, [r7, #4]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	440b      	add	r3, r1
 800aaaa:	3324      	adds	r3, #36	; 0x24
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d117      	bne.n	800aae2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aab2:	6839      	ldr	r1, [r7, #0]
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fbda 	bl	800b26e <USBD_CtlError>
                  break;
 800aaba:	e054      	b.n	800ab66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	f003 020f 	and.w	r2, r3, #15
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	4613      	mov	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	440b      	add	r3, r1
 800aace:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d104      	bne.n	800aae2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fbc7 	bl	800b26e <USBD_CtlError>
                  break;
 800aae0:	e041      	b.n	800ab66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	da0b      	bge.n	800ab02 <USBD_StdEPReq+0x2b2>
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
 800aaec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	3310      	adds	r3, #16
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	4413      	add	r3, r2
 800aafe:	3304      	adds	r3, #4
 800ab00:	e00b      	b.n	800ab1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
 800ab04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab08:	4613      	mov	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	4413      	add	r3, r2
 800ab18:	3304      	adds	r3, #4
 800ab1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <USBD_StdEPReq+0x2d8>
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
 800ab24:	2b80      	cmp	r3, #128	; 0x80
 800ab26:	d103      	bne.n	800ab30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	e00e      	b.n	800ab4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f001 f93b 	bl	800bdb0 <USBD_LL_IsStallEP>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d003      	beq.n	800ab48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2201      	movs	r2, #1
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	e002      	b.n	800ab4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2202      	movs	r2, #2
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fbfb 	bl	800b350 <USBD_CtlSendData>
              break;
 800ab5a:	e004      	b.n	800ab66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fb85 	bl	800b26e <USBD_CtlError>
              break;
 800ab64:	bf00      	nop
          }
          break;
 800ab66:	e004      	b.n	800ab72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fb7f 	bl	800b26e <USBD_CtlError>
          break;
 800ab70:	bf00      	nop
      }
      break;
 800ab72:	e005      	b.n	800ab80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fb79 	bl	800b26e <USBD_CtlError>
      break;
 800ab7c:	e000      	b.n	800ab80 <USBD_StdEPReq+0x330>
      break;
 800ab7e:	bf00      	nop
  }

  return ret;
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab96:	2300      	movs	r3, #0
 800ab98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	885b      	ldrh	r3, [r3, #2]
 800aba6:	0a1b      	lsrs	r3, r3, #8
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	3b01      	subs	r3, #1
 800abac:	2b0e      	cmp	r3, #14
 800abae:	f200 8152 	bhi.w	800ae56 <USBD_GetDescriptor+0x2ca>
 800abb2:	a201      	add	r2, pc, #4	; (adr r2, 800abb8 <USBD_GetDescriptor+0x2c>)
 800abb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb8:	0800ac29 	.word	0x0800ac29
 800abbc:	0800ac41 	.word	0x0800ac41
 800abc0:	0800ac81 	.word	0x0800ac81
 800abc4:	0800ae57 	.word	0x0800ae57
 800abc8:	0800ae57 	.word	0x0800ae57
 800abcc:	0800adf7 	.word	0x0800adf7
 800abd0:	0800ae23 	.word	0x0800ae23
 800abd4:	0800ae57 	.word	0x0800ae57
 800abd8:	0800ae57 	.word	0x0800ae57
 800abdc:	0800ae57 	.word	0x0800ae57
 800abe0:	0800ae57 	.word	0x0800ae57
 800abe4:	0800ae57 	.word	0x0800ae57
 800abe8:	0800ae57 	.word	0x0800ae57
 800abec:	0800ae57 	.word	0x0800ae57
 800abf0:	0800abf5 	.word	0x0800abf5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abfa:	69db      	ldr	r3, [r3, #28]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac06:	69db      	ldr	r3, [r3, #28]
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	7c12      	ldrb	r2, [r2, #16]
 800ac0c:	f107 0108 	add.w	r1, r7, #8
 800ac10:	4610      	mov	r0, r2
 800ac12:	4798      	blx	r3
 800ac14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac16:	e126      	b.n	800ae66 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fb27 	bl	800b26e <USBD_CtlError>
        err++;
 800ac20:	7afb      	ldrb	r3, [r7, #11]
 800ac22:	3301      	adds	r3, #1
 800ac24:	72fb      	strb	r3, [r7, #11]
      break;
 800ac26:	e11e      	b.n	800ae66 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	7c12      	ldrb	r2, [r2, #16]
 800ac34:	f107 0108 	add.w	r1, r7, #8
 800ac38:	4610      	mov	r0, r2
 800ac3a:	4798      	blx	r3
 800ac3c:	60f8      	str	r0, [r7, #12]
      break;
 800ac3e:	e112      	b.n	800ae66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	7c1b      	ldrb	r3, [r3, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10d      	bne.n	800ac64 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac50:	f107 0208 	add.w	r2, r7, #8
 800ac54:	4610      	mov	r0, r2
 800ac56:	4798      	blx	r3
 800ac58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	2202      	movs	r2, #2
 800ac60:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac62:	e100      	b.n	800ae66 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6c:	f107 0208 	add.w	r2, r7, #8
 800ac70:	4610      	mov	r0, r2
 800ac72:	4798      	blx	r3
 800ac74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	2202      	movs	r2, #2
 800ac7c:	701a      	strb	r2, [r3, #0]
      break;
 800ac7e:	e0f2      	b.n	800ae66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	885b      	ldrh	r3, [r3, #2]
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b05      	cmp	r3, #5
 800ac88:	f200 80ac 	bhi.w	800ade4 <USBD_GetDescriptor+0x258>
 800ac8c:	a201      	add	r2, pc, #4	; (adr r2, 800ac94 <USBD_GetDescriptor+0x108>)
 800ac8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac92:	bf00      	nop
 800ac94:	0800acad 	.word	0x0800acad
 800ac98:	0800ace1 	.word	0x0800ace1
 800ac9c:	0800ad15 	.word	0x0800ad15
 800aca0:	0800ad49 	.word	0x0800ad49
 800aca4:	0800ad7d 	.word	0x0800ad7d
 800aca8:	0800adb1 	.word	0x0800adb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00b      	beq.n	800acd0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	7c12      	ldrb	r2, [r2, #16]
 800acc4:	f107 0108 	add.w	r1, r7, #8
 800acc8:	4610      	mov	r0, r2
 800acca:	4798      	blx	r3
 800accc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acce:	e091      	b.n	800adf4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 facb 	bl	800b26e <USBD_CtlError>
            err++;
 800acd8:	7afb      	ldrb	r3, [r7, #11]
 800acda:	3301      	adds	r3, #1
 800acdc:	72fb      	strb	r3, [r7, #11]
          break;
 800acde:	e089      	b.n	800adf4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00b      	beq.n	800ad04 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	7c12      	ldrb	r2, [r2, #16]
 800acf8:	f107 0108 	add.w	r1, r7, #8
 800acfc:	4610      	mov	r0, r2
 800acfe:	4798      	blx	r3
 800ad00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad02:	e077      	b.n	800adf4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad04:	6839      	ldr	r1, [r7, #0]
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fab1 	bl	800b26e <USBD_CtlError>
            err++;
 800ad0c:	7afb      	ldrb	r3, [r7, #11]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	72fb      	strb	r3, [r7, #11]
          break;
 800ad12:	e06f      	b.n	800adf4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00b      	beq.n	800ad38 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	7c12      	ldrb	r2, [r2, #16]
 800ad2c:	f107 0108 	add.w	r1, r7, #8
 800ad30:	4610      	mov	r0, r2
 800ad32:	4798      	blx	r3
 800ad34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad36:	e05d      	b.n	800adf4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa97 	bl	800b26e <USBD_CtlError>
            err++;
 800ad40:	7afb      	ldrb	r3, [r7, #11]
 800ad42:	3301      	adds	r3, #1
 800ad44:	72fb      	strb	r3, [r7, #11]
          break;
 800ad46:	e055      	b.n	800adf4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00b      	beq.n	800ad6c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	7c12      	ldrb	r2, [r2, #16]
 800ad60:	f107 0108 	add.w	r1, r7, #8
 800ad64:	4610      	mov	r0, r2
 800ad66:	4798      	blx	r3
 800ad68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad6a:	e043      	b.n	800adf4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fa7d 	bl	800b26e <USBD_CtlError>
            err++;
 800ad74:	7afb      	ldrb	r3, [r7, #11]
 800ad76:	3301      	adds	r3, #1
 800ad78:	72fb      	strb	r3, [r7, #11]
          break;
 800ad7a:	e03b      	b.n	800adf4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad82:	695b      	ldr	r3, [r3, #20]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00b      	beq.n	800ada0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8e:	695b      	ldr	r3, [r3, #20]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	7c12      	ldrb	r2, [r2, #16]
 800ad94:	f107 0108 	add.w	r1, r7, #8
 800ad98:	4610      	mov	r0, r2
 800ad9a:	4798      	blx	r3
 800ad9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad9e:	e029      	b.n	800adf4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fa63 	bl	800b26e <USBD_CtlError>
            err++;
 800ada8:	7afb      	ldrb	r3, [r7, #11]
 800adaa:	3301      	adds	r3, #1
 800adac:	72fb      	strb	r3, [r7, #11]
          break;
 800adae:	e021      	b.n	800adf4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00b      	beq.n	800add4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	7c12      	ldrb	r2, [r2, #16]
 800adc8:	f107 0108 	add.w	r1, r7, #8
 800adcc:	4610      	mov	r0, r2
 800adce:	4798      	blx	r3
 800add0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800add2:	e00f      	b.n	800adf4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fa49 	bl	800b26e <USBD_CtlError>
            err++;
 800addc:	7afb      	ldrb	r3, [r7, #11]
 800adde:	3301      	adds	r3, #1
 800ade0:	72fb      	strb	r3, [r7, #11]
          break;
 800ade2:	e007      	b.n	800adf4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fa41 	bl	800b26e <USBD_CtlError>
          err++;
 800adec:	7afb      	ldrb	r3, [r7, #11]
 800adee:	3301      	adds	r3, #1
 800adf0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800adf2:	bf00      	nop
      }
      break;
 800adf4:	e037      	b.n	800ae66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	7c1b      	ldrb	r3, [r3, #16]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d109      	bne.n	800ae12 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae06:	f107 0208 	add.w	r2, r7, #8
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	4798      	blx	r3
 800ae0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae10:	e029      	b.n	800ae66 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fa2a 	bl	800b26e <USBD_CtlError>
        err++;
 800ae1a:	7afb      	ldrb	r3, [r7, #11]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae20:	e021      	b.n	800ae66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	7c1b      	ldrb	r3, [r3, #16]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10d      	bne.n	800ae46 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae32:	f107 0208 	add.w	r2, r7, #8
 800ae36:	4610      	mov	r0, r2
 800ae38:	4798      	blx	r3
 800ae3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	2207      	movs	r2, #7
 800ae42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae44:	e00f      	b.n	800ae66 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae46:	6839      	ldr	r1, [r7, #0]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fa10 	bl	800b26e <USBD_CtlError>
        err++;
 800ae4e:	7afb      	ldrb	r3, [r7, #11]
 800ae50:	3301      	adds	r3, #1
 800ae52:	72fb      	strb	r3, [r7, #11]
      break;
 800ae54:	e007      	b.n	800ae66 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fa08 	bl	800b26e <USBD_CtlError>
      err++;
 800ae5e:	7afb      	ldrb	r3, [r7, #11]
 800ae60:	3301      	adds	r3, #1
 800ae62:	72fb      	strb	r3, [r7, #11]
      break;
 800ae64:	bf00      	nop
  }

  if (err != 0U)
 800ae66:	7afb      	ldrb	r3, [r7, #11]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d11e      	bne.n	800aeaa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	88db      	ldrh	r3, [r3, #6]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d016      	beq.n	800aea2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ae74:	893b      	ldrh	r3, [r7, #8]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00e      	beq.n	800ae98 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	88da      	ldrh	r2, [r3, #6]
 800ae7e:	893b      	ldrh	r3, [r7, #8]
 800ae80:	4293      	cmp	r3, r2
 800ae82:	bf28      	it	cs
 800ae84:	4613      	movcs	r3, r2
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae8a:	893b      	ldrh	r3, [r7, #8]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	68f9      	ldr	r1, [r7, #12]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fa5d 	bl	800b350 <USBD_CtlSendData>
 800ae96:	e009      	b.n	800aeac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f9e7 	bl	800b26e <USBD_CtlError>
 800aea0:	e004      	b.n	800aeac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 faae 	bl	800b404 <USBD_CtlSendStatus>
 800aea8:	e000      	b.n	800aeac <USBD_GetDescriptor+0x320>
    return;
 800aeaa:	bf00      	nop
  }
}
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop

0800aeb4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	889b      	ldrh	r3, [r3, #4]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d131      	bne.n	800af2a <USBD_SetAddress+0x76>
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	88db      	ldrh	r3, [r3, #6]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d12d      	bne.n	800af2a <USBD_SetAddress+0x76>
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	885b      	ldrh	r3, [r3, #2]
 800aed2:	2b7f      	cmp	r3, #127	; 0x7f
 800aed4:	d829      	bhi.n	800af2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	885b      	ldrh	r3, [r3, #2]
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aee0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	d104      	bne.n	800aef8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f9bc 	bl	800b26e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aef6:	e01d      	b.n	800af34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	7bfa      	ldrb	r2, [r7, #15]
 800aefc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 ff81 	bl	800be0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fa7a 	bl	800b404 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af10:	7bfb      	ldrb	r3, [r7, #15]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d004      	beq.n	800af20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2202      	movs	r2, #2
 800af1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af1e:	e009      	b.n	800af34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af28:	e004      	b.n	800af34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f99e 	bl	800b26e <USBD_CtlError>
  }
}
 800af32:	bf00      	nop
 800af34:	bf00      	nop
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	885b      	ldrh	r3, [r3, #2]
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	4b4e      	ldr	r3, [pc, #312]	; (800b08c <USBD_SetConfig+0x150>)
 800af52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af54:	4b4d      	ldr	r3, [pc, #308]	; (800b08c <USBD_SetConfig+0x150>)
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d905      	bls.n	800af68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f985 	bl	800b26e <USBD_CtlError>
    return USBD_FAIL;
 800af64:	2303      	movs	r3, #3
 800af66:	e08c      	b.n	800b082 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	2b02      	cmp	r3, #2
 800af72:	d002      	beq.n	800af7a <USBD_SetConfig+0x3e>
 800af74:	2b03      	cmp	r3, #3
 800af76:	d029      	beq.n	800afcc <USBD_SetConfig+0x90>
 800af78:	e075      	b.n	800b066 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af7a:	4b44      	ldr	r3, [pc, #272]	; (800b08c <USBD_SetConfig+0x150>)
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d020      	beq.n	800afc4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800af82:	4b42      	ldr	r3, [pc, #264]	; (800b08c <USBD_SetConfig+0x150>)
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af8c:	4b3f      	ldr	r3, [pc, #252]	; (800b08c <USBD_SetConfig+0x150>)
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	4619      	mov	r1, r3
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7ff f849 	bl	800a02a <USBD_SetClassConfig>
 800af98:	4603      	mov	r3, r0
 800af9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d008      	beq.n	800afb4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 f962 	bl	800b26e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2202      	movs	r2, #2
 800afae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afb2:	e065      	b.n	800b080 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fa25 	bl	800b404 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2203      	movs	r2, #3
 800afbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800afc2:	e05d      	b.n	800b080 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fa1d 	bl	800b404 <USBD_CtlSendStatus>
      break;
 800afca:	e059      	b.n	800b080 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800afcc:	4b2f      	ldr	r3, [pc, #188]	; (800b08c <USBD_SetConfig+0x150>)
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d112      	bne.n	800affa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800afdc:	4b2b      	ldr	r3, [pc, #172]	; (800b08c <USBD_SetConfig+0x150>)
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	461a      	mov	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afe6:	4b29      	ldr	r3, [pc, #164]	; (800b08c <USBD_SetConfig+0x150>)
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff f838 	bl	800a062 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fa06 	bl	800b404 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aff8:	e042      	b.n	800b080 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800affa:	4b24      	ldr	r3, [pc, #144]	; (800b08c <USBD_SetConfig+0x150>)
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	461a      	mov	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	429a      	cmp	r2, r3
 800b006:	d02a      	beq.n	800b05e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7ff f826 	bl	800a062 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b016:	4b1d      	ldr	r3, [pc, #116]	; (800b08c <USBD_SetConfig+0x150>)
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	461a      	mov	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b020:	4b1a      	ldr	r3, [pc, #104]	; (800b08c <USBD_SetConfig+0x150>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7fe ffff 	bl	800a02a <USBD_SetClassConfig>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00f      	beq.n	800b056 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f918 	bl	800b26e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff f80b 	bl	800a062 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2202      	movs	r2, #2
 800b050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b054:	e014      	b.n	800b080 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f9d4 	bl	800b404 <USBD_CtlSendStatus>
      break;
 800b05c:	e010      	b.n	800b080 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f9d0 	bl	800b404 <USBD_CtlSendStatus>
      break;
 800b064:	e00c      	b.n	800b080 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f900 	bl	800b26e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b06e:	4b07      	ldr	r3, [pc, #28]	; (800b08c <USBD_SetConfig+0x150>)
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7fe fff4 	bl	800a062 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b07a:	2303      	movs	r3, #3
 800b07c:	73fb      	strb	r3, [r7, #15]
      break;
 800b07e:	bf00      	nop
  }

  return ret;
 800b080:	7bfb      	ldrb	r3, [r7, #15]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	20000688 	.word	0x20000688

0800b090 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	88db      	ldrh	r3, [r3, #6]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d004      	beq.n	800b0ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f8e2 	bl	800b26e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0aa:	e023      	b.n	800b0f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	dc02      	bgt.n	800b0be <USBD_GetConfig+0x2e>
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	dc03      	bgt.n	800b0c4 <USBD_GetConfig+0x34>
 800b0bc:	e015      	b.n	800b0ea <USBD_GetConfig+0x5a>
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	d00b      	beq.n	800b0da <USBD_GetConfig+0x4a>
 800b0c2:	e012      	b.n	800b0ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f93c 	bl	800b350 <USBD_CtlSendData>
        break;
 800b0d8:	e00c      	b.n	800b0f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	3304      	adds	r3, #4
 800b0de:	2201      	movs	r2, #1
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 f934 	bl	800b350 <USBD_CtlSendData>
        break;
 800b0e8:	e004      	b.n	800b0f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 f8be 	bl	800b26e <USBD_CtlError>
        break;
 800b0f2:	bf00      	nop
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	3b01      	subs	r3, #1
 800b110:	2b02      	cmp	r3, #2
 800b112:	d81e      	bhi.n	800b152 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	88db      	ldrh	r3, [r3, #6]
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d004      	beq.n	800b126 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f8a5 	bl	800b26e <USBD_CtlError>
        break;
 800b124:	e01a      	b.n	800b15c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2201      	movs	r2, #1
 800b12a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b132:	2b00      	cmp	r3, #0
 800b134:	d005      	beq.n	800b142 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	f043 0202 	orr.w	r2, r3, #2
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	330c      	adds	r3, #12
 800b146:	2202      	movs	r2, #2
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f900 	bl	800b350 <USBD_CtlSendData>
      break;
 800b150:	e004      	b.n	800b15c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f88a 	bl	800b26e <USBD_CtlError>
      break;
 800b15a:	bf00      	nop
  }
}
 800b15c:	bf00      	nop
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	885b      	ldrh	r3, [r3, #2]
 800b172:	2b01      	cmp	r3, #1
 800b174:	d107      	bne.n	800b186 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f940 	bl	800b404 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b184:	e013      	b.n	800b1ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	885b      	ldrh	r3, [r3, #2]
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	d10b      	bne.n	800b1a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	889b      	ldrh	r3, [r3, #4]
 800b192:	0a1b      	lsrs	r3, r3, #8
 800b194:	b29b      	uxth	r3, r3
 800b196:	b2da      	uxtb	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f930 	bl	800b404 <USBD_CtlSendStatus>
}
 800b1a4:	e003      	b.n	800b1ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f860 	bl	800b26e <USBD_CtlError>
}
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b082      	sub	sp, #8
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d80b      	bhi.n	800b1e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	885b      	ldrh	r3, [r3, #2]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d10c      	bne.n	800b1f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f910 	bl	800b404 <USBD_CtlSendStatus>
      }
      break;
 800b1e4:	e004      	b.n	800b1f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f840 	bl	800b26e <USBD_CtlError>
      break;
 800b1ee:	e000      	b.n	800b1f2 <USBD_ClrFeature+0x3c>
      break;
 800b1f0:	bf00      	nop
  }
}
 800b1f2:	bf00      	nop
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	781a      	ldrb	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	3301      	adds	r3, #1
 800b214:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	781a      	ldrb	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3301      	adds	r3, #1
 800b222:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f7ff fa17 	bl	800a658 <SWAPBYTE>
 800b22a:	4603      	mov	r3, r0
 800b22c:	461a      	mov	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3301      	adds	r3, #1
 800b236:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	3301      	adds	r3, #1
 800b23c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7ff fa0a 	bl	800a658 <SWAPBYTE>
 800b244:	4603      	mov	r3, r0
 800b246:	461a      	mov	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	3301      	adds	r3, #1
 800b250:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	3301      	adds	r3, #1
 800b256:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f7ff f9fd 	bl	800a658 <SWAPBYTE>
 800b25e:	4603      	mov	r3, r0
 800b260:	461a      	mov	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	80da      	strh	r2, [r3, #6]
}
 800b266:	bf00      	nop
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b082      	sub	sp, #8
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b278:	2180      	movs	r1, #128	; 0x80
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fd2c 	bl	800bcd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b280:	2100      	movs	r1, #0
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fd28 	bl	800bcd8 <USBD_LL_StallEP>
}
 800b288:	bf00      	nop
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d036      	beq.n	800b314 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b2aa:	6938      	ldr	r0, [r7, #16]
 800b2ac:	f000 f836 	bl	800b31c <USBD_GetLen>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	005b      	lsls	r3, r3, #1
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b2be:	7dfb      	ldrb	r3, [r7, #23]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	7812      	ldrb	r2, [r2, #0]
 800b2c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	2203      	movs	r2, #3
 800b2d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2da:	7dfb      	ldrb	r3, [r7, #23]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2e0:	e013      	b.n	800b30a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b2e2:	7dfb      	ldrb	r3, [r7, #23]
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	7812      	ldrb	r2, [r2, #0]
 800b2ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	613b      	str	r3, [r7, #16]
    idx++;
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2fa:	7dfb      	ldrb	r3, [r7, #23]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	4413      	add	r3, r2
 800b300:	2200      	movs	r2, #0
 800b302:	701a      	strb	r2, [r3, #0]
    idx++;
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	3301      	adds	r3, #1
 800b308:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e7      	bne.n	800b2e2 <USBD_GetString+0x52>
 800b312:	e000      	b.n	800b316 <USBD_GetString+0x86>
    return;
 800b314:	bf00      	nop
  }
}
 800b316:	3718      	adds	r7, #24
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b324:	2300      	movs	r3, #0
 800b326:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b32c:	e005      	b.n	800b33a <USBD_GetLen+0x1e>
  {
    len++;
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
 800b330:	3301      	adds	r3, #1
 800b332:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	3301      	adds	r3, #1
 800b338:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1f5      	bne.n	800b32e <USBD_GetLen+0x12>
  }

  return len;
 800b342:	7bfb      	ldrb	r3, [r7, #15]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2202      	movs	r2, #2
 800b360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	2100      	movs	r1, #0
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f000 fd7e 	bl	800be78 <USBD_LL_Transmit>

  return USBD_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	60f8      	str	r0, [r7, #12]
 800b38e:	60b9      	str	r1, [r7, #8]
 800b390:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	2100      	movs	r1, #0
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f000 fd6d 	bl	800be78 <USBD_LL_Transmit>

  return USBD_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2203      	movs	r2, #3
 800b3b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f000 fd88 	bl	800bee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b084      	sub	sp, #16
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	60f8      	str	r0, [r7, #12]
 800b3ea:	60b9      	str	r1, [r7, #8]
 800b3ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f000 fd77 	bl	800bee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2204      	movs	r2, #4
 800b410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b414:	2300      	movs	r3, #0
 800b416:	2200      	movs	r2, #0
 800b418:	2100      	movs	r1, #0
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fd2c 	bl	800be78 <USBD_LL_Transmit>

  return USBD_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b082      	sub	sp, #8
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2205      	movs	r2, #5
 800b436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b43a:	2300      	movs	r3, #0
 800b43c:	2200      	movs	r2, #0
 800b43e:	2100      	movs	r1, #0
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 fd51 	bl	800bee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3708      	adds	r7, #8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b454:	2200      	movs	r2, #0
 800b456:	4912      	ldr	r1, [pc, #72]	; (800b4a0 <MX_USB_DEVICE_Init+0x50>)
 800b458:	4812      	ldr	r0, [pc, #72]	; (800b4a4 <MX_USB_DEVICE_Init+0x54>)
 800b45a:	f7fe fd69 	bl	8009f30 <USBD_Init>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b464:	f7f5 fe5e 	bl	8001124 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b468:	490f      	ldr	r1, [pc, #60]	; (800b4a8 <MX_USB_DEVICE_Init+0x58>)
 800b46a:	480e      	ldr	r0, [pc, #56]	; (800b4a4 <MX_USB_DEVICE_Init+0x54>)
 800b46c:	f7fe fd90 	bl	8009f90 <USBD_RegisterClass>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b476:	f7f5 fe55 	bl	8001124 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b47a:	490c      	ldr	r1, [pc, #48]	; (800b4ac <MX_USB_DEVICE_Init+0x5c>)
 800b47c:	4809      	ldr	r0, [pc, #36]	; (800b4a4 <MX_USB_DEVICE_Init+0x54>)
 800b47e:	f7fe fc87 	bl	8009d90 <USBD_CDC_RegisterInterface>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d001      	beq.n	800b48c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b488:	f7f5 fe4c 	bl	8001124 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b48c:	4805      	ldr	r0, [pc, #20]	; (800b4a4 <MX_USB_DEVICE_Init+0x54>)
 800b48e:	f7fe fdb5 	bl	8009ffc <USBD_Start>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d001      	beq.n	800b49c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b498:	f7f5 fe44 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b49c:	bf00      	nop
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	200000b0 	.word	0x200000b0
 800b4a4:	2000068c 	.word	0x2000068c
 800b4a8:	2000001c 	.word	0x2000001c
 800b4ac:	2000009c 	.word	0x2000009c

0800b4b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	4905      	ldr	r1, [pc, #20]	; (800b4cc <CDC_Init_FS+0x1c>)
 800b4b8:	4805      	ldr	r0, [pc, #20]	; (800b4d0 <CDC_Init_FS+0x20>)
 800b4ba:	f7fe fc83 	bl	8009dc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b4be:	4905      	ldr	r1, [pc, #20]	; (800b4d4 <CDC_Init_FS+0x24>)
 800b4c0:	4803      	ldr	r0, [pc, #12]	; (800b4d0 <CDC_Init_FS+0x20>)
 800b4c2:	f7fe fca1 	bl	8009e08 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b4c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	20000d6c 	.word	0x20000d6c
 800b4d0:	2000068c 	.word	0x2000068c
 800b4d4:	2000096c 	.word	0x2000096c

0800b4d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	6039      	str	r1, [r7, #0]
 800b4f2:	71fb      	strb	r3, [r7, #7]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b4f8:	79fb      	ldrb	r3, [r7, #7]
 800b4fa:	2b23      	cmp	r3, #35	; 0x23
 800b4fc:	d85a      	bhi.n	800b5b4 <CDC_Control_FS+0xcc>
 800b4fe:	a201      	add	r2, pc, #4	; (adr r2, 800b504 <CDC_Control_FS+0x1c>)
 800b500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b504:	0800b5b5 	.word	0x0800b5b5
 800b508:	0800b5b5 	.word	0x0800b5b5
 800b50c:	0800b5b5 	.word	0x0800b5b5
 800b510:	0800b5b5 	.word	0x0800b5b5
 800b514:	0800b5b5 	.word	0x0800b5b5
 800b518:	0800b5b5 	.word	0x0800b5b5
 800b51c:	0800b5b5 	.word	0x0800b5b5
 800b520:	0800b5b5 	.word	0x0800b5b5
 800b524:	0800b5b5 	.word	0x0800b5b5
 800b528:	0800b5b5 	.word	0x0800b5b5
 800b52c:	0800b5b5 	.word	0x0800b5b5
 800b530:	0800b5b5 	.word	0x0800b5b5
 800b534:	0800b5b5 	.word	0x0800b5b5
 800b538:	0800b5b5 	.word	0x0800b5b5
 800b53c:	0800b5b5 	.word	0x0800b5b5
 800b540:	0800b5b5 	.word	0x0800b5b5
 800b544:	0800b5b5 	.word	0x0800b5b5
 800b548:	0800b5b5 	.word	0x0800b5b5
 800b54c:	0800b5b5 	.word	0x0800b5b5
 800b550:	0800b5b5 	.word	0x0800b5b5
 800b554:	0800b5b5 	.word	0x0800b5b5
 800b558:	0800b5b5 	.word	0x0800b5b5
 800b55c:	0800b5b5 	.word	0x0800b5b5
 800b560:	0800b5b5 	.word	0x0800b5b5
 800b564:	0800b5b5 	.word	0x0800b5b5
 800b568:	0800b5b5 	.word	0x0800b5b5
 800b56c:	0800b5b5 	.word	0x0800b5b5
 800b570:	0800b5b5 	.word	0x0800b5b5
 800b574:	0800b5b5 	.word	0x0800b5b5
 800b578:	0800b5b5 	.word	0x0800b5b5
 800b57c:	0800b5b5 	.word	0x0800b5b5
 800b580:	0800b5b5 	.word	0x0800b5b5
 800b584:	0800b5b5 	.word	0x0800b5b5
 800b588:	0800b5b5 	.word	0x0800b5b5
 800b58c:	0800b595 	.word	0x0800b595
 800b590:	0800b5b5 	.word	0x0800b5b5
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
    	USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	60fb      	str	r3, [r7, #12]
    	if ((req->wValue & 0x0001) != 0){
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	885b      	ldrh	r3, [r3, #2]
 800b59c:	f003 0301 	and.w	r3, r3, #1
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d003      	beq.n	800b5ac <CDC_Control_FS+0xc4>
    		USB_COM_Port_open = 1;
 800b5a4:	4b07      	ldr	r3, [pc, #28]	; (800b5c4 <CDC_Control_FS+0xdc>)
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	701a      	strb	r2, [r3, #0]
    	}
    	else {
    		USB_COM_Port_open = 0;
    	}
    break;
 800b5aa:	e004      	b.n	800b5b6 <CDC_Control_FS+0xce>
    		USB_COM_Port_open = 0;
 800b5ac:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <CDC_Control_FS+0xdc>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	701a      	strb	r2, [r3, #0]
    break;
 800b5b2:	e000      	b.n	800b5b6 <CDC_Control_FS+0xce>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b5b4:	bf00      	nop
  }

  return (USBD_OK);
 800b5b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3714      	adds	r7, #20
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	20000968 	.word	0x20000968

0800b5c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b5d2:	6879      	ldr	r1, [r7, #4]
 800b5d4:	4808      	ldr	r0, [pc, #32]	; (800b5f8 <CDC_Receive_FS+0x30>)
 800b5d6:	f7fe fc17 	bl	8009e08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b5da:	4807      	ldr	r0, [pc, #28]	; (800b5f8 <CDC_Receive_FS+0x30>)
 800b5dc:	f7fe fc72 	bl	8009ec4 <USBD_CDC_ReceivePacket>
  CDC_FS_RxDataReady_Callback(Buf, *Len); // User implemented callback
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7f4 ff83 	bl	80004f4 <CDC_FS_RxDataReady_Callback>
  return (USBD_OK);
 800b5ee:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	2000068c 	.word	0x2000068c

0800b5fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	460b      	mov	r3, r1
 800b606:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b60c:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <CDC_Transmit_FS+0x48>)
 800b60e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b612:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b61e:	2301      	movs	r3, #1
 800b620:	e00b      	b.n	800b63a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b622:	887b      	ldrh	r3, [r7, #2]
 800b624:	461a      	mov	r2, r3
 800b626:	6879      	ldr	r1, [r7, #4]
 800b628:	4806      	ldr	r0, [pc, #24]	; (800b644 <CDC_Transmit_FS+0x48>)
 800b62a:	f7fe fbcb 	bl	8009dc4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b62e:	4805      	ldr	r0, [pc, #20]	; (800b644 <CDC_Transmit_FS+0x48>)
 800b630:	f7fe fc08 	bl	8009e44 <USBD_CDC_TransmitPacket>
 800b634:	4603      	mov	r3, r0
 800b636:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b638:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	2000068c 	.word	0x2000068c

0800b648 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	4613      	mov	r3, r2
 800b654:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b65a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	371c      	adds	r7, #28
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
	...

0800b66c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	4603      	mov	r3, r0
 800b674:	6039      	str	r1, [r7, #0]
 800b676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	2212      	movs	r2, #18
 800b67c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b67e:	4b03      	ldr	r3, [pc, #12]	; (800b68c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b680:	4618      	mov	r0, r3
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	200000d0 	.word	0x200000d0

0800b690 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	6039      	str	r1, [r7, #0]
 800b69a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	2204      	movs	r2, #4
 800b6a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6a2:	4b03      	ldr	r3, [pc, #12]	; (800b6b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	200000f0 	.word	0x200000f0

0800b6b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	6039      	str	r1, [r7, #0]
 800b6be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d105      	bne.n	800b6d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	4907      	ldr	r1, [pc, #28]	; (800b6e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b6ca:	4808      	ldr	r0, [pc, #32]	; (800b6ec <USBD_FS_ProductStrDescriptor+0x38>)
 800b6cc:	f7ff fde0 	bl	800b290 <USBD_GetString>
 800b6d0:	e004      	b.n	800b6dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	4904      	ldr	r1, [pc, #16]	; (800b6e8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b6d6:	4805      	ldr	r0, [pc, #20]	; (800b6ec <USBD_FS_ProductStrDescriptor+0x38>)
 800b6d8:	f7ff fdda 	bl	800b290 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6dc:	4b02      	ldr	r3, [pc, #8]	; (800b6e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	2000116c 	.word	0x2000116c
 800b6ec:	0800c740 	.word	0x0800c740

0800b6f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	6039      	str	r1, [r7, #0]
 800b6fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	4904      	ldr	r1, [pc, #16]	; (800b710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b700:	4804      	ldr	r0, [pc, #16]	; (800b714 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b702:	f7ff fdc5 	bl	800b290 <USBD_GetString>
  return USBD_StrDesc;
 800b706:	4b02      	ldr	r3, [pc, #8]	; (800b710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	2000116c 	.word	0x2000116c
 800b714:	0800c758 	.word	0x0800c758

0800b718 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	6039      	str	r1, [r7, #0]
 800b722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	221a      	movs	r2, #26
 800b728:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b72a:	f000 f855 	bl	800b7d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b72e:	4b02      	ldr	r3, [pc, #8]	; (800b738 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b730:	4618      	mov	r0, r3
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	200000f4 	.word	0x200000f4

0800b73c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	4603      	mov	r3, r0
 800b744:	6039      	str	r1, [r7, #0]
 800b746:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d105      	bne.n	800b75a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b74e:	683a      	ldr	r2, [r7, #0]
 800b750:	4907      	ldr	r1, [pc, #28]	; (800b770 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b752:	4808      	ldr	r0, [pc, #32]	; (800b774 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b754:	f7ff fd9c 	bl	800b290 <USBD_GetString>
 800b758:	e004      	b.n	800b764 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	4904      	ldr	r1, [pc, #16]	; (800b770 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b75e:	4805      	ldr	r0, [pc, #20]	; (800b774 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b760:	f7ff fd96 	bl	800b290 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b764:	4b02      	ldr	r3, [pc, #8]	; (800b770 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b766:	4618      	mov	r0, r3
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	2000116c 	.word	0x2000116c
 800b774:	0800c76c 	.word	0x0800c76c

0800b778 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	6039      	str	r1, [r7, #0]
 800b782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d105      	bne.n	800b796 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	4907      	ldr	r1, [pc, #28]	; (800b7ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b78e:	4808      	ldr	r0, [pc, #32]	; (800b7b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b790:	f7ff fd7e 	bl	800b290 <USBD_GetString>
 800b794:	e004      	b.n	800b7a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	4904      	ldr	r1, [pc, #16]	; (800b7ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b79a:	4805      	ldr	r0, [pc, #20]	; (800b7b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b79c:	f7ff fd78 	bl	800b290 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7a0:	4b02      	ldr	r3, [pc, #8]	; (800b7ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	2000116c 	.word	0x2000116c
 800b7b0:	0800c778 	.word	0x0800c778

0800b7b4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	6039      	str	r1, [r7, #0]
 800b7be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	220c      	movs	r2, #12
 800b7c4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b7c6:	4b03      	ldr	r3, [pc, #12]	; (800b7d4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr
 800b7d4:	200000e4 	.word	0x200000e4

0800b7d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b7de:	4b0f      	ldr	r3, [pc, #60]	; (800b81c <Get_SerialNum+0x44>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b7e4:	4b0e      	ldr	r3, [pc, #56]	; (800b820 <Get_SerialNum+0x48>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b7ea:	4b0e      	ldr	r3, [pc, #56]	; (800b824 <Get_SerialNum+0x4c>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d009      	beq.n	800b812 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b7fe:	2208      	movs	r2, #8
 800b800:	4909      	ldr	r1, [pc, #36]	; (800b828 <Get_SerialNum+0x50>)
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f000 f814 	bl	800b830 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b808:	2204      	movs	r2, #4
 800b80a:	4908      	ldr	r1, [pc, #32]	; (800b82c <Get_SerialNum+0x54>)
 800b80c:	68b8      	ldr	r0, [r7, #8]
 800b80e:	f000 f80f 	bl	800b830 <IntToUnicode>
  }
}
 800b812:	bf00      	nop
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	1fff7590 	.word	0x1fff7590
 800b820:	1fff7594 	.word	0x1fff7594
 800b824:	1fff7598 	.word	0x1fff7598
 800b828:	200000f6 	.word	0x200000f6
 800b82c:	20000106 	.word	0x20000106

0800b830 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b830:	b480      	push	{r7}
 800b832:	b087      	sub	sp, #28
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	4613      	mov	r3, r2
 800b83c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b83e:	2300      	movs	r3, #0
 800b840:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b842:	2300      	movs	r3, #0
 800b844:	75fb      	strb	r3, [r7, #23]
 800b846:	e027      	b.n	800b898 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	0f1b      	lsrs	r3, r3, #28
 800b84c:	2b09      	cmp	r3, #9
 800b84e:	d80b      	bhi.n	800b868 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	0f1b      	lsrs	r3, r3, #28
 800b854:	b2da      	uxtb	r2, r3
 800b856:	7dfb      	ldrb	r3, [r7, #23]
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	4619      	mov	r1, r3
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	440b      	add	r3, r1
 800b860:	3230      	adds	r2, #48	; 0x30
 800b862:	b2d2      	uxtb	r2, r2
 800b864:	701a      	strb	r2, [r3, #0]
 800b866:	e00a      	b.n	800b87e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	0f1b      	lsrs	r3, r3, #28
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	4619      	mov	r1, r3
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	440b      	add	r3, r1
 800b878:	3237      	adds	r2, #55	; 0x37
 800b87a:	b2d2      	uxtb	r2, r2
 800b87c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	011b      	lsls	r3, r3, #4
 800b882:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b884:	7dfb      	ldrb	r3, [r7, #23]
 800b886:	005b      	lsls	r3, r3, #1
 800b888:	3301      	adds	r3, #1
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	4413      	add	r3, r2
 800b88e:	2200      	movs	r2, #0
 800b890:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b892:	7dfb      	ldrb	r3, [r7, #23]
 800b894:	3301      	adds	r3, #1
 800b896:	75fb      	strb	r3, [r7, #23]
 800b898:	7dfa      	ldrb	r2, [r7, #23]
 800b89a:	79fb      	ldrb	r3, [r7, #7]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d3d3      	bcc.n	800b848 <IntToUnicode+0x18>
  }
}
 800b8a0:	bf00      	nop
 800b8a2:	bf00      	nop
 800b8a4:	371c      	adds	r7, #28
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
	...

0800b8b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b096      	sub	sp, #88	; 0x58
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b8bc:	2200      	movs	r2, #0
 800b8be:	601a      	str	r2, [r3, #0]
 800b8c0:	605a      	str	r2, [r3, #4]
 800b8c2:	609a      	str	r2, [r3, #8]
 800b8c4:	60da      	str	r2, [r3, #12]
 800b8c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b8c8:	f107 0310 	add.w	r3, r7, #16
 800b8cc:	2234      	movs	r2, #52	; 0x34
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 fba9 	bl	800c028 <memset>
  if(pcdHandle->Instance==USB)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a24      	ldr	r2, [pc, #144]	; (800b96c <HAL_PCD_MspInit+0xbc>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d141      	bne.n	800b964 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b8e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800b8e6:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800b8ea:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b8ec:	f107 0310 	add.w	r3, r7, #16
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7f9 fd05 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b8fc:	f7f5 fc12 	bl	8001124 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b900:	4b1b      	ldr	r3, [pc, #108]	; (800b970 <HAL_PCD_MspInit+0xc0>)
 800b902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b904:	4a1a      	ldr	r2, [pc, #104]	; (800b970 <HAL_PCD_MspInit+0xc0>)
 800b906:	f043 0301 	orr.w	r3, r3, #1
 800b90a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b90c:	4b18      	ldr	r3, [pc, #96]	; (800b970 <HAL_PCD_MspInit+0xc0>)
 800b90e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	60fb      	str	r3, [r7, #12]
 800b916:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b918:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b91c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b91e:	2302      	movs	r3, #2
 800b920:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b922:	2300      	movs	r3, #0
 800b924:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b926:	2303      	movs	r3, #3
 800b928:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800b92a:	230a      	movs	r3, #10
 800b92c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b92e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b932:	4619      	mov	r1, r3
 800b934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b938:	f7f6 fee0 	bl	80026fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b93c:	4b0c      	ldr	r3, [pc, #48]	; (800b970 <HAL_PCD_MspInit+0xc0>)
 800b93e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b940:	4a0b      	ldr	r2, [pc, #44]	; (800b970 <HAL_PCD_MspInit+0xc0>)
 800b942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b946:	6593      	str	r3, [r2, #88]	; 0x58
 800b948:	4b09      	ldr	r3, [pc, #36]	; (800b970 <HAL_PCD_MspInit+0xc0>)
 800b94a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b94c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b950:	60bb      	str	r3, [r7, #8]
 800b952:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b954:	2200      	movs	r2, #0
 800b956:	2100      	movs	r1, #0
 800b958:	2043      	movs	r0, #67	; 0x43
 800b95a:	f7f6 fe98 	bl	800268e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b95e:	2043      	movs	r0, #67	; 0x43
 800b960:	f7f6 feb1 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b964:	bf00      	nop
 800b966:	3758      	adds	r7, #88	; 0x58
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	40006800 	.word	0x40006800
 800b970:	40021000 	.word	0x40021000

0800b974 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b988:	4619      	mov	r1, r3
 800b98a:	4610      	mov	r0, r2
 800b98c:	f7fe fb83 	bl	800a096 <USBD_LL_SetupStage>
}
 800b990:	bf00      	nop
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800b9aa:	78fa      	ldrb	r2, [r7, #3]
 800b9ac:	6879      	ldr	r1, [r7, #4]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4413      	add	r3, r2
 800b9b4:	00db      	lsls	r3, r3, #3
 800b9b6:	440b      	add	r3, r1
 800b9b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	78fb      	ldrb	r3, [r7, #3]
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	f7fe fbbd 	bl	800a140 <USBD_LL_DataOutStage>
}
 800b9c6:	bf00      	nop
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b082      	sub	sp, #8
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800b9e0:	78fa      	ldrb	r2, [r7, #3]
 800b9e2:	6879      	ldr	r1, [r7, #4]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	4413      	add	r3, r2
 800b9ea:	00db      	lsls	r3, r3, #3
 800b9ec:	440b      	add	r3, r1
 800b9ee:	333c      	adds	r3, #60	; 0x3c
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	78fb      	ldrb	r3, [r7, #3]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	f7fe fc56 	bl	800a2a6 <USBD_LL_DataInStage>
}
 800b9fa:	bf00      	nop
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b082      	sub	sp, #8
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe fd90 	bl	800a536 <USBD_LL_SOF>
}
 800ba16:	bf00      	nop
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba26:	2301      	movs	r3, #1
 800ba28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d001      	beq.n	800ba36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba32:	f7f5 fb77 	bl	8001124 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ba3c:	7bfa      	ldrb	r2, [r7, #15]
 800ba3e:	4611      	mov	r1, r2
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fe fd34 	bl	800a4ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe fcdc 	bl	800a40a <USBD_LL_Reset>
}
 800ba52:	bf00      	nop
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
	...

0800ba5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fe fd2f 	bl	800a4ce <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d005      	beq.n	800ba84 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba78:	4b04      	ldr	r3, [pc, #16]	; (800ba8c <HAL_PCD_SuspendCallback+0x30>)
 800ba7a:	691b      	ldr	r3, [r3, #16]
 800ba7c:	4a03      	ldr	r2, [pc, #12]	; (800ba8c <HAL_PCD_SuspendCallback+0x30>)
 800ba7e:	f043 0306 	orr.w	r3, r3, #6
 800ba82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba84:	bf00      	nop
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	e000ed00 	.word	0xe000ed00

0800ba90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d007      	beq.n	800bab0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800baa0:	4b08      	ldr	r3, [pc, #32]	; (800bac4 <HAL_PCD_ResumeCallback+0x34>)
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	4a07      	ldr	r2, [pc, #28]	; (800bac4 <HAL_PCD_ResumeCallback+0x34>)
 800baa6:	f023 0306 	bic.w	r3, r3, #6
 800baaa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800baac:	f000 fab6 	bl	800c01c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7fe fd25 	bl	800a506 <USBD_LL_Resume>
}
 800babc:	bf00      	nop
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	e000ed00 	.word	0xe000ed00

0800bac8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800bad0:	f7f8 fd80 	bl	80045d4 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bad4:	4a2b      	ldr	r2, [pc, #172]	; (800bb84 <USBD_LL_Init+0xbc>)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a29      	ldr	r2, [pc, #164]	; (800bb84 <USBD_LL_Init+0xbc>)
 800bae0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800bae4:	4b27      	ldr	r3, [pc, #156]	; (800bb84 <USBD_LL_Init+0xbc>)
 800bae6:	4a28      	ldr	r2, [pc, #160]	; (800bb88 <USBD_LL_Init+0xc0>)
 800bae8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800baea:	4b26      	ldr	r3, [pc, #152]	; (800bb84 <USBD_LL_Init+0xbc>)
 800baec:	2208      	movs	r2, #8
 800baee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800baf0:	4b24      	ldr	r3, [pc, #144]	; (800bb84 <USBD_LL_Init+0xbc>)
 800baf2:	2202      	movs	r2, #2
 800baf4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800baf6:	4b23      	ldr	r3, [pc, #140]	; (800bb84 <USBD_LL_Init+0xbc>)
 800baf8:	2202      	movs	r2, #2
 800bafa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bafc:	4b21      	ldr	r3, [pc, #132]	; (800bb84 <USBD_LL_Init+0xbc>)
 800bafe:	2200      	movs	r2, #0
 800bb00:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bb02:	4b20      	ldr	r3, [pc, #128]	; (800bb84 <USBD_LL_Init+0xbc>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bb08:	4b1e      	ldr	r3, [pc, #120]	; (800bb84 <USBD_LL_Init+0xbc>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bb0e:	4b1d      	ldr	r3, [pc, #116]	; (800bb84 <USBD_LL_Init+0xbc>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bb14:	481b      	ldr	r0, [pc, #108]	; (800bb84 <USBD_LL_Init+0xbc>)
 800bb16:	f7f6 ff7b 	bl	8002a10 <HAL_PCD_Init>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800bb20:	f7f5 fb00 	bl	8001124 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb2a:	2318      	movs	r3, #24
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2100      	movs	r1, #0
 800bb30:	f7f8 fc7f 	bl	8004432 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb3a:	2358      	movs	r3, #88	; 0x58
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2180      	movs	r1, #128	; 0x80
 800bb40:	f7f8 fc77 	bl	8004432 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb4a:	23c0      	movs	r3, #192	; 0xc0
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	2181      	movs	r1, #129	; 0x81
 800bb50:	f7f8 fc6f 	bl	8004432 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bb5e:	2200      	movs	r2, #0
 800bb60:	2101      	movs	r1, #1
 800bb62:	f7f8 fc66 	bl	8004432 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb70:	2200      	movs	r2, #0
 800bb72:	2182      	movs	r1, #130	; 0x82
 800bb74:	f7f8 fc5d 	bl	8004432 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	2000136c 	.word	0x2000136c
 800bb88:	40006800 	.word	0x40006800

0800bb8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7f7 f83a 	bl	8002c1c <HAL_PCD_Start>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bbac:	7bbb      	ldrb	r3, [r7, #14]
 800bbae:	2b03      	cmp	r3, #3
 800bbb0:	d816      	bhi.n	800bbe0 <USBD_LL_Start+0x54>
 800bbb2:	a201      	add	r2, pc, #4	; (adr r2, 800bbb8 <USBD_LL_Start+0x2c>)
 800bbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb8:	0800bbc9 	.word	0x0800bbc9
 800bbbc:	0800bbcf 	.word	0x0800bbcf
 800bbc0:	0800bbd5 	.word	0x0800bbd5
 800bbc4:	0800bbdb 	.word	0x0800bbdb
    case HAL_OK :
      usb_status = USBD_OK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]
    break;
 800bbcc:	e00b      	b.n	800bbe6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd2:	e008      	b.n	800bbe6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd8:	e005      	b.n	800bbe6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	73fb      	strb	r3, [r7, #15]
    break;
 800bbde:	e002      	b.n	800bbe6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbe4:	bf00      	nop
  }
  return usb_status;
 800bbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	4608      	mov	r0, r1
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	4603      	mov	r3, r0
 800bc00:	70fb      	strb	r3, [r7, #3]
 800bc02:	460b      	mov	r3, r1
 800bc04:	70bb      	strb	r3, [r7, #2]
 800bc06:	4613      	mov	r3, r2
 800bc08:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bc18:	78bb      	ldrb	r3, [r7, #2]
 800bc1a:	883a      	ldrh	r2, [r7, #0]
 800bc1c:	78f9      	ldrb	r1, [r7, #3]
 800bc1e:	f7f7 f96b 	bl	8002ef8 <HAL_PCD_EP_Open>
 800bc22:	4603      	mov	r3, r0
 800bc24:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc26:	7bbb      	ldrb	r3, [r7, #14]
 800bc28:	2b03      	cmp	r3, #3
 800bc2a:	d817      	bhi.n	800bc5c <USBD_LL_OpenEP+0x6c>
 800bc2c:	a201      	add	r2, pc, #4	; (adr r2, 800bc34 <USBD_LL_OpenEP+0x44>)
 800bc2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc32:	bf00      	nop
 800bc34:	0800bc45 	.word	0x0800bc45
 800bc38:	0800bc4b 	.word	0x0800bc4b
 800bc3c:	0800bc51 	.word	0x0800bc51
 800bc40:	0800bc57 	.word	0x0800bc57
    case HAL_OK :
      usb_status = USBD_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	73fb      	strb	r3, [r7, #15]
    break;
 800bc48:	e00b      	b.n	800bc62 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc4e:	e008      	b.n	800bc62 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc50:	2301      	movs	r3, #1
 800bc52:	73fb      	strb	r3, [r7, #15]
    break;
 800bc54:	e005      	b.n	800bc62 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc56:	2303      	movs	r3, #3
 800bc58:	73fb      	strb	r3, [r7, #15]
    break;
 800bc5a:	e002      	b.n	800bc62 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc60:	bf00      	nop
  }
  return usb_status;
 800bc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc86:	78fa      	ldrb	r2, [r7, #3]
 800bc88:	4611      	mov	r1, r2
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7f7 f991 	bl	8002fb2 <HAL_PCD_EP_Close>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
 800bc96:	2b03      	cmp	r3, #3
 800bc98:	d816      	bhi.n	800bcc8 <USBD_LL_CloseEP+0x5c>
 800bc9a:	a201      	add	r2, pc, #4	; (adr r2, 800bca0 <USBD_LL_CloseEP+0x34>)
 800bc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca0:	0800bcb1 	.word	0x0800bcb1
 800bca4:	0800bcb7 	.word	0x0800bcb7
 800bca8:	0800bcbd 	.word	0x0800bcbd
 800bcac:	0800bcc3 	.word	0x0800bcc3
    case HAL_OK :
      usb_status = USBD_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb4:	e00b      	b.n	800bcce <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcba:	e008      	b.n	800bcce <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc0:	e005      	b.n	800bcce <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc6:	e002      	b.n	800bcce <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bcc8:	2303      	movs	r3, #3
 800bcca:	73fb      	strb	r3, [r7, #15]
    break;
 800bccc:	bf00      	nop
  }
  return usb_status;
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcf2:	78fa      	ldrb	r2, [r7, #3]
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7f7 fa23 	bl	8003142 <HAL_PCD_EP_SetStall>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd00:	7bbb      	ldrb	r3, [r7, #14]
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	d816      	bhi.n	800bd34 <USBD_LL_StallEP+0x5c>
 800bd06:	a201      	add	r2, pc, #4	; (adr r2, 800bd0c <USBD_LL_StallEP+0x34>)
 800bd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd0c:	0800bd1d 	.word	0x0800bd1d
 800bd10:	0800bd23 	.word	0x0800bd23
 800bd14:	0800bd29 	.word	0x0800bd29
 800bd18:	0800bd2f 	.word	0x0800bd2f
    case HAL_OK :
      usb_status = USBD_OK;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd20:	e00b      	b.n	800bd3a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd22:	2303      	movs	r3, #3
 800bd24:	73fb      	strb	r3, [r7, #15]
    break;
 800bd26:	e008      	b.n	800bd3a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd2c:	e005      	b.n	800bd3a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	73fb      	strb	r3, [r7, #15]
    break;
 800bd32:	e002      	b.n	800bd3a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd34:	2303      	movs	r3, #3
 800bd36:	73fb      	strb	r3, [r7, #15]
    break;
 800bd38:	bf00      	nop
  }
  return usb_status;
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd5e:	78fa      	ldrb	r2, [r7, #3]
 800bd60:	4611      	mov	r1, r2
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7f7 fa4d 	bl	8003202 <HAL_PCD_EP_ClrStall>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd6c:	7bbb      	ldrb	r3, [r7, #14]
 800bd6e:	2b03      	cmp	r3, #3
 800bd70:	d816      	bhi.n	800bda0 <USBD_LL_ClearStallEP+0x5c>
 800bd72:	a201      	add	r2, pc, #4	; (adr r2, 800bd78 <USBD_LL_ClearStallEP+0x34>)
 800bd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd78:	0800bd89 	.word	0x0800bd89
 800bd7c:	0800bd8f 	.word	0x0800bd8f
 800bd80:	0800bd95 	.word	0x0800bd95
 800bd84:	0800bd9b 	.word	0x0800bd9b
    case HAL_OK :
      usb_status = USBD_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd8c:	e00b      	b.n	800bda6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	73fb      	strb	r3, [r7, #15]
    break;
 800bd92:	e008      	b.n	800bda6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd94:	2301      	movs	r3, #1
 800bd96:	73fb      	strb	r3, [r7, #15]
    break;
 800bd98:	e005      	b.n	800bda6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd9a:	2303      	movs	r3, #3
 800bd9c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd9e:	e002      	b.n	800bda6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bda0:	2303      	movs	r3, #3
 800bda2:	73fb      	strb	r3, [r7, #15]
    break;
 800bda4:	bf00      	nop
  }
  return usb_status;
 800bda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bdc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	da0c      	bge.n	800bde6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bdcc:	78fb      	ldrb	r3, [r7, #3]
 800bdce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd2:	68f9      	ldr	r1, [r7, #12]
 800bdd4:	1c5a      	adds	r2, r3, #1
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	4413      	add	r3, r2
 800bddc:	00db      	lsls	r3, r3, #3
 800bdde:	440b      	add	r3, r1
 800bde0:	3302      	adds	r3, #2
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	e00b      	b.n	800bdfe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bde6:	78fb      	ldrb	r3, [r7, #3]
 800bde8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdec:	68f9      	ldr	r1, [r7, #12]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4413      	add	r3, r2
 800bdf4:	00db      	lsls	r3, r3, #3
 800bdf6:	440b      	add	r3, r1
 800bdf8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bdfc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3714      	adds	r7, #20
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr
	...

0800be0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be26:	78fa      	ldrb	r2, [r7, #3]
 800be28:	4611      	mov	r1, r2
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7f7 f83f 	bl	8002eae <HAL_PCD_SetAddress>
 800be30:	4603      	mov	r3, r0
 800be32:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be34:	7bbb      	ldrb	r3, [r7, #14]
 800be36:	2b03      	cmp	r3, #3
 800be38:	d816      	bhi.n	800be68 <USBD_LL_SetUSBAddress+0x5c>
 800be3a:	a201      	add	r2, pc, #4	; (adr r2, 800be40 <USBD_LL_SetUSBAddress+0x34>)
 800be3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be40:	0800be51 	.word	0x0800be51
 800be44:	0800be57 	.word	0x0800be57
 800be48:	0800be5d 	.word	0x0800be5d
 800be4c:	0800be63 	.word	0x0800be63
    case HAL_OK :
      usb_status = USBD_OK;
 800be50:	2300      	movs	r3, #0
 800be52:	73fb      	strb	r3, [r7, #15]
    break;
 800be54:	e00b      	b.n	800be6e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be56:	2303      	movs	r3, #3
 800be58:	73fb      	strb	r3, [r7, #15]
    break;
 800be5a:	e008      	b.n	800be6e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be5c:	2301      	movs	r3, #1
 800be5e:	73fb      	strb	r3, [r7, #15]
    break;
 800be60:	e005      	b.n	800be6e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be62:	2303      	movs	r3, #3
 800be64:	73fb      	strb	r3, [r7, #15]
    break;
 800be66:	e002      	b.n	800be6e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800be68:	2303      	movs	r3, #3
 800be6a:	73fb      	strb	r3, [r7, #15]
    break;
 800be6c:	bf00      	nop
  }
  return usb_status;
 800be6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	607a      	str	r2, [r7, #4]
 800be82:	603b      	str	r3, [r7, #0]
 800be84:	460b      	mov	r3, r1
 800be86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800be96:	7af9      	ldrb	r1, [r7, #11]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	f7f7 f91a 	bl	80030d4 <HAL_PCD_EP_Transmit>
 800bea0:	4603      	mov	r3, r0
 800bea2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bea4:	7dbb      	ldrb	r3, [r7, #22]
 800bea6:	2b03      	cmp	r3, #3
 800bea8:	d816      	bhi.n	800bed8 <USBD_LL_Transmit+0x60>
 800beaa:	a201      	add	r2, pc, #4	; (adr r2, 800beb0 <USBD_LL_Transmit+0x38>)
 800beac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb0:	0800bec1 	.word	0x0800bec1
 800beb4:	0800bec7 	.word	0x0800bec7
 800beb8:	0800becd 	.word	0x0800becd
 800bebc:	0800bed3 	.word	0x0800bed3
    case HAL_OK :
      usb_status = USBD_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	75fb      	strb	r3, [r7, #23]
    break;
 800bec4:	e00b      	b.n	800bede <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bec6:	2303      	movs	r3, #3
 800bec8:	75fb      	strb	r3, [r7, #23]
    break;
 800beca:	e008      	b.n	800bede <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800becc:	2301      	movs	r3, #1
 800bece:	75fb      	strb	r3, [r7, #23]
    break;
 800bed0:	e005      	b.n	800bede <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bed2:	2303      	movs	r3, #3
 800bed4:	75fb      	strb	r3, [r7, #23]
    break;
 800bed6:	e002      	b.n	800bede <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bed8:	2303      	movs	r3, #3
 800beda:	75fb      	strb	r3, [r7, #23]
    break;
 800bedc:	bf00      	nop
  }
  return usb_status;
 800bede:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3718      	adds	r7, #24
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	607a      	str	r2, [r7, #4]
 800bef2:	603b      	str	r3, [r7, #0]
 800bef4:	460b      	mov	r3, r1
 800bef6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf06:	7af9      	ldrb	r1, [r7, #11]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	f7f7 f899 	bl	8003042 <HAL_PCD_EP_Receive>
 800bf10:	4603      	mov	r3, r0
 800bf12:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bf14:	7dbb      	ldrb	r3, [r7, #22]
 800bf16:	2b03      	cmp	r3, #3
 800bf18:	d816      	bhi.n	800bf48 <USBD_LL_PrepareReceive+0x60>
 800bf1a:	a201      	add	r2, pc, #4	; (adr r2, 800bf20 <USBD_LL_PrepareReceive+0x38>)
 800bf1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf20:	0800bf31 	.word	0x0800bf31
 800bf24:	0800bf37 	.word	0x0800bf37
 800bf28:	0800bf3d 	.word	0x0800bf3d
 800bf2c:	0800bf43 	.word	0x0800bf43
    case HAL_OK :
      usb_status = USBD_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	75fb      	strb	r3, [r7, #23]
    break;
 800bf34:	e00b      	b.n	800bf4e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf36:	2303      	movs	r3, #3
 800bf38:	75fb      	strb	r3, [r7, #23]
    break;
 800bf3a:	e008      	b.n	800bf4e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	75fb      	strb	r3, [r7, #23]
    break;
 800bf40:	e005      	b.n	800bf4e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf42:	2303      	movs	r3, #3
 800bf44:	75fb      	strb	r3, [r7, #23]
    break;
 800bf46:	e002      	b.n	800bf4e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bf48:	2303      	movs	r3, #3
 800bf4a:	75fb      	strb	r3, [r7, #23]
    break;
 800bf4c:	bf00      	nop
  }
  return usb_status;
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3718      	adds	r7, #24
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	460b      	mov	r3, r1
 800bf62:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf6a:	78fa      	ldrb	r2, [r7, #3]
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7f7 f898 	bl	80030a4 <HAL_PCD_EP_GetRxCount>
 800bf74:	4603      	mov	r3, r0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
	...

0800bf80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bf8c:	78fb      	ldrb	r3, [r7, #3]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d002      	beq.n	800bf98 <HAL_PCDEx_LPM_Callback+0x18>
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d013      	beq.n	800bfbe <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bf96:	e023      	b.n	800bfe0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d007      	beq.n	800bfb0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bfa0:	f000 f83c 	bl	800c01c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfa4:	4b10      	ldr	r3, [pc, #64]	; (800bfe8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	4a0f      	ldr	r2, [pc, #60]	; (800bfe8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfaa:	f023 0306 	bic.w	r3, r3, #6
 800bfae:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fe faa5 	bl	800a506 <USBD_LL_Resume>
    break;
 800bfbc:	e010      	b.n	800bfe0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe fa82 	bl	800a4ce <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	699b      	ldr	r3, [r3, #24]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d005      	beq.n	800bfde <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfd2:	4b05      	ldr	r3, [pc, #20]	; (800bfe8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	4a04      	ldr	r2, [pc, #16]	; (800bfe8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfd8:	f043 0306 	orr.w	r3, r3, #6
 800bfdc:	6113      	str	r3, [r2, #16]
    break;
 800bfde:	bf00      	nop
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	e000ed00 	.word	0xe000ed00

0800bfec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bff4:	4b03      	ldr	r3, [pc, #12]	; (800c004 <USBD_static_malloc+0x18>)
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	370c      	adds	r7, #12
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	20001664 	.word	0x20001664

0800c008 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]

}
 800c010:	bf00      	nop
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c020:	f7f4 fe9e 	bl	8000d60 <SystemClock_Config>
}
 800c024:	bf00      	nop
 800c026:	bd80      	pop	{r7, pc}

0800c028 <memset>:
 800c028:	4402      	add	r2, r0
 800c02a:	4603      	mov	r3, r0
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d100      	bne.n	800c032 <memset+0xa>
 800c030:	4770      	bx	lr
 800c032:	f803 1b01 	strb.w	r1, [r3], #1
 800c036:	e7f9      	b.n	800c02c <memset+0x4>

0800c038 <strncmp>:
 800c038:	b510      	push	{r4, lr}
 800c03a:	b16a      	cbz	r2, 800c058 <strncmp+0x20>
 800c03c:	3901      	subs	r1, #1
 800c03e:	1884      	adds	r4, r0, r2
 800c040:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c044:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c048:	429a      	cmp	r2, r3
 800c04a:	d103      	bne.n	800c054 <strncmp+0x1c>
 800c04c:	42a0      	cmp	r0, r4
 800c04e:	d001      	beq.n	800c054 <strncmp+0x1c>
 800c050:	2a00      	cmp	r2, #0
 800c052:	d1f5      	bne.n	800c040 <strncmp+0x8>
 800c054:	1ad0      	subs	r0, r2, r3
 800c056:	bd10      	pop	{r4, pc}
 800c058:	4610      	mov	r0, r2
 800c05a:	e7fc      	b.n	800c056 <strncmp+0x1e>

0800c05c <strncpy>:
 800c05c:	b510      	push	{r4, lr}
 800c05e:	3901      	subs	r1, #1
 800c060:	4603      	mov	r3, r0
 800c062:	b132      	cbz	r2, 800c072 <strncpy+0x16>
 800c064:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c068:	f803 4b01 	strb.w	r4, [r3], #1
 800c06c:	3a01      	subs	r2, #1
 800c06e:	2c00      	cmp	r4, #0
 800c070:	d1f7      	bne.n	800c062 <strncpy+0x6>
 800c072:	441a      	add	r2, r3
 800c074:	2100      	movs	r1, #0
 800c076:	4293      	cmp	r3, r2
 800c078:	d100      	bne.n	800c07c <strncpy+0x20>
 800c07a:	bd10      	pop	{r4, pc}
 800c07c:	f803 1b01 	strb.w	r1, [r3], #1
 800c080:	e7f9      	b.n	800c076 <strncpy+0x1a>
	...

0800c084 <__libc_init_array>:
 800c084:	b570      	push	{r4, r5, r6, lr}
 800c086:	4d0d      	ldr	r5, [pc, #52]	; (800c0bc <__libc_init_array+0x38>)
 800c088:	4c0d      	ldr	r4, [pc, #52]	; (800c0c0 <__libc_init_array+0x3c>)
 800c08a:	1b64      	subs	r4, r4, r5
 800c08c:	10a4      	asrs	r4, r4, #2
 800c08e:	2600      	movs	r6, #0
 800c090:	42a6      	cmp	r6, r4
 800c092:	d109      	bne.n	800c0a8 <__libc_init_array+0x24>
 800c094:	4d0b      	ldr	r5, [pc, #44]	; (800c0c4 <__libc_init_array+0x40>)
 800c096:	4c0c      	ldr	r4, [pc, #48]	; (800c0c8 <__libc_init_array+0x44>)
 800c098:	f000 f818 	bl	800c0cc <_init>
 800c09c:	1b64      	subs	r4, r4, r5
 800c09e:	10a4      	asrs	r4, r4, #2
 800c0a0:	2600      	movs	r6, #0
 800c0a2:	42a6      	cmp	r6, r4
 800c0a4:	d105      	bne.n	800c0b2 <__libc_init_array+0x2e>
 800c0a6:	bd70      	pop	{r4, r5, r6, pc}
 800c0a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0ac:	4798      	blx	r3
 800c0ae:	3601      	adds	r6, #1
 800c0b0:	e7ee      	b.n	800c090 <__libc_init_array+0xc>
 800c0b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0b6:	4798      	blx	r3
 800c0b8:	3601      	adds	r6, #1
 800c0ba:	e7f2      	b.n	800c0a2 <__libc_init_array+0x1e>
 800c0bc:	0800c7d8 	.word	0x0800c7d8
 800c0c0:	0800c7d8 	.word	0x0800c7d8
 800c0c4:	0800c7d8 	.word	0x0800c7d8
 800c0c8:	0800c7dc 	.word	0x0800c7dc

0800c0cc <_init>:
 800c0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ce:	bf00      	nop
 800c0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0d2:	bc08      	pop	{r3}
 800c0d4:	469e      	mov	lr, r3
 800c0d6:	4770      	bx	lr

0800c0d8 <_fini>:
 800c0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0da:	bf00      	nop
 800c0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0de:	bc08      	pop	{r3}
 800c0e0:	469e      	mov	lr, r3
 800c0e2:	4770      	bx	lr
