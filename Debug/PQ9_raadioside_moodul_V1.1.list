
PQ9_raadioside_moodul_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0c0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  0800c24c  0800c24c  0001c24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c994  0800c994  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800c994  0800c994  0001c994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c99c  0800c99c  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c99c  0800c99c  0001c99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9a0  0800c9a0  0001c9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800c9a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001778  20000110  0800cab4  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001888  0800cab4  00021888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b0ea  00000000  00000000  00020183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d76  00000000  00000000  0003b26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c8  00000000  00000000  0003efe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001096  00000000  00000000  000405b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e935  00000000  00000000  00041646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b431  00000000  00000000  0005ff7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8974  00000000  00000000  0007b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b8c  00000000  00000000  00133d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001398ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000110 	.word	0x20000110
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800c234 	.word	0x0800c234

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000114 	.word	0x20000114
 80001c8:	0800c234 	.word	0x0800c234

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004cc:	f3bf 8f4f 	dsb	sy
}
 80004d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <__NVIC_SystemReset+0x24>)
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80004da:	4904      	ldr	r1, [pc, #16]	; (80004ec <__NVIC_SystemReset+0x24>)
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <__NVIC_SystemReset+0x28>)
 80004de:	4313      	orrs	r3, r2
 80004e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004e2:	f3bf 8f4f 	dsb	sy
}
 80004e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <__NVIC_SystemReset+0x20>
 80004ec:	e000ed00 	.word	0xe000ed00
 80004f0:	05fa0004 	.word	0x05fa0004

080004f4 <CDC_FS_RxDataReady_Callback>:
/* USER CODE BEGIN 0 */

/* A callback function for USB received data handling.
 * NB! Must be kept short because it is triggered by an interrupt.
 */
void CDC_FS_RxDataReady_Callback(uint8_t * RxBuf, uint8_t Length){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
	if (Length == 1){
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d154      	bne.n	80005b0 <CDC_FS_RxDataReady_Callback+0xbc>
		switch (*RxBuf){
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b7f      	cmp	r3, #127	; 0x7f
 800050c:	d018      	beq.n	8000540 <CDC_FS_RxDataReady_Callback+0x4c>
 800050e:	2b7f      	cmp	r3, #127	; 0x7f
 8000510:	dc21      	bgt.n	8000556 <CDC_FS_RxDataReady_Callback+0x62>
 8000512:	2b08      	cmp	r3, #8
 8000514:	d009      	beq.n	800052a <CDC_FS_RxDataReady_Callback+0x36>
 8000516:	2b0d      	cmp	r3, #13
 8000518:	d11d      	bne.n	8000556 <CDC_FS_RxDataReady_Callback+0x62>
		case '\r': // Marks the end of buffer
			CDC_Transmit_FS((uint8_t *) "\r\n", 2);
 800051a:	2102      	movs	r1, #2
 800051c:	482f      	ldr	r0, [pc, #188]	; (80005dc <CDC_FS_RxDataReady_Callback+0xe8>)
 800051e:	f00b f921 	bl	800b764 <CDC_Transmit_FS>
			USB_RxDataReadyFlag = 1; // The contents of the buffer are ready to be parsed
 8000522:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <CDC_FS_RxDataReady_Callback+0xec>)
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
			break;
 8000528:	e053      	b.n	80005d2 <CDC_FS_RxDataReady_Callback+0xde>
		case '\b': // BACKSPACE key (backspace for Minicom)
			if (USB_RxBufIndex > 0){
 800052a:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d04c      	beq.n	80005cc <CDC_FS_RxDataReady_Callback+0xd8>
				USB_RxBufIndex--; // Take a step back in the buffer
 8000532:	4b2c      	ldr	r3, [pc, #176]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	3b01      	subs	r3, #1
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b2a      	ldr	r3, [pc, #168]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 800053c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800053e:	e045      	b.n	80005cc <CDC_FS_RxDataReady_Callback+0xd8>
		case 0x7F: // DEL key (backspace for Picocom and Tio)
			if (USB_RxBufIndex > 0){
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d043      	beq.n	80005d0 <CDC_FS_RxDataReady_Callback+0xdc>
				USB_RxBufIndex--; // Take a step back in the buffer
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	3b01      	subs	r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000552:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000554:	e03c      	b.n	80005d0 <CDC_FS_RxDataReady_Callback+0xdc>
		default:
			if (USB_RxBufIndex < (USB_RxBufLen - 1)){
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	461a      	mov	r2, r3
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <CDC_FS_RxDataReady_Callback+0xf4>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	3b01      	subs	r3, #1
 8000562:	429a      	cmp	r2, r3
 8000564:	da0d      	bge.n	8000582 <CDC_FS_RxDataReady_Callback+0x8e>
				USB_RxBuf[USB_RxBufIndex] = *RxBuf;
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	7819      	ldrb	r1, [r3, #0]
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <CDC_FS_RxDataReady_Callback+0xf8>)
 8000572:	5499      	strb	r1, [r3, r2]
				USB_RxBufIndex++;
 8000574:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 800057e:	701a      	strb	r2, [r3, #0]
		// Copy the contents of the main USB buffer to a secondary buffer for parsing
		strncpy((char *) USB_RxBuf, (char *) RxBuf, Length);
		USB_RxBufLen = Length;
		USB_RxDataReadyFlag = 1;
	}
}
 8000580:	e027      	b.n	80005d2 <CDC_FS_RxDataReady_Callback+0xde>
			else if (USB_RxBufIndex == USB_RxBufLen - 1){
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <CDC_FS_RxDataReady_Callback+0xf4>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	429a      	cmp	r2, r3
 8000590:	d10a      	bne.n	80005a8 <CDC_FS_RxDataReady_Callback+0xb4>
				USB_RxBuf[USB_RxBufIndex] = *RxBuf;
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <CDC_FS_RxDataReady_Callback+0xf0>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7819      	ldrb	r1, [r3, #0]
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <CDC_FS_RxDataReady_Callback+0xf8>)
 800059e:	5499      	strb	r1, [r3, r2]
				USB_RxBufFull = 1;
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <CDC_FS_RxDataReady_Callback+0xfc>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	e014      	b.n	80005d2 <CDC_FS_RxDataReady_Callback+0xde>
				USB_RxBufOverflow = 1;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <CDC_FS_RxDataReady_Callback+0x100>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
}
 80005ae:	e010      	b.n	80005d2 <CDC_FS_RxDataReady_Callback+0xde>
		strncpy((char *) USB_RxBuf, (char *) RxBuf, Length);
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	461a      	mov	r2, r3
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	480d      	ldr	r0, [pc, #52]	; (80005ec <CDC_FS_RxDataReady_Callback+0xf8>)
 80005b8:	f00b fe04 	bl	800c1c4 <strncpy>
		USB_RxBufLen = Length;
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <CDC_FS_RxDataReady_Callback+0xf4>)
 80005c2:	801a      	strh	r2, [r3, #0]
		USB_RxDataReadyFlag = 1;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <CDC_FS_RxDataReady_Callback+0xec>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	e002      	b.n	80005d2 <CDC_FS_RxDataReady_Callback+0xde>
			break;
 80005cc:	bf00      	nop
 80005ce:	e000      	b.n	80005d2 <CDC_FS_RxDataReady_Callback+0xde>
			break;
 80005d0:	bf00      	nop
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	0800c24c 	.word	0x0800c24c
 80005e0:	20000685 	.word	0x20000685
 80005e4:	20000680 	.word	0x20000680
 80005e8:	20000002 	.word	0x20000002
 80005ec:	20000280 	.word	0x20000280
 80005f0:	20000681 	.word	0x20000681
 80005f4:	20000682 	.word	0x20000682

080005f8 <USB_Rx_Parser>:

void USB_Rx_Parser(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0
	if (USB_RxDataReadyFlag){
 80005fe:	4bc3      	ldr	r3, [pc, #780]	; (800090c <USB_Rx_Parser+0x314>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	f000 8299 	beq.w	8000b3a <USB_Rx_Parser+0x542>
		if (Reset){
 8000608:	4bc1      	ldr	r3, [pc, #772]	; (8000910 <USB_Rx_Parser+0x318>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d03c      	beq.n	800068a <USB_Rx_Parser+0x92>
			if (USB_RxBufIndex == 1){
 8000610:	4bc0      	ldr	r3, [pc, #768]	; (8000914 <USB_Rx_Parser+0x31c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d130      	bne.n	800067a <USB_Rx_Parser+0x82>
				switch (*USB_RxBuf){
 8000618:	4bbf      	ldr	r3, [pc, #764]	; (8000918 <USB_Rx_Parser+0x320>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b6e      	cmp	r3, #110	; 0x6e
 800061e:	d019      	beq.n	8000654 <USB_Rx_Parser+0x5c>
 8000620:	2b79      	cmp	r3, #121	; 0x79
 8000622:	d122      	bne.n	800066a <USB_Rx_Parser+0x72>
					case 'y':
						if (ANSI_ColorsOn){
 8000624:	4bbd      	ldr	r3, [pc, #756]	; (800091c <USB_Rx_Parser+0x324>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d007      	beq.n	800063c <USB_Rx_Parser+0x44>
							HAL_Delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f001 f833 	bl	8001698 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "\e[1m\e[31mRESTARTING!\r\n\e[37m\e[0m", 31);
 8000632:	211f      	movs	r1, #31
 8000634:	48ba      	ldr	r0, [pc, #744]	; (8000920 <USB_Rx_Parser+0x328>)
 8000636:	f00b f895 	bl	800b764 <CDC_Transmit_FS>
 800063a:	e006      	b.n	800064a <USB_Rx_Parser+0x52>
						}
						else{
							HAL_Delay(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f001 f82b 	bl	8001698 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "RESTARTING!\r\n", 13);
 8000642:	210d      	movs	r1, #13
 8000644:	48b7      	ldr	r0, [pc, #732]	; (8000924 <USB_Rx_Parser+0x32c>)
 8000646:	f00b f88d 	bl	800b764 <CDC_Transmit_FS>
						}
						HAL_Delay(1);
 800064a:	2001      	movs	r0, #1
 800064c:	f001 f824 	bl	8001698 <HAL_Delay>
						NVIC_SystemReset(); // Reset the device
 8000650:	f7ff ff3a 	bl	80004c8 <__NVIC_SystemReset>
					case 'n':
						Reset = 0;
 8000654:	4bae      	ldr	r3, [pc, #696]	; (8000910 <USB_Rx_Parser+0x318>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
						HAL_Delay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f001 f81c 	bl	8001698 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 8000660:	2111      	movs	r1, #17
 8000662:	48b1      	ldr	r0, [pc, #708]	; (8000928 <USB_Rx_Parser+0x330>)
 8000664:	f00b f87e 	bl	800b764 <CDC_Transmit_FS>
						break;
 8000668:	e261      	b.n	8000b2e <USB_Rx_Parser+0x536>
					default:
						HAL_Delay(1);
 800066a:	2001      	movs	r0, #1
 800066c:	f001 f814 	bl	8001698 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 8000670:	2119      	movs	r1, #25
 8000672:	48ae      	ldr	r0, [pc, #696]	; (800092c <USB_Rx_Parser+0x334>)
 8000674:	f00b f876 	bl	800b764 <CDC_Transmit_FS>
 8000678:	e259      	b.n	8000b2e <USB_Rx_Parser+0x536>
				}
			}
			else{
				HAL_Delay(1);
 800067a:	2001      	movs	r0, #1
 800067c:	f001 f80c 	bl	8001698 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 8000680:	2119      	movs	r1, #25
 8000682:	48aa      	ldr	r0, [pc, #680]	; (800092c <USB_Rx_Parser+0x334>)
 8000684:	f00b f86e 	bl	800b764 <CDC_Transmit_FS>
 8000688:	e251      	b.n	8000b2e <USB_Rx_Parser+0x536>
			}
		}
		else if (USB_RxBufIndex == 1){
 800068a:	4ba2      	ldr	r3, [pc, #648]	; (8000914 <USB_Rx_Parser+0x31c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	f040 8218 	bne.w	8000ac4 <USB_Rx_Parser+0x4cc>
			switch (*USB_RxBuf){
 8000694:	4ba0      	ldr	r3, [pc, #640]	; (8000918 <USB_Rx_Parser+0x320>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	3b52      	subs	r3, #82	; 0x52
 800069a:	2b22      	cmp	r3, #34	; 0x22
 800069c:	f200 81f7 	bhi.w	8000a8e <USB_Rx_Parser+0x496>
 80006a0:	a201      	add	r2, pc, #4	; (adr r2, 80006a8 <USB_Rx_Parser+0xb0>)
 80006a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a6:	bf00      	nop
 80006a8:	0800083f 	.word	0x0800083f
 80006ac:	08000a8f 	.word	0x08000a8f
 80006b0:	08000a8f 	.word	0x08000a8f
 80006b4:	08000a8f 	.word	0x08000a8f
 80006b8:	08000a8f 	.word	0x08000a8f
 80006bc:	08000a8f 	.word	0x08000a8f
 80006c0:	08000a8f 	.word	0x08000a8f
 80006c4:	08000a8f 	.word	0x08000a8f
 80006c8:	08000a8f 	.word	0x08000a8f
 80006cc:	08000a8f 	.word	0x08000a8f
 80006d0:	08000a8f 	.word	0x08000a8f
 80006d4:	08000a8f 	.word	0x08000a8f
 80006d8:	08000a8f 	.word	0x08000a8f
 80006dc:	08000a8f 	.word	0x08000a8f
 80006e0:	08000a8f 	.word	0x08000a8f
 80006e4:	08000a8f 	.word	0x08000a8f
 80006e8:	08000a8f 	.word	0x08000a8f
 80006ec:	080007fb 	.word	0x080007fb
 80006f0:	08000a8f 	.word	0x08000a8f
 80006f4:	08000a8f 	.word	0x08000a8f
 80006f8:	08000a8f 	.word	0x08000a8f
 80006fc:	08000a8f 	.word	0x08000a8f
 8000700:	08000a8f 	.word	0x08000a8f
 8000704:	080008e5 	.word	0x080008e5
 8000708:	08000a8f 	.word	0x08000a8f
 800070c:	08000a8f 	.word	0x08000a8f
 8000710:	08000735 	.word	0x08000735
 8000714:	0800076f 	.word	0x0800076f
 8000718:	08000a8f 	.word	0x08000a8f
 800071c:	08000a8f 	.word	0x08000a8f
 8000720:	0800095d 	.word	0x0800095d
 8000724:	08000a8f 	.word	0x08000a8f
 8000728:	08000855 	.word	0x08000855
 800072c:	08000a8f 	.word	0x08000a8f
 8000730:	0800089d 	.word	0x0800089d
			case 'l':
				if (ANSI_ColorsOn){
 8000734:	4b79      	ldr	r3, [pc, #484]	; (800091c <USB_Rx_Parser+0x324>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d008      	beq.n	800074e <USB_Rx_Parser+0x156>
					HAL_Delay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f000 ffab 	bl	8001698 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[36m\r\nLIST OF COMMANDS:\r\n\e[37m"
 8000742:	f44f 719a 	mov.w	r1, #308	; 0x134
 8000746:	487a      	ldr	r0, [pc, #488]	; (8000930 <USB_Rx_Parser+0x338>)
 8000748:	f00b f80c 	bl	800b764 <CDC_Transmit_FS>
 800074c:	e007      	b.n	800075e <USB_Rx_Parser+0x166>
							"\tt - Put the device into transmit mode\r\n"
							"\tm - Display the measured Tx/Rx power levels\r\n\n"
							, 308);
				}
				else{
					HAL_Delay(1);
 800074e:	2001      	movs	r0, #1
 8000750:	f000 ffa2 	bl	8001698 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\r\nLIST OF COMMANDS:\r\n"
 8000754:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8000758:	4876      	ldr	r0, [pc, #472]	; (8000934 <USB_Rx_Parser+0x33c>)
 800075a:	f00b f803 	bl	800b764 <CDC_Transmit_FS>
							"\tR - Reset the device\r\n"
							"\tt - Put the device into transmit mode\r\n"
							"\tm - Display the measured Tx/Rx power levels\r\n\n"
							, 298);
				}
				HAL_Delay(1);
 800075e:	2001      	movs	r0, #1
 8000760:	f000 ff9a 	bl	8001698 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 8000764:	2111      	movs	r1, #17
 8000766:	4870      	ldr	r0, [pc, #448]	; (8000928 <USB_Rx_Parser+0x330>)
 8000768:	f00a fffc 	bl	800b764 <CDC_Transmit_FS>
				break;
 800076c:	e1df      	b.n	8000b2e <USB_Rx_Parser+0x536>
			case 'm':
				uint8_t MsgTxBuf[32];
				if (ANSI_ColorsOn){
 800076e:	4b6b      	ldr	r3, [pc, #428]	; (800091c <USB_Rx_Parser+0x324>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d02a      	beq.n	80007cc <USB_Rx_Parser+0x1d4>
					HAL_Delay(1);
 8000776:	2001      	movs	r0, #1
 8000778:	f000 ff8e 	bl	8001698 <HAL_Delay>
					MsgTxBuf[0] = '\e';
 800077c:	231b      	movs	r3, #27
 800077e:	703b      	strb	r3, [r7, #0]
					MsgTxBuf[1] = '[';
 8000780:	235b      	movs	r3, #91	; 0x5b
 8000782:	707b      	strb	r3, [r7, #1]
					MsgTxBuf[2] = '3';
 8000784:	2333      	movs	r3, #51	; 0x33
 8000786:	70bb      	strb	r3, [r7, #2]
					MsgTxBuf[3] = '2';
 8000788:	2332      	movs	r3, #50	; 0x32
 800078a:	70fb      	strb	r3, [r7, #3]
					MsgTxBuf[4] = 'm';
 800078c:	236d      	movs	r3, #109	; 0x6d
 800078e:	713b      	strb	r3, [r7, #4]

					MsgTxBuf[5] = (uint8_t) ADC_Raw_Results[0];
 8000790:	4b69      	ldr	r3, [pc, #420]	; (8000938 <USB_Rx_Parser+0x340>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	717b      	strb	r3, [r7, #5]
					MsgTxBuf[6] = (uint8_t) (ADC_Raw_Results[0] >> 8);
 8000798:	4b67      	ldr	r3, [pc, #412]	; (8000938 <USB_Rx_Parser+0x340>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	71bb      	strb	r3, [r7, #6]

					MsgTxBuf[7] = '\e';
 80007a4:	231b      	movs	r3, #27
 80007a6:	71fb      	strb	r3, [r7, #7]
					MsgTxBuf[8] = '[';
 80007a8:	235b      	movs	r3, #91	; 0x5b
 80007aa:	723b      	strb	r3, [r7, #8]
					MsgTxBuf[9] = '3';
 80007ac:	2333      	movs	r3, #51	; 0x33
 80007ae:	727b      	strb	r3, [r7, #9]
					MsgTxBuf[10] = '7';
 80007b0:	2337      	movs	r3, #55	; 0x37
 80007b2:	72bb      	strb	r3, [r7, #10]
					MsgTxBuf[11] = 'm';
 80007b4:	236d      	movs	r3, #109	; 0x6d
 80007b6:	72fb      	strb	r3, [r7, #11]
					MsgTxBuf[12] = '\r';
 80007b8:	230d      	movs	r3, #13
 80007ba:	733b      	strb	r3, [r7, #12]
					MsgTxBuf[13] = '\n';
 80007bc:	230a      	movs	r3, #10
 80007be:	737b      	strb	r3, [r7, #13]
					CDC_Transmit_FS((uint8_t *) MsgTxBuf, 14);
 80007c0:	463b      	mov	r3, r7
 80007c2:	210e      	movs	r1, #14
 80007c4:	4618      	mov	r0, r3
 80007c6:	f00a ffcd 	bl	800b764 <CDC_Transmit_FS>

					MsgTxBuf[2] = '\r';
					MsgTxBuf[3] = '\n';
					CDC_Transmit_FS((uint8_t *) MsgTxBuf, 4);
				}
				break;
 80007ca:	e1b0      	b.n	8000b2e <USB_Rx_Parser+0x536>
					HAL_Delay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f000 ff63 	bl	8001698 <HAL_Delay>
					MsgTxBuf[0] = (uint8_t) ADC_Raw_Results[1];
 80007d2:	4b59      	ldr	r3, [pc, #356]	; (8000938 <USB_Rx_Parser+0x340>)
 80007d4:	885b      	ldrh	r3, [r3, #2]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	703b      	strb	r3, [r7, #0]
					MsgTxBuf[1] = (uint8_t) (ADC_Raw_Results[1] >> 8);
 80007da:	4b57      	ldr	r3, [pc, #348]	; (8000938 <USB_Rx_Parser+0x340>)
 80007dc:	885b      	ldrh	r3, [r3, #2]
 80007de:	0a1b      	lsrs	r3, r3, #8
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	707b      	strb	r3, [r7, #1]
					MsgTxBuf[2] = '\r';
 80007e6:	230d      	movs	r3, #13
 80007e8:	70bb      	strb	r3, [r7, #2]
					MsgTxBuf[3] = '\n';
 80007ea:	230a      	movs	r3, #10
 80007ec:	70fb      	strb	r3, [r7, #3]
					CDC_Transmit_FS((uint8_t *) MsgTxBuf, 4);
 80007ee:	463b      	mov	r3, r7
 80007f0:	2104      	movs	r1, #4
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00a ffb6 	bl	800b764 <CDC_Transmit_FS>
				break;
 80007f8:	e199      	b.n	8000b2e <USB_Rx_Parser+0x536>
			case 'c':
				ANSI_ColorsOn ^= 0x01; // Toggle the terminal color mode
 80007fa:	4b48      	ldr	r3, [pc, #288]	; (800091c <USB_Rx_Parser+0x324>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	f083 0301 	eor.w	r3, r3, #1
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b45      	ldr	r3, [pc, #276]	; (800091c <USB_Rx_Parser+0x324>)
 8000806:	701a      	strb	r2, [r3, #0]
				if (ANSI_ColorsOn){
 8000808:	4b44      	ldr	r3, [pc, #272]	; (800091c <USB_Rx_Parser+0x324>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d007      	beq.n	8000820 <USB_Rx_Parser+0x228>
					HAL_Delay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f000 ff41 	bl	8001698 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[32mANSI COLORS ACTIVATED!\e[37m\r\n", 36);
 8000816:	2124      	movs	r1, #36	; 0x24
 8000818:	4848      	ldr	r0, [pc, #288]	; (800093c <USB_Rx_Parser+0x344>)
 800081a:	f00a ffa3 	bl	800b764 <CDC_Transmit_FS>
 800081e:	e006      	b.n	800082e <USB_Rx_Parser+0x236>
				}
				else{
					HAL_Delay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f000 ff39 	bl	8001698 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[31mANSI COLORS DEACTIVATED!\e[37m\r\n", 36);
 8000826:	2124      	movs	r1, #36	; 0x24
 8000828:	4845      	ldr	r0, [pc, #276]	; (8000940 <USB_Rx_Parser+0x348>)
 800082a:	f00a ff9b 	bl	800b764 <CDC_Transmit_FS>
				}
				HAL_Delay(1);
 800082e:	2001      	movs	r0, #1
 8000830:	f000 ff32 	bl	8001698 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 8000834:	2111      	movs	r1, #17
 8000836:	483c      	ldr	r0, [pc, #240]	; (8000928 <USB_Rx_Parser+0x330>)
 8000838:	f00a ff94 	bl	800b764 <CDC_Transmit_FS>
				break;
 800083c:	e177      	b.n	8000b2e <USB_Rx_Parser+0x536>
			case 'R':
				HAL_Delay(1);
 800083e:	2001      	movs	r0, #1
 8000840:	f000 ff2a 	bl	8001698 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 8000844:	2119      	movs	r1, #25
 8000846:	4839      	ldr	r0, [pc, #228]	; (800092c <USB_Rx_Parser+0x334>)
 8000848:	f00a ff8c 	bl	800b764 <CDC_Transmit_FS>
				Reset = 1;
 800084c:	4b30      	ldr	r3, [pc, #192]	; (8000910 <USB_Rx_Parser+0x318>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
				break;
 8000852:	e16c      	b.n	8000b2e <USB_Rx_Parser+0x536>
			case 'r':
				uint8_t Si4468_CmdTxBuf[2], Si4468_CmdRxBuf[2];
				Si4468_CmdTxBuf[0] = Si4468_CHANGE_STATE;
 8000854:	2334      	movs	r3, #52	; 0x34
 8000856:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				Si4468_CmdTxBuf[1] = Si4468_RX_STATE; // RX
 800085a:	2308      	movs	r3, #8
 800085c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 8000860:	f107 0120 	add.w	r1, r7, #32
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	2202      	movs	r2, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f990 	bl	8000b90 <Si4468_CmdTransmitReceive>
				Si4468_WaitForCTS();
 8000870:	f000 fa2c 	bl	8000ccc <Si4468_WaitForCTS>

				if (ANSI_ColorsOn){
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <USB_Rx_Parser+0x324>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d007      	beq.n	800088c <USB_Rx_Parser+0x294>
					HAL_Delay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f000 ff0b 	bl	8001698 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[32mReceive mode active!\e[37m\r\n", 32);
 8000882:	2120      	movs	r1, #32
 8000884:	482f      	ldr	r0, [pc, #188]	; (8000944 <USB_Rx_Parser+0x34c>)
 8000886:	f00a ff6d 	bl	800b764 <CDC_Transmit_FS>
				}
				else{
					HAL_Delay(1);
					CDC_Transmit_FS((uint8_t *) "Receive mode active!\r\n", 22);
				}
				break;
 800088a:	e150      	b.n	8000b2e <USB_Rx_Parser+0x536>
					HAL_Delay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f000 ff03 	bl	8001698 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "Receive mode active!\r\n", 22);
 8000892:	2116      	movs	r1, #22
 8000894:	482c      	ldr	r0, [pc, #176]	; (8000948 <USB_Rx_Parser+0x350>)
 8000896:	f00a ff65 	bl	800b764 <CDC_Transmit_FS>
				break;
 800089a:	e148      	b.n	8000b2e <USB_Rx_Parser+0x536>
			case 't':
				Si4468_CmdTxBuf[0] = Si4468_CHANGE_STATE;
 800089c:	2334      	movs	r3, #52	; 0x34
 800089e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				Si4468_CmdTxBuf[1] = Si4468_TX_STATE; // RX
 80008a2:	2307      	movs	r3, #7
 80008a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 80008a8:	f107 0120 	add.w	r1, r7, #32
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	2202      	movs	r2, #2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f96c 	bl	8000b90 <Si4468_CmdTransmitReceive>
				Si4468_WaitForCTS();
 80008b8:	f000 fa08 	bl	8000ccc <Si4468_WaitForCTS>

				if (ANSI_ColorsOn){
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <USB_Rx_Parser+0x324>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d007      	beq.n	80008d4 <USB_Rx_Parser+0x2dc>
					HAL_Delay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f000 fee7 	bl	8001698 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[32mTransmit mode active!\e[37m\r\n", 33);
 80008ca:	2121      	movs	r1, #33	; 0x21
 80008cc:	481f      	ldr	r0, [pc, #124]	; (800094c <USB_Rx_Parser+0x354>)
 80008ce:	f00a ff49 	bl	800b764 <CDC_Transmit_FS>
				}
				else{
					HAL_Delay(1);
					CDC_Transmit_FS((uint8_t *) "Transmit mode active!\r\n", 23);
				}
				break;
 80008d2:	e12c      	b.n	8000b2e <USB_Rx_Parser+0x536>
					HAL_Delay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 fedf 	bl	8001698 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "Transmit mode active!\r\n", 23);
 80008da:	2117      	movs	r1, #23
 80008dc:	481c      	ldr	r0, [pc, #112]	; (8000950 <USB_Rx_Parser+0x358>)
 80008de:	f00a ff41 	bl	800b764 <CDC_Transmit_FS>
				break;
 80008e2:	e124      	b.n	8000b2e <USB_Rx_Parser+0x536>
			case 'i':
				if (ANSI_ColorsOn){
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <USB_Rx_Parser+0x324>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d007      	beq.n	80008fc <USB_Rx_Parser+0x304>
					HAL_Delay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f000 fed3 	bl	8001698 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[32m\r\nDevice info mode!\e[37m\r\n", 31);
 80008f2:	211f      	movs	r1, #31
 80008f4:	4817      	ldr	r0, [pc, #92]	; (8000954 <USB_Rx_Parser+0x35c>)
 80008f6:	f00a ff35 	bl	800b764 <CDC_Transmit_FS>
				}
				else{
					HAL_Delay(1);
					CDC_Transmit_FS((uint8_t *) "Device info mode!\r\n", 19);
				}
				break;
 80008fa:	e118      	b.n	8000b2e <USB_Rx_Parser+0x536>
					HAL_Delay(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f000 fecb 	bl	8001698 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "Device info mode!\r\n", 19);
 8000902:	2113      	movs	r1, #19
 8000904:	4814      	ldr	r0, [pc, #80]	; (8000958 <USB_Rx_Parser+0x360>)
 8000906:	f00a ff2d 	bl	800b764 <CDC_Transmit_FS>
				break;
 800090a:	e110      	b.n	8000b2e <USB_Rx_Parser+0x536>
 800090c:	20000685 	.word	0x20000685
 8000910:	20000686 	.word	0x20000686
 8000914:	20000680 	.word	0x20000680
 8000918:	20000280 	.word	0x20000280
 800091c:	20000683 	.word	0x20000683
 8000920:	0800c250 	.word	0x0800c250
 8000924:	0800c270 	.word	0x0800c270
 8000928:	0800c280 	.word	0x0800c280
 800092c:	0800c294 	.word	0x0800c294
 8000930:	0800c2b0 	.word	0x0800c2b0
 8000934:	0800c3e8 	.word	0x0800c3e8
 8000938:	2000027c 	.word	0x2000027c
 800093c:	0800c514 	.word	0x0800c514
 8000940:	0800c538 	.word	0x0800c538
 8000944:	0800c560 	.word	0x0800c560
 8000948:	0800c584 	.word	0x0800c584
 800094c:	0800c59c 	.word	0x0800c59c
 8000950:	0800c5c0 	.word	0x0800c5c0
 8000954:	0800c5d8 	.word	0x0800c5d8
 8000958:	0800c5f8 	.word	0x0800c5f8
			case 'p':
				if (RF_AmpSupplyOnWarning){
 800095c:	4b79      	ldr	r3, [pc, #484]	; (8000b44 <USB_Rx_Parser+0x54c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d024      	beq.n	80009ae <USB_Rx_Parser+0x3b6>
					if (ANSI_ColorsOn){
 8000964:	4b78      	ldr	r3, [pc, #480]	; (8000b48 <USB_Rx_Parser+0x550>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00e      	beq.n	800098a <USB_Rx_Parser+0x392>
						HAL_Delay(1);
 800096c:	2001      	movs	r0, #1
 800096e:	f000 fe93 	bl	8001698 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "\e[31m\e[1mWARNING!\e[0m\e[31m When the amplifier is turned on, the current\r\n"
 8000972:	21c6      	movs	r1, #198	; 0xc6
 8000974:	4875      	ldr	r0, [pc, #468]	; (8000b4c <USB_Rx_Parser+0x554>)
 8000976:	f00a fef5 	bl	800b764 <CDC_Transmit_FS>
								"consumption increases way above 500 mA. Make sure your USB port\r\n"
								"can handle this load. To proceed, repeat the command.\e[37m\r\n"
								, 198);
						HAL_Delay(1);
 800097a:	2001      	movs	r0, #1
 800097c:	f000 fe8c 	bl	8001698 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 8000980:	2111      	movs	r1, #17
 8000982:	4873      	ldr	r0, [pc, #460]	; (8000b50 <USB_Rx_Parser+0x558>)
 8000984:	f00a feee 	bl	800b764 <CDC_Transmit_FS>
 8000988:	e00d      	b.n	80009a6 <USB_Rx_Parser+0x3ae>
					}
					else{
						HAL_Delay(1);
 800098a:	2001      	movs	r0, #1
 800098c:	f000 fe84 	bl	8001698 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "WARNING! When the amplifier is turned on, the current\r\n"
 8000990:	21af      	movs	r1, #175	; 0xaf
 8000992:	4870      	ldr	r0, [pc, #448]	; (8000b54 <USB_Rx_Parser+0x55c>)
 8000994:	f00a fee6 	bl	800b764 <CDC_Transmit_FS>
								"consumption increases way above 500 mA. Make sure your USB port\r\n"
								"can handle this load. To proceed, repeat the command.\r\n"
								, 175);
						HAL_Delay(1);
 8000998:	2001      	movs	r0, #1
 800099a:	f000 fe7d 	bl	8001698 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 800099e:	2111      	movs	r1, #17
 80009a0:	486b      	ldr	r0, [pc, #428]	; (8000b50 <USB_Rx_Parser+0x558>)
 80009a2:	f00a fedf 	bl	800b764 <CDC_Transmit_FS>
					}
					RF_AmpSupplyOnWarning = 0;
 80009a6:	4b67      	ldr	r3, [pc, #412]	; (8000b44 <USB_Rx_Parser+0x54c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the RF amplifier stage 1 OFF
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn the RF amplifier stage 2 OFF
						RF_AmpSupplyOnWarning = 1; // Reset the warning flag for next turn-on event
					}
				}
				break;
 80009ac:	e0bf      	b.n	8000b2e <USB_Rx_Parser+0x536>
					RF_AmpSupplyOn ^= 0x01; // Toggle the RF amp flag
 80009ae:	4b6a      	ldr	r3, [pc, #424]	; (8000b58 <USB_Rx_Parser+0x560>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	f083 0301 	eor.w	r3, r3, #1
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b67      	ldr	r3, [pc, #412]	; (8000b58 <USB_Rx_Parser+0x560>)
 80009ba:	701a      	strb	r2, [r3, #0]
					if (RF_AmpSupplyOn){
 80009bc:	4b66      	ldr	r3, [pc, #408]	; (8000b58 <USB_Rx_Parser+0x560>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d030      	beq.n	8000a26 <USB_Rx_Parser+0x42e>
						if (ANSI_ColorsOn){
 80009c4:	4b60      	ldr	r3, [pc, #384]	; (8000b48 <USB_Rx_Parser+0x550>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d00e      	beq.n	80009ea <USB_Rx_Parser+0x3f2>
							HAL_Delay(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f000 fe63 	bl	8001698 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "\e[1m\e[32m# RF AMPLIFIER SUPPLY ON!\e[37m\r\n\e[0m", 45);
 80009d2:	212d      	movs	r1, #45	; 0x2d
 80009d4:	4861      	ldr	r0, [pc, #388]	; (8000b5c <USB_Rx_Parser+0x564>)
 80009d6:	f00a fec5 	bl	800b764 <CDC_Transmit_FS>
							HAL_Delay(1);
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 fe5c 	bl	8001698 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 80009e0:	2111      	movs	r1, #17
 80009e2:	485b      	ldr	r0, [pc, #364]	; (8000b50 <USB_Rx_Parser+0x558>)
 80009e4:	f00a febe 	bl	800b764 <CDC_Transmit_FS>
 80009e8:	e00d      	b.n	8000a06 <USB_Rx_Parser+0x40e>
							HAL_Delay(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f000 fe54 	bl	8001698 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "# RF AMPLIFIER SUPPLY ON!\r\n", 27);
 80009f0:	211b      	movs	r1, #27
 80009f2:	485b      	ldr	r0, [pc, #364]	; (8000b60 <USB_Rx_Parser+0x568>)
 80009f4:	f00a feb6 	bl	800b764 <CDC_Transmit_FS>
							HAL_Delay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f000 fe4d 	bl	8001698 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 80009fe:	2111      	movs	r1, #17
 8000a00:	4853      	ldr	r0, [pc, #332]	; (8000b50 <USB_Rx_Parser+0x558>)
 8000a02:	f00a feaf 	bl	800b764 <CDC_Transmit_FS>
						HAL_Delay(1);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 fe46 	bl	8001698 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); // Turn the RF amplifier stage 1 ON
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <USB_Rx_Parser+0x56c>)
 8000a14:	f002 f898 	bl	8002b48 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // Turn the RF amplifier stage 2 ON
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1e:	4851      	ldr	r0, [pc, #324]	; (8000b64 <USB_Rx_Parser+0x56c>)
 8000a20:	f002 f892 	bl	8002b48 <HAL_GPIO_WritePin>
				break;
 8000a24:	e083      	b.n	8000b2e <USB_Rx_Parser+0x536>
						if (ANSI_ColorsOn){
 8000a26:	4b48      	ldr	r3, [pc, #288]	; (8000b48 <USB_Rx_Parser+0x550>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00e      	beq.n	8000a4c <USB_Rx_Parser+0x454>
							HAL_Delay(1);
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f000 fe32 	bl	8001698 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "\e[1m\e[31m# RF AMPLIFIER SUPPLY OFF!\e[37m\r\n\e[0m", 46);
 8000a34:	212e      	movs	r1, #46	; 0x2e
 8000a36:	484c      	ldr	r0, [pc, #304]	; (8000b68 <USB_Rx_Parser+0x570>)
 8000a38:	f00a fe94 	bl	800b764 <CDC_Transmit_FS>
							HAL_Delay(1);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f000 fe2b 	bl	8001698 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 8000a42:	2111      	movs	r1, #17
 8000a44:	4842      	ldr	r0, [pc, #264]	; (8000b50 <USB_Rx_Parser+0x558>)
 8000a46:	f00a fe8d 	bl	800b764 <CDC_Transmit_FS>
 8000a4a:	e00d      	b.n	8000a68 <USB_Rx_Parser+0x470>
							HAL_Delay(1);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f000 fe23 	bl	8001698 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "# RF AMPLIFIER SUPPLY OFF!\r\n", 28);
 8000a52:	211c      	movs	r1, #28
 8000a54:	4845      	ldr	r0, [pc, #276]	; (8000b6c <USB_Rx_Parser+0x574>)
 8000a56:	f00a fe85 	bl	800b764 <CDC_Transmit_FS>
							HAL_Delay(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 fe1c 	bl	8001698 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 8000a60:	2111      	movs	r1, #17
 8000a62:	483b      	ldr	r0, [pc, #236]	; (8000b50 <USB_Rx_Parser+0x558>)
 8000a64:	f00a fe7e 	bl	800b764 <CDC_Transmit_FS>
						HAL_Delay(1);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f000 fe15 	bl	8001698 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the RF amplifier stage 1 OFF
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a74:	483b      	ldr	r0, [pc, #236]	; (8000b64 <USB_Rx_Parser+0x56c>)
 8000a76:	f002 f867 	bl	8002b48 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn the RF amplifier stage 2 OFF
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a80:	4838      	ldr	r0, [pc, #224]	; (8000b64 <USB_Rx_Parser+0x56c>)
 8000a82:	f002 f861 	bl	8002b48 <HAL_GPIO_WritePin>
						RF_AmpSupplyOnWarning = 1; // Reset the warning flag for next turn-on event
 8000a86:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <USB_Rx_Parser+0x54c>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
				break;
 8000a8c:	e04f      	b.n	8000b2e <USB_Rx_Parser+0x536>
			default:
				if (ANSI_ColorsOn){
 8000a8e:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <USB_Rx_Parser+0x550>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d007      	beq.n	8000aa6 <USB_Rx_Parser+0x4ae>
					HAL_Delay(1);
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 fdfe 	bl	8001698 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[1m\e[31mCOMMAND NOT FOUND!\e[37m\e[0m\r\n", 38);
 8000a9c:	2126      	movs	r1, #38	; 0x26
 8000a9e:	4834      	ldr	r0, [pc, #208]	; (8000b70 <USB_Rx_Parser+0x578>)
 8000aa0:	f00a fe60 	bl	800b764 <CDC_Transmit_FS>
 8000aa4:	e006      	b.n	8000ab4 <USB_Rx_Parser+0x4bc>
				}
				else{
					HAL_Delay(1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 fdf6 	bl	8001698 <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "COMMAND NOT FOUND!\r\n", 20);
 8000aac:	2114      	movs	r1, #20
 8000aae:	4831      	ldr	r0, [pc, #196]	; (8000b74 <USB_Rx_Parser+0x57c>)
 8000ab0:	f00a fe58 	bl	800b764 <CDC_Transmit_FS>
				}
				HAL_Delay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 fdef 	bl	8001698 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Enter a command (\"l\" for a list of available commands): ", 56);
 8000aba:	2138      	movs	r1, #56	; 0x38
 8000abc:	482e      	ldr	r0, [pc, #184]	; (8000b78 <USB_Rx_Parser+0x580>)
 8000abe:	f00a fe51 	bl	800b764 <CDC_Transmit_FS>
 8000ac2:	e034      	b.n	8000b2e <USB_Rx_Parser+0x536>
			}
		}
		else if((strncmp((char *)USB_RxBuf, "test", 4) == 0) && (USB_RxBufIndex == 4)){
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	492d      	ldr	r1, [pc, #180]	; (8000b7c <USB_Rx_Parser+0x584>)
 8000ac8:	482d      	ldr	r0, [pc, #180]	; (8000b80 <USB_Rx_Parser+0x588>)
 8000aca:	f00b fb69 	bl	800c1a0 <strncmp>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d112      	bne.n	8000afa <USB_Rx_Parser+0x502>
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <USB_Rx_Parser+0x58c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d10e      	bne.n	8000afa <USB_Rx_Parser+0x502>
			HAL_Delay(1);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f000 fddb 	bl	8001698 <HAL_Delay>
			CDC_Transmit_FS((uint8_t *) "\r\nTested!\r\n", 11);
 8000ae2:	210b      	movs	r1, #11
 8000ae4:	4828      	ldr	r0, [pc, #160]	; (8000b88 <USB_Rx_Parser+0x590>)
 8000ae6:	f00a fe3d 	bl	800b764 <CDC_Transmit_FS>
			HAL_Delay(1);
 8000aea:	2001      	movs	r0, #1
 8000aec:	f000 fdd4 	bl	8001698 <HAL_Delay>
			CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 8000af0:	2111      	movs	r1, #17
 8000af2:	4817      	ldr	r0, [pc, #92]	; (8000b50 <USB_Rx_Parser+0x558>)
 8000af4:	f00a fe36 	bl	800b764 <CDC_Transmit_FS>
 8000af8:	e019      	b.n	8000b2e <USB_Rx_Parser+0x536>
		}
		else{
			if (ANSI_ColorsOn){
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <USB_Rx_Parser+0x550>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d007      	beq.n	8000b12 <USB_Rx_Parser+0x51a>
				HAL_Delay(1);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f000 fdc8 	bl	8001698 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "\e[1m\e[31mCOMMAND NOT FOUND!\e[37m\e[0m\r\n", 38);
 8000b08:	2126      	movs	r1, #38	; 0x26
 8000b0a:	4819      	ldr	r0, [pc, #100]	; (8000b70 <USB_Rx_Parser+0x578>)
 8000b0c:	f00a fe2a 	bl	800b764 <CDC_Transmit_FS>
 8000b10:	e006      	b.n	8000b20 <USB_Rx_Parser+0x528>
			}
			else{
				HAL_Delay(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 fdc0 	bl	8001698 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "COMMAND NOT FOUND!\r\n", 20);
 8000b18:	2114      	movs	r1, #20
 8000b1a:	4816      	ldr	r0, [pc, #88]	; (8000b74 <USB_Rx_Parser+0x57c>)
 8000b1c:	f00a fe22 	bl	800b764 <CDC_Transmit_FS>
			}
			HAL_Delay(1);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f000 fdb9 	bl	8001698 <HAL_Delay>
			CDC_Transmit_FS((uint8_t *) "Enter a command (\"l\" for a list of available commands): ", 56);
 8000b26:	2138      	movs	r1, #56	; 0x38
 8000b28:	4813      	ldr	r0, [pc, #76]	; (8000b78 <USB_Rx_Parser+0x580>)
 8000b2a:	f00a fe1b 	bl	800b764 <CDC_Transmit_FS>
		}
		USB_RxDataReadyFlag = 0; // Clear the flag
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <USB_Rx_Parser+0x594>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
		USB_RxBufIndex = 0; // Reset the index
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <USB_Rx_Parser+0x58c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000683 	.word	0x20000683
 8000b4c:	0800c60c 	.word	0x0800c60c
 8000b50:	0800c280 	.word	0x0800c280
 8000b54:	0800c6d4 	.word	0x0800c6d4
 8000b58:	20000684 	.word	0x20000684
 8000b5c:	0800c784 	.word	0x0800c784
 8000b60:	0800c7b4 	.word	0x0800c7b4
 8000b64:	48000800 	.word	0x48000800
 8000b68:	0800c7d0 	.word	0x0800c7d0
 8000b6c:	0800c800 	.word	0x0800c800
 8000b70:	0800c820 	.word	0x0800c820
 8000b74:	0800c848 	.word	0x0800c848
 8000b78:	0800c860 	.word	0x0800c860
 8000b7c:	0800c89c 	.word	0x0800c89c
 8000b80:	20000280 	.word	0x20000280
 8000b84:	20000680 	.word	0x20000680
 8000b88:	0800c8a4 	.word	0x0800c8a4
 8000b8c:	20000685 	.word	0x20000685

08000b90 <Si4468_CmdTransmitReceive>:

uint8_t Si4468_CmdTransmitReceive(uint8_t * TxBuf, uint8_t * RxBuf, uint8_t Length){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f001 ffce 	bl	8002b48 <HAL_GPIO_WritePin>
	uint8_t result = HAL_SPI_TransmitReceive(&hspi1, TxBuf, RxBuf, Length, HAL_MAX_DELAY);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	9200      	str	r2, [sp, #0]
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	68f9      	ldr	r1, [r7, #12]
 8000bba:	480b      	ldr	r0, [pc, #44]	; (8000be8 <Si4468_CmdTransmitReceive+0x58>)
 8000bbc:	f005 f929 	bl	8005e12 <HAL_SPI_TransmitReceive>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f001 ffbb 	bl	8002b48 <HAL_GPIO_WritePin>
	if (result != HAL_OK) return 1;
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <Si4468_CmdTransmitReceive+0x4c>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <Si4468_CmdTransmitReceive+0x4e>
	return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000218 	.word	0x20000218

08000bec <Si4468_CmdTransmit>:

uint8_t Si4468_CmdTransmit(uint8_t * RxBuf, uint8_t Length){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f001 ffa1 	bl	8002b48 <HAL_GPIO_WritePin>
	uint8_t result = HAL_SPI_Transmit(&hspi1, RxBuf, Length, HAL_MAX_DELAY);
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	480a      	ldr	r0, [pc, #40]	; (8000c3c <Si4468_CmdTransmit+0x50>)
 8000c12:	f004 fe52 	bl	80058ba <HAL_SPI_Transmit>
 8000c16:	4603      	mov	r3, r0
 8000c18:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c24:	f001 ff90 	bl	8002b48 <HAL_GPIO_WritePin>
	if (result != HAL_OK) return 1;
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <Si4468_CmdTransmit+0x46>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e000      	b.n	8000c34 <Si4468_CmdTransmit+0x48>
	return 0;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000218 	.word	0x20000218

08000c40 <Si4468_CmdReadCmdReplyWhenReady>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
	if (result != HAL_OK) return 1;
	return 0;
}

uint8_t Si4468_CmdReadCmdReplyWhenReady(uint8_t * RxBuf, uint8_t Length){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	uint8_t CmdTxBuf[2] = {Si4468_READ_CMD_BUFF, 0};
 8000c4c:	2344      	movs	r3, #68	; 0x44
 8000c4e:	81bb      	strh	r3, [r7, #12]
	uint8_t CmdRxBuf[2] = {0, 0};
 8000c50:	2300      	movs	r3, #0
 8000c52:	813b      	strh	r3, [r7, #8]
	uint8_t result;
	while(1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5e:	f001 ff73 	bl	8002b48 <HAL_GPIO_WritePin>
		result = HAL_SPI_TransmitReceive(&hspi1, CmdTxBuf, CmdRxBuf, 2, HAL_MAX_DELAY);
 8000c62:	f107 0208 	add.w	r2, r7, #8
 8000c66:	f107 010c 	add.w	r1, r7, #12
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2302      	movs	r3, #2
 8000c72:	4815      	ldr	r0, [pc, #84]	; (8000cc8 <Si4468_CmdReadCmdReplyWhenReady+0x88>)
 8000c74:	f005 f8cd 	bl	8005e12 <HAL_SPI_TransmitReceive>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	73fb      	strb	r3, [r7, #15]
		if (CmdRxBuf[1] == 0xFF) break;
 8000c7c:	7a7b      	ldrb	r3, [r7, #9]
 8000c7e:	2bff      	cmp	r3, #255	; 0xff
 8000c80:	d00a      	beq.n	8000c98 <Si4468_CmdReadCmdReplyWhenReady+0x58>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f001 ff5c 	bl	8002b48 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f000 fd01 	bl	8001698 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000c96:	e7dd      	b.n	8000c54 <Si4468_CmdReadCmdReplyWhenReady+0x14>
		if (CmdRxBuf[1] == 0xFF) break;
 8000c98:	bf00      	nop
	}
	result += HAL_SPI_Receive(&hspi1, RxBuf, Length, HAL_MAX_DELAY);
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <Si4468_CmdReadCmdReplyWhenReady+0x88>)
 8000ca6:	f004 ff7d 	bl	8005ba4 <HAL_SPI_Receive>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	73fb      	strb	r3, [r7, #15]
	if (result != HAL_OK) return 1;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <Si4468_CmdReadCmdReplyWhenReady+0x7e>
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e000      	b.n	8000cc0 <Si4468_CmdReadCmdReplyWhenReady+0x80>
	return 0;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000218 	.word	0x20000218

08000ccc <Si4468_WaitForCTS>:

void Si4468_WaitForCTS(void){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	uint8_t Si4468_CmdTxBuf[2], Si4468_CmdRxBuf[2];
	Si4468_CmdTxBuf[0] = Si4468_READ_CMD_BUFF;
 8000cd2:	2344      	movs	r3, #68	; 0x44
 8000cd4:	713b      	strb	r3, [r7, #4]
	Si4468_CmdRxBuf[1] = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	707b      	strb	r3, [r7, #1]
	while(Si4468_CmdRxBuf[1] != 0xFF){
 8000cda:	e005      	b.n	8000ce8 <Si4468_WaitForCTS+0x1c>
		Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 8000cdc:	4639      	mov	r1, r7
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff54 	bl	8000b90 <Si4468_CmdTransmitReceive>
	while(Si4468_CmdRxBuf[1] != 0xFF){
 8000ce8:	787b      	ldrb	r3, [r7, #1]
 8000cea:	2bff      	cmp	r3, #255	; 0xff
 8000cec:	d1f6      	bne.n	8000cdc <Si4468_WaitForCTS+0x10>
	}
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0e0      	sub	sp, #384	; 0x180
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t Si4468_TxBuf[64] = {0}; // For writing to Si4468 FIFO registers
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000d04:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000d08:	223c      	movs	r2, #60	; 0x3c
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f00b fa3f 	bl	800c190 <memset>
	uint8_t Si4468_RxBuf[64] = {0}; // For reading from Si4468 FIFO registers
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000d18:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000d1c:	223c      	movs	r2, #60	; 0x3c
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00b fa35 	bl	800c190 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 fc42 	bl	80015ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f8cd 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f000 fa07 	bl	8001140 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d32:	f000 f91f 	bl	8000f74 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000d36:	f000 f993 	bl	8001060 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000d3a:	f000 f9c3 	bl	80010c4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000d3e:	f00a fc3b 	bl	800b5b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Set SPI NSS high
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4c:	f001 fefc 	bl	8002b48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn the RF amplifier stage 2 OFF
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d56:	4856      	ldr	r0, [pc, #344]	; (8000eb0 <main+0x1b8>)
 8000d58:	f001 fef6 	bl	8002b48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the RF amplifier stage 1 OFF
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d62:	4853      	ldr	r0, [pc, #332]	; (8000eb0 <main+0x1b8>)
 8000d64:	f001 fef0 	bl	8002b48 <HAL_GPIO_WritePin>

  // ### Si4468 TRANSCEIVER STARTUP
  // Perform a POR (Power on reset)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f001 fee9 	bl	8002b48 <HAL_GPIO_WritePin>
  HAL_Delay(1); // A minimum of 10 us is required
 8000d76:	2001      	movs	r0, #1
 8000d78:	f000 fc8e 	bl	8001698 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f001 fedf 	bl	8002b48 <HAL_GPIO_WritePin>
  HAL_Delay(10); // POR should not take more than 6 ms, but let's be safe...
 8000d8a:	200a      	movs	r0, #10
 8000d8c:	f000 fc84 	bl	8001698 <HAL_Delay>
  // Send a POWER_UP command to Si4468
  Si4468_CmdTxBuf[0] = Si4468_POWER_UP;
 8000d90:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d94:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d98:	2202      	movs	r2, #2
 8000d9a:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x01;
 8000d9c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000da0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000da4:	2201      	movs	r2, #1
 8000da6:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x01; // Using an external drive (TCXO) as clock source
 8000da8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000dac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000db0:	2201      	movs	r2, #1
 8000db2:	709a      	strb	r2, [r3, #2]
  /* TCXO frequency is 30 MHz (30'000'000 Hz; in hex: 0x01C9C380).
   * NB! The byte order of the following hex value is reversed due to Endianness!
   * Si4468 expects most significant byte first, but STM32L412 seems to
   * be Little-Endian.
   */
  *((uint32_t *) &Si4468_CmdTxBuf[3]) = 0x80C3C901;
 8000db4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000db8:	3303      	adds	r3, #3
 8000dba:	4a3e      	ldr	r2, [pc, #248]	; (8000eb4 <main+0x1bc>)
 8000dbc:	601a      	str	r2, [r3, #0]
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 7);
 8000dbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000dc2:	2107      	movs	r1, #7
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff11 	bl	8000bec <Si4468_CmdTransmit>

  /* Wait until Si4468 has finished the power-up sequence.
   * The transceiver will be ready when the returned value of
   * CTS (clear to send) byte will be equal to 0xFF
   */
  Si4468_WaitForCTS();
 8000dca:	f7ff ff7f 	bl	8000ccc <Si4468_WaitForCTS>

  /* Read the "part info" of the device to make sure the initialization worked
   * and we have a good SPI communication going...
   */
  Si4468_CmdTxBuf[0] = Si4468_PART_INFO;
 8000dce:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000dd2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
  Si4468_CmdRxBuf[1] = 0;
 8000dda:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000dde:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000de2:	2200      	movs	r2, #0
 8000de4:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 8000de6:	4639      	mov	r1, r7
 8000de8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000dec:	2202      	movs	r2, #2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fece 	bl	8000b90 <Si4468_CmdTransmitReceive>
  Si4468_CmdReadCmdReplyWhenReady(Si4468_CmdRxBuf, 8);
 8000df4:	463b      	mov	r3, r7
 8000df6:	2108      	movs	r1, #8
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff21 	bl	8000c40 <Si4468_CmdReadCmdReplyWhenReady>
  /* Configure the GPIO pins of the Si4468
   *
   */
  Si4468_CmdTxBuf[0] = Si4468_GPIO_PIN_CFG;
 8000dfe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e02:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e06:	2213      	movs	r2, #19
 8000e08:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x01;
 8000e0a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e0e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e12:	2201      	movs	r2, #1
 8000e14:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x01;
 8000e16:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e1a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e1e:	2201      	movs	r2, #1
 8000e20:	709a      	strb	r2, [r3, #2]
  Si4468_CmdTxBuf[3] = 0x21;
 8000e22:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e26:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e2a:	2221      	movs	r2, #33	; 0x21
 8000e2c:	70da      	strb	r2, [r3, #3]
  Si4468_CmdTxBuf[4] = 0x20;
 8000e2e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e32:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e36:	2220      	movs	r2, #32
 8000e38:	711a      	strb	r2, [r3, #4]
  Si4468_CmdTxBuf[5] = 0x27;
 8000e3a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e3e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e42:	2227      	movs	r2, #39	; 0x27
 8000e44:	715a      	strb	r2, [r3, #5]
  Si4468_CmdTxBuf[6] = 0x0B;
 8000e46:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e4a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e4e:	220b      	movs	r2, #11
 8000e50:	719a      	strb	r2, [r3, #6]
  Si4468_CmdTxBuf[7] = 0x00;
 8000e52:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000e56:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	71da      	strb	r2, [r3, #7]
  Si4468_WaitForCTS();
 8000e5e:	f7ff ff35 	bl	8000ccc <Si4468_WaitForCTS>
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 8);
 8000e62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e66:	2108      	movs	r1, #8
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff febf 	bl	8000bec <Si4468_CmdTransmit>
  Si4468_WaitForCTS();
 8000e6e:	f7ff ff2d 	bl	8000ccc <Si4468_WaitForCTS>

  // Wait for the COM port to open:
  while(!USB_COM_Port_open){
 8000e72:	bf00      	nop
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <main+0x1c0>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0fb      	beq.n	8000e74 <main+0x17c>
	  //
  };
  HAL_Delay(1000);
 8000e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e80:	f000 fc0a 	bl	8001698 <HAL_Delay>
  // Send the welcome message:
  CDC_Transmit_FS((uint8_t *) "PQ9 COM module V2.0 by 213415IACB\r\n", 35);
 8000e84:	2123      	movs	r1, #35	; 0x23
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <main+0x1c4>)
 8000e88:	f00a fc6c 	bl	800b764 <CDC_Transmit_FS>
  HAL_Delay(1);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f000 fc03 	bl	8001698 <HAL_Delay>
  CDC_Transmit_FS((uint8_t *) "Copyright (c): Ergo Haavasalu 2024, TalTech\r\n", 45);
 8000e92:	212d      	movs	r1, #45	; 0x2d
 8000e94:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <main+0x1c8>)
 8000e96:	f00a fc65 	bl	800b764 <CDC_Transmit_FS>
  HAL_Delay(1);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f000 fbfc 	bl	8001698 <HAL_Delay>
  CDC_Transmit_FS((uint8_t *) "Enter a command (\"l\" for a list of available commands): ", 56);
 8000ea0:	2138      	movs	r1, #56	; 0x38
 8000ea2:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <main+0x1cc>)
 8000ea4:	f00a fc5e 	bl	800b764 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  USB_Rx_Parser();
 8000ea8:	f7ff fba6 	bl	80005f8 <USB_Rx_Parser>
 8000eac:	e7fc      	b.n	8000ea8 <main+0x1b0>
 8000eae:	bf00      	nop
 8000eb0:	48000800 	.word	0x48000800
 8000eb4:	80c3c901 	.word	0x80c3c901
 8000eb8:	2000096c 	.word	0x2000096c
 8000ebc:	0800c8b0 	.word	0x0800c8b0
 8000ec0:	0800c8d4 	.word	0x0800c8d4
 8000ec4:	0800c860 	.word	0x0800c860

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b096      	sub	sp, #88	; 0x58
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	2244      	movs	r2, #68	; 0x44
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f00b f95a 	bl	800c190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	463b      	mov	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000eea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eee:	f003 fbcf 	bl	8004690 <HAL_PWREx_ControlVoltageScaling>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ef8:	f000 f9c8 	bl	800128c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000efc:	2312      	movs	r3, #18
 8000efe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f06:	2340      	movs	r3, #64	; 0x40
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000f12:	23b0      	movs	r3, #176	; 0xb0
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f16:	2302      	movs	r3, #2
 8000f18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f22:	230a      	movs	r3, #10
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fc12 	bl	800475c <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f3e:	f000 f9a5 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	2303      	movs	r3, #3
 8000f48:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	2104      	movs	r1, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 f860 	bl	8005020 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f66:	f000 f991 	bl	800128c <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3758      	adds	r7, #88	; 0x58
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000f98:	4a2f      	ldr	r2, [pc, #188]	; (8001058 <MX_ADC1_Init+0xe4>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fae:	4b29      	ldr	r3, [pc, #164]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff6:	4817      	ldr	r0, [pc, #92]	; (8001054 <MX_ADC1_Init+0xe0>)
 8000ff8:	f000 fd12 	bl	8001a20 <HAL_ADC_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001002:	f000 f943 	bl	800128c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4810      	ldr	r0, [pc, #64]	; (8001054 <MX_ADC1_Init+0xe0>)
 8001012:	f001 fa71 	bl	80024f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800101c:	f000 f936 	bl	800128c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_ADC1_Init+0xe8>)
 8001022:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001024:	2306      	movs	r3, #6
 8001026:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800102c:	237f      	movs	r3, #127	; 0x7f
 800102e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001030:	2304      	movs	r3, #4
 8001032:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_ADC1_Init+0xe0>)
 800103e:	f000 fe39 	bl	8001cb4 <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001048:	f000 f920 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000012c 	.word	0x2000012c
 8001058:	50040000 	.word	0x50040000
 800105c:	2e300800 	.word	0x2e300800

08001060 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_LPUART1_UART_Init+0x58>)
 8001066:	4a15      	ldr	r2, [pc, #84]	; (80010bc <MX_LPUART1_UART_Init+0x5c>)
 8001068:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_LPUART1_UART_Init+0x58>)
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <MX_LPUART1_UART_Init+0x60>)
 800106e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_LPUART1_UART_Init+0x58>)
 8001072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001076:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_LPUART1_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_LPUART1_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_LPUART1_UART_Init+0x58>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_LPUART1_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_LPUART1_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_LPUART1_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800109c:	2300      	movs	r3, #0
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_LPUART1_UART_Init+0x58>)
 80010a4:	f005 ff03 	bl	8006eae <HAL_RS485Ex_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80010ae:	f000 f8ed 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000190 	.word	0x20000190
 80010bc:	40008000 	.word	0x40008000
 80010c0:	00033324 	.word	0x00033324

080010c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_SPI1_Init+0x74>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <MX_SPI1_Init+0x78>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_SPI1_Init+0x74>)
 80010d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_SPI1_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_SPI1_Init+0x74>)
 80010de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_SPI1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_SPI1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_SPI1_Init+0x74>)
 80010f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_SPI1_Init+0x74>)
 80010fa:	2210      	movs	r2, #16
 80010fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_SPI1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_SPI1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_SPI1_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_SPI1_Init+0x74>)
 8001112:	2207      	movs	r2, #7
 8001114:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_SPI1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_SPI1_Init+0x74>)
 800111e:	2208      	movs	r2, #8
 8001120:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_SPI1_Init+0x74>)
 8001124:	f004 fb26 	bl	8005774 <HAL_SPI_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800112e:	f000 f8ad 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000218 	.word	0x20000218
 800113c:	40013000 	.word	0x40013000

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b4a      	ldr	r3, [pc, #296]	; (8001280 <MX_GPIO_Init+0x140>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a49      	ldr	r2, [pc, #292]	; (8001280 <MX_GPIO_Init+0x140>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <MX_GPIO_Init+0x140>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b44      	ldr	r3, [pc, #272]	; (8001280 <MX_GPIO_Init+0x140>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a43      	ldr	r2, [pc, #268]	; (8001280 <MX_GPIO_Init+0x140>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b41      	ldr	r3, [pc, #260]	; (8001280 <MX_GPIO_Init+0x140>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b3e      	ldr	r3, [pc, #248]	; (8001280 <MX_GPIO_Init+0x140>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a3d      	ldr	r2, [pc, #244]	; (8001280 <MX_GPIO_Init+0x140>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <MX_GPIO_Init+0x140>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_AMP_EN1_Pin|RF_AMP_EN2_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80011a4:	4837      	ldr	r0, [pc, #220]	; (8001284 <MX_GPIO_Init+0x144>)
 80011a6:	f001 fccf 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYS_RST_Pin|TRANS_SDN_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f248 1110 	movw	r1, #33040	; 0x8110
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f001 fcc8 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FWD_MEAS_AMP_EN_Pin|REV_MEAS_AMP_EN_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	21c0      	movs	r1, #192	; 0xc0
 80011bc:	4832      	ldr	r0, [pc, #200]	; (8001288 <MX_GPIO_Init+0x148>)
 80011be:	f001 fcc3 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_AMP_EN1_Pin RF_AMP_EN2_Pin */
  GPIO_InitStruct.Pin = RF_AMP_EN1_Pin|RF_AMP_EN2_Pin;
 80011c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	482a      	ldr	r0, [pc, #168]	; (8001284 <MX_GPIO_Init+0x144>)
 80011dc:	f001 fb42 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRANS_GPIO1_Pin TRANS_GPIO0_Pin LDO_PG_Pin */
  GPIO_InitStruct.Pin = TRANS_GPIO1_Pin|TRANS_GPIO0_Pin|LDO_PG_Pin;
 80011e0:	f240 2303 	movw	r3, #515	; 0x203
 80011e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f001 fb34 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYS_RST_Pin TRANS_SDN_Pin */
  GPIO_InitStruct.Pin = SYS_RST_Pin|TRANS_SDN_Pin;
 80011fc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001218:	f001 fb24 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRANS_NIRQ_Pin */
  GPIO_InitStruct.Pin = TRANS_NIRQ_Pin;
 800121c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001222:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TRANS_NIRQ_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f001 fb15 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800123a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800123e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f001 fb05 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : FWD_MEAS_AMP_EN_Pin REV_MEAS_AMP_EN_Pin */
  GPIO_InitStruct.Pin = FWD_MEAS_AMP_EN_Pin|REV_MEAS_AMP_EN_Pin;
 800125a:	23c0      	movs	r3, #192	; 0xc0
 800125c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_GPIO_Init+0x148>)
 8001272:	f001 faf7 	bl	8002864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	48000800 	.word	0x48000800
 8001288:	48000400 	.word	0x48000400

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>
	...

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_MspInit+0x44>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_MspInit+0x44>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6613      	str	r3, [r2, #96]	; 0x60
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_MspInit+0x44>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_MspInit+0x44>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_MspInit+0x44>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	6593      	str	r3, [r2, #88]	; 0x58
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_MspInit+0x44>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a15      	ldr	r2, [pc, #84]	; (8001354 <HAL_ADC_MspInit+0x74>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d124      	bne.n	800134c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_ADC_MspInit+0x78>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a14      	ldr	r2, [pc, #80]	; (8001358 <HAL_ADC_MspInit+0x78>)
 8001308:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_ADC_MspInit+0x78>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_ADC_MspInit+0x78>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_ADC_MspInit+0x78>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_ADC_MspInit+0x78>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = FWD_MEAS_ADC_Pin|REV_MEAS_ADC_Pin;
 8001332:	23c0      	movs	r3, #192	; 0xc0
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001336:	230b      	movs	r3, #11
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f001 fa8c 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	50040000 	.word	0x50040000
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b098      	sub	sp, #96	; 0x60
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	2234      	movs	r2, #52	; 0x34
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f00a ff07 	bl	800c190 <memset>
  if(huart->Instance==LPUART1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a2d      	ldr	r2, [pc, #180]	; (800143c <HAL_UART_MspInit+0xe0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d152      	bne.n	8001432 <HAL_UART_MspInit+0xd6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800138c:	2320      	movs	r3, #32
 800138e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	4618      	mov	r0, r3
 800139a:	f004 f865 	bl	8005468 <HAL_RCCEx_PeriphCLKConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013a4:	f7ff ff72 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ac:	4a24      	ldr	r2, [pc, #144]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013dc:	4a18      	ldr	r2, [pc, #96]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013de:	f043 0302 	orr.w	r3, r3, #2
 80013e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_UART_MspInit+0xe4>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013f0:	230c      	movs	r3, #12
 80013f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001400:	2308      	movs	r3, #8
 8001402:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f001 fa29 	bl	8002864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001412:	2302      	movs	r3, #2
 8001414:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001422:	2308      	movs	r3, #8
 8001424:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_UART_MspInit+0xe8>)
 800142e:	f001 fa19 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3760      	adds	r7, #96	; 0x60
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40008000 	.word	0x40008000
 8001440:	40021000 	.word	0x40021000
 8001444:	48000400 	.word	0x48000400

08001448 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_SPI_MspInit+0x7c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d127      	bne.n	80014ba <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_SPI_MspInit+0x80>)
 800146c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146e:	4a16      	ldr	r2, [pc, #88]	; (80014c8 <HAL_SPI_MspInit+0x80>)
 8001470:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001474:	6613      	str	r3, [r2, #96]	; 0x60
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_SPI_MspInit+0x80>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_SPI_MspInit+0x80>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_SPI_MspInit+0x80>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_SPI_MspInit+0x80>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800149a:	2338      	movs	r3, #56	; 0x38
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014aa:	2305      	movs	r3, #5
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_SPI_MspInit+0x84>)
 80014b6:	f001 f9d5 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40013000 	.word	0x40013000
 80014c8:	40021000 	.word	0x40021000
 80014cc:	48000400 	.word	0x48000400

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x4>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151c:	f000 f89c 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <USB_IRQHandler+0x10>)
 800152a:	f001 fc4d 	bl	8002dc8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20001370 	.word	0x20001370

08001538 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001594 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001560:	f7ff ffea 	bl	8001538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <LoopForever+0x6>)
  ldr r1, =_edata
 8001566:	490d      	ldr	r1, [pc, #52]	; (800159c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <LoopForever+0xe>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800157c:	4c0a      	ldr	r4, [pc, #40]	; (80015a8 <LoopForever+0x16>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158a:	f00a fe2f 	bl	800c1ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800158e:	f7ff fbb3 	bl	8000cf8 <main>

08001592 <LoopForever>:

LoopForever:
    b LoopForever
 8001592:	e7fe      	b.n	8001592 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001594:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80015a0:	0800c9a4 	.word	0x0800c9a4
  ldr r2, =_sbss
 80015a4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80015a8:	20001888 	.word	0x20001888

080015ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC1_2_IRQHandler>

080015ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f001 f911 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f80e 	bl	80015e0 <HAL_InitTick>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	e001      	b.n	80015d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015d0:	f7ff fe62 	bl	8001298 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015d4:	79fb      	ldrb	r3, [r7, #7]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_InitTick+0x6c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d023      	beq.n	800163c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_InitTick+0x70>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_InitTick+0x6c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f001 f91d 	bl	800284a <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10f      	bne.n	8001636 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d809      	bhi.n	8001630 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f001 f8e7 	bl	80027f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_InitTick+0x74>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e007      	b.n	8001640 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e004      	b.n	8001640 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e001      	b.n	8001640 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000000c 	.word	0x2000000c
 8001650:	20000004 	.word	0x20000004
 8001654:	20000008 	.word	0x20000008

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	2000000c 	.word	0x2000000c
 800167c:	20000688 	.word	0x20000688

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000688 	.word	0x20000688

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffde 	bl	8001680 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000000c 	.word	0x2000000c

080016e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	609a      	str	r2, [r3, #8]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3360      	adds	r3, #96	; 0x60
 800175a:	461a      	mov	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <LL_ADC_SetOffset+0x44>)
 800176a:	4013      	ands	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	4313      	orrs	r3, r2
 8001778:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001780:	bf00      	nop
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	03fff000 	.word	0x03fff000

08001790 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3360      	adds	r3, #96	; 0x60
 800179e:	461a      	mov	r2, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3360      	adds	r3, #96	; 0x60
 80017cc:	461a      	mov	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017e6:	bf00      	nop
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	615a      	str	r2, [r3, #20]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3330      	adds	r3, #48	; 0x30
 8001828:	461a      	mov	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	4413      	add	r3, r2
 8001836:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	211f      	movs	r1, #31
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	401a      	ands	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	0e9b      	lsrs	r3, r3, #26
 8001850:	f003 011f 	and.w	r1, r3, #31
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f003 031f 	and.w	r3, r3, #31
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	431a      	orrs	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001864:	bf00      	nop
 8001866:	371c      	adds	r7, #28
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3314      	adds	r3, #20
 8001880:	461a      	mov	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	0e5b      	lsrs	r3, r3, #25
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	0d1b      	lsrs	r3, r3, #20
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	2107      	movs	r1, #7
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	401a      	ands	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	0d1b      	lsrs	r3, r3, #20
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	431a      	orrs	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018ba:	bf00      	nop
 80018bc:	371c      	adds	r7, #28
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e0:	43db      	mvns	r3, r3
 80018e2:	401a      	ands	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0318 	and.w	r3, r3, #24
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <LL_ADC_SetChannelSingleDiff+0x44>)
 80018ec:	40d9      	lsrs	r1, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	400b      	ands	r3, r1
 80018f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f6:	431a      	orrs	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	0007ffff 	.word	0x0007ffff

08001910 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6093      	str	r3, [r2, #8]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001948:	d101      	bne.n	800194e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800196c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001970:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001998:	d101      	bne.n	800199e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <LL_ADC_IsEnabled+0x18>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <LL_ADC_IsEnabled+0x1a>
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d101      	bne.n	80019ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d101      	bne.n	8001a10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e12b      	b.n	8001c92 <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff fc49 	bl	80012e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff67 	bl	8001934 <LL_ADC_IsDeepPowerDownEnabled>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff4d 	bl	8001910 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff82 	bl	8001984 <LL_ADC_IsInternalRegulatorEnabled>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d115      	bne.n	8001ab2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff66 	bl	800195c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a90:	4b82      	ldr	r3, [pc, #520]	; (8001c9c <HAL_ADC_Init+0x27c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	099b      	lsrs	r3, r3, #6
 8001a96:	4a82      	ldr	r2, [pc, #520]	; (8001ca0 <HAL_ADC_Init+0x280>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	099b      	lsrs	r3, r3, #6
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001aa4:	e002      	b.n	8001aac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f9      	bne.n	8001aa6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff64 	bl	8001984 <LL_ADC_IsInternalRegulatorEnabled>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10d      	bne.n	8001ade <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	f043 0210 	orr.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	f043 0201 	orr.w	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff75 	bl	80019d2 <LL_ADC_REG_IsConversionOngoing>
 8001ae8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 80c4 	bne.w	8001c80 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 80c0 	bne.w	8001c80 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b08:	f043 0202 	orr.w	r2, r3, #2
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff49 	bl	80019ac <LL_ADC_IsEnabled>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d110      	bne.n	8001b42 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b20:	4860      	ldr	r0, [pc, #384]	; (8001ca4 <HAL_ADC_Init+0x284>)
 8001b22:	f7ff ff43 	bl	80019ac <LL_ADC_IsEnabled>
 8001b26:	4604      	mov	r4, r0
 8001b28:	485f      	ldr	r0, [pc, #380]	; (8001ca8 <HAL_ADC_Init+0x288>)
 8001b2a:	f7ff ff3f 	bl	80019ac <LL_ADC_IsEnabled>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4323      	orrs	r3, r4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d105      	bne.n	8001b42 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	485b      	ldr	r0, [pc, #364]	; (8001cac <HAL_ADC_Init+0x28c>)
 8001b3e:	f7ff fdcf 	bl	80016e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7e5b      	ldrb	r3, [r3, #25]
 8001b46:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b4c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b52:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b58:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b60:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d106      	bne.n	8001b7e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	3b01      	subs	r3, #1
 8001b76:	045b      	lsls	r3, r3, #17
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_ADC_Init+0x290>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	69b9      	ldr	r1, [r7, #24]
 8001baa:	430b      	orrs	r3, r1
 8001bac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff20 	bl	80019f8 <LL_ADC_INJ_IsConversionOngoing>
 8001bb8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d13d      	bne.n	8001c3c <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d13a      	bne.n	8001c3c <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bd2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001be2:	f023 0302 	bic.w	r3, r3, #2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	69b9      	ldr	r1, [r7, #24]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d118      	bne.n	8001c2c <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c10:	4311      	orrs	r1, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c16:	4311      	orrs	r1, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	611a      	str	r2, [r3, #16]
 8001c2a:	e007      	b.n	8001c3c <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d10c      	bne.n	8001c5e <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f023 010f 	bic.w	r1, r3, #15
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	1e5a      	subs	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c5c:	e007      	b.n	8001c6e <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 020f 	bic.w	r2, r2, #15
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f023 0303 	bic.w	r3, r3, #3
 8001c76:	f043 0201 	orr.w	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54
 8001c7e:	e007      	b.n	8001c90 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	f043 0210 	orr.w	r2, r3, #16
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	053e2d63 	.word	0x053e2d63
 8001ca4:	50040000 	.word	0x50040000
 8001ca8:	50040100 	.word	0x50040100
 8001cac:	50040300 	.word	0x50040300
 8001cb0:	fff0c007 	.word	0xfff0c007

08001cb4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b0b6      	sub	sp, #216	; 0xd8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x22>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e3d5      	b.n	8002482 <HAL_ADC_ConfigChannel+0x7ce>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fe75 	bl	80019d2 <LL_ADC_REG_IsConversionOngoing>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 83ba 	bne.w	8002464 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d824      	bhi.n	8001d4a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	3b02      	subs	r3, #2
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d81b      	bhi.n	8001d42 <HAL_ADC_ConfigChannel+0x8e>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <HAL_ADC_ConfigChannel+0x5c>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d21 	.word	0x08001d21
 8001d14:	08001d29 	.word	0x08001d29
 8001d18:	08001d31 	.word	0x08001d31
 8001d1c:	08001d39 	.word	0x08001d39
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001d20:	230c      	movs	r3, #12
 8001d22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d26:	e010      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001d28:	2312      	movs	r3, #18
 8001d2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d2e:	e00c      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001d30:	2318      	movs	r3, #24
 8001d32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d36:	e008      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d40:	e003      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d42:	2306      	movs	r3, #6
 8001d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d48:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001d58:	f7ff fd5e 	bl	8001818 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fe36 	bl	80019d2 <LL_ADC_REG_IsConversionOngoing>
 8001d66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fe42 	bl	80019f8 <LL_ADC_INJ_IsConversionOngoing>
 8001d74:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 81bf 	bne.w	8002100 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 81ba 	bne.w	8002100 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d94:	d10f      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7ff fd65 	bl	8001870 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fd1f 	bl	80017f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001db4:	e00e      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6819      	ldr	r1, [r3, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f7ff fd54 	bl	8001870 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fd0f 	bl	80017f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d00a      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6919      	ldr	r1, [r3, #16]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e06:	f7ff fc9f 	bl	8001748 <LL_ADC_SetOffset>
 8001e0a:	e179      	b.n	8002100 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fcbc 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10a      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x184>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fcb1 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	f003 021f 	and.w	r2, r3, #31
 8001e36:	e01e      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x1c2>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fca6 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e004      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001e6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d105      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x1da>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	0e9b      	lsrs	r3, r3, #26
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	e018      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x20c>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001eaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	e004      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001eb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d106      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fc75 	bl	80017bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fc59 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10a      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x24a>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fc4e 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	0e9b      	lsrs	r3, r3, #26
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	e01e      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x288>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2101      	movs	r1, #1
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fc43 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001f24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	e004      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001f30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x2a0>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0e9b      	lsrs	r3, r3, #26
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	e018      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x2d2>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001f78:	2320      	movs	r3, #32
 8001f7a:	e004      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d106      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2101      	movs	r1, #1
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fc12 	bl	80017bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fbf6 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10a      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x310>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fbeb 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	0e9b      	lsrs	r3, r3, #26
 8001fbe:	f003 021f 	and.w	r2, r3, #31
 8001fc2:	e01e      	b.n	8002002 <HAL_ADC_ConfigChannel+0x34e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2102      	movs	r1, #2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fbe0 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001fe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e004      	b.n	8002000 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <HAL_ADC_ConfigChannel+0x366>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	e014      	b.n	8002044 <HAL_ADC_ConfigChannel+0x390>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800202a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800202e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002036:	2320      	movs	r3, #32
 8002038:	e004      	b.n	8002044 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800203a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002044:	429a      	cmp	r2, r3
 8002046:	d106      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2200      	movs	r2, #0
 800204e:	2102      	movs	r1, #2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fbb3 	bl	80017bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2103      	movs	r1, #3
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fb97 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x3ce>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2103      	movs	r1, #3
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fb8c 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	0e9b      	lsrs	r3, r3, #26
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	e017      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x3fe>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2103      	movs	r1, #3
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fb81 	bl	8001790 <LL_ADC_GetOffsetChannel>
 800208e:	4603      	mov	r3, r0
 8002090:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800209a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800209e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80020a4:	2320      	movs	r3, #32
 80020a6:	e003      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80020a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x416>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	0e9b      	lsrs	r3, r3, #26
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	e011      	b.n	80020ee <HAL_ADC_ConfigChannel+0x43a>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80020d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020da:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80020dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e003      	b.n	80020ee <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80020e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d106      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	2103      	movs	r1, #3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fb5e 	bl	80017bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fc51 	bl	80019ac <LL_ADC_IsEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 813f 	bne.w	8002390 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	461a      	mov	r2, r3
 8002120:	f7ff fbd2 	bl	80018c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a8e      	ldr	r2, [pc, #568]	; (8002364 <HAL_ADC_ConfigChannel+0x6b0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	f040 8130 	bne.w	8002390 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10b      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x4a4>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	3301      	adds	r3, #1
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	2b09      	cmp	r3, #9
 800214e:	bf94      	ite	ls
 8002150:	2301      	movls	r3, #1
 8002152:	2300      	movhi	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e019      	b.n	800218c <HAL_ADC_ConfigChannel+0x4d8>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002168:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800216a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002170:	2320      	movs	r3, #32
 8002172:	e003      	b.n	800217c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2b09      	cmp	r3, #9
 8002184:	bf94      	ite	ls
 8002186:	2301      	movls	r3, #1
 8002188:	2300      	movhi	r3, #0
 800218a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800218c:	2b00      	cmp	r3, #0
 800218e:	d079      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002198:	2b00      	cmp	r3, #0
 800219a:	d107      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x4f8>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	3301      	adds	r3, #1
 80021a4:	069b      	lsls	r3, r3, #26
 80021a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021aa:	e015      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x524>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80021ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80021be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80021c4:	2320      	movs	r3, #32
 80021c6:	e003      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80021c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	069b      	lsls	r3, r3, #26
 80021d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x544>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	3301      	adds	r3, #1
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	2101      	movs	r1, #1
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	e017      	b.n	8002228 <HAL_ADC_ConfigChannel+0x574>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002208:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800220a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002210:	2320      	movs	r3, #32
 8002212:	e003      	b.n	800221c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2101      	movs	r1, #1
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	ea42 0103 	orr.w	r1, r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_ADC_ConfigChannel+0x59a>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	3301      	adds	r3, #1
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	051b      	lsls	r3, r3, #20
 800224c:	e018      	b.n	8002280 <HAL_ADC_ConfigChannel+0x5cc>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002266:	2320      	movs	r3, #32
 8002268:	e003      	b.n	8002272 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	3301      	adds	r3, #1
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002280:	430b      	orrs	r3, r1
 8002282:	e080      	b.n	8002386 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x5ec>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	3301      	adds	r3, #1
 8002298:	069b      	lsls	r3, r3, #26
 800229a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800229e:	e015      	b.n	80022cc <HAL_ADC_ConfigChannel+0x618>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e003      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	069b      	lsls	r3, r3, #26
 80022c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x638>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	3301      	adds	r3, #1
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	e017      	b.n	800231c <HAL_ADC_ConfigChannel+0x668>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	61bb      	str	r3, [r7, #24]
  return result;
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e003      	b.n	8002310 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	ea42 0103 	orr.w	r1, r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10d      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x694>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0e9b      	lsrs	r3, r3, #26
 8002332:	3301      	adds	r3, #1
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	3b1e      	subs	r3, #30
 8002340:	051b      	lsls	r3, r3, #20
 8002342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002346:	e01d      	b.n	8002384 <HAL_ADC_ConfigChannel+0x6d0>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	60fb      	str	r3, [r7, #12]
  return result;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d103      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002360:	2320      	movs	r3, #32
 8002362:	e005      	b.n	8002370 <HAL_ADC_ConfigChannel+0x6bc>
 8002364:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f003 021f 	and.w	r2, r3, #31
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	3b1e      	subs	r3, #30
 800237e:	051b      	lsls	r3, r3, #20
 8002380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002384:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800238a:	4619      	mov	r1, r3
 800238c:	f7ff fa70 	bl	8001870 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_ADC_ConfigChannel+0x7d8>)
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d06c      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800239c:	483c      	ldr	r0, [pc, #240]	; (8002490 <HAL_ADC_ConfigChannel+0x7dc>)
 800239e:	f7ff f9c5 	bl	800172c <LL_ADC_GetCommonPathInternalCh>
 80023a2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a3a      	ldr	r2, [pc, #232]	; (8002494 <HAL_ADC_ConfigChannel+0x7e0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d127      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d121      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a35      	ldr	r2, [pc, #212]	; (8002498 <HAL_ADC_ConfigChannel+0x7e4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d157      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023ce:	4619      	mov	r1, r3
 80023d0:	482f      	ldr	r0, [pc, #188]	; (8002490 <HAL_ADC_ConfigChannel+0x7dc>)
 80023d2:	f7ff f998 	bl	8001706 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d6:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_ADC_ConfigChannel+0x7e8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	4a30      	ldr	r2, [pc, #192]	; (80024a0 <HAL_ADC_ConfigChannel+0x7ec>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023f0:	e002      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f9      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023fe:	e03a      	b.n	8002476 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d113      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800240a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800240e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10d      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1f      	ldr	r2, [pc, #124]	; (8002498 <HAL_ADC_ConfigChannel+0x7e4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d12a      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002428:	4619      	mov	r1, r3
 800242a:	4819      	ldr	r0, [pc, #100]	; (8002490 <HAL_ADC_ConfigChannel+0x7dc>)
 800242c:	f7ff f96b 	bl	8001706 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002430:	e021      	b.n	8002476 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d11c      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800243c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d116      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a12      	ldr	r2, [pc, #72]	; (8002498 <HAL_ADC_ConfigChannel+0x7e4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d111      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002456:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800245a:	4619      	mov	r1, r3
 800245c:	480c      	ldr	r0, [pc, #48]	; (8002490 <HAL_ADC_ConfigChannel+0x7dc>)
 800245e:	f7ff f952 	bl	8001706 <LL_ADC_SetCommonPathInternalCh>
 8002462:	e008      	b.n	8002476 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	f043 0220 	orr.w	r2, r3, #32
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800247e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002482:	4618      	mov	r0, r3
 8002484:	37d8      	adds	r7, #216	; 0xd8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	80080000 	.word	0x80080000
 8002490:	50040300 	.word	0x50040300
 8002494:	c7520000 	.word	0xc7520000
 8002498:	50040000 	.word	0x50040000
 800249c:	20000004 	.word	0x20000004
 80024a0:	053e2d63 	.word	0x053e2d63
 80024a4:	cb840000 	.word	0xcb840000
 80024a8:	80000001 	.word	0x80000001

080024ac <LL_ADC_IsEnabled>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <LL_ADC_IsEnabled+0x18>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <LL_ADC_IsEnabled+0x1a>
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d101      	bne.n	80024ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b09f      	sub	sp, #124	; 0x7c
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002512:	2302      	movs	r3, #2
 8002514:	e089      	b.n	800262a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800251e:	2300      	movs	r3, #0
 8002520:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002522:	2300      	movs	r3, #0
 8002524:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a42      	ldr	r2, [pc, #264]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d102      	bne.n	8002536 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002530:	4b41      	ldr	r3, [pc, #260]	; (8002638 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	e001      	b.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10b      	bne.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f043 0220 	orr.w	r2, r3, #32
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e068      	b.n	800262a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ffb9 	bl	80024d2 <LL_ADC_REG_IsConversionOngoing>
 8002560:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ffb3 	bl	80024d2 <LL_ADC_REG_IsConversionOngoing>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d14a      	bne.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002574:	2b00      	cmp	r3, #0
 8002576:	d147      	bne.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002578:	4b30      	ldr	r3, [pc, #192]	; (800263c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800257a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d027      	beq.n	80025d4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002596:	035b      	lsls	r3, r3, #13
 8002598:	430b      	orrs	r3, r1
 800259a:	431a      	orrs	r2, r3
 800259c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025a0:	4824      	ldr	r0, [pc, #144]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80025a2:	f7ff ff83 	bl	80024ac <LL_ADC_IsEnabled>
 80025a6:	4604      	mov	r4, r0
 80025a8:	4823      	ldr	r0, [pc, #140]	; (8002638 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80025aa:	f7ff ff7f 	bl	80024ac <LL_ADC_IsEnabled>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4323      	orrs	r3, r4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d132      	bne.n	800261c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025be:	f023 030f 	bic.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	6811      	ldr	r1, [r2, #0]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	6892      	ldr	r2, [r2, #8]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	431a      	orrs	r2, r3
 80025ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025d2:	e023      	b.n	800261c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025e0:	4814      	ldr	r0, [pc, #80]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80025e2:	f7ff ff63 	bl	80024ac <LL_ADC_IsEnabled>
 80025e6:	4604      	mov	r4, r0
 80025e8:	4813      	ldr	r0, [pc, #76]	; (8002638 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80025ea:	f7ff ff5f 	bl	80024ac <LL_ADC_IsEnabled>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4323      	orrs	r3, r4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d112      	bne.n	800261c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025fe:	f023 030f 	bic.w	r3, r3, #15
 8002602:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002604:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002606:	e009      	b.n	800261c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260c:	f043 0220 	orr.w	r2, r3, #32
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800261a:	e000      	b.n	800261e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800261c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002626:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800262a:	4618      	mov	r0, r3
 800262c:	377c      	adds	r7, #124	; 0x7c
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}
 8002632:	bf00      	nop
 8002634:	50040000 	.word	0x50040000
 8002638:	50040100 	.word	0x50040100
 800263c:	50040300 	.word	0x50040300

08002640 <__NVIC_SetPriorityGrouping>:
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800266c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_GetPriorityGrouping>:
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_EnableIRQ>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db0b      	blt.n	80026ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <__NVIC_EnableIRQ+0x38>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2001      	movs	r0, #1
 80026c6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <__NVIC_SetPriority>:
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	; (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ac:	d301      	bcc.n	80027b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00f      	b.n	80027d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <SysTick_Config+0x40>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ba:	210f      	movs	r1, #15
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f7ff ff8e 	bl	80026e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <SysTick_Config+0x40>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <SysTick_Config+0x40>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff29 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002808:	f7ff ff3e 	bl	8002688 <__NVIC_GetPriorityGrouping>
 800280c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7ff ff8e 	bl	8002734 <NVIC_EncodePriority>
 8002818:	4602      	mov	r2, r0
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff5d 	bl	80026e0 <__NVIC_SetPriority>
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff31 	bl	80026a4 <__NVIC_EnableIRQ>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffa2 	bl	800279c <SysTick_Config>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002872:	e14e      	b.n	8002b12 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8140 	beq.w	8002b0c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d005      	beq.n	80028a4 <HAL_GPIO_Init+0x40>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d130      	bne.n	8002906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028da:	2201      	movs	r2, #1
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 0201 	and.w	r2, r3, #1
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b03      	cmp	r3, #3
 8002910:	d017      	beq.n	8002942 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d123      	bne.n	8002996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	6939      	ldr	r1, [r7, #16]
 8002992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0203 	and.w	r2, r3, #3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 809a 	beq.w	8002b0c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d8:	4b55      	ldr	r3, [pc, #340]	; (8002b30 <HAL_GPIO_Init+0x2cc>)
 80029da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029dc:	4a54      	ldr	r2, [pc, #336]	; (8002b30 <HAL_GPIO_Init+0x2cc>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6613      	str	r3, [r2, #96]	; 0x60
 80029e4:	4b52      	ldr	r3, [pc, #328]	; (8002b30 <HAL_GPIO_Init+0x2cc>)
 80029e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029f0:	4a50      	ldr	r2, [pc, #320]	; (8002b34 <HAL_GPIO_Init+0x2d0>)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	3302      	adds	r3, #2
 80029f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	220f      	movs	r2, #15
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a1a:	d013      	beq.n	8002a44 <HAL_GPIO_Init+0x1e0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a46      	ldr	r2, [pc, #280]	; (8002b38 <HAL_GPIO_Init+0x2d4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00d      	beq.n	8002a40 <HAL_GPIO_Init+0x1dc>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a45      	ldr	r2, [pc, #276]	; (8002b3c <HAL_GPIO_Init+0x2d8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d007      	beq.n	8002a3c <HAL_GPIO_Init+0x1d8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a44      	ldr	r2, [pc, #272]	; (8002b40 <HAL_GPIO_Init+0x2dc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d101      	bne.n	8002a38 <HAL_GPIO_Init+0x1d4>
 8002a34:	2303      	movs	r3, #3
 8002a36:	e006      	b.n	8002a46 <HAL_GPIO_Init+0x1e2>
 8002a38:	2307      	movs	r3, #7
 8002a3a:	e004      	b.n	8002a46 <HAL_GPIO_Init+0x1e2>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e002      	b.n	8002a46 <HAL_GPIO_Init+0x1e2>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <HAL_GPIO_Init+0x1e2>
 8002a44:	2300      	movs	r3, #0
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	f002 0203 	and.w	r2, r2, #3
 8002a4c:	0092      	lsls	r2, r2, #2
 8002a4e:	4093      	lsls	r3, r2
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a56:	4937      	ldr	r1, [pc, #220]	; (8002b34 <HAL_GPIO_Init+0x2d0>)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a64:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <HAL_GPIO_Init+0x2e0>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a88:	4a2e      	ldr	r2, [pc, #184]	; (8002b44 <HAL_GPIO_Init+0x2e0>)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a8e:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <HAL_GPIO_Init+0x2e0>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ab2:	4a24      	ldr	r2, [pc, #144]	; (8002b44 <HAL_GPIO_Init+0x2e0>)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ab8:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_GPIO_Init+0x2e0>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002adc:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <HAL_GPIO_Init+0x2e0>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_GPIO_Init+0x2e0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b06:	4a0f      	ldr	r2, [pc, #60]	; (8002b44 <HAL_GPIO_Init+0x2e0>)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f47f aea9 	bne.w	8002874 <HAL_GPIO_Init+0x10>
  }
}
 8002b22:	bf00      	nop
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40010000 	.word	0x40010000
 8002b38:	48000400 	.word	0x48000400
 8002b3c:	48000800 	.word	0x48000800
 8002b40:	48000c00 	.word	0x48000c00
 8002b44:	40010400 	.word	0x40010400

08002b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
 8002b54:	4613      	mov	r3, r2
 8002b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7a:	b08b      	sub	sp, #44	; 0x2c
 8002b7c:	af06      	add	r7, sp, #24
 8002b7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0f8      	b.n	8002d7c <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f008 ff3a 	bl	800ba18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f004 fa0b 	bl	8006fcc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	687e      	ldr	r6, [r7, #4]
 8002bbe:	466d      	mov	r5, sp
 8002bc0:	f106 0410 	add.w	r4, r6, #16
 8002bc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	602b      	str	r3, [r5, #0]
 8002bcc:	1d33      	adds	r3, r6, #4
 8002bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd0:	6838      	ldr	r0, [r7, #0]
 8002bd2:	f004 f9d3 	bl	8006f7c <USB_CoreInit>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0c9      	b.n	8002d7c <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f004 fa07 	bl	8007002 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	e040      	b.n	8002c7c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	440b      	add	r3, r1
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	3303      	adds	r3, #3
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	3338      	adds	r3, #56	; 0x38
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	333c      	adds	r3, #60	; 0x3c
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	3340      	adds	r3, #64	; 0x40
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d3b9      	bcc.n	8002bfa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
 8002c8a:	e044      	b.n	8002d16 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	440b      	add	r3, r1
 8002c9a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	3301      	adds	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d3b5      	bcc.n	8002c8c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	687e      	ldr	r6, [r7, #4]
 8002d28:	466d      	mov	r5, sp
 8002d2a:	f106 0410 	add.w	r4, r6, #16
 8002d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	602b      	str	r3, [r5, #0]
 8002d36:	1d33      	adds	r3, r6, #4
 8002d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d3a:	6838      	ldr	r0, [r7, #0]
 8002d3c:	f004 f96e 	bl	800701c <USB_DevInit>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e014      	b.n	8002d7c <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d102      	bne.n	8002d70 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f001 fc58 	bl	8004620 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f006 fbff 	bl	8009578 <USB_DevDisconnect>

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_PCD_Start+0x16>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e012      	b.n	8002dc0 <HAL_PCD_Start+0x3c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f004 f8f9 	bl	8006f9e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f006 fbca 	bl	800954a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f006 fbe4 	bl	80095a2 <USB_ReadInterrupts>
 8002dda:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fb13 	bl	8003412 <PCD_EP_ISR_Handler>

    return;
 8002dec:	e110      	b.n	8003010 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d013      	beq.n	8002e20 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0a:	b292      	uxth	r2, r2
 8002e0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f008 feb8 	bl	800bb86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e16:	2100      	movs	r1, #0
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f8fc 	bl	8003016 <HAL_PCD_SetAddress>

    return;
 8002e1e:	e0f7      	b.n	8003010 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00c      	beq.n	8002e44 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e3c:	b292      	uxth	r2, r2
 8002e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002e42:	e0e5      	b.n	8003010 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00c      	beq.n	8002e68 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e60:	b292      	uxth	r2, r2
 8002e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002e66:	e0d3      	b.n	8003010 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d034      	beq.n	8002edc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0204 	bic.w	r2, r2, #4
 8002e84:	b292      	uxth	r2, r2
 8002e86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0208 	bic.w	r2, r2, #8
 8002e9c:	b292      	uxth	r2, r2
 8002e9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d107      	bne.n	8002ebc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f009 f916 	bl	800c0e8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f008 fe9b 	bl	800bbf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ed4:	b292      	uxth	r2, r2
 8002ed6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002eda:	e099      	b.n	8003010 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d027      	beq.n	8002f36 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0208 	orr.w	r2, r2, #8
 8002ef8:	b292      	uxth	r2, r2
 8002efa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f10:	b292      	uxth	r2, r2
 8002f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0204 	orr.w	r2, r2, #4
 8002f28:	b292      	uxth	r2, r2
 8002f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f008 fe48 	bl	800bbc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f34:	e06c      	b.n	8003010 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d040      	beq.n	8002fc2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f52:	b292      	uxth	r2, r2
 8002f54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d12b      	bne.n	8002fba <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0204 	orr.w	r2, r2, #4
 8002f74:	b292      	uxth	r2, r2
 8002f76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0208 	orr.w	r2, r2, #8
 8002f8c:	b292      	uxth	r2, r2
 8002f8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f009 f898 	bl	800c0e8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002fb8:	e02a      	b.n	8003010 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f008 fe02 	bl	800bbc4 <HAL_PCD_SuspendCallback>
    return;
 8002fc0:	e026      	b.n	8003010 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00f      	beq.n	8002fec <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fde:	b292      	uxth	r2, r2
 8002fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f008 fdc0 	bl	800bb6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fea:	e011      	b.n	8003010 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00c      	beq.n	8003010 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003008:	b292      	uxth	r2, r2
 800300a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800300e:	bf00      	nop
  }
}
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_PCD_SetAddress+0x1a>
 800302c:	2302      	movs	r3, #2
 800302e:	e013      	b.n	8003058 <HAL_PCD_SetAddress+0x42>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f006 fa6a 	bl	8009522 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	461a      	mov	r2, r3
 800306e:	4603      	mov	r3, r0
 8003070:	70fb      	strb	r3, [r7, #3]
 8003072:	460b      	mov	r3, r1
 8003074:	803b      	strh	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800307e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003082:	2b00      	cmp	r3, #0
 8003084:	da0e      	bge.n	80030a4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	705a      	strb	r2, [r3, #1]
 80030a2:	e00e      	b.n	80030c2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	f003 0207 	and.w	r2, r3, #7
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030ce:	883a      	ldrh	r2, [r7, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	78ba      	ldrb	r2, [r7, #2]
 80030d8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030da:	78bb      	ldrb	r3, [r7, #2]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d102      	bne.n	80030e6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_PCD_EP_Open+0x94>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e00e      	b.n	8003112 <HAL_PCD_EP_Open+0xb2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68f9      	ldr	r1, [r7, #12]
 8003102:	4618      	mov	r0, r3
 8003104:	f003 ffac 	bl	8007060 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003110:	7afb      	ldrb	r3, [r7, #11]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800312a:	2b00      	cmp	r3, #0
 800312c:	da0e      	bge.n	800314c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	705a      	strb	r2, [r3, #1]
 800314a:	e00e      	b.n	800316a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	f003 0207 	and.w	r2, r3, #7
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	b2da      	uxtb	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_PCD_EP_Close+0x6a>
 8003180:	2302      	movs	r3, #2
 8003182:	e00e      	b.n	80031a2 <HAL_PCD_EP_Close+0x88>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68f9      	ldr	r1, [r7, #12]
 8003192:	4618      	mov	r0, r3
 8003194:	f004 fb28 	bl	80077e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	460b      	mov	r3, r1
 80031b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ba:	7afb      	ldrb	r3, [r7, #11]
 80031bc:	f003 0207 	and.w	r2, r3, #7
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2200      	movs	r2, #0
 80031e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2200      	movs	r2, #0
 80031e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ea:	7afb      	ldrb	r3, [r7, #11]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6979      	ldr	r1, [r7, #20]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f004 fce0 	bl	8007bc2 <USB_EPStartXfer>

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 0207 	and.w	r2, r3, #7
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	460b      	mov	r3, r1
 800324a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324c:	7afb      	ldrb	r3, [r7, #11]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2201      	movs	r2, #1
 8003286:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003288:	7afb      	ldrb	r3, [r7, #11]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	b2da      	uxtb	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6979      	ldr	r1, [r7, #20]
 800329a:	4618      	mov	r0, r3
 800329c:	f004 fc91 	bl	8007bc2 <USB_EPStartXfer>

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	460b      	mov	r3, r1
 80032b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	f003 0207 	and.w	r2, r3, #7
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d901      	bls.n	80032c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e04c      	b.n	8003362 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	da0e      	bge.n	80032ee <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	705a      	strb	r2, [r3, #1]
 80032ec:	e00c      	b.n	8003308 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	b2da      	uxtb	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_PCD_EP_SetStall+0x7e>
 8003324:	2302      	movs	r3, #2
 8003326:	e01c      	b.n	8003362 <HAL_PCD_EP_SetStall+0xb8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68f9      	ldr	r1, [r7, #12]
 8003336:	4618      	mov	r0, r3
 8003338:	f005 fff4 	bl	8009324 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	2b00      	cmp	r3, #0
 8003344:	d108      	bne.n	8003358 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f006 f935 	bl	80095c2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	460b      	mov	r3, r1
 8003374:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 020f 	and.w	r2, r3, #15
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	429a      	cmp	r2, r3
 8003382:	d901      	bls.n	8003388 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e040      	b.n	800340a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800338c:	2b00      	cmp	r3, #0
 800338e:	da0e      	bge.n	80033ae <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	705a      	strb	r2, [r3, #1]
 80033ac:	e00e      	b.n	80033cc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	f003 0207 	and.w	r2, r3, #7
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4413      	add	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_PCD_EP_ClrStall+0x82>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e00e      	b.n	800340a <HAL_PCD_EP_ClrStall+0xa0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68f9      	ldr	r1, [r7, #12]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f005 ffe3 	bl	80093c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b096      	sub	sp, #88	; 0x58
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800341a:	e3b1      	b.n	8003b80 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003424:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003428:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003436:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800343a:	2b00      	cmp	r3, #0
 800343c:	f040 8173 	bne.w	8003726 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003440:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	d150      	bne.n	80034ee <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345c:	81fb      	strh	r3, [r7, #14]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	89fb      	ldrh	r3, [r7, #14]
 8003464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800346c:	b29b      	uxth	r3, r3
 800346e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3328      	adds	r3, #40	; 0x28
 8003474:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347e:	b29b      	uxth	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	4413      	add	r3, r2
 8003490:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800349a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800349e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	441a      	add	r2, r3
 80034a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034aa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034ac:	2100      	movs	r1, #0
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f008 fb41 	bl	800bb36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 835f 	beq.w	8003b80 <PCD_EP_ISR_Handler+0x76e>
 80034c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 835a 	bne.w	8003b80 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b292      	uxth	r2, r2
 80034e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034ec:	e348      	b.n	8003b80 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034f4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003500:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003508:	2b00      	cmp	r3, #0
 800350a:	d032      	beq.n	8003572 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003514:	b29b      	uxth	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	4413      	add	r3, r2
 8003526:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003532:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800353e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003540:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003544:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003546:	b29b      	uxth	r3, r3
 8003548:	f006 f889 	bl	800965e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	b29a      	uxth	r2, r3
 8003554:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003558:	4013      	ands	r3, r2
 800355a:	823b      	strh	r3, [r7, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	8a3a      	ldrh	r2, [r7, #16]
 8003562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003566:	b292      	uxth	r2, r2
 8003568:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f008 fab6 	bl	800badc <HAL_PCD_SetupStageCallback>
 8003570:	e306      	b.n	8003b80 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003572:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003576:	2b00      	cmp	r3, #0
 8003578:	f280 8302 	bge.w	8003b80 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29a      	uxth	r2, r3
 8003584:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003588:	4013      	ands	r3, r2
 800358a:	83fb      	strh	r3, [r7, #30]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	8bfa      	ldrh	r2, [r7, #30]
 8003592:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003596:	b292      	uxth	r2, r2
 8003598:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d019      	beq.n	80035fe <PCD_EP_ISR_Handler+0x1ec>
 80035ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d015      	beq.n	80035fe <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d8:	6959      	ldr	r1, [r3, #20]
 80035da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f006 f83b 	bl	800965e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	441a      	add	r2, r3
 80035f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035f6:	2100      	movs	r1, #0
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f008 fa81 	bl	800bb00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003608:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800360c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003610:	2b00      	cmp	r3, #0
 8003612:	f040 82b5 	bne.w	8003b80 <PCD_EP_ISR_Handler+0x76e>
 8003616:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800361a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800361e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003622:	f000 82ad 	beq.w	8003b80 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003634:	b29b      	uxth	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	4413      	add	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003650:	b29a      	uxth	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	801a      	strh	r2, [r3, #0]
 8003656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b3e      	cmp	r3, #62	; 0x3e
 800365c:	d91d      	bls.n	800369a <PCD_EP_ISR_Handler+0x288>
 800365e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	647b      	str	r3, [r7, #68]	; 0x44
 8003666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <PCD_EP_ISR_Handler+0x266>
 8003672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003674:	3b01      	subs	r3, #1
 8003676:	647b      	str	r3, [r7, #68]	; 0x44
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29a      	uxth	r2, r3
 800367e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003680:	b29b      	uxth	r3, r3
 8003682:	029b      	lsls	r3, r3, #10
 8003684:	b29b      	uxth	r3, r3
 8003686:	4313      	orrs	r3, r2
 8003688:	b29b      	uxth	r3, r3
 800368a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800368e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003692:	b29a      	uxth	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	801a      	strh	r2, [r3, #0]
 8003698:	e026      	b.n	80036e8 <PCD_EP_ISR_Handler+0x2d6>
 800369a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <PCD_EP_ISR_Handler+0x2a6>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	801a      	strh	r2, [r3, #0]
 80036b6:	e017      	b.n	80036e8 <PCD_EP_ISR_Handler+0x2d6>
 80036b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	647b      	str	r3, [r7, #68]	; 0x44
 80036c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <PCD_EP_ISR_Handler+0x2c0>
 80036cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ce:	3301      	adds	r3, #1
 80036d0:	647b      	str	r3, [r7, #68]	; 0x44
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036da:	b29b      	uxth	r3, r3
 80036dc:	029b      	lsls	r3, r3, #10
 80036de:	b29b      	uxth	r3, r3
 80036e0:	4313      	orrs	r3, r2
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	827b      	strh	r3, [r7, #18]
 80036fa:	8a7b      	ldrh	r3, [r7, #18]
 80036fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003700:	827b      	strh	r3, [r7, #18]
 8003702:	8a7b      	ldrh	r3, [r7, #18]
 8003704:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003708:	827b      	strh	r3, [r7, #18]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	8a7b      	ldrh	r3, [r7, #18]
 8003710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003720:	b29b      	uxth	r3, r3
 8003722:	8013      	strh	r3, [r2, #0]
 8003724:	e22c      	b.n	8003b80 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800373a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800373e:	2b00      	cmp	r3, #0
 8003740:	f280 80f6 	bge.w	8003930 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29a      	uxth	r2, r3
 8003756:	f640 738f 	movw	r3, #3983	; 0xf8f
 800375a:	4013      	ands	r3, r2
 800375c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003776:	b292      	uxth	r2, r2
 8003778:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800377a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003792:	7b1b      	ldrb	r3, [r3, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d123      	bne.n	80037e0 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80037c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 808e 	beq.w	80038e6 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d0:	6959      	ldr	r1, [r3, #20]
 80037d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d4:	88da      	ldrh	r2, [r3, #6]
 80037d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037da:	f005 ff40 	bl	800965e <USB_ReadPMA>
 80037de:	e082      	b.n	80038e6 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e2:	78db      	ldrb	r3, [r3, #3]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d10a      	bne.n	80037fe <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037ec:	461a      	mov	r2, r3
 80037ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f9d3 	bl	8003b9c <HAL_PCD_EP_DB_Receive>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80037fc:	e073      	b.n	80038e6 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003818:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	441a      	add	r2, r3
 800382a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800382e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800383a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800383e:	b29b      	uxth	r3, r3
 8003840:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d022      	beq.n	80038a2 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003864:	b29b      	uxth	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	4413      	add	r3, r2
 8003876:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003880:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003884:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02c      	beq.n	80038e6 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003892:	6959      	ldr	r1, [r3, #20]
 8003894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003896:	891a      	ldrh	r2, [r3, #8]
 8003898:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800389c:	f005 fedf 	bl	800965e <USB_ReadPMA>
 80038a0:	e021      	b.n	80038e6 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	4413      	add	r3, r2
 80038bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80038ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d8:	6959      	ldr	r1, [r3, #20]
 80038da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038dc:	895a      	ldrh	r2, [r3, #10]
 80038de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038e2:	f005 febc 	bl	800965e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038ee:	441a      	add	r2, r3
 80038f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038fc:	441a      	add	r2, r3
 80038fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003900:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <PCD_EP_ISR_Handler+0x504>
 800390a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800390e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	429a      	cmp	r2, r3
 8003914:	d206      	bcs.n	8003924 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	4619      	mov	r1, r3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f008 f8ef 	bl	800bb00 <HAL_PCD_DataOutStageCallback>
 8003922:	e005      	b.n	8003930 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800392a:	4618      	mov	r0, r3
 800392c:	f004 f949 	bl	8007bc2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003930:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8121 	beq.w	8003b80 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 800393e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b29b      	uxth	r3, r3
 8003964:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	441a      	add	r2, r3
 800397e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800398a:	b29b      	uxth	r3, r3
 800398c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800398e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003990:	78db      	ldrb	r3, [r3, #3]
 8003992:	2b01      	cmp	r3, #1
 8003994:	f040 80a2 	bne.w	8003adc <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8003998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399a:	2200      	movs	r2, #0
 800399c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800399e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a0:	7b1b      	ldrb	r3, [r3, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8093 	beq.w	8003ace <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d046      	beq.n	8003a42 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d126      	bne.n	8003a0a <PCD_EP_ISR_Handler+0x5f8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	4413      	add	r3, r2
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
 80039d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	00da      	lsls	r2, r3, #3
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	4413      	add	r3, r2
 80039de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039e2:	623b      	str	r3, [r7, #32]
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	801a      	strh	r2, [r3, #0]
 8003a08:	e061      	b.n	8003ace <PCD_EP_ISR_Handler+0x6bc>
 8003a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d15d      	bne.n	8003ace <PCD_EP_ISR_Handler+0x6bc>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	4413      	add	r3, r2
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	00da      	lsls	r2, r3, #3
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a32:	4413      	add	r3, r2
 8003a34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	801a      	strh	r2, [r3, #0]
 8003a40:	e045      	b.n	8003ace <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d126      	bne.n	8003a9e <PCD_EP_ISR_Handler+0x68c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a64:	4413      	add	r3, r2
 8003a66:	637b      	str	r3, [r7, #52]	; 0x34
 8003a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	00da      	lsls	r2, r3, #3
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a70:	4413      	add	r3, r2
 8003a72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a76:	633b      	str	r3, [r7, #48]	; 0x30
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	801a      	strh	r2, [r3, #0]
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	801a      	strh	r2, [r3, #0]
 8003a9c:	e017      	b.n	8003ace <PCD_EP_ISR_Handler+0x6bc>
 8003a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa0:	785b      	ldrb	r3, [r3, #1]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d113      	bne.n	8003ace <PCD_EP_ISR_Handler+0x6bc>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab4:	4413      	add	r3, r2
 8003ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	00da      	lsls	r2, r3, #3
 8003abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aca:	2200      	movs	r2, #0
 8003acc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f008 f82e 	bl	800bb36 <HAL_PCD_DataInStageCallback>
 8003ada:	e051      	b.n	8003b80 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003adc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d144      	bne.n	8003b72 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4413      	add	r3, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	4413      	add	r3, r2
 8003b02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b0c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d907      	bls.n	8003b2c <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8003b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b24:	1ad2      	subs	r2, r2, r3
 8003b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b28:	619a      	str	r2, [r3, #24]
 8003b2a:	e002      	b.n	8003b32 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8003b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2e:	2200      	movs	r2, #0
 8003b30:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f007 fff8 	bl	800bb36 <HAL_PCD_DataInStageCallback>
 8003b46:	e01b      	b.n	8003b80 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b50:	441a      	add	r2, r3
 8003b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b54:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b5e:	441a      	add	r2, r3
 8003b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b62:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f004 f829 	bl	8007bc2 <USB_EPStartXfer>
 8003b70:	e006      	b.n	8003b80 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b76:	461a      	mov	r2, r3
 8003b78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f917 	bl	8003dae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	b21b      	sxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f6ff ac45 	blt.w	800341c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3758      	adds	r7, #88	; 0x58
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d07c      	beq.n	8003cae <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	8b7b      	ldrh	r3, [r7, #26]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d306      	bcc.n	8003bf2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	8b7b      	ldrh	r3, [r7, #26]
 8003bea:	1ad2      	subs	r2, r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	619a      	str	r2, [r3, #24]
 8003bf0:	e002      	b.n	8003bf8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d123      	bne.n	8003c48 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1a:	833b      	strh	r3, [r7, #24]
 8003c1c:	8b3b      	ldrh	r3, [r7, #24]
 8003c1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c22:	833b      	strh	r3, [r7, #24]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	8b3b      	ldrh	r3, [r7, #24]
 8003c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01f      	beq.n	8003c92 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6c:	82fb      	strh	r3, [r7, #22]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	441a      	add	r2, r3
 8003c7c:	8afb      	ldrh	r3, [r7, #22]
 8003c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c92:	8b7b      	ldrh	r3, [r7, #26]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8085 	beq.w	8003da4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6959      	ldr	r1, [r3, #20]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	891a      	ldrh	r2, [r3, #8]
 8003ca6:	8b7b      	ldrh	r3, [r7, #26]
 8003ca8:	f005 fcd9 	bl	800965e <USB_ReadPMA>
 8003cac:	e07a      	b.n	8003da4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	699a      	ldr	r2, [r3, #24]
 8003cd8:	8b7b      	ldrh	r3, [r7, #26]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d306      	bcc.n	8003cec <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	8b7b      	ldrh	r3, [r7, #26]
 8003ce4:	1ad2      	subs	r2, r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	619a      	str	r2, [r3, #24]
 8003cea:	e002      	b.n	8003cf2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d123      	bne.n	8003d42 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d14:	83fb      	strh	r3, [r7, #30]
 8003d16:	8bfb      	ldrh	r3, [r7, #30]
 8003d18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d1c:	83fb      	strh	r3, [r7, #30]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	441a      	add	r2, r3
 8003d2c:	8bfb      	ldrh	r3, [r7, #30]
 8003d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d11f      	bne.n	8003d8c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d66:	83bb      	strh	r3, [r7, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	441a      	add	r2, r3
 8003d76:	8bbb      	ldrh	r3, [r7, #28]
 8003d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d8c:	8b7b      	ldrh	r3, [r7, #26]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	6959      	ldr	r1, [r3, #20]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	895a      	ldrh	r2, [r3, #10]
 8003d9e:	8b7b      	ldrh	r3, [r7, #26]
 8003da0:	f005 fc5d 	bl	800965e <USB_ReadPMA>
    }
  }

  return count;
 8003da4:	8b7b      	ldrh	r3, [r7, #26]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b0a4      	sub	sp, #144	; 0x90
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	4613      	mov	r3, r2
 8003dba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 81db 	beq.w	800417e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	4413      	add	r3, r2
 8003de2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dec:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d907      	bls.n	8003e0c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e04:	1ad2      	subs	r2, r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	619a      	str	r2, [r3, #24]
 8003e0a:	e002      	b.n	8003e12 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 80b9 	bne.w	8003f8e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	785b      	ldrb	r3, [r3, #1]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d126      	bne.n	8003e72 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	4413      	add	r3, r2
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	00da      	lsls	r2, r3, #3
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	4413      	add	r3, r2
 8003e46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	801a      	strh	r2, [r3, #0]
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	801a      	strh	r2, [r3, #0]
 8003e70:	e01a      	b.n	8003ea8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d116      	bne.n	8003ea8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	4413      	add	r3, r2
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	00da      	lsls	r2, r3, #3
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d126      	bne.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x156>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	4413      	add	r3, r2
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	00da      	lsls	r2, r3, #3
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	801a      	strh	r2, [r3, #0]
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	801a      	strh	r2, [r3, #0]
 8003f02:	e017      	b.n	8003f34 <HAL_PCD_EP_DB_Transmit+0x186>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d113      	bne.n	8003f34 <HAL_PCD_EP_DB_Transmit+0x186>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	4413      	add	r3, r2
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	00da      	lsls	r2, r3, #3
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	4413      	add	r3, r2
 8003f28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f2c:	623b      	str	r3, [r7, #32]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	2200      	movs	r2, #0
 8003f32:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f007 fdfb 	bl	800bb36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 82fa 	beq.w	8004540 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	82fb      	strh	r3, [r7, #22]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	8afb      	ldrh	r3, [r7, #22]
 8003f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	8013      	strh	r3, [r2, #0]
 8003f8c:	e2d8      	b.n	8004540 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d021      	beq.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	441a      	add	r2, r3
 8003fc4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	f040 82ac 	bne.w	8004540 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ff0:	441a      	add	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ffe:	441a      	add	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	429a      	cmp	r2, r3
 800400e:	d30b      	bcc.n	8004028 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004020:	1ad2      	subs	r2, r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	621a      	str	r2, [r3, #32]
 8004026:	e017      	b.n	8004058 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d108      	bne.n	8004042 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004030:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004034:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004040:	e00a      	b.n	8004058 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2200      	movs	r2, #0
 8004056:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d165      	bne.n	800412c <HAL_PCD_EP_DB_Transmit+0x37e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004074:	4413      	add	r3, r2
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	00da      	lsls	r2, r3, #3
 800407e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004080:	4413      	add	r3, r2
 8004082:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004086:	63bb      	str	r3, [r7, #56]	; 0x38
 8004088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004092:	b29a      	uxth	r2, r3
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	801a      	strh	r2, [r3, #0]
 8004098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800409c:	2b3e      	cmp	r3, #62	; 0x3e
 800409e:	d91d      	bls.n	80040dc <HAL_PCD_EP_DB_Transmit+0x32e>
 80040a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d102      	bne.n	80040ba <HAL_PCD_EP_DB_Transmit+0x30c>
 80040b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b6:	3b01      	subs	r3, #1
 80040b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29a      	uxth	r2, r3
 80040c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	029b      	lsls	r3, r3, #10
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	4313      	orrs	r3, r2
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	801a      	strh	r2, [r3, #0]
 80040da:	e044      	b.n	8004166 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80040dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <HAL_PCD_EP_DB_Transmit+0x34c>
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	801a      	strh	r2, [r3, #0]
 80040f8:	e035      	b.n	8004166 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80040fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	64bb      	str	r3, [r7, #72]	; 0x48
 8004102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_PCD_EP_DB_Transmit+0x366>
 800410e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004110:	3301      	adds	r3, #1
 8004112:	64bb      	str	r3, [r7, #72]	; 0x48
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29a      	uxth	r2, r3
 800411a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411c:	b29b      	uxth	r3, r3
 800411e:	029b      	lsls	r3, r3, #10
 8004120:	b29b      	uxth	r3, r3
 8004122:	4313      	orrs	r3, r2
 8004124:	b29a      	uxth	r2, r3
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	801a      	strh	r2, [r3, #0]
 800412a:	e01c      	b.n	8004166 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d118      	bne.n	8004166 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	647b      	str	r3, [r7, #68]	; 0x44
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004148:	4413      	add	r3, r2
 800414a:	647b      	str	r3, [r7, #68]	; 0x44
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	00da      	lsls	r2, r3, #3
 8004152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004154:	4413      	add	r3, r2
 8004156:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800415a:	643b      	str	r3, [r7, #64]	; 0x40
 800415c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004160:	b29a      	uxth	r2, r3
 8004162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004164:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	6959      	ldr	r1, [r3, #20]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	891a      	ldrh	r2, [r3, #8]
 8004172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004176:	b29b      	uxth	r3, r3
 8004178:	f005 fa2f 	bl	80095da <USB_WritePMA>
 800417c:	e1e0      	b.n	8004540 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004186:	b29b      	uxth	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	4413      	add	r3, r2
 8004198:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d307      	bcc.n	80041c2 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041ba:	1ad2      	subs	r2, r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	619a      	str	r2, [r3, #24]
 80041c0:	e002      	b.n	80041c8 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2200      	movs	r2, #0
 80041c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f040 80c0 	bne.w	8004352 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	785b      	ldrb	r3, [r3, #1]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d126      	bne.n	8004228 <HAL_PCD_EP_DB_Transmit+0x47a>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041ee:	4413      	add	r3, r2
 80041f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	00da      	lsls	r2, r3, #3
 80041f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041fa:	4413      	add	r3, r2
 80041fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004200:	67bb      	str	r3, [r7, #120]	; 0x78
 8004202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800420c:	b29a      	uxth	r2, r3
 800420e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800421c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004220:	b29a      	uxth	r2, r3
 8004222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004224:	801a      	strh	r2, [r3, #0]
 8004226:	e01a      	b.n	800425e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	785b      	ldrb	r3, [r3, #1]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d116      	bne.n	800425e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	667b      	str	r3, [r7, #100]	; 0x64
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004244:	4413      	add	r3, r2
 8004246:	667b      	str	r3, [r7, #100]	; 0x64
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	00da      	lsls	r2, r3, #3
 800424e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004250:	4413      	add	r3, r2
 8004252:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004256:	663b      	str	r3, [r7, #96]	; 0x60
 8004258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800425a:	2200      	movs	r2, #0
 800425c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	677b      	str	r3, [r7, #116]	; 0x74
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	785b      	ldrb	r3, [r3, #1]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d12b      	bne.n	80042c4 <HAL_PCD_EP_DB_Transmit+0x516>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800427a:	b29b      	uxth	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004280:	4413      	add	r3, r2
 8004282:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	00da      	lsls	r2, r3, #3
 800428a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428c:	4413      	add	r3, r2
 800428e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004292:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004296:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	e017      	b.n	80042f4 <HAL_PCD_EP_DB_Transmit+0x546>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d113      	bne.n	80042f4 <HAL_PCD_EP_DB_Transmit+0x546>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042da:	4413      	add	r3, r2
 80042dc:	677b      	str	r3, [r7, #116]	; 0x74
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	00da      	lsls	r2, r3, #3
 80042e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e6:	4413      	add	r3, r2
 80042e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042ec:	673b      	str	r3, [r7, #112]	; 0x70
 80042ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042f0:	2200      	movs	r2, #0
 80042f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	4619      	mov	r1, r3
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f007 fc1b 	bl	800bb36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004306:	2b00      	cmp	r3, #0
 8004308:	f040 811a 	bne.w	8004540 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	b29b      	uxth	r3, r3
 800431e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004326:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	441a      	add	r2, r3
 8004338:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800433c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434c:	b29b      	uxth	r3, r3
 800434e:	8013      	strh	r3, [r2, #0]
 8004350:	e0f6      	b.n	8004540 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d121      	bne.n	80043a0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004376:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	441a      	add	r2, r3
 8004388:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800438c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439c:	b29b      	uxth	r3, r3
 800439e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	f040 80ca 	bne.w	8004540 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043b4:	441a      	add	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043c2:	441a      	add	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	6a1a      	ldr	r2, [r3, #32]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d30b      	bcc.n	80043ec <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6a1a      	ldr	r2, [r3, #32]
 80043e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043e4:	1ad2      	subs	r2, r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	621a      	str	r2, [r3, #32]
 80043ea:	e017      	b.n	800441c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d108      	bne.n	8004406 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80043f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004404:	e00a      	b.n	800441c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2200      	movs	r2, #0
 8004412:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	657b      	str	r3, [r7, #84]	; 0x54
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d165      	bne.n	80044f6 <HAL_PCD_EP_DB_Transmit+0x748>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004438:	b29b      	uxth	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800443e:	4413      	add	r3, r2
 8004440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	00da      	lsls	r2, r3, #3
 8004448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800444a:	4413      	add	r3, r2
 800444c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004450:	65bb      	str	r3, [r7, #88]	; 0x58
 8004452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800445c:	b29a      	uxth	r2, r3
 800445e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004460:	801a      	strh	r2, [r3, #0]
 8004462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004466:	2b3e      	cmp	r3, #62	; 0x3e
 8004468:	d91d      	bls.n	80044a6 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800446a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	66bb      	str	r3, [r7, #104]	; 0x68
 8004472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800447e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004480:	3b01      	subs	r3, #1
 8004482:	66bb      	str	r3, [r7, #104]	; 0x68
 8004484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29a      	uxth	r2, r3
 800448a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800448c:	b29b      	uxth	r3, r3
 800448e:	029b      	lsls	r3, r3, #10
 8004490:	b29b      	uxth	r3, r3
 8004492:	4313      	orrs	r3, r2
 8004494:	b29b      	uxth	r3, r3
 8004496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e041      	b.n	800452a <HAL_PCD_EP_DB_Transmit+0x77c>
 80044a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <HAL_PCD_EP_DB_Transmit+0x716>
 80044ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044bc:	b29a      	uxth	r2, r3
 80044be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c0:	801a      	strh	r2, [r3, #0]
 80044c2:	e032      	b.n	800452a <HAL_PCD_EP_DB_Transmit+0x77c>
 80044c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80044cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_PCD_EP_DB_Transmit+0x730>
 80044d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044da:	3301      	adds	r3, #1
 80044dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80044de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	029b      	lsls	r3, r3, #10
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	4313      	orrs	r3, r2
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044f2:	801a      	strh	r2, [r3, #0]
 80044f4:	e019      	b.n	800452a <HAL_PCD_EP_DB_Transmit+0x77c>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d115      	bne.n	800452a <HAL_PCD_EP_DB_Transmit+0x77c>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004506:	b29b      	uxth	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450c:	4413      	add	r3, r2
 800450e:	657b      	str	r3, [r7, #84]	; 0x54
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	00da      	lsls	r2, r3, #3
 8004516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004518:	4413      	add	r3, r2
 800451a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800451e:	653b      	str	r3, [r7, #80]	; 0x50
 8004520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004524:	b29a      	uxth	r2, r3
 8004526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004528:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6959      	ldr	r1, [r3, #20]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	895a      	ldrh	r2, [r3, #10]
 8004536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800453a:	b29b      	uxth	r3, r3
 800453c:	f005 f84d 	bl	80095da <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455a:	82bb      	strh	r3, [r7, #20]
 800455c:	8abb      	ldrh	r3, [r7, #20]
 800455e:	f083 0310 	eor.w	r3, r3, #16
 8004562:	82bb      	strh	r3, [r7, #20]
 8004564:	8abb      	ldrh	r3, [r7, #20]
 8004566:	f083 0320 	eor.w	r3, r3, #32
 800456a:	82bb      	strh	r3, [r7, #20]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	441a      	add	r2, r3
 800457a:	8abb      	ldrh	r3, [r7, #20]
 800457c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458c:	b29b      	uxth	r3, r3
 800458e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3790      	adds	r7, #144	; 0x90
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800459a:	b480      	push	{r7}
 800459c:	b087      	sub	sp, #28
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	607b      	str	r3, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	817b      	strh	r3, [r7, #10]
 80045a8:	4613      	mov	r3, r2
 80045aa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80045ac:	897b      	ldrh	r3, [r7, #10]
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00b      	beq.n	80045d0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b8:	897b      	ldrh	r3, [r7, #10]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	e009      	b.n	80045e4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045d0:	897a      	ldrh	r2, [r7, #10]
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80045e4:	893b      	ldrh	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d107      	bne.n	80045fa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2200      	movs	r2, #0
 80045ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	80da      	strh	r2, [r3, #6]
 80045f8:	e00b      	b.n	8004612 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2201      	movs	r2, #1
 80045fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	b29a      	uxth	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	0c1b      	lsrs	r3, r3, #16
 800460c:	b29a      	uxth	r2, r3
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004644:	b29b      	uxth	r3, r3
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004658:	b29b      	uxth	r3, r3
 800465a:	f043 0302 	orr.w	r3, r3, #2
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <HAL_PWREx_GetVoltageRange+0x18>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40007000 	.word	0x40007000

08004690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800469e:	d130      	bne.n	8004702 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046a0:	4b23      	ldr	r3, [pc, #140]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ac:	d038      	beq.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046b6:	4a1e      	ldr	r2, [pc, #120]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046be:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2232      	movs	r2, #50	; 0x32
 80046c4:	fb02 f303 	mul.w	r3, r2, r3
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0c9b      	lsrs	r3, r3, #18
 80046d0:	3301      	adds	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d4:	e002      	b.n	80046dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3b01      	subs	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046dc:	4b14      	ldr	r3, [pc, #80]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e8:	d102      	bne.n	80046f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f2      	bne.n	80046d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fc:	d110      	bne.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e00f      	b.n	8004722 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004702:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	d007      	beq.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004718:	4a05      	ldr	r2, [pc, #20]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800471e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40007000 	.word	0x40007000
 8004734:	20000004 	.word	0x20000004
 8004738:	431bde83 	.word	0x431bde83

0800473c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a04      	ldr	r2, [pc, #16]	; (8004758 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800474a:	6053      	str	r3, [r2, #4]
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40007000 	.word	0x40007000

0800475c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	; 0x28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f000 bc4f 	b.w	800500e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004770:	4b97      	ldr	r3, [pc, #604]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800477a:	4b95      	ldr	r3, [pc, #596]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80e6 	beq.w	800495e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <HAL_RCC_OscConfig+0x4c>
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	2b0c      	cmp	r3, #12
 800479c:	f040 808d 	bne.w	80048ba <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	f040 8089 	bne.w	80048ba <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047a8:	4b89      	ldr	r3, [pc, #548]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d006      	beq.n	80047c2 <HAL_RCC_OscConfig+0x66>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d102      	bne.n	80047c2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f000 bc26 	b.w	800500e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047c6:	4b82      	ldr	r3, [pc, #520]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d004      	beq.n	80047dc <HAL_RCC_OscConfig+0x80>
 80047d2:	4b7f      	ldr	r3, [pc, #508]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047da:	e005      	b.n	80047e8 <HAL_RCC_OscConfig+0x8c>
 80047dc:	4b7c      	ldr	r3, [pc, #496]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80047de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d224      	bcs.n	8004836 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fdd9 	bl	80053a8 <RCC_SetFlashLatencyFromMSIRange>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f000 bc06 	b.w	800500e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004802:	4b73      	ldr	r3, [pc, #460]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a72      	ldr	r2, [pc, #456]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004808:	f043 0308 	orr.w	r3, r3, #8
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	4b70      	ldr	r3, [pc, #448]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	496d      	ldr	r1, [pc, #436]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800481c:	4313      	orrs	r3, r2
 800481e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004820:	4b6b      	ldr	r3, [pc, #428]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	4968      	ldr	r1, [pc, #416]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
 8004834:	e025      	b.n	8004882 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004836:	4b66      	ldr	r3, [pc, #408]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a65      	ldr	r2, [pc, #404]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800483c:	f043 0308 	orr.w	r3, r3, #8
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	4b63      	ldr	r3, [pc, #396]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	4960      	ldr	r1, [pc, #384]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004854:	4b5e      	ldr	r3, [pc, #376]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	021b      	lsls	r3, r3, #8
 8004862:	495b      	ldr	r1, [pc, #364]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004864:	4313      	orrs	r3, r2
 8004866:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fd98 	bl	80053a8 <RCC_SetFlashLatencyFromMSIRange>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e3c5      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004882:	f000 fccd 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 8004886:	4602      	mov	r2, r0
 8004888:	4b51      	ldr	r3, [pc, #324]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	4950      	ldr	r1, [pc, #320]	; (80049d4 <HAL_RCC_OscConfig+0x278>)
 8004894:	5ccb      	ldrb	r3, [r1, r3]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	4a4e      	ldr	r2, [pc, #312]	; (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80048a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048a2:	4b4e      	ldr	r3, [pc, #312]	; (80049dc <HAL_RCC_OscConfig+0x280>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fc fe9a 	bl	80015e0 <HAL_InitTick>
 80048ac:	4603      	mov	r3, r0
 80048ae:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d052      	beq.n	800495c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
 80048b8:	e3a9      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d032      	beq.n	8004928 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048c2:	4b43      	ldr	r3, [pc, #268]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a42      	ldr	r2, [pc, #264]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048ce:	f7fc fed7 	bl	8001680 <HAL_GetTick>
 80048d2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048d6:	f7fc fed3 	bl	8001680 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e392      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048e8:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048f4:	4b36      	ldr	r3, [pc, #216]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a35      	ldr	r2, [pc, #212]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80048fa:	f043 0308 	orr.w	r3, r3, #8
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	4930      	ldr	r1, [pc, #192]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800490e:	4313      	orrs	r3, r2
 8004910:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004912:	4b2f      	ldr	r3, [pc, #188]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	492b      	ldr	r1, [pc, #172]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004922:	4313      	orrs	r3, r2
 8004924:	604b      	str	r3, [r1, #4]
 8004926:	e01a      	b.n	800495e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004928:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a28      	ldr	r2, [pc, #160]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004934:	f7fc fea4 	bl	8001680 <HAL_GetTick>
 8004938:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800493c:	f7fc fea0 	bl	8001680 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e35f      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800494e:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x1e0>
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800495c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d073      	beq.n	8004a52 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d005      	beq.n	800497c <HAL_RCC_OscConfig+0x220>
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	2b0c      	cmp	r3, #12
 8004974:	d10e      	bne.n	8004994 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	2b03      	cmp	r3, #3
 800497a:	d10b      	bne.n	8004994 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800497c:	4b14      	ldr	r3, [pc, #80]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d063      	beq.n	8004a50 <HAL_RCC_OscConfig+0x2f4>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d15f      	bne.n	8004a50 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e33c      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499c:	d106      	bne.n	80049ac <HAL_RCC_OscConfig+0x250>
 800499e:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a0b      	ldr	r2, [pc, #44]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	e025      	b.n	80049f8 <HAL_RCC_OscConfig+0x29c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b4:	d114      	bne.n	80049e0 <HAL_RCC_OscConfig+0x284>
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a05      	ldr	r2, [pc, #20]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80049bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a02      	ldr	r2, [pc, #8]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e013      	b.n	80049f8 <HAL_RCC_OscConfig+0x29c>
 80049d0:	40021000 	.word	0x40021000
 80049d4:	0800c94c 	.word	0x0800c94c
 80049d8:	20000004 	.word	0x20000004
 80049dc:	20000008 	.word	0x20000008
 80049e0:	4b8f      	ldr	r3, [pc, #572]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a8e      	ldr	r2, [pc, #568]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 80049e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	4b8c      	ldr	r3, [pc, #560]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a8b      	ldr	r2, [pc, #556]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 80049f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d013      	beq.n	8004a28 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fc fe3e 	bl	8001680 <HAL_GetTick>
 8004a04:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a08:	f7fc fe3a 	bl	8001680 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	; 0x64
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e2f9      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a1a:	4b81      	ldr	r3, [pc, #516]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x2ac>
 8004a26:	e014      	b.n	8004a52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fc fe2a 	bl	8001680 <HAL_GetTick>
 8004a2c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a30:	f7fc fe26 	bl	8001680 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e2e5      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a42:	4b77      	ldr	r3, [pc, #476]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x2d4>
 8004a4e:	e000      	b.n	8004a52 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d060      	beq.n	8004b20 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_OscConfig+0x314>
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	2b0c      	cmp	r3, #12
 8004a68:	d119      	bne.n	8004a9e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d116      	bne.n	8004a9e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a70:	4b6b      	ldr	r3, [pc, #428]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_OscConfig+0x32c>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e2c2      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a88:	4b65      	ldr	r3, [pc, #404]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	061b      	lsls	r3, r3, #24
 8004a96:	4962      	ldr	r1, [pc, #392]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a9c:	e040      	b.n	8004b20 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d023      	beq.n	8004aee <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aa6:	4b5e      	ldr	r3, [pc, #376]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a5d      	ldr	r2, [pc, #372]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fc fde5 	bl	8001680 <HAL_GetTick>
 8004ab6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aba:	f7fc fde1 	bl	8001680 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e2a0      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004acc:	4b54      	ldr	r3, [pc, #336]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad8:	4b51      	ldr	r3, [pc, #324]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	061b      	lsls	r3, r3, #24
 8004ae6:	494e      	ldr	r1, [pc, #312]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	604b      	str	r3, [r1, #4]
 8004aec:	e018      	b.n	8004b20 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aee:	4b4c      	ldr	r3, [pc, #304]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a4b      	ldr	r2, [pc, #300]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afa:	f7fc fdc1 	bl	8001680 <HAL_GetTick>
 8004afe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b02:	f7fc fdbd 	bl	8001680 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e27c      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b14:	4b42      	ldr	r3, [pc, #264]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1f0      	bne.n	8004b02 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8082 	beq.w	8004c32 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d05f      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004b36:	4b3a      	ldr	r3, [pc, #232]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b3c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d037      	beq.n	8004bbc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e254      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01b      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004b6e:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b74:	4a2a      	ldr	r2, [pc, #168]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b76:	f023 0301 	bic.w	r3, r3, #1
 8004b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b7e:	f7fc fd7f 	bl	8001680 <HAL_GetTick>
 8004b82:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b86:	f7fc fd7b 	bl	8001680 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b11      	cmp	r3, #17
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e23a      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b98:	4b21      	ldr	r3, [pc, #132]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1ef      	bne.n	8004b86 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bac:	f023 0210 	bic.w	r2, r3, #16
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	491a      	ldr	r1, [pc, #104]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bbc:	4b18      	ldr	r3, [pc, #96]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc2:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fc fd58 	bl	8001680 <HAL_GetTick>
 8004bd0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd4:	f7fc fd54 	bl	8001680 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b11      	cmp	r3, #17
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e213      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004be6:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ef      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x478>
 8004bf4:	e01d      	b.n	8004c32 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bfc:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fc fd3b 	bl	8001680 <HAL_GetTick>
 8004c0a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c0c:	e00a      	b.n	8004c24 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c0e:	f7fc fd37 	bl	8001680 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b11      	cmp	r3, #17
 8004c1a:	d903      	bls.n	8004c24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e1f6      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
 8004c20:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c24:	4ba9      	ldr	r3, [pc, #676]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1ed      	bne.n	8004c0e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80bd 	beq.w	8004dba <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c46:	4ba1      	ldr	r3, [pc, #644]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10e      	bne.n	8004c70 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c52:	4b9e      	ldr	r3, [pc, #632]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c56:	4a9d      	ldr	r2, [pc, #628]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004c5e:	4b9b      	ldr	r3, [pc, #620]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c70:	4b97      	ldr	r3, [pc, #604]	; (8004ed0 <HAL_RCC_OscConfig+0x774>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d118      	bne.n	8004cae <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c7c:	4b94      	ldr	r3, [pc, #592]	; (8004ed0 <HAL_RCC_OscConfig+0x774>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a93      	ldr	r2, [pc, #588]	; (8004ed0 <HAL_RCC_OscConfig+0x774>)
 8004c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c88:	f7fc fcfa 	bl	8001680 <HAL_GetTick>
 8004c8c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c90:	f7fc fcf6 	bl	8001680 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e1b5      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca2:	4b8b      	ldr	r3, [pc, #556]	; (8004ed0 <HAL_RCC_OscConfig+0x774>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d02c      	beq.n	8004d14 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004cba:	4b84      	ldr	r3, [pc, #528]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ccc:	497f      	ldr	r1, [pc, #508]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d010      	beq.n	8004d02 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ce0:	4b7a      	ldr	r3, [pc, #488]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	4a79      	ldr	r2, [pc, #484]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004ce8:	f043 0304 	orr.w	r3, r3, #4
 8004cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004cf0:	4b76      	ldr	r3, [pc, #472]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	4a75      	ldr	r2, [pc, #468]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d00:	e018      	b.n	8004d34 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d02:	4b72      	ldr	r3, [pc, #456]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d08:	4a70      	ldr	r2, [pc, #448]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d12:	e00f      	b.n	8004d34 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d14:	4b6d      	ldr	r3, [pc, #436]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	4a6c      	ldr	r2, [pc, #432]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d24:	4b69      	ldr	r3, [pc, #420]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	4a68      	ldr	r2, [pc, #416]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004d2c:	f023 0304 	bic.w	r3, r3, #4
 8004d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d016      	beq.n	8004d6a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3c:	f7fc fca0 	bl	8001680 <HAL_GetTick>
 8004d40:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d42:	e00a      	b.n	8004d5a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d44:	f7fc fc9c 	bl	8001680 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e159      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5a:	4b5c      	ldr	r3, [pc, #368]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0ed      	beq.n	8004d44 <HAL_RCC_OscConfig+0x5e8>
 8004d68:	e01d      	b.n	8004da6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6a:	f7fc fc89 	bl	8001680 <HAL_GetTick>
 8004d6e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d70:	e00a      	b.n	8004d88 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d72:	f7fc fc85 	bl	8001680 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e142      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d88:	4b50      	ldr	r3, [pc, #320]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ed      	bne.n	8004d72 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004d96:	4b4d      	ldr	r3, [pc, #308]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9c:	4a4b      	ldr	r2, [pc, #300]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d105      	bne.n	8004dba <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dae:	4b47      	ldr	r3, [pc, #284]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db2:	4a46      	ldr	r2, [pc, #280]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d03c      	beq.n	8004e40 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d01c      	beq.n	8004e08 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dce:	4b3f      	ldr	r3, [pc, #252]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dd4:	4a3d      	ldr	r2, [pc, #244]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dde:	f7fc fc4f 	bl	8001680 <HAL_GetTick>
 8004de2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004de6:	f7fc fc4b 	bl	8001680 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e10a      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004df8:	4b34      	ldr	r3, [pc, #208]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0ef      	beq.n	8004de6 <HAL_RCC_OscConfig+0x68a>
 8004e06:	e01b      	b.n	8004e40 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e08:	4b30      	ldr	r3, [pc, #192]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e0e:	4a2f      	ldr	r2, [pc, #188]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e18:	f7fc fc32 	bl	8001680 <HAL_GetTick>
 8004e1c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e20:	f7fc fc2e 	bl	8001680 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e0ed      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e32:	4b26      	ldr	r3, [pc, #152]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004e34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1ef      	bne.n	8004e20 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80e1 	beq.w	800500c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	f040 80b5 	bne.w	8004fbe <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e54:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	f003 0203 	and.w	r2, r3, #3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d124      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	3b01      	subs	r3, #1
 8004e74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d11b      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d113      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	085b      	lsrs	r3, r3, #1
 8004e96:	3b01      	subs	r3, #1
 8004e98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d109      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d05f      	beq.n	8004f72 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	2b0c      	cmp	r3, #12
 8004eb6:	d05a      	beq.n	8004f6e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004eb8:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a03      	ldr	r2, [pc, #12]	; (8004ecc <HAL_RCC_OscConfig+0x770>)
 8004ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ec2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ec4:	f7fc fbdc 	bl	8001680 <HAL_GetTick>
 8004ec8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eca:	e00c      	b.n	8004ee6 <HAL_RCC_OscConfig+0x78a>
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed4:	f7fc fbd4 	bl	8001680 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e093      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee6:	4b4c      	ldr	r3, [pc, #304]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ef2:	4b49      	ldr	r3, [pc, #292]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	4b49      	ldr	r3, [pc, #292]	; (800501c <HAL_RCC_OscConfig+0x8c0>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f02:	3a01      	subs	r2, #1
 8004f04:	0112      	lsls	r2, r2, #4
 8004f06:	4311      	orrs	r1, r2
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f0c:	0212      	lsls	r2, r2, #8
 8004f0e:	4311      	orrs	r1, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f14:	0852      	lsrs	r2, r2, #1
 8004f16:	3a01      	subs	r2, #1
 8004f18:	0552      	lsls	r2, r2, #21
 8004f1a:	4311      	orrs	r1, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f20:	0852      	lsrs	r2, r2, #1
 8004f22:	3a01      	subs	r2, #1
 8004f24:	0652      	lsls	r2, r2, #25
 8004f26:	430a      	orrs	r2, r1
 8004f28:	493b      	ldr	r1, [pc, #236]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f2e:	4b3a      	ldr	r3, [pc, #232]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a39      	ldr	r2, [pc, #228]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f38:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f3a:	4b37      	ldr	r3, [pc, #220]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	4a36      	ldr	r2, [pc, #216]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f44:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f46:	f7fc fb9b 	bl	8001680 <HAL_GetTick>
 8004f4a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7fc fb97 	bl	8001680 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e056      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f60:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0f0      	beq.n	8004f4e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f6c:	e04e      	b.n	800500c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e04d      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f72:	4b29      	ldr	r3, [pc, #164]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d146      	bne.n	800500c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f7e:	4b26      	ldr	r3, [pc, #152]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a25      	ldr	r2, [pc, #148]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004f84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f88:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f8a:	4b23      	ldr	r3, [pc, #140]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	4a22      	ldr	r2, [pc, #136]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004f90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f94:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f96:	f7fc fb73 	bl	8001680 <HAL_GetTick>
 8004f9a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9e:	f7fc fb6f 	bl	8001680 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e02e      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb0:	4b19      	ldr	r3, [pc, #100]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x842>
 8004fbc:	e026      	b.n	800500c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d021      	beq.n	8005008 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a13      	ldr	r2, [pc, #76]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fc fb56 	bl	8001680 <HAL_GetTick>
 8004fd4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fc fb52 	bl	8001680 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e011      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fea:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004ff6:	4b08      	ldr	r3, [pc, #32]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	4a07      	ldr	r2, [pc, #28]	; (8005018 <HAL_RCC_OscConfig+0x8bc>)
 8004ffc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005000:	f023 0303 	bic.w	r3, r3, #3
 8005004:	60d3      	str	r3, [r2, #12]
 8005006:	e001      	b.n	800500c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3728      	adds	r7, #40	; 0x28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40021000 	.word	0x40021000
 800501c:	f99f808c 	.word	0xf99f808c

08005020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0e7      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005034:	4b75      	ldr	r3, [pc, #468]	; (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d910      	bls.n	8005064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b72      	ldr	r3, [pc, #456]	; (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 0207 	bic.w	r2, r3, #7
 800504a:	4970      	ldr	r1, [pc, #448]	; (800520c <HAL_RCC_ClockConfig+0x1ec>)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b6e      	ldr	r3, [pc, #440]	; (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0cf      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d010      	beq.n	8005092 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	4b66      	ldr	r3, [pc, #408]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800507c:	429a      	cmp	r2, r3
 800507e:	d908      	bls.n	8005092 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005080:	4b63      	ldr	r3, [pc, #396]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	4960      	ldr	r1, [pc, #384]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 800508e:	4313      	orrs	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d04c      	beq.n	8005138 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a6:	4b5a      	ldr	r3, [pc, #360]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d121      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e0a6      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d107      	bne.n	80050ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050be:	4b54      	ldr	r3, [pc, #336]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d115      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e09a      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d107      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050d6:	4b4e      	ldr	r3, [pc, #312]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e08e      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e6:	4b4a      	ldr	r3, [pc, #296]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e086      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050f6:	4b46      	ldr	r3, [pc, #280]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f023 0203 	bic.w	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4943      	ldr	r1, [pc, #268]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005104:	4313      	orrs	r3, r2
 8005106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005108:	f7fc faba 	bl	8001680 <HAL_GetTick>
 800510c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510e:	e00a      	b.n	8005126 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005110:	f7fc fab6 	bl	8001680 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	; 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e06e      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005126:	4b3a      	ldr	r3, [pc, #232]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 020c 	and.w	r2, r3, #12
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	429a      	cmp	r2, r3
 8005136:	d1eb      	bne.n	8005110 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d010      	beq.n	8005166 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	4b31      	ldr	r3, [pc, #196]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005150:	429a      	cmp	r2, r3
 8005152:	d208      	bcs.n	8005166 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005154:	4b2e      	ldr	r3, [pc, #184]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	492b      	ldr	r1, [pc, #172]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005166:	4b29      	ldr	r3, [pc, #164]	; (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d210      	bcs.n	8005196 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005174:	4b25      	ldr	r3, [pc, #148]	; (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f023 0207 	bic.w	r2, r3, #7
 800517c:	4923      	ldr	r1, [pc, #140]	; (800520c <HAL_RCC_ClockConfig+0x1ec>)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	4313      	orrs	r3, r2
 8005182:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005184:	4b21      	ldr	r3, [pc, #132]	; (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d001      	beq.n	8005196 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e036      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a2:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	4918      	ldr	r1, [pc, #96]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d009      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c0:	4b13      	ldr	r3, [pc, #76]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4910      	ldr	r1, [pc, #64]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051d4:	f000 f824 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	091b      	lsrs	r3, r3, #4
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	490b      	ldr	r1, [pc, #44]	; (8005214 <HAL_RCC_ClockConfig+0x1f4>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	4a09      	ldr	r2, [pc, #36]	; (8005218 <HAL_RCC_ClockConfig+0x1f8>)
 80051f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051f4:	4b09      	ldr	r3, [pc, #36]	; (800521c <HAL_RCC_ClockConfig+0x1fc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fc f9f1 	bl	80015e0 <HAL_InitTick>
 80051fe:	4603      	mov	r3, r0
 8005200:	72fb      	strb	r3, [r7, #11]

  return status;
 8005202:	7afb      	ldrb	r3, [r7, #11]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40022000 	.word	0x40022000
 8005210:	40021000 	.word	0x40021000
 8005214:	0800c94c 	.word	0x0800c94c
 8005218:	20000004 	.word	0x20000004
 800521c:	20000008 	.word	0x20000008

08005220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005220:	b480      	push	{r7}
 8005222:	b089      	sub	sp, #36	; 0x24
 8005224:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800522e:	4b3e      	ldr	r3, [pc, #248]	; (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005238:	4b3b      	ldr	r3, [pc, #236]	; (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x34>
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b0c      	cmp	r3, #12
 800524c:	d121      	bne.n	8005292 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d11e      	bne.n	8005292 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005254:	4b34      	ldr	r3, [pc, #208]	; (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d107      	bne.n	8005270 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005260:	4b31      	ldr	r3, [pc, #196]	; (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005266:	0a1b      	lsrs	r3, r3, #8
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	61fb      	str	r3, [r7, #28]
 800526e:	e005      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005270:	4b2d      	ldr	r3, [pc, #180]	; (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800527c:	4a2b      	ldr	r2, [pc, #172]	; (800532c <HAL_RCC_GetSysClockFreq+0x10c>)
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005284:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005290:	e00a      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b04      	cmp	r3, #4
 8005296:	d102      	bne.n	800529e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005298:	4b25      	ldr	r3, [pc, #148]	; (8005330 <HAL_RCC_GetSysClockFreq+0x110>)
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	e004      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052a4:	4b23      	ldr	r3, [pc, #140]	; (8005334 <HAL_RCC_GetSysClockFreq+0x114>)
 80052a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d134      	bne.n	8005318 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ae:	4b1e      	ldr	r3, [pc, #120]	; (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d003      	beq.n	80052c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d003      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0xac>
 80052c4:	e005      	b.n	80052d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052c6:	4b1a      	ldr	r3, [pc, #104]	; (8005330 <HAL_RCC_GetSysClockFreq+0x110>)
 80052c8:	617b      	str	r3, [r7, #20]
      break;
 80052ca:	e005      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052cc:	4b19      	ldr	r3, [pc, #100]	; (8005334 <HAL_RCC_GetSysClockFreq+0x114>)
 80052ce:	617b      	str	r3, [r7, #20]
      break;
 80052d0:	e002      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	617b      	str	r3, [r7, #20]
      break;
 80052d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d8:	4b13      	ldr	r3, [pc, #76]	; (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	3301      	adds	r3, #1
 80052e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052e6:	4b10      	ldr	r3, [pc, #64]	; (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	fb03 f202 	mul.w	r2, r3, r2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052fe:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	0e5b      	lsrs	r3, r3, #25
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	3301      	adds	r3, #1
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005318:	69bb      	ldr	r3, [r7, #24]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3724      	adds	r7, #36	; 0x24
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000
 800532c:	0800c964 	.word	0x0800c964
 8005330:	00f42400 	.word	0x00f42400
 8005334:	007a1200 	.word	0x007a1200

08005338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800533c:	4b03      	ldr	r3, [pc, #12]	; (800534c <HAL_RCC_GetHCLKFreq+0x14>)
 800533e:	681b      	ldr	r3, [r3, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000004 	.word	0x20000004

08005350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005354:	f7ff fff0 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8005358:	4602      	mov	r2, r0
 800535a:	4b06      	ldr	r3, [pc, #24]	; (8005374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	0a1b      	lsrs	r3, r3, #8
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	4904      	ldr	r1, [pc, #16]	; (8005378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005366:	5ccb      	ldrb	r3, [r1, r3]
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40021000 	.word	0x40021000
 8005378:	0800c95c 	.word	0x0800c95c

0800537c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005380:	f7ff ffda 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0adb      	lsrs	r3, r3, #11
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4904      	ldr	r1, [pc, #16]	; (80053a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40021000 	.word	0x40021000
 80053a4:	0800c95c 	.word	0x0800c95c

080053a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053b4:	4b2a      	ldr	r3, [pc, #168]	; (8005460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053c0:	f7ff f958 	bl	8004674 <HAL_PWREx_GetVoltageRange>
 80053c4:	6178      	str	r0, [r7, #20]
 80053c6:	e014      	b.n	80053f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053c8:	4b25      	ldr	r3, [pc, #148]	; (8005460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053cc:	4a24      	ldr	r2, [pc, #144]	; (8005460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d2:	6593      	str	r3, [r2, #88]	; 0x58
 80053d4:	4b22      	ldr	r3, [pc, #136]	; (8005460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053e0:	f7ff f948 	bl	8004674 <HAL_PWREx_GetVoltageRange>
 80053e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053e6:	4b1e      	ldr	r3, [pc, #120]	; (8005460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ea:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f8:	d10b      	bne.n	8005412 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b80      	cmp	r3, #128	; 0x80
 80053fe:	d919      	bls.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2ba0      	cmp	r3, #160	; 0xa0
 8005404:	d902      	bls.n	800540c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005406:	2302      	movs	r3, #2
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	e013      	b.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800540c:	2301      	movs	r3, #1
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	e010      	b.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b80      	cmp	r3, #128	; 0x80
 8005416:	d902      	bls.n	800541e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005418:	2303      	movs	r3, #3
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	e00a      	b.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b80      	cmp	r3, #128	; 0x80
 8005422:	d102      	bne.n	800542a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005424:	2302      	movs	r3, #2
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	e004      	b.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b70      	cmp	r3, #112	; 0x70
 800542e:	d101      	bne.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005430:	2301      	movs	r3, #1
 8005432:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005434:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f023 0207 	bic.w	r2, r3, #7
 800543c:	4909      	ldr	r1, [pc, #36]	; (8005464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	429a      	cmp	r2, r3
 8005450:	d001      	beq.n	8005456 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	40022000 	.word	0x40022000

08005468 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005470:	2300      	movs	r3, #0
 8005472:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005474:	2300      	movs	r3, #0
 8005476:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 809e 	beq.w	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005486:	2300      	movs	r3, #0
 8005488:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800548a:	4b46      	ldr	r3, [pc, #280]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800549a:	2300      	movs	r3, #0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00d      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a0:	4b40      	ldr	r3, [pc, #256]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80054a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a4:	4a3f      	ldr	r2, [pc, #252]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80054a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054aa:	6593      	str	r3, [r2, #88]	; 0x58
 80054ac:	4b3d      	ldr	r3, [pc, #244]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054b8:	2301      	movs	r3, #1
 80054ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054bc:	4b3a      	ldr	r3, [pc, #232]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a39      	ldr	r2, [pc, #228]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80054c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054c8:	f7fc f8da 	bl	8001680 <HAL_GetTick>
 80054cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054ce:	e009      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d0:	f7fc f8d6 	bl	8001680 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d902      	bls.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	74fb      	strb	r3, [r7, #19]
        break;
 80054e2:	e005      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054e4:	4b30      	ldr	r3, [pc, #192]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0ef      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80054f0:	7cfb      	ldrb	r3, [r7, #19]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d15a      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054f6:	4b2b      	ldr	r3, [pc, #172]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005500:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01e      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	429a      	cmp	r2, r3
 8005510:	d019      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005512:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800551e:	4b21      	ldr	r3, [pc, #132]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800552a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800552e:	4b1d      	ldr	r3, [pc, #116]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005534:	4a1b      	ldr	r2, [pc, #108]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800553e:	4a19      	ldr	r2, [pc, #100]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d016      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fc f896 	bl	8001680 <HAL_GetTick>
 8005554:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005556:	e00b      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005558:	f7fc f892 	bl	8001680 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	; 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d902      	bls.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	74fb      	strb	r3, [r7, #19]
            break;
 800556e:	e006      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005570:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0ec      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800557e:	7cfb      	ldrb	r3, [r7, #19]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005584:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	4904      	ldr	r1, [pc, #16]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800559a:	e009      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800559c:	7cfb      	ldrb	r3, [r7, #19]
 800559e:	74bb      	strb	r3, [r7, #18]
 80055a0:	e006      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80055a2:	bf00      	nop
 80055a4:	40021000 	.word	0x40021000
 80055a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ac:	7cfb      	ldrb	r3, [r7, #19]
 80055ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055b0:	7c7b      	ldrb	r3, [r7, #17]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b6:	4b6e      	ldr	r3, [pc, #440]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	4a6d      	ldr	r2, [pc, #436]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ce:	4b68      	ldr	r3, [pc, #416]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	f023 0203 	bic.w	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4964      	ldr	r1, [pc, #400]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055f0:	4b5f      	ldr	r3, [pc, #380]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f6:	f023 020c 	bic.w	r2, r3, #12
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	495c      	ldr	r1, [pc, #368]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005612:	4b57      	ldr	r3, [pc, #348]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4953      	ldr	r1, [pc, #332]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005634:	4b4e      	ldr	r3, [pc, #312]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	494b      	ldr	r1, [pc, #300]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005656:	4b46      	ldr	r3, [pc, #280]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	4942      	ldr	r1, [pc, #264]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005678:	4b3d      	ldr	r3, [pc, #244]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	493a      	ldr	r1, [pc, #232]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800569a:	4b35      	ldr	r3, [pc, #212]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	4931      	ldr	r1, [pc, #196]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056bc:	4b2c      	ldr	r3, [pc, #176]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	4929      	ldr	r1, [pc, #164]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056de:	4b24      	ldr	r3, [pc, #144]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	4920      	ldr	r1, [pc, #128]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005700:	4b1b      	ldr	r3, [pc, #108]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	4918      	ldr	r1, [pc, #96]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800571e:	d105      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005720:	4b13      	ldr	r3, [pc, #76]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4a12      	ldr	r2, [pc, #72]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800572a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d015      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005738:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	490a      	ldr	r1, [pc, #40]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005756:	d105      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005758:	4b05      	ldr	r3, [pc, #20]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	4a04      	ldr	r2, [pc, #16]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800575e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005762:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005764:	7cbb      	ldrb	r3, [r7, #18]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40021000 	.word	0x40021000

08005774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e095      	b.n	80058b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	2b00      	cmp	r3, #0
 800578c:	d108      	bne.n	80057a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005796:	d009      	beq.n	80057ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	61da      	str	r2, [r3, #28]
 800579e:	e005      	b.n	80057ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fb fe3e 	bl	8001448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057ec:	d902      	bls.n	80057f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	e002      	b.n	80057fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005802:	d007      	beq.n	8005814 <HAL_SPI_Init+0xa0>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800580c:	d002      	beq.n	8005814 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005856:	ea42 0103 	orr.w	r1, r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	0c1b      	lsrs	r3, r3, #16
 8005870:	f003 0204 	and.w	r2, r3, #4
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005890:	ea42 0103 	orr.w	r1, r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b088      	sub	sp, #32
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	603b      	str	r3, [r7, #0]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_SPI_Transmit+0x22>
 80058d8:	2302      	movs	r3, #2
 80058da:	e15f      	b.n	8005b9c <HAL_SPI_Transmit+0x2e2>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058e4:	f7fb fecc 	bl	8001680 <HAL_GetTick>
 80058e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d002      	beq.n	8005900 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058fa:	2302      	movs	r3, #2
 80058fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058fe:	e148      	b.n	8005b92 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <HAL_SPI_Transmit+0x52>
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d102      	bne.n	8005912 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005910:	e13f      	b.n	8005b92 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2203      	movs	r2, #3
 8005916:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	88fa      	ldrh	r2, [r7, #6]
 800592a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	88fa      	ldrh	r2, [r7, #6]
 8005930:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800595c:	d10f      	bne.n	800597e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800596c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800597c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	d007      	beq.n	800599c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800599a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059a4:	d94f      	bls.n	8005a46 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_SPI_Transmit+0xfa>
 80059ae:	8afb      	ldrh	r3, [r7, #22]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d142      	bne.n	8005a3a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	881a      	ldrh	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	1c9a      	adds	r2, r3, #2
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059d8:	e02f      	b.n	8005a3a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d112      	bne.n	8005a0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	881a      	ldrh	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	1c9a      	adds	r2, r3, #2
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a0c:	e015      	b.n	8005a3a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a0e:	f7fb fe37 	bl	8001680 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d803      	bhi.n	8005a26 <HAL_SPI_Transmit+0x16c>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d102      	bne.n	8005a2c <HAL_SPI_Transmit+0x172>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d106      	bne.n	8005a3a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005a38:	e0ab      	b.n	8005b92 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1ca      	bne.n	80059da <HAL_SPI_Transmit+0x120>
 8005a44:	e080      	b.n	8005b48 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_SPI_Transmit+0x19a>
 8005a4e:	8afb      	ldrh	r3, [r7, #22]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d174      	bne.n	8005b3e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d912      	bls.n	8005a84 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	881a      	ldrh	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	1c9a      	adds	r2, r3, #2
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b02      	subs	r3, #2
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a82:	e05c      	b.n	8005b3e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	7812      	ldrb	r2, [r2, #0]
 8005a90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005aaa:	e048      	b.n	8005b3e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d12b      	bne.n	8005b12 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d912      	bls.n	8005aea <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	881a      	ldrh	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	1c9a      	adds	r2, r3, #2
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b02      	subs	r3, #2
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ae8:	e029      	b.n	8005b3e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	330c      	adds	r3, #12
 8005af4:	7812      	ldrb	r2, [r2, #0]
 8005af6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b10:	e015      	b.n	8005b3e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b12:	f7fb fdb5 	bl	8001680 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d803      	bhi.n	8005b2a <HAL_SPI_Transmit+0x270>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d102      	bne.n	8005b30 <HAL_SPI_Transmit+0x276>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005b3c:	e029      	b.n	8005b92 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1b1      	bne.n	8005aac <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	6839      	ldr	r1, [r7, #0]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fcf9 	bl	8006544 <SPI_EndRxTxTransaction>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10a      	bne.n	8005b7c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	77fb      	strb	r3, [r7, #31]
 8005b88:	e003      	b.n	8005b92 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3720      	adds	r7, #32
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d002      	beq.n	8005bca <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bc8:	e11a      	b.n	8005e00 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bd2:	d112      	bne.n	8005bfa <HAL_SPI_Receive+0x56>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10e      	bne.n	8005bfa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2204      	movs	r2, #4
 8005be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005be4:	88fa      	ldrh	r2, [r7, #6]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	4613      	mov	r3, r2
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f90e 	bl	8005e12 <HAL_SPI_TransmitReceive>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	e107      	b.n	8005e0a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_SPI_Receive+0x64>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e100      	b.n	8005e0a <HAL_SPI_Receive+0x266>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c10:	f7fb fd36 	bl	8001680 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <HAL_SPI_Receive+0x7e>
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c26:	e0eb      	b.n	8005e00 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	88fa      	ldrh	r2, [r7, #6]
 8005c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	88fa      	ldrh	r2, [r7, #6]
 8005c48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c72:	d908      	bls.n	8005c86 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c82:	605a      	str	r2, [r3, #4]
 8005c84:	e007      	b.n	8005c96 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c94:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c9e:	d10f      	bne.n	8005cc0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cbe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d007      	beq.n	8005cde <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cdc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ce6:	d86f      	bhi.n	8005dc8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ce8:	e034      	b.n	8005d54 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d117      	bne.n	8005d28 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f103 020c 	add.w	r2, r3, #12
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	7812      	ldrb	r2, [r2, #0]
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d26:	e015      	b.n	8005d54 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d28:	f7fb fcaa 	bl	8001680 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d803      	bhi.n	8005d40 <HAL_SPI_Receive+0x19c>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3e:	d102      	bne.n	8005d46 <HAL_SPI_Receive+0x1a2>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005d52:	e055      	b.n	8005e00 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1c4      	bne.n	8005cea <HAL_SPI_Receive+0x146>
 8005d60:	e038      	b.n	8005dd4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d115      	bne.n	8005d9c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	b292      	uxth	r2, r2
 8005d7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	1c9a      	adds	r2, r3, #2
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d9a:	e015      	b.n	8005dc8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d9c:	f7fb fc70 	bl	8001680 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d803      	bhi.n	8005db4 <HAL_SPI_Receive+0x210>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d102      	bne.n	8005dba <HAL_SPI_Receive+0x216>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005dc6:	e01b      	b.n	8005e00 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1c6      	bne.n	8005d62 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 fb5b 	bl	8006494 <SPI_EndRxTransaction>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2220      	movs	r2, #32
 8005de8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	75fb      	strb	r3, [r7, #23]
 8005df6:	e003      	b.n	8005e00 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b08a      	sub	sp, #40	; 0x28
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	607a      	str	r2, [r7, #4]
 8005e1e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e20:	2301      	movs	r3, #1
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_SPI_TransmitReceive+0x26>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e20a      	b.n	800624e <HAL_SPI_TransmitReceive+0x43c>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e40:	f7fb fc1e 	bl	8001680 <HAL_GetTick>
 8005e44:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e4c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e54:	887b      	ldrh	r3, [r7, #2]
 8005e56:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005e58:	887b      	ldrh	r3, [r7, #2]
 8005e5a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e5c:	7efb      	ldrb	r3, [r7, #27]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d00e      	beq.n	8005e80 <HAL_SPI_TransmitReceive+0x6e>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e68:	d106      	bne.n	8005e78 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d102      	bne.n	8005e78 <HAL_SPI_TransmitReceive+0x66>
 8005e72:	7efb      	ldrb	r3, [r7, #27]
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d003      	beq.n	8005e80 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005e78:	2302      	movs	r3, #2
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e7e:	e1e0      	b.n	8006242 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_SPI_TransmitReceive+0x80>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_SPI_TransmitReceive+0x80>
 8005e8c:	887b      	ldrh	r3, [r7, #2]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d103      	bne.n	8005e9a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e98:	e1d3      	b.n	8006242 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d003      	beq.n	8005eae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2205      	movs	r2, #5
 8005eaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	887a      	ldrh	r2, [r7, #2]
 8005ebe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	887a      	ldrh	r2, [r7, #2]
 8005ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	887a      	ldrh	r2, [r7, #2]
 8005ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	887a      	ldrh	r2, [r7, #2]
 8005eda:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ef0:	d802      	bhi.n	8005ef8 <HAL_SPI_TransmitReceive+0xe6>
 8005ef2:	8a3b      	ldrh	r3, [r7, #16]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d908      	bls.n	8005f0a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f06:	605a      	str	r2, [r3, #4]
 8005f08:	e007      	b.n	8005f1a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f18:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d007      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f40:	f240 8081 	bls.w	8006046 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_SPI_TransmitReceive+0x140>
 8005f4c:	8a7b      	ldrh	r3, [r7, #18]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d16d      	bne.n	800602e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	881a      	ldrh	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	1c9a      	adds	r2, r3, #2
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f76:	e05a      	b.n	800602e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d11b      	bne.n	8005fbe <HAL_SPI_TransmitReceive+0x1ac>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d016      	beq.n	8005fbe <HAL_SPI_TransmitReceive+0x1ac>
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d113      	bne.n	8005fbe <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	881a      	ldrh	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	1c9a      	adds	r2, r3, #2
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d11c      	bne.n	8006006 <HAL_SPI_TransmitReceive+0x1f4>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d016      	beq.n	8006006 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	b292      	uxth	r2, r2
 8005fe4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	1c9a      	adds	r2, r3, #2
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006002:	2301      	movs	r3, #1
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006006:	f7fb fb3b 	bl	8001680 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006012:	429a      	cmp	r2, r3
 8006014:	d80b      	bhi.n	800602e <HAL_SPI_TransmitReceive+0x21c>
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d007      	beq.n	800602e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800602c:	e109      	b.n	8006242 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d19f      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x166>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d199      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x166>
 8006044:	e0e3      	b.n	800620e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_SPI_TransmitReceive+0x244>
 800604e:	8a7b      	ldrh	r3, [r7, #18]
 8006050:	2b01      	cmp	r3, #1
 8006052:	f040 80cf 	bne.w	80061f4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800605a:	b29b      	uxth	r3, r3
 800605c:	2b01      	cmp	r3, #1
 800605e:	d912      	bls.n	8006086 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	881a      	ldrh	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	1c9a      	adds	r2, r3, #2
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b02      	subs	r3, #2
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006084:	e0b6      	b.n	80061f4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	7812      	ldrb	r2, [r2, #0]
 8006092:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ac:	e0a2      	b.n	80061f4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d134      	bne.n	8006126 <HAL_SPI_TransmitReceive+0x314>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d02f      	beq.n	8006126 <HAL_SPI_TransmitReceive+0x314>
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d12c      	bne.n	8006126 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d912      	bls.n	80060fc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	881a      	ldrh	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e6:	1c9a      	adds	r2, r3, #2
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b02      	subs	r3, #2
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060fa:	e012      	b.n	8006122 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	330c      	adds	r3, #12
 8006106:	7812      	ldrb	r2, [r2, #0]
 8006108:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b01      	cmp	r3, #1
 8006132:	d148      	bne.n	80061c6 <HAL_SPI_TransmitReceive+0x3b4>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d042      	beq.n	80061c6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d923      	bls.n	8006194 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	b292      	uxth	r2, r2
 8006158:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	1c9a      	adds	r2, r3, #2
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b02      	subs	r3, #2
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800617c:	b29b      	uxth	r3, r3
 800617e:	2b01      	cmp	r3, #1
 8006180:	d81f      	bhi.n	80061c2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	e016      	b.n	80061c2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f103 020c 	add.w	r2, r3, #12
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	7812      	ldrb	r2, [r2, #0]
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061c2:	2301      	movs	r3, #1
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061c6:	f7fb fa5b 	bl	8001680 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d803      	bhi.n	80061de <HAL_SPI_TransmitReceive+0x3cc>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d102      	bne.n	80061e4 <HAL_SPI_TransmitReceive+0x3d2>
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d107      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80061f2:	e026      	b.n	8006242 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f47f af57 	bne.w	80060ae <HAL_SPI_TransmitReceive+0x29c>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	f47f af50 	bne.w	80060ae <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f996 	bl	8006544 <SPI_EndRxTxTransaction>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2220      	movs	r2, #32
 8006228:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006238:	e003      	b.n	8006242 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800624a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800624e:	4618      	mov	r0, r3
 8006250:	3728      	adds	r7, #40	; 0x28
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	603b      	str	r3, [r7, #0]
 8006264:	4613      	mov	r3, r2
 8006266:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006268:	f7fb fa0a 	bl	8001680 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	4413      	add	r3, r2
 8006276:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006278:	f7fb fa02 	bl	8001680 <HAL_GetTick>
 800627c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800627e:	4b39      	ldr	r3, [pc, #228]	; (8006364 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	015b      	lsls	r3, r3, #5
 8006284:	0d1b      	lsrs	r3, r3, #20
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	fb02 f303 	mul.w	r3, r2, r3
 800628c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800628e:	e054      	b.n	800633a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d050      	beq.n	800633a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006298:	f7fb f9f2 	bl	8001680 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d902      	bls.n	80062ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d13d      	bne.n	800632a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062c6:	d111      	bne.n	80062ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d0:	d004      	beq.n	80062dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062da:	d107      	bne.n	80062ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f4:	d10f      	bne.n	8006316 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e017      	b.n	800635a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	3b01      	subs	r3, #1
 8006338:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4013      	ands	r3, r2
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	429a      	cmp	r2, r3
 8006348:	bf0c      	ite	eq
 800634a:	2301      	moveq	r3, #1
 800634c:	2300      	movne	r3, #0
 800634e:	b2db      	uxtb	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	429a      	cmp	r2, r3
 8006356:	d19b      	bne.n	8006290 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000004 	.word	0x20000004

08006368 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	; 0x28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800637a:	f7fb f981 	bl	8001680 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	4413      	add	r3, r2
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800638a:	f7fb f979 	bl	8001680 <HAL_GetTick>
 800638e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	330c      	adds	r3, #12
 8006396:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006398:	4b3d      	ldr	r3, [pc, #244]	; (8006490 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	00da      	lsls	r2, r3, #3
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	0d1b      	lsrs	r3, r3, #20
 80063a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063b0:	e060      	b.n	8006474 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063b8:	d107      	bne.n	80063ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d050      	beq.n	8006474 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063d2:	f7fb f955 	bl	8001680 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063de:	429a      	cmp	r2, r3
 80063e0:	d902      	bls.n	80063e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d13d      	bne.n	8006464 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006400:	d111      	bne.n	8006426 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800640a:	d004      	beq.n	8006416 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006414:	d107      	bne.n	8006426 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006424:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642e:	d10f      	bne.n	8006450 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800644e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e010      	b.n	8006486 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	3b01      	subs	r3, #1
 8006472:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	4013      	ands	r3, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d196      	bne.n	80063b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3728      	adds	r7, #40	; 0x28
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000004 	.word	0x20000004

08006494 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064a8:	d111      	bne.n	80064ce <SPI_EndRxTransaction+0x3a>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b2:	d004      	beq.n	80064be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064bc:	d107      	bne.n	80064ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2200      	movs	r2, #0
 80064d6:	2180      	movs	r1, #128	; 0x80
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f7ff febd 	bl	8006258 <SPI_WaitFlagStateUntilTimeout>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e8:	f043 0220 	orr.w	r2, r3, #32
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e023      	b.n	800653c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064fc:	d11d      	bne.n	800653a <SPI_EndRxTransaction+0xa6>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006506:	d004      	beq.n	8006512 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006510:	d113      	bne.n	800653a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2200      	movs	r2, #0
 800651a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f7ff ff22 	bl	8006368 <SPI_WaitFifoStateUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d007      	beq.n	800653a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652e:	f043 0220 	orr.w	r2, r3, #32
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e000      	b.n	800653c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2200      	movs	r2, #0
 8006558:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f7ff ff03 	bl	8006368 <SPI_WaitFifoStateUntilTimeout>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d007      	beq.n	8006578 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656c:	f043 0220 	orr.w	r2, r3, #32
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e027      	b.n	80065c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2200      	movs	r2, #0
 8006580:	2180      	movs	r1, #128	; 0x80
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7ff fe68 	bl	8006258 <SPI_WaitFlagStateUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006592:	f043 0220 	orr.w	r2, r3, #32
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e014      	b.n	80065c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff fedc 	bl	8006368 <SPI_WaitFifoStateUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ba:	f043 0220 	orr.w	r2, r3, #32
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e000      	b.n	80065c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d4:	b08a      	sub	sp, #40	; 0x28
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b9e      	ldr	r3, [pc, #632]	; (8006878 <UART_SetConfig+0x2a8>)
 8006600:	4013      	ands	r3, r2
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006608:	430b      	orrs	r3, r1
 800660a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a93      	ldr	r2, [pc, #588]	; (800687c <UART_SetConfig+0x2ac>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006638:	4313      	orrs	r3, r2
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a8a      	ldr	r2, [pc, #552]	; (8006880 <UART_SetConfig+0x2b0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d126      	bne.n	80066a8 <UART_SetConfig+0xd8>
 800665a:	4b8a      	ldr	r3, [pc, #552]	; (8006884 <UART_SetConfig+0x2b4>)
 800665c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	2b03      	cmp	r3, #3
 8006666:	d81b      	bhi.n	80066a0 <UART_SetConfig+0xd0>
 8006668:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <UART_SetConfig+0xa0>)
 800666a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666e:	bf00      	nop
 8006670:	08006681 	.word	0x08006681
 8006674:	08006691 	.word	0x08006691
 8006678:	08006689 	.word	0x08006689
 800667c:	08006699 	.word	0x08006699
 8006680:	2301      	movs	r3, #1
 8006682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006686:	e0ab      	b.n	80067e0 <UART_SetConfig+0x210>
 8006688:	2302      	movs	r3, #2
 800668a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800668e:	e0a7      	b.n	80067e0 <UART_SetConfig+0x210>
 8006690:	2304      	movs	r3, #4
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006696:	e0a3      	b.n	80067e0 <UART_SetConfig+0x210>
 8006698:	2308      	movs	r3, #8
 800669a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800669e:	e09f      	b.n	80067e0 <UART_SetConfig+0x210>
 80066a0:	2310      	movs	r3, #16
 80066a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a6:	e09b      	b.n	80067e0 <UART_SetConfig+0x210>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a76      	ldr	r2, [pc, #472]	; (8006888 <UART_SetConfig+0x2b8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d138      	bne.n	8006724 <UART_SetConfig+0x154>
 80066b2:	4b74      	ldr	r3, [pc, #464]	; (8006884 <UART_SetConfig+0x2b4>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b8:	f003 030c 	and.w	r3, r3, #12
 80066bc:	2b0c      	cmp	r3, #12
 80066be:	d82d      	bhi.n	800671c <UART_SetConfig+0x14c>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <UART_SetConfig+0xf8>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066fd 	.word	0x080066fd
 80066cc:	0800671d 	.word	0x0800671d
 80066d0:	0800671d 	.word	0x0800671d
 80066d4:	0800671d 	.word	0x0800671d
 80066d8:	0800670d 	.word	0x0800670d
 80066dc:	0800671d 	.word	0x0800671d
 80066e0:	0800671d 	.word	0x0800671d
 80066e4:	0800671d 	.word	0x0800671d
 80066e8:	08006705 	.word	0x08006705
 80066ec:	0800671d 	.word	0x0800671d
 80066f0:	0800671d 	.word	0x0800671d
 80066f4:	0800671d 	.word	0x0800671d
 80066f8:	08006715 	.word	0x08006715
 80066fc:	2300      	movs	r3, #0
 80066fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006702:	e06d      	b.n	80067e0 <UART_SetConfig+0x210>
 8006704:	2302      	movs	r3, #2
 8006706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800670a:	e069      	b.n	80067e0 <UART_SetConfig+0x210>
 800670c:	2304      	movs	r3, #4
 800670e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006712:	e065      	b.n	80067e0 <UART_SetConfig+0x210>
 8006714:	2308      	movs	r3, #8
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671a:	e061      	b.n	80067e0 <UART_SetConfig+0x210>
 800671c:	2310      	movs	r3, #16
 800671e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006722:	e05d      	b.n	80067e0 <UART_SetConfig+0x210>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a58      	ldr	r2, [pc, #352]	; (800688c <UART_SetConfig+0x2bc>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d125      	bne.n	800677a <UART_SetConfig+0x1aa>
 800672e:	4b55      	ldr	r3, [pc, #340]	; (8006884 <UART_SetConfig+0x2b4>)
 8006730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006734:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006738:	2b30      	cmp	r3, #48	; 0x30
 800673a:	d016      	beq.n	800676a <UART_SetConfig+0x19a>
 800673c:	2b30      	cmp	r3, #48	; 0x30
 800673e:	d818      	bhi.n	8006772 <UART_SetConfig+0x1a2>
 8006740:	2b20      	cmp	r3, #32
 8006742:	d00a      	beq.n	800675a <UART_SetConfig+0x18a>
 8006744:	2b20      	cmp	r3, #32
 8006746:	d814      	bhi.n	8006772 <UART_SetConfig+0x1a2>
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <UART_SetConfig+0x182>
 800674c:	2b10      	cmp	r3, #16
 800674e:	d008      	beq.n	8006762 <UART_SetConfig+0x192>
 8006750:	e00f      	b.n	8006772 <UART_SetConfig+0x1a2>
 8006752:	2300      	movs	r3, #0
 8006754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006758:	e042      	b.n	80067e0 <UART_SetConfig+0x210>
 800675a:	2302      	movs	r3, #2
 800675c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006760:	e03e      	b.n	80067e0 <UART_SetConfig+0x210>
 8006762:	2304      	movs	r3, #4
 8006764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006768:	e03a      	b.n	80067e0 <UART_SetConfig+0x210>
 800676a:	2308      	movs	r3, #8
 800676c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006770:	e036      	b.n	80067e0 <UART_SetConfig+0x210>
 8006772:	2310      	movs	r3, #16
 8006774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006778:	e032      	b.n	80067e0 <UART_SetConfig+0x210>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a3f      	ldr	r2, [pc, #252]	; (800687c <UART_SetConfig+0x2ac>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d12a      	bne.n	80067da <UART_SetConfig+0x20a>
 8006784:	4b3f      	ldr	r3, [pc, #252]	; (8006884 <UART_SetConfig+0x2b4>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800678e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006792:	d01a      	beq.n	80067ca <UART_SetConfig+0x1fa>
 8006794:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006798:	d81b      	bhi.n	80067d2 <UART_SetConfig+0x202>
 800679a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800679e:	d00c      	beq.n	80067ba <UART_SetConfig+0x1ea>
 80067a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a4:	d815      	bhi.n	80067d2 <UART_SetConfig+0x202>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <UART_SetConfig+0x1e2>
 80067aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ae:	d008      	beq.n	80067c2 <UART_SetConfig+0x1f2>
 80067b0:	e00f      	b.n	80067d2 <UART_SetConfig+0x202>
 80067b2:	2300      	movs	r3, #0
 80067b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b8:	e012      	b.n	80067e0 <UART_SetConfig+0x210>
 80067ba:	2302      	movs	r3, #2
 80067bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c0:	e00e      	b.n	80067e0 <UART_SetConfig+0x210>
 80067c2:	2304      	movs	r3, #4
 80067c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c8:	e00a      	b.n	80067e0 <UART_SetConfig+0x210>
 80067ca:	2308      	movs	r3, #8
 80067cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d0:	e006      	b.n	80067e0 <UART_SetConfig+0x210>
 80067d2:	2310      	movs	r3, #16
 80067d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d8:	e002      	b.n	80067e0 <UART_SetConfig+0x210>
 80067da:	2310      	movs	r3, #16
 80067dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a25      	ldr	r2, [pc, #148]	; (800687c <UART_SetConfig+0x2ac>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	f040 808a 	bne.w	8006900 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d824      	bhi.n	800683e <UART_SetConfig+0x26e>
 80067f4:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <UART_SetConfig+0x22c>)
 80067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fa:	bf00      	nop
 80067fc:	08006821 	.word	0x08006821
 8006800:	0800683f 	.word	0x0800683f
 8006804:	08006829 	.word	0x08006829
 8006808:	0800683f 	.word	0x0800683f
 800680c:	0800682f 	.word	0x0800682f
 8006810:	0800683f 	.word	0x0800683f
 8006814:	0800683f 	.word	0x0800683f
 8006818:	0800683f 	.word	0x0800683f
 800681c:	08006837 	.word	0x08006837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006820:	f7fe fd96 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8006824:	61f8      	str	r0, [r7, #28]
        break;
 8006826:	e010      	b.n	800684a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006828:	4b19      	ldr	r3, [pc, #100]	; (8006890 <UART_SetConfig+0x2c0>)
 800682a:	61fb      	str	r3, [r7, #28]
        break;
 800682c:	e00d      	b.n	800684a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800682e:	f7fe fcf7 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 8006832:	61f8      	str	r0, [r7, #28]
        break;
 8006834:	e009      	b.n	800684a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800683a:	61fb      	str	r3, [r7, #28]
        break;
 800683c:	e005      	b.n	800684a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006848:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8109 	beq.w	8006a64 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	4413      	add	r3, r2
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	429a      	cmp	r2, r3
 8006860:	d305      	bcc.n	800686e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	429a      	cmp	r2, r3
 800686c:	d912      	bls.n	8006894 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006874:	e0f6      	b.n	8006a64 <UART_SetConfig+0x494>
 8006876:	bf00      	nop
 8006878:	efff69f3 	.word	0xefff69f3
 800687c:	40008000 	.word	0x40008000
 8006880:	40013800 	.word	0x40013800
 8006884:	40021000 	.word	0x40021000
 8006888:	40004400 	.word	0x40004400
 800688c:	40004800 	.word	0x40004800
 8006890:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2200      	movs	r2, #0
 8006898:	461c      	mov	r4, r3
 800689a:	4615      	mov	r5, r2
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	022b      	lsls	r3, r5, #8
 80068a6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80068aa:	0222      	lsls	r2, r4, #8
 80068ac:	68f9      	ldr	r1, [r7, #12]
 80068ae:	6849      	ldr	r1, [r1, #4]
 80068b0:	0849      	lsrs	r1, r1, #1
 80068b2:	2000      	movs	r0, #0
 80068b4:	4688      	mov	r8, r1
 80068b6:	4681      	mov	r9, r0
 80068b8:	eb12 0a08 	adds.w	sl, r2, r8
 80068bc:	eb43 0b09 	adc.w	fp, r3, r9
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	607a      	str	r2, [r7, #4]
 80068ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ce:	4650      	mov	r0, sl
 80068d0:	4659      	mov	r1, fp
 80068d2:	f7f9 fc7b 	bl	80001cc <__aeabi_uldivmod>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4613      	mov	r3, r2
 80068dc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068e4:	d308      	bcc.n	80068f8 <UART_SetConfig+0x328>
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ec:	d204      	bcs.n	80068f8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	e0b5      	b.n	8006a64 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068fe:	e0b1      	b.n	8006a64 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006908:	d15d      	bne.n	80069c6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800690a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800690e:	2b08      	cmp	r3, #8
 8006910:	d827      	bhi.n	8006962 <UART_SetConfig+0x392>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <UART_SetConfig+0x348>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	0800693d 	.word	0x0800693d
 800691c:	08006945 	.word	0x08006945
 8006920:	0800694d 	.word	0x0800694d
 8006924:	08006963 	.word	0x08006963
 8006928:	08006953 	.word	0x08006953
 800692c:	08006963 	.word	0x08006963
 8006930:	08006963 	.word	0x08006963
 8006934:	08006963 	.word	0x08006963
 8006938:	0800695b 	.word	0x0800695b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800693c:	f7fe fd08 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8006940:	61f8      	str	r0, [r7, #28]
        break;
 8006942:	e014      	b.n	800696e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006944:	f7fe fd1a 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 8006948:	61f8      	str	r0, [r7, #28]
        break;
 800694a:	e010      	b.n	800696e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800694c:	4b4c      	ldr	r3, [pc, #304]	; (8006a80 <UART_SetConfig+0x4b0>)
 800694e:	61fb      	str	r3, [r7, #28]
        break;
 8006950:	e00d      	b.n	800696e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006952:	f7fe fc65 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 8006956:	61f8      	str	r0, [r7, #28]
        break;
 8006958:	e009      	b.n	800696e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800695a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695e:	61fb      	str	r3, [r7, #28]
        break;
 8006960:	e005      	b.n	800696e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800696c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d077      	beq.n	8006a64 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	005a      	lsls	r2, r3, #1
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	085b      	lsrs	r3, r3, #1
 800697e:	441a      	add	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	fbb2 f3f3 	udiv	r3, r2, r3
 8006988:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b0f      	cmp	r3, #15
 800698e:	d916      	bls.n	80069be <UART_SetConfig+0x3ee>
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006996:	d212      	bcs.n	80069be <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f023 030f 	bic.w	r3, r3, #15
 80069a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	085b      	lsrs	r3, r3, #1
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	8afb      	ldrh	r3, [r7, #22]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	8afa      	ldrh	r2, [r7, #22]
 80069ba:	60da      	str	r2, [r3, #12]
 80069bc:	e052      	b.n	8006a64 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069c4:	e04e      	b.n	8006a64 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d827      	bhi.n	8006a1e <UART_SetConfig+0x44e>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <UART_SetConfig+0x404>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	08006a01 	.word	0x08006a01
 80069dc:	08006a09 	.word	0x08006a09
 80069e0:	08006a1f 	.word	0x08006a1f
 80069e4:	08006a0f 	.word	0x08006a0f
 80069e8:	08006a1f 	.word	0x08006a1f
 80069ec:	08006a1f 	.word	0x08006a1f
 80069f0:	08006a1f 	.word	0x08006a1f
 80069f4:	08006a17 	.word	0x08006a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f8:	f7fe fcaa 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 80069fc:	61f8      	str	r0, [r7, #28]
        break;
 80069fe:	e014      	b.n	8006a2a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a00:	f7fe fcbc 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 8006a04:	61f8      	str	r0, [r7, #28]
        break;
 8006a06:	e010      	b.n	8006a2a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a08:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <UART_SetConfig+0x4b0>)
 8006a0a:	61fb      	str	r3, [r7, #28]
        break;
 8006a0c:	e00d      	b.n	8006a2a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a0e:	f7fe fc07 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 8006a12:	61f8      	str	r0, [r7, #28]
        break;
 8006a14:	e009      	b.n	8006a2a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1a:	61fb      	str	r3, [r7, #28]
        break;
 8006a1c:	e005      	b.n	8006a2a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a28:	bf00      	nop
    }

    if (pclk != 0U)
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d019      	beq.n	8006a64 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	085a      	lsrs	r2, r3, #1
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	441a      	add	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b0f      	cmp	r3, #15
 8006a48:	d909      	bls.n	8006a5e <UART_SetConfig+0x48e>
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a50:	d205      	bcs.n	8006a5e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60da      	str	r2, [r3, #12]
 8006a5c:	e002      	b.n	8006a64 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006a70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3728      	adds	r7, #40	; 0x28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a7e:	bf00      	nop
 8006a80:	00f42400 	.word	0x00f42400

08006a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00a      	beq.n	8006af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00a      	beq.n	8006b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01a      	beq.n	8006b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b82:	d10a      	bne.n	8006b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	605a      	str	r2, [r3, #4]
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b098      	sub	sp, #96	; 0x60
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bd8:	f7fa fd52 	bl	8001680 <HAL_GetTick>
 8006bdc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0308 	and.w	r3, r3, #8
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d12e      	bne.n	8006c4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f88c 	bl	8006d18 <UART_WaitOnFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d021      	beq.n	8006c4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c24:	647b      	str	r3, [r7, #68]	; 0x44
 8006c26:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e6      	bne.n	8006c06 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e062      	b.n	8006d10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0304 	and.w	r3, r3, #4
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d149      	bne.n	8006cec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c60:	2200      	movs	r2, #0
 8006c62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f856 	bl	8006d18 <UART_WaitOnFlagUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d03c      	beq.n	8006cec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	e853 3f00 	ldrex	r3, [r3]
 8006c7e:	623b      	str	r3, [r7, #32]
   return(result);
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c90:	633b      	str	r3, [r7, #48]	; 0x30
 8006c92:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e6      	bne.n	8006c72 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3308      	adds	r3, #8
 8006caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc4:	61fa      	str	r2, [r7, #28]
 8006cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	69b9      	ldr	r1, [r7, #24]
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e5      	bne.n	8006ca4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e011      	b.n	8006d10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3758      	adds	r7, #88	; 0x58
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	4613      	mov	r3, r2
 8006d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d28:	e049      	b.n	8006dbe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d30:	d045      	beq.n	8006dbe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d32:	f7fa fca5 	bl	8001680 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d302      	bcc.n	8006d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e048      	b.n	8006dde <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0304 	and.w	r3, r3, #4
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d031      	beq.n	8006dbe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d110      	bne.n	8006d8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f838 	bl	8006de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e029      	b.n	8006dde <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d98:	d111      	bne.n	8006dbe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006da2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f81e 	bl	8006de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e00f      	b.n	8006dde <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	69da      	ldr	r2, [r3, #28]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	bf0c      	ite	eq
 8006dce:	2301      	moveq	r3, #1
 8006dd0:	2300      	movne	r3, #0
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d0a6      	beq.n	8006d2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b095      	sub	sp, #84	; 0x54
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e6      	bne.n	8006dee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3308      	adds	r3, #8
 8006e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f023 0301 	bic.w	r3, r3, #1
 8006e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e5      	bne.n	8006e20 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d118      	bne.n	8006e8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f023 0310 	bic.w	r3, r3, #16
 8006e70:	647b      	str	r3, [r7, #68]	; 0x44
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e7a:	61bb      	str	r3, [r7, #24]
 8006e7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6979      	ldr	r1, [r7, #20]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	613b      	str	r3, [r7, #16]
   return(result);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e6      	bne.n	8006e5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ea2:	bf00      	nop
 8006ea4:	3754      	adds	r7, #84	; 0x54
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b086      	sub	sp, #24
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	607a      	str	r2, [r7, #4]
 8006eba:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e056      	b.n	8006f74 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7fa fa40 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2224      	movs	r2, #36	; 0x24
 8006ee0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0201 	bic.w	r2, r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f7ff fdc2 	bl	8006a84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7ff fb65 	bl	80065d0 <UART_SetConfig>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e031      	b.n	8006f74 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f1e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	055b      	lsls	r3, r3, #21
 8006f38:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	041b      	lsls	r3, r3, #16
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8006f4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	6979      	ldr	r1, [r7, #20]
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7ff fe2b 	bl	8006bc8 <UART_CheckIdleState>
 8006f72:	4603      	mov	r3, r0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	f107 0014 	add.w	r0, r7, #20
 8006f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	b004      	add	sp, #16
 8006f9c:	4770      	bx	lr

08006f9e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006fae:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006fb2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006fd4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006fd8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	43db      	mvns	r3, r3
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	4013      	ands	r3, r2
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800701c:	b084      	sub	sp, #16
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	f107 0014 	add.w	r0, r7, #20
 800702a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	b004      	add	sp, #16
 800705c:	4770      	bx	lr
	...

08007060 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007060:	b480      	push	{r7}
 8007062:	b09d      	sub	sp, #116	; 0x74
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	78db      	ldrb	r3, [r3, #3]
 800708e:	2b03      	cmp	r3, #3
 8007090:	d81f      	bhi.n	80070d2 <USB_ActivateEndpoint+0x72>
 8007092:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <USB_ActivateEndpoint+0x38>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070a9 	.word	0x080070a9
 800709c:	080070c5 	.word	0x080070c5
 80070a0:	080070db 	.word	0x080070db
 80070a4:	080070b7 	.word	0x080070b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80070a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80070ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80070b4:	e012      	b.n	80070dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80070b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80070ba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80070be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80070c2:	e00b      	b.n	80070dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80070c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80070c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80070d0:	e004      	b.n	80070dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80070d8:	e000      	b.n	80070dc <USB_ActivateEndpoint+0x7c>
      break;
 80070da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	441a      	add	r2, r3
 80070e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80070ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	b21b      	sxth	r3, r3
 800710e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007116:	b21a      	sxth	r2, r3
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	b21b      	sxth	r3, r3
 800711e:	4313      	orrs	r3, r2
 8007120:	b21b      	sxth	r3, r3
 8007122:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	441a      	add	r2, r3
 8007130:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800713c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007144:	b29b      	uxth	r3, r3
 8007146:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	7b1b      	ldrb	r3, [r3, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f040 8178 	bne.w	8007442 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	785b      	ldrb	r3, [r3, #1]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 8084 	beq.w	8007264 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	61bb      	str	r3, [r7, #24]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007166:	b29b      	uxth	r3, r3
 8007168:	461a      	mov	r2, r3
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	4413      	add	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	00da      	lsls	r2, r3, #3
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	88db      	ldrh	r3, [r3, #6]
 8007184:	085b      	lsrs	r3, r3, #1
 8007186:	b29b      	uxth	r3, r3
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	827b      	strh	r3, [r7, #18]
 800719e:	8a7b      	ldrh	r3, [r7, #18]
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01b      	beq.n	80071e0 <USB_ActivateEndpoint+0x180>
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	823b      	strh	r3, [r7, #16]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	441a      	add	r2, r3
 80071ca:	8a3b      	ldrh	r3, [r7, #16]
 80071cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071dc:	b29b      	uxth	r3, r3
 80071de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	78db      	ldrb	r3, [r3, #3]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d020      	beq.n	800722a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fe:	81bb      	strh	r3, [r7, #12]
 8007200:	89bb      	ldrh	r3, [r7, #12]
 8007202:	f083 0320 	eor.w	r3, r3, #32
 8007206:	81bb      	strh	r3, [r7, #12]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	441a      	add	r2, r3
 8007212:	89bb      	ldrh	r3, [r7, #12]
 8007214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007224:	b29b      	uxth	r3, r3
 8007226:	8013      	strh	r3, [r2, #0]
 8007228:	e2d5      	b.n	80077d6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007240:	81fb      	strh	r3, [r7, #14]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	441a      	add	r2, r3
 800724c:	89fb      	ldrh	r3, [r7, #14]
 800724e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725e:	b29b      	uxth	r3, r3
 8007260:	8013      	strh	r3, [r2, #0]
 8007262:	e2b8      	b.n	80077d6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	633b      	str	r3, [r7, #48]	; 0x30
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726e:	b29b      	uxth	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	4413      	add	r3, r2
 8007276:	633b      	str	r3, [r7, #48]	; 0x30
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	00da      	lsls	r2, r3, #3
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	4413      	add	r3, r2
 8007282:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	88db      	ldrh	r3, [r3, #6]
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	b29b      	uxth	r3, r3
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	62bb      	str	r3, [r7, #40]	; 0x28
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	4413      	add	r3, r2
 80072aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	00da      	lsls	r2, r3, #3
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	4413      	add	r3, r2
 80072b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	801a      	strh	r2, [r3, #0]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2b3e      	cmp	r3, #62	; 0x3e
 80072d2:	d91d      	bls.n	8007310 <USB_ActivateEndpoint+0x2b0>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	095b      	lsrs	r3, r3, #5
 80072da:	66bb      	str	r3, [r7, #104]	; 0x68
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d102      	bne.n	80072ee <USB_ActivateEndpoint+0x28e>
 80072e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072ea:	3b01      	subs	r3, #1
 80072ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	029b      	lsls	r3, r3, #10
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	4313      	orrs	r3, r2
 80072fe:	b29b      	uxth	r3, r3
 8007300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007308:	b29a      	uxth	r2, r3
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	801a      	strh	r2, [r3, #0]
 800730e:	e026      	b.n	800735e <USB_ActivateEndpoint+0x2fe>
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <USB_ActivateEndpoint+0x2ce>
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007326:	b29a      	uxth	r2, r3
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	801a      	strh	r2, [r3, #0]
 800732c:	e017      	b.n	800735e <USB_ActivateEndpoint+0x2fe>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	085b      	lsrs	r3, r3, #1
 8007334:	66bb      	str	r3, [r7, #104]	; 0x68
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <USB_ActivateEndpoint+0x2e8>
 8007342:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007344:	3301      	adds	r3, #1
 8007346:	66bb      	str	r3, [r7, #104]	; 0x68
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	b29a      	uxth	r2, r3
 800734e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007350:	b29b      	uxth	r3, r3
 8007352:	029b      	lsls	r3, r3, #10
 8007354:	b29b      	uxth	r3, r3
 8007356:	4313      	orrs	r3, r2
 8007358:	b29a      	uxth	r2, r3
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	847b      	strh	r3, [r7, #34]	; 0x22
 800736c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800736e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d01b      	beq.n	80073ae <USB_ActivateEndpoint+0x34e>
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738c:	843b      	strh	r3, [r7, #32]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	441a      	add	r2, r3
 8007398:	8c3b      	ldrh	r3, [r7, #32]
 800739a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800739e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d124      	bne.n	8007400 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073cc:	83bb      	strh	r3, [r7, #28]
 80073ce:	8bbb      	ldrh	r3, [r7, #28]
 80073d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073d4:	83bb      	strh	r3, [r7, #28]
 80073d6:	8bbb      	ldrh	r3, [r7, #28]
 80073d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073dc:	83bb      	strh	r3, [r7, #28]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	441a      	add	r2, r3
 80073e8:	8bbb      	ldrh	r3, [r7, #28]
 80073ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	8013      	strh	r3, [r2, #0]
 80073fe:	e1ea      	b.n	80077d6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	b29b      	uxth	r3, r3
 800740e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007416:	83fb      	strh	r3, [r7, #30]
 8007418:	8bfb      	ldrh	r3, [r7, #30]
 800741a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800741e:	83fb      	strh	r3, [r7, #30]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	441a      	add	r2, r3
 800742a:	8bfb      	ldrh	r3, [r7, #30]
 800742c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800743c:	b29b      	uxth	r3, r3
 800743e:	8013      	strh	r3, [r2, #0]
 8007440:	e1c9      	b.n	80077d6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	78db      	ldrb	r3, [r3, #3]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d11e      	bne.n	8007488 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800745c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007460:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	441a      	add	r2, r3
 800746e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800747e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007482:	b29b      	uxth	r3, r3
 8007484:	8013      	strh	r3, [r2, #0]
 8007486:	e01d      	b.n	80074c4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800749a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	441a      	add	r2, r3
 80074ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80074b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	461a      	mov	r2, r3
 80074d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074d4:	4413      	add	r3, r2
 80074d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	00da      	lsls	r2, r3, #3
 80074de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	891b      	ldrh	r3, [r3, #8]
 80074ec:	085b      	lsrs	r3, r3, #1
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	657b      	str	r3, [r7, #84]	; 0x54
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007502:	b29b      	uxth	r3, r3
 8007504:	461a      	mov	r2, r3
 8007506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007508:	4413      	add	r3, r2
 800750a:	657b      	str	r3, [r7, #84]	; 0x54
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	00da      	lsls	r2, r3, #3
 8007512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007514:	4413      	add	r3, r2
 8007516:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800751a:	653b      	str	r3, [r7, #80]	; 0x50
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	895b      	ldrh	r3, [r3, #10]
 8007520:	085b      	lsrs	r3, r3, #1
 8007522:	b29b      	uxth	r3, r3
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800752a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	785b      	ldrb	r3, [r3, #1]
 8007530:	2b00      	cmp	r3, #0
 8007532:	f040 8093 	bne.w	800765c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007546:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800754a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01b      	beq.n	800758a <USB_ActivateEndpoint+0x52a>
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007568:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	441a      	add	r2, r3
 8007574:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007586:	b29b      	uxth	r3, r3
 8007588:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007598:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800759a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01b      	beq.n	80075da <USB_ActivateEndpoint+0x57a>
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	441a      	add	r2, r3
 80075c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80075c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f0:	873b      	strh	r3, [r7, #56]	; 0x38
 80075f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80075f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075f8:	873b      	strh	r3, [r7, #56]	; 0x38
 80075fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80075fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007600:	873b      	strh	r3, [r7, #56]	; 0x38
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	441a      	add	r2, r3
 800760c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800760e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800761e:	b29b      	uxth	r3, r3
 8007620:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007638:	86fb      	strh	r3, [r7, #54]	; 0x36
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	441a      	add	r2, r3
 8007644:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800764e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007656:	b29b      	uxth	r3, r3
 8007658:	8013      	strh	r3, [r2, #0]
 800765a:	e0bc      	b.n	80077d6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800766c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d01d      	beq.n	80076b4 <USB_ActivateEndpoint+0x654>
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	441a      	add	r2, r3
 800769c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80076a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80076c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80076c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01d      	beq.n	800770c <USB_ActivateEndpoint+0x6ac>
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	441a      	add	r2, r3
 80076f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80076f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007704:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007708:	b29b      	uxth	r3, r3
 800770a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	78db      	ldrb	r3, [r3, #3]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d024      	beq.n	800775e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800772a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800772e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007732:	f083 0320 	eor.w	r3, r3, #32
 8007736:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	441a      	add	r2, r3
 8007744:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800774c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007758:	b29b      	uxth	r3, r3
 800775a:	8013      	strh	r3, [r2, #0]
 800775c:	e01d      	b.n	800779a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29b      	uxth	r3, r3
 800776c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007774:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	441a      	add	r2, r3
 8007782:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	441a      	add	r2, r3
 80077be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80077c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80077d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3774      	adds	r7, #116	; 0x74
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop

080077e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b08d      	sub	sp, #52	; 0x34
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	7b1b      	ldrb	r3, [r3, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f040 808e 	bne.w	8007918 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d044      	beq.n	800788e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	81bb      	strh	r3, [r7, #12]
 8007812:	89bb      	ldrh	r3, [r7, #12]
 8007814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01b      	beq.n	8007854 <USB_DeactivateEndpoint+0x6c>
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	881b      	ldrh	r3, [r3, #0]
 8007828:	b29b      	uxth	r3, r3
 800782a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800782e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007832:	817b      	strh	r3, [r7, #10]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	441a      	add	r2, r3
 800783e:	897b      	ldrh	r3, [r7, #10]
 8007840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800784c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007850:	b29b      	uxth	r3, r3
 8007852:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800786a:	813b      	strh	r3, [r7, #8]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	441a      	add	r2, r3
 8007876:	893b      	ldrh	r3, [r7, #8]
 8007878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800787c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007888:	b29b      	uxth	r3, r3
 800788a:	8013      	strh	r3, [r2, #0]
 800788c:	e192      	b.n	8007bb4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	827b      	strh	r3, [r7, #18]
 800789c:	8a7b      	ldrh	r3, [r7, #18]
 800789e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d01b      	beq.n	80078de <USB_DeactivateEndpoint+0xf6>
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078bc:	823b      	strh	r3, [r7, #16]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	441a      	add	r2, r3
 80078c8:	8a3b      	ldrh	r3, [r7, #16]
 80078ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078da:	b29b      	uxth	r3, r3
 80078dc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f4:	81fb      	strh	r3, [r7, #14]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	441a      	add	r2, r3
 8007900:	89fb      	ldrh	r3, [r7, #14]
 8007902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800790e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007912:	b29b      	uxth	r3, r3
 8007914:	8013      	strh	r3, [r2, #0]
 8007916:	e14d      	b.n	8007bb4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	785b      	ldrb	r3, [r3, #1]
 800791c:	2b00      	cmp	r3, #0
 800791e:	f040 80a5 	bne.w	8007a6c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	843b      	strh	r3, [r7, #32]
 8007930:	8c3b      	ldrh	r3, [r7, #32]
 8007932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d01b      	beq.n	8007972 <USB_DeactivateEndpoint+0x18a>
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007950:	83fb      	strh	r3, [r7, #30]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	441a      	add	r2, r3
 800795c:	8bfb      	ldrh	r3, [r7, #30]
 800795e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800796a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796e:	b29b      	uxth	r3, r3
 8007970:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	83bb      	strh	r3, [r7, #28]
 8007980:	8bbb      	ldrh	r3, [r7, #28]
 8007982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007986:	2b00      	cmp	r3, #0
 8007988:	d01b      	beq.n	80079c2 <USB_DeactivateEndpoint+0x1da>
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800799c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a0:	837b      	strh	r3, [r7, #26]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	441a      	add	r2, r3
 80079ac:	8b7b      	ldrh	r3, [r7, #26]
 80079ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079be:	b29b      	uxth	r3, r3
 80079c0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d8:	833b      	strh	r3, [r7, #24]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	441a      	add	r2, r3
 80079e4:	8b3b      	ldrh	r3, [r7, #24]
 80079e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a10:	82fb      	strh	r3, [r7, #22]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	441a      	add	r2, r3
 8007a1c:	8afb      	ldrh	r3, [r7, #22]
 8007a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a48:	82bb      	strh	r3, [r7, #20]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	441a      	add	r2, r3
 8007a54:	8abb      	ldrh	r3, [r7, #20]
 8007a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	8013      	strh	r3, [r2, #0]
 8007a6a:	e0a3      	b.n	8007bb4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007a7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d01b      	beq.n	8007abc <USB_DeactivateEndpoint+0x2d4>
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	441a      	add	r2, r3
 8007aa6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007aca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01b      	beq.n	8007b0c <USB_DeactivateEndpoint+0x324>
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aea:	853b      	strh	r3, [r7, #40]	; 0x28
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	441a      	add	r2, r3
 8007af6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	441a      	add	r2, r3
 8007b2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	441a      	add	r2, r3
 8007b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b92:	847b      	strh	r3, [r7, #34]	; 0x22
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	441a      	add	r2, r3
 8007b9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3734      	adds	r7, #52	; 0x34
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b0c2      	sub	sp, #264	; 0x108
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd0:	6018      	str	r0, [r3, #0]
 8007bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bda:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	785b      	ldrb	r3, [r3, #1]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	f040 86b7 	bne.w	800895c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699a      	ldr	r2, [r3, #24]
 8007bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d908      	bls.n	8007c1c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c1a:	e007      	b.n	8007c2c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	7b1b      	ldrb	r3, [r3, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d13a      	bne.n	8007cb2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6959      	ldr	r1, [r3, #20]
 8007c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	88da      	ldrh	r2, [r3, #6]
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c5e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c62:	6800      	ldr	r0, [r0, #0]
 8007c64:	f001 fcb9 	bl	80095da <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	613b      	str	r3, [r7, #16]
 8007c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	4413      	add	r3, r2
 8007c8a:	613b      	str	r3, [r7, #16]
 8007c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	00da      	lsls	r2, r3, #3
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	801a      	strh	r2, [r3, #0]
 8007cae:	f000 be1f 	b.w	80088f0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	78db      	ldrb	r3, [r3, #3]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	f040 8462 	bne.w	8008588 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6a1a      	ldr	r2, [r3, #32]
 8007cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	f240 83df 	bls.w	80084a0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	441a      	add	r2, r3
 8007d26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d32:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6a1a      	ldr	r2, [r3, #32]
 8007d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 81c7 	beq.w	8008112 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d177      	bne.n	8007e90 <USB_EPStartXfer+0x2ce>
 8007da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc0:	4413      	add	r3, r2
 8007dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	00da      	lsls	r2, r3, #3
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df0:	2b3e      	cmp	r3, #62	; 0x3e
 8007df2:	d921      	bls.n	8007e38 <USB_EPStartXfer+0x276>
 8007df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e02:	f003 031f 	and.w	r3, r3, #31
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d104      	bne.n	8007e14 <USB_EPStartXfer+0x252>
 8007e0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	029b      	lsls	r3, r3, #10
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	4313      	orrs	r3, r2
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	801a      	strh	r2, [r3, #0]
 8007e36:	e050      	b.n	8007eda <USB_EPStartXfer+0x318>
 8007e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <USB_EPStartXfer+0x294>
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	801a      	strh	r2, [r3, #0]
 8007e54:	e041      	b.n	8007eda <USB_EPStartXfer+0x318>
 8007e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d004      	beq.n	8007e76 <USB_EPStartXfer+0x2b4>
 8007e6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e70:	3301      	adds	r3, #1
 8007e72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	029b      	lsls	r3, r3, #10
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	4313      	orrs	r3, r2
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	801a      	strh	r2, [r3, #0]
 8007e8e:	e024      	b.n	8007eda <USB_EPStartXfer+0x318>
 8007e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	785b      	ldrb	r3, [r3, #1]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d11c      	bne.n	8007eda <USB_EPStartXfer+0x318>
 8007ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	4413      	add	r3, r2
 8007eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8007eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	00da      	lsls	r2, r3, #3
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	4413      	add	r3, r2
 8007eca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	895b      	ldrh	r3, [r3, #10]
 8007ee6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6959      	ldr	r1, [r3, #20]
 8007ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f08:	6800      	ldr	r0, [r0, #0]
 8007f0a:	f001 fb66 	bl	80095da <USB_WritePMA>
            ep->xfer_buff += len;
 8007f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	695a      	ldr	r2, [r3, #20]
 8007f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f1e:	441a      	add	r2, r3
 8007f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6a1a      	ldr	r2, [r3, #32]
 8007f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d90f      	bls.n	8007f68 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6a1a      	ldr	r2, [r3, #32]
 8007f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f58:	1ad2      	subs	r2, r2, r3
 8007f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	621a      	str	r2, [r3, #32]
 8007f66:	e00e      	b.n	8007f86 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2200      	movs	r2, #0
 8007f84:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	785b      	ldrb	r3, [r3, #1]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d177      	bne.n	8008086 <USB_EPStartXfer+0x4c4>
 8007f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	61bb      	str	r3, [r7, #24]
 8007fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	00da      	lsls	r2, r3, #3
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fd0:	617b      	str	r3, [r7, #20]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	801a      	strh	r2, [r3, #0]
 8007fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8007fe8:	d921      	bls.n	800802e <USB_EPStartXfer+0x46c>
 8007fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff8:	f003 031f 	and.w	r3, r3, #31
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d104      	bne.n	800800a <USB_EPStartXfer+0x448>
 8008000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008004:	3b01      	subs	r3, #1
 8008006:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b29a      	uxth	r2, r3
 8008010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008014:	b29b      	uxth	r3, r3
 8008016:	029b      	lsls	r3, r3, #10
 8008018:	b29b      	uxth	r3, r3
 800801a:	4313      	orrs	r3, r2
 800801c:	b29b      	uxth	r3, r3
 800801e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008026:	b29a      	uxth	r2, r3
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	801a      	strh	r2, [r3, #0]
 800802c:	e056      	b.n	80080dc <USB_EPStartXfer+0x51a>
 800802e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10a      	bne.n	800804c <USB_EPStartXfer+0x48a>
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008044:	b29a      	uxth	r2, r3
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	801a      	strh	r2, [r3, #0]
 800804a:	e047      	b.n	80080dc <USB_EPStartXfer+0x51a>
 800804c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008050:	085b      	lsrs	r3, r3, #1
 8008052:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <USB_EPStartXfer+0x4aa>
 8008062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008066:	3301      	adds	r3, #1
 8008068:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29a      	uxth	r2, r3
 8008072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008076:	b29b      	uxth	r3, r3
 8008078:	029b      	lsls	r3, r3, #10
 800807a:	b29b      	uxth	r3, r3
 800807c:	4313      	orrs	r3, r2
 800807e:	b29a      	uxth	r2, r3
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e02a      	b.n	80080dc <USB_EPStartXfer+0x51a>
 8008086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	785b      	ldrb	r3, [r3, #1]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d122      	bne.n	80080dc <USB_EPStartXfer+0x51a>
 8008096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	623b      	str	r3, [r7, #32]
 80080a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	4413      	add	r3, r2
 80080b8:	623b      	str	r3, [r7, #32]
 80080ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	00da      	lsls	r2, r3, #3
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	4413      	add	r3, r2
 80080cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080d0:	61fb      	str	r3, [r7, #28]
 80080d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80080dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	891b      	ldrh	r3, [r3, #8]
 80080e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6959      	ldr	r1, [r3, #20]
 80080f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008102:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008106:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800810a:	6800      	ldr	r0, [r0, #0]
 800810c:	f001 fa65 	bl	80095da <USB_WritePMA>
 8008110:	e3ee      	b.n	80088f0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	785b      	ldrb	r3, [r3, #1]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d177      	bne.n	8008212 <USB_EPStartXfer+0x650>
 8008122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	64bb      	str	r3, [r7, #72]	; 0x48
 800812e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800813c:	b29b      	uxth	r3, r3
 800813e:	461a      	mov	r2, r3
 8008140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008142:	4413      	add	r3, r2
 8008144:	64bb      	str	r3, [r7, #72]	; 0x48
 8008146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	00da      	lsls	r2, r3, #3
 8008154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008156:	4413      	add	r3, r2
 8008158:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800815c:	647b      	str	r3, [r7, #68]	; 0x44
 800815e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008168:	b29a      	uxth	r2, r3
 800816a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800816c:	801a      	strh	r2, [r3, #0]
 800816e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008172:	2b3e      	cmp	r3, #62	; 0x3e
 8008174:	d921      	bls.n	80081ba <USB_EPStartXfer+0x5f8>
 8008176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800817a:	095b      	lsrs	r3, r3, #5
 800817c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008184:	f003 031f 	and.w	r3, r3, #31
 8008188:	2b00      	cmp	r3, #0
 800818a:	d104      	bne.n	8008196 <USB_EPStartXfer+0x5d4>
 800818c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008190:	3b01      	subs	r3, #1
 8008192:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29a      	uxth	r2, r3
 800819c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	029b      	lsls	r3, r3, #10
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	4313      	orrs	r3, r2
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081b6:	801a      	strh	r2, [r3, #0]
 80081b8:	e056      	b.n	8008268 <USB_EPStartXfer+0x6a6>
 80081ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10a      	bne.n	80081d8 <USB_EPStartXfer+0x616>
 80081c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d4:	801a      	strh	r2, [r3, #0]
 80081d6:	e047      	b.n	8008268 <USB_EPStartXfer+0x6a6>
 80081d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d004      	beq.n	80081f8 <USB_EPStartXfer+0x636>
 80081ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081f2:	3301      	adds	r3, #1
 80081f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008202:	b29b      	uxth	r3, r3
 8008204:	029b      	lsls	r3, r3, #10
 8008206:	b29b      	uxth	r3, r3
 8008208:	4313      	orrs	r3, r2
 800820a:	b29a      	uxth	r2, r3
 800820c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800820e:	801a      	strh	r2, [r3, #0]
 8008210:	e02a      	b.n	8008268 <USB_EPStartXfer+0x6a6>
 8008212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d122      	bne.n	8008268 <USB_EPStartXfer+0x6a6>
 8008222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	653b      	str	r3, [r7, #80]	; 0x50
 800822e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800823c:	b29b      	uxth	r3, r3
 800823e:	461a      	mov	r2, r3
 8008240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008242:	4413      	add	r3, r2
 8008244:	653b      	str	r3, [r7, #80]	; 0x50
 8008246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	00da      	lsls	r2, r3, #3
 8008254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008256:	4413      	add	r3, r2
 8008258:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800825c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800825e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008262:	b29a      	uxth	r2, r3
 8008264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008266:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800826c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	891b      	ldrh	r3, [r3, #8]
 8008274:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6959      	ldr	r1, [r3, #20]
 8008284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008288:	b29b      	uxth	r3, r3
 800828a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800828e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008292:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008296:	6800      	ldr	r0, [r0, #0]
 8008298:	f001 f99f 	bl	80095da <USB_WritePMA>
            ep->xfer_buff += len;
 800829c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695a      	ldr	r2, [r3, #20]
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ac:	441a      	add	r2, r3
 80082ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80082ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6a1a      	ldr	r2, [r3, #32]
 80082c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d90f      	bls.n	80082f6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80082d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6a1a      	ldr	r2, [r3, #32]
 80082e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082e6:	1ad2      	subs	r2, r2, r3
 80082e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	621a      	str	r2, [r3, #32]
 80082f4:	e00e      	b.n	8008314 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80082f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2200      	movs	r2, #0
 8008312:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	643b      	str	r3, [r7, #64]	; 0x40
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	785b      	ldrb	r3, [r3, #1]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d177      	bne.n	8008420 <USB_EPStartXfer+0x85e>
 8008330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	63bb      	str	r3, [r7, #56]	; 0x38
 800833c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008340:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800834a:	b29b      	uxth	r3, r3
 800834c:	461a      	mov	r2, r3
 800834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008350:	4413      	add	r3, r2
 8008352:	63bb      	str	r3, [r7, #56]	; 0x38
 8008354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	00da      	lsls	r2, r3, #3
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	4413      	add	r3, r2
 8008366:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800836a:	637b      	str	r3, [r7, #52]	; 0x34
 800836c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29b      	uxth	r3, r3
 8008372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008376:	b29a      	uxth	r2, r3
 8008378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837a:	801a      	strh	r2, [r3, #0]
 800837c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008380:	2b3e      	cmp	r3, #62	; 0x3e
 8008382:	d921      	bls.n	80083c8 <USB_EPStartXfer+0x806>
 8008384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008388:	095b      	lsrs	r3, r3, #5
 800838a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800838e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008392:	f003 031f 	and.w	r3, r3, #31
 8008396:	2b00      	cmp	r3, #0
 8008398:	d104      	bne.n	80083a4 <USB_EPStartXfer+0x7e2>
 800839a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800839e:	3b01      	subs	r3, #1
 80083a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80083a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	029b      	lsls	r3, r3, #10
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	4313      	orrs	r3, r2
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c4:	801a      	strh	r2, [r3, #0]
 80083c6:	e050      	b.n	800846a <USB_EPStartXfer+0x8a8>
 80083c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <USB_EPStartXfer+0x824>
 80083d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083de:	b29a      	uxth	r2, r3
 80083e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e2:	801a      	strh	r2, [r3, #0]
 80083e4:	e041      	b.n	800846a <USB_EPStartXfer+0x8a8>
 80083e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ea:	085b      	lsrs	r3, r3, #1
 80083ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80083f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d004      	beq.n	8008406 <USB_EPStartXfer+0x844>
 80083fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008400:	3301      	adds	r3, #1
 8008402:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	b29a      	uxth	r2, r3
 800840c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008410:	b29b      	uxth	r3, r3
 8008412:	029b      	lsls	r3, r3, #10
 8008414:	b29b      	uxth	r3, r3
 8008416:	4313      	orrs	r3, r2
 8008418:	b29a      	uxth	r2, r3
 800841a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841c:	801a      	strh	r2, [r3, #0]
 800841e:	e024      	b.n	800846a <USB_EPStartXfer+0x8a8>
 8008420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	785b      	ldrb	r3, [r3, #1]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d11c      	bne.n	800846a <USB_EPStartXfer+0x8a8>
 8008430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800843e:	b29b      	uxth	r3, r3
 8008440:	461a      	mov	r2, r3
 8008442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008444:	4413      	add	r3, r2
 8008446:	643b      	str	r3, [r7, #64]	; 0x40
 8008448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	00da      	lsls	r2, r3, #3
 8008456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008458:	4413      	add	r3, r2
 800845a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008464:	b29a      	uxth	r2, r3
 8008466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008468:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800846a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	895b      	ldrh	r3, [r3, #10]
 8008476:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800847a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800847e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6959      	ldr	r1, [r3, #20]
 8008486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800848a:	b29b      	uxth	r3, r3
 800848c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008490:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008494:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008498:	6800      	ldr	r0, [r0, #0]
 800849a:	f001 f89e 	bl	80095da <USB_WritePMA>
 800849e:	e227      	b.n	80088f0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80084a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80084b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80084d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80084da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	441a      	add	r2, r3
 80084f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80084f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008508:	b29b      	uxth	r3, r3
 800850a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800850c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008526:	b29b      	uxth	r3, r3
 8008528:	461a      	mov	r2, r3
 800852a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800852c:	4413      	add	r3, r2
 800852e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	00da      	lsls	r2, r3, #3
 800853e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008540:	4413      	add	r3, r2
 8008542:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008546:	65bb      	str	r3, [r7, #88]	; 0x58
 8008548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854c:	b29a      	uxth	r2, r3
 800854e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008550:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	891b      	ldrh	r3, [r3, #8]
 800855e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6959      	ldr	r1, [r3, #20]
 800856e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008572:	b29b      	uxth	r3, r3
 8008574:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008578:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800857c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008580:	6800      	ldr	r0, [r0, #0]
 8008582:	f001 f82a 	bl	80095da <USB_WritePMA>
 8008586:	e1b3      	b.n	80088f0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800858c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6a1a      	ldr	r2, [r3, #32]
 8008594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008598:	1ad2      	subs	r2, r2, r3
 800859a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80085a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 80c6 	beq.w	800875a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	673b      	str	r3, [r7, #112]	; 0x70
 80085da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d177      	bne.n	80086da <USB_EPStartXfer+0xb18>
 80085ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80085f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008604:	b29b      	uxth	r3, r3
 8008606:	461a      	mov	r2, r3
 8008608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800860a:	4413      	add	r3, r2
 800860c:	66bb      	str	r3, [r7, #104]	; 0x68
 800860e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	00da      	lsls	r2, r3, #3
 800861c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800861e:	4413      	add	r3, r2
 8008620:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008624:	667b      	str	r3, [r7, #100]	; 0x64
 8008626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	b29b      	uxth	r3, r3
 800862c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008630:	b29a      	uxth	r2, r3
 8008632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008634:	801a      	strh	r2, [r3, #0]
 8008636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800863a:	2b3e      	cmp	r3, #62	; 0x3e
 800863c:	d921      	bls.n	8008682 <USB_EPStartXfer+0xac0>
 800863e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008642:	095b      	lsrs	r3, r3, #5
 8008644:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864c:	f003 031f 	and.w	r3, r3, #31
 8008650:	2b00      	cmp	r3, #0
 8008652:	d104      	bne.n	800865e <USB_EPStartXfer+0xa9c>
 8008654:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008658:	3b01      	subs	r3, #1
 800865a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800865e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	b29a      	uxth	r2, r3
 8008664:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008668:	b29b      	uxth	r3, r3
 800866a:	029b      	lsls	r3, r3, #10
 800866c:	b29b      	uxth	r3, r3
 800866e:	4313      	orrs	r3, r2
 8008670:	b29b      	uxth	r3, r3
 8008672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800867a:	b29a      	uxth	r2, r3
 800867c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800867e:	801a      	strh	r2, [r3, #0]
 8008680:	e050      	b.n	8008724 <USB_EPStartXfer+0xb62>
 8008682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10a      	bne.n	80086a0 <USB_EPStartXfer+0xade>
 800868a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008698:	b29a      	uxth	r2, r3
 800869a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800869c:	801a      	strh	r2, [r3, #0]
 800869e:	e041      	b.n	8008724 <USB_EPStartXfer+0xb62>
 80086a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a4:	085b      	lsrs	r3, r3, #1
 80086a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80086aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d004      	beq.n	80086c0 <USB_EPStartXfer+0xafe>
 80086b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80086ba:	3301      	adds	r3, #1
 80086bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80086c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	029b      	lsls	r3, r3, #10
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	4313      	orrs	r3, r2
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086d6:	801a      	strh	r2, [r3, #0]
 80086d8:	e024      	b.n	8008724 <USB_EPStartXfer+0xb62>
 80086da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d11c      	bne.n	8008724 <USB_EPStartXfer+0xb62>
 80086ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	461a      	mov	r2, r3
 80086fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086fe:	4413      	add	r3, r2
 8008700:	673b      	str	r3, [r7, #112]	; 0x70
 8008702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	00da      	lsls	r2, r3, #3
 8008710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008712:	4413      	add	r3, r2
 8008714:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008718:	66fb      	str	r3, [r7, #108]	; 0x6c
 800871a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800871e:	b29a      	uxth	r2, r3
 8008720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008722:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	895b      	ldrh	r3, [r3, #10]
 8008730:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6959      	ldr	r1, [r3, #20]
 8008740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008744:	b29b      	uxth	r3, r3
 8008746:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800874a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800874e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008752:	6800      	ldr	r0, [r0, #0]
 8008754:	f000 ff41 	bl	80095da <USB_WritePMA>
 8008758:	e0ca      	b.n	80088f0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800875a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800875e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	785b      	ldrb	r3, [r3, #1]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d177      	bne.n	800885a <USB_EPStartXfer+0xc98>
 800876a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800876e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008784:	b29b      	uxth	r3, r3
 8008786:	461a      	mov	r2, r3
 8008788:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800878a:	4413      	add	r3, r2
 800878c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800878e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	00da      	lsls	r2, r3, #3
 800879c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800879e:	4413      	add	r3, r2
 80087a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80087a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087a8:	881b      	ldrh	r3, [r3, #0]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087b4:	801a      	strh	r2, [r3, #0]
 80087b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ba:	2b3e      	cmp	r3, #62	; 0x3e
 80087bc:	d921      	bls.n	8008802 <USB_EPStartXfer+0xc40>
 80087be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c2:	095b      	lsrs	r3, r3, #5
 80087c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087cc:	f003 031f 	and.w	r3, r3, #31
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d104      	bne.n	80087de <USB_EPStartXfer+0xc1c>
 80087d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087d8:	3b01      	subs	r3, #1
 80087da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	029b      	lsls	r3, r3, #10
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	4313      	orrs	r3, r2
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	e05c      	b.n	80088bc <USB_EPStartXfer+0xcfa>
 8008802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10a      	bne.n	8008820 <USB_EPStartXfer+0xc5e>
 800880a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
 8008810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008818:	b29a      	uxth	r2, r3
 800881a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800881c:	801a      	strh	r2, [r3, #0]
 800881e:	e04d      	b.n	80088bc <USB_EPStartXfer+0xcfa>
 8008820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008824:	085b      	lsrs	r3, r3, #1
 8008826:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800882a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d004      	beq.n	8008840 <USB_EPStartXfer+0xc7e>
 8008836:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800883a:	3301      	adds	r3, #1
 800883c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29a      	uxth	r2, r3
 8008846:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800884a:	b29b      	uxth	r3, r3
 800884c:	029b      	lsls	r3, r3, #10
 800884e:	b29b      	uxth	r3, r3
 8008850:	4313      	orrs	r3, r2
 8008852:	b29a      	uxth	r2, r3
 8008854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008856:	801a      	strh	r2, [r3, #0]
 8008858:	e030      	b.n	80088bc <USB_EPStartXfer+0xcfa>
 800885a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800885e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	785b      	ldrb	r3, [r3, #1]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d128      	bne.n	80088bc <USB_EPStartXfer+0xcfa>
 800886a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800886e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008886:	b29b      	uxth	r3, r3
 8008888:	461a      	mov	r2, r3
 800888a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800888e:	4413      	add	r3, r2
 8008890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	00da      	lsls	r2, r3, #3
 80088a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088a6:	4413      	add	r3, r2
 80088a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80088bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	891b      	ldrh	r3, [r3, #8]
 80088c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6959      	ldr	r1, [r3, #20]
 80088d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088dc:	b29b      	uxth	r3, r3
 80088de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80088e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80088e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80088ea:	6800      	ldr	r0, [r0, #0]
 80088ec:	f000 fe75 	bl	80095da <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80088f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	b29b      	uxth	r3, r3
 800890e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008916:	817b      	strh	r3, [r7, #10]
 8008918:	897b      	ldrh	r3, [r7, #10]
 800891a:	f083 0310 	eor.w	r3, r3, #16
 800891e:	817b      	strh	r3, [r7, #10]
 8008920:	897b      	ldrh	r3, [r7, #10]
 8008922:	f083 0320 	eor.w	r3, r3, #32
 8008926:	817b      	strh	r3, [r7, #10]
 8008928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800892c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	441a      	add	r2, r3
 8008942:	897b      	ldrh	r3, [r7, #10]
 8008944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800894c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008954:	b29b      	uxth	r3, r3
 8008956:	8013      	strh	r3, [r2, #0]
 8008958:	f000 bcde 	b.w	8009318 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800895c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	7b1b      	ldrb	r3, [r3, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	f040 80bb 	bne.w	8008ae4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800896e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	699a      	ldr	r2, [r3, #24]
 800897a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	429a      	cmp	r2, r3
 8008988:	d917      	bls.n	80089ba <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800898a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800899a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800899e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	699a      	ldr	r2, [r3, #24]
 80089a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089aa:	1ad2      	subs	r2, r2, r3
 80089ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	619a      	str	r2, [r3, #24]
 80089b8:	e00e      	b.n	80089d8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80089ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80089ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2200      	movs	r2, #0
 80089d6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80089d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	461a      	mov	r2, r3
 80089f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089fc:	4413      	add	r3, r2
 80089fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	00da      	lsls	r2, r3, #3
 8008a10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a14:	4413      	add	r3, r2
 8008a16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a30:	801a      	strh	r2, [r3, #0]
 8008a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a36:	2b3e      	cmp	r3, #62	; 0x3e
 8008a38:	d924      	bls.n	8008a84 <USB_EPStartXfer+0xec2>
 8008a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3e:	095b      	lsrs	r3, r3, #5
 8008a40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a48:	f003 031f 	and.w	r3, r3, #31
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d104      	bne.n	8008a5a <USB_EPStartXfer+0xe98>
 8008a50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a54:	3b01      	subs	r3, #1
 8008a56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	029b      	lsls	r3, r3, #10
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a7e:	801a      	strh	r2, [r3, #0]
 8008a80:	f000 bc10 	b.w	80092a4 <USB_EPStartXfer+0x16e2>
 8008a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10c      	bne.n	8008aa6 <USB_EPStartXfer+0xee4>
 8008a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008aa2:	801a      	strh	r2, [r3, #0]
 8008aa4:	e3fe      	b.n	80092a4 <USB_EPStartXfer+0x16e2>
 8008aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aaa:	085b      	lsrs	r3, r3, #1
 8008aac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <USB_EPStartXfer+0xf04>
 8008abc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	029b      	lsls	r3, r3, #10
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ae0:	801a      	strh	r2, [r3, #0]
 8008ae2:	e3df      	b.n	80092a4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	78db      	ldrb	r3, [r3, #3]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	f040 8218 	bne.w	8008f26 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	785b      	ldrb	r3, [r3, #1]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f040 809d 	bne.w	8008c42 <USB_EPStartXfer+0x1080>
 8008b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	461a      	mov	r2, r3
 8008b28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	00da      	lsls	r2, r3, #3
 8008b40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b44:	4413      	add	r3, r2
 8008b46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b60:	801a      	strh	r2, [r3, #0]
 8008b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8008b70:	d92b      	bls.n	8008bca <USB_EPStartXfer+0x1008>
 8008b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	095b      	lsrs	r3, r3, #5
 8008b80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	f003 031f 	and.w	r3, r3, #31
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d104      	bne.n	8008ba2 <USB_EPStartXfer+0xfe0>
 8008b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ba2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	029b      	lsls	r3, r3, #10
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bc6:	801a      	strh	r2, [r3, #0]
 8008bc8:	e070      	b.n	8008cac <USB_EPStartXfer+0x10ea>
 8008bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10c      	bne.n	8008bf4 <USB_EPStartXfer+0x1032>
 8008bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bf0:	801a      	strh	r2, [r3, #0]
 8008bf2:	e05b      	b.n	8008cac <USB_EPStartXfer+0x10ea>
 8008bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	085b      	lsrs	r3, r3, #1
 8008c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d004      	beq.n	8008c24 <USB_EPStartXfer+0x1062>
 8008c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c1e:	3301      	adds	r3, #1
 8008c20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	029b      	lsls	r3, r3, #10
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	4313      	orrs	r3, r2
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c3e:	801a      	strh	r2, [r3, #0]
 8008c40:	e034      	b.n	8008cac <USB_EPStartXfer+0x10ea>
 8008c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d12c      	bne.n	8008cac <USB_EPStartXfer+0x10ea>
 8008c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	461a      	mov	r2, r3
 8008c72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c76:	4413      	add	r3, r2
 8008c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	00da      	lsls	r2, r3, #3
 8008c8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c8e:	4413      	add	r3, r2
 8008c90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008caa:	801a      	strh	r2, [r3, #0]
 8008cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	785b      	ldrb	r3, [r3, #1]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f040 809d 	bne.w	8008e06 <USB_EPStartXfer+0x1244>
 8008ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	461a      	mov	r2, r3
 8008cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	00da      	lsls	r2, r3, #3
 8008d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d08:	4413      	add	r3, r2
 8008d0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d24:	801a      	strh	r2, [r3, #0]
 8008d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	2b3e      	cmp	r3, #62	; 0x3e
 8008d34:	d92b      	bls.n	8008d8e <USB_EPStartXfer+0x11cc>
 8008d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	095b      	lsrs	r3, r3, #5
 8008d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	f003 031f 	and.w	r3, r3, #31
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d104      	bne.n	8008d66 <USB_EPStartXfer+0x11a4>
 8008d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d60:	3b01      	subs	r3, #1
 8008d62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	029b      	lsls	r3, r3, #10
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d8a:	801a      	strh	r2, [r3, #0]
 8008d8c:	e069      	b.n	8008e62 <USB_EPStartXfer+0x12a0>
 8008d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10c      	bne.n	8008db8 <USB_EPStartXfer+0x11f6>
 8008d9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008db4:	801a      	strh	r2, [r3, #0]
 8008db6:	e054      	b.n	8008e62 <USB_EPStartXfer+0x12a0>
 8008db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	085b      	lsrs	r3, r3, #1
 8008dc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d004      	beq.n	8008de8 <USB_EPStartXfer+0x1226>
 8008dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008de2:	3301      	adds	r3, #1
 8008de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	029b      	lsls	r3, r3, #10
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e02:	801a      	strh	r2, [r3, #0]
 8008e04:	e02d      	b.n	8008e62 <USB_EPStartXfer+0x12a0>
 8008e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	785b      	ldrb	r3, [r3, #1]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d125      	bne.n	8008e62 <USB_EPStartXfer+0x12a0>
 8008e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	461a      	mov	r2, r3
 8008e28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	00da      	lsls	r2, r3, #3
 8008e40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e44:	4413      	add	r3, r2
 8008e46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e60:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 8218 	beq.w	80092a4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008e94:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <USB_EPStartXfer+0x12ea>
 8008ea0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10d      	bne.n	8008ec8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008eac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f040 81f5 	bne.w	80092a4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008eba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f040 81ee 	bne.w	80092a4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ecc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eee:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	441a      	add	r2, r3
 8008f0c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	8013      	strh	r3, [r2, #0]
 8008f24:	e1be      	b.n	80092a4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	78db      	ldrb	r3, [r3, #3]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	f040 81b4 	bne.w	80092a0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	699a      	ldr	r2, [r3, #24]
 8008f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d917      	bls.n	8008f84 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	699a      	ldr	r2, [r3, #24]
 8008f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f74:	1ad2      	subs	r2, r2, r3
 8008f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	619a      	str	r2, [r3, #24]
 8008f82:	e00e      	b.n	8008fa2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	785b      	ldrb	r3, [r3, #1]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f040 8085 	bne.w	80090be <USB_EPStartXfer+0x14fc>
 8008fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fd8:	4413      	add	r3, r2
 8008fda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	00da      	lsls	r2, r3, #3
 8008fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	b29b      	uxth	r3, r3
 8009002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009006:	b29a      	uxth	r2, r3
 8009008:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800900c:	801a      	strh	r2, [r3, #0]
 800900e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009012:	2b3e      	cmp	r3, #62	; 0x3e
 8009014:	d923      	bls.n	800905e <USB_EPStartXfer+0x149c>
 8009016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800901a:	095b      	lsrs	r3, r3, #5
 800901c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009024:	f003 031f 	and.w	r3, r3, #31
 8009028:	2b00      	cmp	r3, #0
 800902a:	d104      	bne.n	8009036 <USB_EPStartXfer+0x1474>
 800902c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009030:	3b01      	subs	r3, #1
 8009032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009036:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	b29a      	uxth	r2, r3
 800903e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009042:	b29b      	uxth	r3, r3
 8009044:	029b      	lsls	r3, r3, #10
 8009046:	b29b      	uxth	r3, r3
 8009048:	4313      	orrs	r3, r2
 800904a:	b29b      	uxth	r3, r3
 800904c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009054:	b29a      	uxth	r2, r3
 8009056:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800905a:	801a      	strh	r2, [r3, #0]
 800905c:	e060      	b.n	8009120 <USB_EPStartXfer+0x155e>
 800905e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10c      	bne.n	8009080 <USB_EPStartXfer+0x14be>
 8009066:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800906a:	881b      	ldrh	r3, [r3, #0]
 800906c:	b29b      	uxth	r3, r3
 800906e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009076:	b29a      	uxth	r2, r3
 8009078:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800907c:	801a      	strh	r2, [r3, #0]
 800907e:	e04f      	b.n	8009120 <USB_EPStartXfer+0x155e>
 8009080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009084:	085b      	lsrs	r3, r3, #1
 8009086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800908a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <USB_EPStartXfer+0x14de>
 8009096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800909a:	3301      	adds	r3, #1
 800909c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80090a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	029b      	lsls	r3, r3, #10
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	4313      	orrs	r3, r2
 80090b4:	b29a      	uxth	r2, r3
 80090b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090ba:	801a      	strh	r2, [r3, #0]
 80090bc:	e030      	b.n	8009120 <USB_EPStartXfer+0x155e>
 80090be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	785b      	ldrb	r3, [r3, #1]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d128      	bne.n	8009120 <USB_EPStartXfer+0x155e>
 80090ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80090dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	461a      	mov	r2, r3
 80090ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090f2:	4413      	add	r3, r2
 80090f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80090f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	00da      	lsls	r2, r3, #3
 8009106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800910a:	4413      	add	r3, r2
 800910c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009118:	b29a      	uxth	r2, r3
 800911a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800911e:	801a      	strh	r2, [r3, #0]
 8009120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800912e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	785b      	ldrb	r3, [r3, #1]
 800913a:	2b00      	cmp	r3, #0
 800913c:	f040 8085 	bne.w	800924a <USB_EPStartXfer+0x1688>
 8009140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009144:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800914e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800915c:	b29b      	uxth	r3, r3
 800915e:	461a      	mov	r2, r3
 8009160:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009164:	4413      	add	r3, r2
 8009166:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800916a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800916e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	00da      	lsls	r2, r3, #3
 8009178:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800917c:	4413      	add	r3, r2
 800917e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009182:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009186:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	b29b      	uxth	r3, r3
 800918e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009192:	b29a      	uxth	r2, r3
 8009194:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009198:	801a      	strh	r2, [r3, #0]
 800919a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800919e:	2b3e      	cmp	r3, #62	; 0x3e
 80091a0:	d923      	bls.n	80091ea <USB_EPStartXfer+0x1628>
 80091a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091a6:	095b      	lsrs	r3, r3, #5
 80091a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091b0:	f003 031f 	and.w	r3, r3, #31
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d104      	bne.n	80091c2 <USB_EPStartXfer+0x1600>
 80091b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091bc:	3b01      	subs	r3, #1
 80091be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	029b      	lsls	r3, r3, #10
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	4313      	orrs	r3, r2
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091e6:	801a      	strh	r2, [r3, #0]
 80091e8:	e05c      	b.n	80092a4 <USB_EPStartXfer+0x16e2>
 80091ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10c      	bne.n	800920c <USB_EPStartXfer+0x164a>
 80091f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009202:	b29a      	uxth	r2, r3
 8009204:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009208:	801a      	strh	r2, [r3, #0]
 800920a:	e04b      	b.n	80092a4 <USB_EPStartXfer+0x16e2>
 800920c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009210:	085b      	lsrs	r3, r3, #1
 8009212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d004      	beq.n	800922c <USB_EPStartXfer+0x166a>
 8009222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009226:	3301      	adds	r3, #1
 8009228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800922c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	b29a      	uxth	r2, r3
 8009234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009238:	b29b      	uxth	r3, r3
 800923a:	029b      	lsls	r3, r3, #10
 800923c:	b29b      	uxth	r3, r3
 800923e:	4313      	orrs	r3, r2
 8009240:	b29a      	uxth	r2, r3
 8009242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009246:	801a      	strh	r2, [r3, #0]
 8009248:	e02c      	b.n	80092a4 <USB_EPStartXfer+0x16e2>
 800924a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d124      	bne.n	80092a4 <USB_EPStartXfer+0x16e2>
 800925a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009268:	b29b      	uxth	r3, r3
 800926a:	461a      	mov	r2, r3
 800926c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009270:	4413      	add	r3, r2
 8009272:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	00da      	lsls	r2, r3, #3
 8009284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009288:	4413      	add	r3, r2
 800928a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800928e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009296:	b29a      	uxth	r2, r3
 8009298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800929c:	801a      	strh	r2, [r3, #0]
 800929e:	e001      	b.n	80092a4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e03a      	b.n	800931a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4413      	add	r3, r2
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80092ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80092d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80092d6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80092da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80092de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80092e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80092e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	441a      	add	r2, r3
 8009300:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800930c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009314:	b29b      	uxth	r3, r3
 8009316:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	785b      	ldrb	r3, [r3, #1]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d020      	beq.n	8009378 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	b29b      	uxth	r3, r3
 8009344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800934c:	81bb      	strh	r3, [r7, #12]
 800934e:	89bb      	ldrh	r3, [r7, #12]
 8009350:	f083 0310 	eor.w	r3, r3, #16
 8009354:	81bb      	strh	r3, [r7, #12]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	441a      	add	r2, r3
 8009360:	89bb      	ldrh	r3, [r7, #12]
 8009362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800936a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800936e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009372:	b29b      	uxth	r3, r3
 8009374:	8013      	strh	r3, [r2, #0]
 8009376:	e01f      	b.n	80093b8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	b29b      	uxth	r3, r3
 8009386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800938a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800938e:	81fb      	strh	r3, [r7, #14]
 8009390:	89fb      	ldrh	r3, [r7, #14]
 8009392:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009396:	81fb      	strh	r3, [r7, #14]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	441a      	add	r2, r3
 80093a2:	89fb      	ldrh	r3, [r7, #14]
 80093a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b087      	sub	sp, #28
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	7b1b      	ldrb	r3, [r3, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f040 809d 	bne.w	8009514 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	785b      	ldrb	r3, [r3, #1]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d04c      	beq.n	800947c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	881b      	ldrh	r3, [r3, #0]
 80093ee:	823b      	strh	r3, [r7, #16]
 80093f0:	8a3b      	ldrh	r3, [r7, #16]
 80093f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d01b      	beq.n	8009432 <USB_EPClearStall+0x6c>
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	b29b      	uxth	r3, r3
 8009408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800940c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009410:	81fb      	strh	r3, [r7, #14]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	441a      	add	r2, r3
 800941c:	89fb      	ldrh	r3, [r7, #14]
 800941e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800942a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800942e:	b29b      	uxth	r3, r3
 8009430:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	78db      	ldrb	r3, [r3, #3]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d06c      	beq.n	8009514 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	b29b      	uxth	r3, r3
 8009448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800944c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009450:	81bb      	strh	r3, [r7, #12]
 8009452:	89bb      	ldrh	r3, [r7, #12]
 8009454:	f083 0320 	eor.w	r3, r3, #32
 8009458:	81bb      	strh	r3, [r7, #12]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	441a      	add	r2, r3
 8009464:	89bb      	ldrh	r3, [r7, #12]
 8009466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800946a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800946e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009476:	b29b      	uxth	r3, r3
 8009478:	8013      	strh	r3, [r2, #0]
 800947a:	e04b      	b.n	8009514 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	82fb      	strh	r3, [r7, #22]
 800948a:	8afb      	ldrh	r3, [r7, #22]
 800948c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01b      	beq.n	80094cc <USB_EPClearStall+0x106>
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094aa:	82bb      	strh	r3, [r7, #20]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	441a      	add	r2, r3
 80094b6:	8abb      	ldrh	r3, [r7, #20]
 80094b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094e2:	827b      	strh	r3, [r7, #18]
 80094e4:	8a7b      	ldrh	r3, [r7, #18]
 80094e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80094ea:	827b      	strh	r3, [r7, #18]
 80094ec:	8a7b      	ldrh	r3, [r7, #18]
 80094ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80094f2:	827b      	strh	r3, [r7, #18]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	441a      	add	r2, r3
 80094fe:	8a7b      	ldrh	r3, [r7, #18]
 8009500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800950c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009510:	b29b      	uxth	r3, r3
 8009512:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	371c      	adds	r7, #28
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009522:	b480      	push	{r7}
 8009524:	b083      	sub	sp, #12
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	460b      	mov	r3, r1
 800952c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800952e:	78fb      	ldrb	r3, [r7, #3]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d103      	bne.n	800953c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2280      	movs	r2, #128	; 0x80
 8009538:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	370c      	adds	r7, #12
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009558:	b29b      	uxth	r3, r3
 800955a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800955e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009562:	b29a      	uxth	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009586:	b29b      	uxth	r3, r3
 8009588:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800958c:	b29a      	uxth	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b085      	sub	sp, #20
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80095b4:	68fb      	ldr	r3, [r7, #12]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b083      	sub	sp, #12
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80095da:	b480      	push	{r7}
 80095dc:	b08b      	sub	sp, #44	; 0x2c
 80095de:	af00      	add	r7, sp, #0
 80095e0:	60f8      	str	r0, [r7, #12]
 80095e2:	60b9      	str	r1, [r7, #8]
 80095e4:	4611      	mov	r1, r2
 80095e6:	461a      	mov	r2, r3
 80095e8:	460b      	mov	r3, r1
 80095ea:	80fb      	strh	r3, [r7, #6]
 80095ec:	4613      	mov	r3, r2
 80095ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80095f0:	88bb      	ldrh	r3, [r7, #4]
 80095f2:	3301      	adds	r3, #1
 80095f4:	085b      	lsrs	r3, r3, #1
 80095f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	4413      	add	r3, r2
 8009606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800960a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	627b      	str	r3, [r7, #36]	; 0x24
 8009610:	e01b      	b.n	800964a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	3301      	adds	r3, #1
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	021b      	lsls	r3, r3, #8
 8009620:	b21a      	sxth	r2, r3
 8009622:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009626:	4313      	orrs	r3, r2
 8009628:	b21b      	sxth	r3, r3
 800962a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800962c:	6a3b      	ldr	r3, [r7, #32]
 800962e:	8a7a      	ldrh	r2, [r7, #18]
 8009630:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	3302      	adds	r3, #2
 8009636:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	3301      	adds	r3, #1
 800963c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	3301      	adds	r3, #1
 8009642:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	3b01      	subs	r3, #1
 8009648:	627b      	str	r3, [r7, #36]	; 0x24
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e0      	bne.n	8009612 <USB_WritePMA+0x38>
  }
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	372c      	adds	r7, #44	; 0x2c
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800965e:	b480      	push	{r7}
 8009660:	b08b      	sub	sp, #44	; 0x2c
 8009662:	af00      	add	r7, sp, #0
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	60b9      	str	r1, [r7, #8]
 8009668:	4611      	mov	r1, r2
 800966a:	461a      	mov	r2, r3
 800966c:	460b      	mov	r3, r1
 800966e:	80fb      	strh	r3, [r7, #6]
 8009670:	4613      	mov	r3, r2
 8009672:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009674:	88bb      	ldrh	r3, [r7, #4]
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	b29b      	uxth	r3, r3
 800967a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009684:	88fa      	ldrh	r2, [r7, #6]
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	4413      	add	r3, r2
 800968a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800968e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	627b      	str	r3, [r7, #36]	; 0x24
 8009694:	e018      	b.n	80096c8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	b29b      	uxth	r3, r3
 800969c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800969e:	6a3b      	ldr	r3, [r7, #32]
 80096a0:	3302      	adds	r3, #2
 80096a2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	3301      	adds	r3, #1
 80096b0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	0a1b      	lsrs	r3, r3, #8
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	3301      	adds	r3, #1
 80096c0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	3b01      	subs	r3, #1
 80096c6:	627b      	str	r3, [r7, #36]	; 0x24
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e3      	bne.n	8009696 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80096ce:	88bb      	ldrh	r3, [r7, #4]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d007      	beq.n	80096ea <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80096da:	6a3b      	ldr	r3, [r7, #32]
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	701a      	strb	r2, [r3, #0]
  }
}
 80096ea:	bf00      	nop
 80096ec:	372c      	adds	r7, #44	; 0x2c
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
	...

080096f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009704:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009708:	f002 fd24 	bl	800c154 <USBD_static_malloc>
 800970c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d109      	bne.n	8009728 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	32b0      	adds	r2, #176	; 0xb0
 800971e:	2100      	movs	r1, #0
 8009720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009724:	2302      	movs	r3, #2
 8009726:	e0d4      	b.n	80098d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009728:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800972c:	2100      	movs	r1, #0
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f002 fd2e 	bl	800c190 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	32b0      	adds	r2, #176	; 0xb0
 800973e:	68f9      	ldr	r1, [r7, #12]
 8009740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	32b0      	adds	r2, #176	; 0xb0
 800974e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7c1b      	ldrb	r3, [r3, #16]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d138      	bne.n	80097d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009760:	4b5e      	ldr	r3, [pc, #376]	; (80098dc <USBD_CDC_Init+0x1e4>)
 8009762:	7819      	ldrb	r1, [r3, #0]
 8009764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009768:	2202      	movs	r2, #2
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f002 faf4 	bl	800bd58 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009770:	4b5a      	ldr	r3, [pc, #360]	; (80098dc <USBD_CDC_Init+0x1e4>)
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	f003 020f 	and.w	r2, r3, #15
 8009778:	6879      	ldr	r1, [r7, #4]
 800977a:	4613      	mov	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	440b      	add	r3, r1
 8009784:	3324      	adds	r3, #36	; 0x24
 8009786:	2201      	movs	r2, #1
 8009788:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800978a:	4b55      	ldr	r3, [pc, #340]	; (80098e0 <USBD_CDC_Init+0x1e8>)
 800978c:	7819      	ldrb	r1, [r3, #0]
 800978e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009792:	2202      	movs	r2, #2
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f002 fadf 	bl	800bd58 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800979a:	4b51      	ldr	r3, [pc, #324]	; (80098e0 <USBD_CDC_Init+0x1e8>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	f003 020f 	and.w	r2, r3, #15
 80097a2:	6879      	ldr	r1, [r7, #4]
 80097a4:	4613      	mov	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	440b      	add	r3, r1
 80097ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097b2:	2201      	movs	r2, #1
 80097b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80097b6:	4b4b      	ldr	r3, [pc, #300]	; (80098e4 <USBD_CDC_Init+0x1ec>)
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	f003 020f 	and.w	r2, r3, #15
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	440b      	add	r3, r1
 80097ca:	3326      	adds	r3, #38	; 0x26
 80097cc:	2210      	movs	r2, #16
 80097ce:	801a      	strh	r2, [r3, #0]
 80097d0:	e035      	b.n	800983e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80097d2:	4b42      	ldr	r3, [pc, #264]	; (80098dc <USBD_CDC_Init+0x1e4>)
 80097d4:	7819      	ldrb	r1, [r3, #0]
 80097d6:	2340      	movs	r3, #64	; 0x40
 80097d8:	2202      	movs	r2, #2
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f002 fabc 	bl	800bd58 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80097e0:	4b3e      	ldr	r3, [pc, #248]	; (80098dc <USBD_CDC_Init+0x1e4>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	f003 020f 	and.w	r2, r3, #15
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	440b      	add	r3, r1
 80097f4:	3324      	adds	r3, #36	; 0x24
 80097f6:	2201      	movs	r2, #1
 80097f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80097fa:	4b39      	ldr	r3, [pc, #228]	; (80098e0 <USBD_CDC_Init+0x1e8>)
 80097fc:	7819      	ldrb	r1, [r3, #0]
 80097fe:	2340      	movs	r3, #64	; 0x40
 8009800:	2202      	movs	r2, #2
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f002 faa8 	bl	800bd58 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009808:	4b35      	ldr	r3, [pc, #212]	; (80098e0 <USBD_CDC_Init+0x1e8>)
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	f003 020f 	and.w	r2, r3, #15
 8009810:	6879      	ldr	r1, [r7, #4]
 8009812:	4613      	mov	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	440b      	add	r3, r1
 800981c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009820:	2201      	movs	r2, #1
 8009822:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009824:	4b2f      	ldr	r3, [pc, #188]	; (80098e4 <USBD_CDC_Init+0x1ec>)
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	f003 020f 	and.w	r2, r3, #15
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	4613      	mov	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	440b      	add	r3, r1
 8009838:	3326      	adds	r3, #38	; 0x26
 800983a:	2210      	movs	r2, #16
 800983c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800983e:	4b29      	ldr	r3, [pc, #164]	; (80098e4 <USBD_CDC_Init+0x1ec>)
 8009840:	7819      	ldrb	r1, [r3, #0]
 8009842:	2308      	movs	r3, #8
 8009844:	2203      	movs	r2, #3
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f002 fa86 	bl	800bd58 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800984c:	4b25      	ldr	r3, [pc, #148]	; (80098e4 <USBD_CDC_Init+0x1ec>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	f003 020f 	and.w	r2, r3, #15
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	4613      	mov	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	440b      	add	r3, r1
 8009860:	3324      	adds	r3, #36	; 0x24
 8009862:	2201      	movs	r2, #1
 8009864:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	33b0      	adds	r3, #176	; 0xb0
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009898:	2b00      	cmp	r3, #0
 800989a:	d101      	bne.n	80098a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800989c:	2302      	movs	r3, #2
 800989e:	e018      	b.n	80098d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	7c1b      	ldrb	r3, [r3, #16]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098a8:	4b0d      	ldr	r3, [pc, #52]	; (80098e0 <USBD_CDC_Init+0x1e8>)
 80098aa:	7819      	ldrb	r1, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f002 fbca 	bl	800c050 <USBD_LL_PrepareReceive>
 80098bc:	e008      	b.n	80098d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098be:	4b08      	ldr	r3, [pc, #32]	; (80098e0 <USBD_CDC_Init+0x1e8>)
 80098c0:	7819      	ldrb	r1, [r3, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098c8:	2340      	movs	r3, #64	; 0x40
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f002 fbc0 	bl	800c050 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20000097 	.word	0x20000097
 80098e0:	20000098 	.word	0x20000098
 80098e4:	20000099 	.word	0x20000099

080098e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80098f4:	4b3a      	ldr	r3, [pc, #232]	; (80099e0 <USBD_CDC_DeInit+0xf8>)
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f002 fa6a 	bl	800bdd4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009900:	4b37      	ldr	r3, [pc, #220]	; (80099e0 <USBD_CDC_DeInit+0xf8>)
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	f003 020f 	and.w	r2, r3, #15
 8009908:	6879      	ldr	r1, [r7, #4]
 800990a:	4613      	mov	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	440b      	add	r3, r1
 8009914:	3324      	adds	r3, #36	; 0x24
 8009916:	2200      	movs	r2, #0
 8009918:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800991a:	4b32      	ldr	r3, [pc, #200]	; (80099e4 <USBD_CDC_DeInit+0xfc>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f002 fa57 	bl	800bdd4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009926:	4b2f      	ldr	r3, [pc, #188]	; (80099e4 <USBD_CDC_DeInit+0xfc>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	f003 020f 	and.w	r2, r3, #15
 800992e:	6879      	ldr	r1, [r7, #4]
 8009930:	4613      	mov	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	440b      	add	r3, r1
 800993a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800993e:	2200      	movs	r2, #0
 8009940:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009942:	4b29      	ldr	r3, [pc, #164]	; (80099e8 <USBD_CDC_DeInit+0x100>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f002 fa43 	bl	800bdd4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800994e:	4b26      	ldr	r3, [pc, #152]	; (80099e8 <USBD_CDC_DeInit+0x100>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	f003 020f 	and.w	r2, r3, #15
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	440b      	add	r3, r1
 8009962:	3324      	adds	r3, #36	; 0x24
 8009964:	2200      	movs	r2, #0
 8009966:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009968:	4b1f      	ldr	r3, [pc, #124]	; (80099e8 <USBD_CDC_DeInit+0x100>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	f003 020f 	and.w	r2, r3, #15
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	440b      	add	r3, r1
 800997c:	3326      	adds	r3, #38	; 0x26
 800997e:	2200      	movs	r2, #0
 8009980:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	32b0      	adds	r2, #176	; 0xb0
 800998c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d01f      	beq.n	80099d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	33b0      	adds	r3, #176	; 0xb0
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	32b0      	adds	r2, #176	; 0xb0
 80099b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f002 fbda 	bl	800c170 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	32b0      	adds	r2, #176	; 0xb0
 80099c6:	2100      	movs	r1, #0
 80099c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20000097 	.word	0x20000097
 80099e4:	20000098 	.word	0x20000098
 80099e8:	20000099 	.word	0x20000099

080099ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	32b0      	adds	r2, #176	; 0xb0
 8009a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009a06:	2300      	movs	r3, #0
 8009a08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d101      	bne.n	8009a1c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	e0bf      	b.n	8009b9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d050      	beq.n	8009aca <USBD_CDC_Setup+0xde>
 8009a28:	2b20      	cmp	r3, #32
 8009a2a:	f040 80af 	bne.w	8009b8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	88db      	ldrh	r3, [r3, #6]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d03a      	beq.n	8009aac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	b25b      	sxtb	r3, r3
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	da1b      	bge.n	8009a78 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	33b0      	adds	r3, #176	; 0xb0
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009a56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a58:	683a      	ldr	r2, [r7, #0]
 8009a5a:	88d2      	ldrh	r2, [r2, #6]
 8009a5c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	88db      	ldrh	r3, [r3, #6]
 8009a62:	2b07      	cmp	r3, #7
 8009a64:	bf28      	it	cs
 8009a66:	2307      	movcs	r3, #7
 8009a68:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	89fa      	ldrh	r2, [r7, #14]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 fd21 	bl	800b4b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009a76:	e090      	b.n	8009b9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	785a      	ldrb	r2, [r3, #1]
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	88db      	ldrh	r3, [r3, #6]
 8009a86:	2b3f      	cmp	r3, #63	; 0x3f
 8009a88:	d803      	bhi.n	8009a92 <USBD_CDC_Setup+0xa6>
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	88db      	ldrh	r3, [r3, #6]
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	e000      	b.n	8009a94 <USBD_CDC_Setup+0xa8>
 8009a92:	2240      	movs	r2, #64	; 0x40
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009a9a:	6939      	ldr	r1, [r7, #16]
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 fd33 	bl	800b510 <USBD_CtlPrepareRx>
      break;
 8009aaa:	e076      	b.n	8009b9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	33b0      	adds	r3, #176	; 0xb0
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	7850      	ldrb	r0, [r2, #1]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	4798      	blx	r3
      break;
 8009ac8:	e067      	b.n	8009b9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	785b      	ldrb	r3, [r3, #1]
 8009ace:	2b0b      	cmp	r3, #11
 8009ad0:	d851      	bhi.n	8009b76 <USBD_CDC_Setup+0x18a>
 8009ad2:	a201      	add	r2, pc, #4	; (adr r2, 8009ad8 <USBD_CDC_Setup+0xec>)
 8009ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad8:	08009b09 	.word	0x08009b09
 8009adc:	08009b85 	.word	0x08009b85
 8009ae0:	08009b77 	.word	0x08009b77
 8009ae4:	08009b77 	.word	0x08009b77
 8009ae8:	08009b77 	.word	0x08009b77
 8009aec:	08009b77 	.word	0x08009b77
 8009af0:	08009b77 	.word	0x08009b77
 8009af4:	08009b77 	.word	0x08009b77
 8009af8:	08009b77 	.word	0x08009b77
 8009afc:	08009b77 	.word	0x08009b77
 8009b00:	08009b33 	.word	0x08009b33
 8009b04:	08009b5d 	.word	0x08009b5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	2b03      	cmp	r3, #3
 8009b12:	d107      	bne.n	8009b24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b14:	f107 030a 	add.w	r3, r7, #10
 8009b18:	2202      	movs	r2, #2
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f001 fccb 	bl	800b4b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b22:	e032      	b.n	8009b8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f001 fc55 	bl	800b3d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	75fb      	strb	r3, [r7, #23]
          break;
 8009b30:	e02b      	b.n	8009b8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	d107      	bne.n	8009b4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009b3e:	f107 030d 	add.w	r3, r7, #13
 8009b42:	2201      	movs	r2, #1
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f001 fcb6 	bl	800b4b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b4c:	e01d      	b.n	8009b8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 fc40 	bl	800b3d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b56:	2303      	movs	r3, #3
 8009b58:	75fb      	strb	r3, [r7, #23]
          break;
 8009b5a:	e016      	b.n	8009b8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	2b03      	cmp	r3, #3
 8009b66:	d00f      	beq.n	8009b88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f001 fc33 	bl	800b3d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b70:	2303      	movs	r3, #3
 8009b72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009b74:	e008      	b.n	8009b88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 fc2c 	bl	800b3d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	75fb      	strb	r3, [r7, #23]
          break;
 8009b82:	e002      	b.n	8009b8a <USBD_CDC_Setup+0x19e>
          break;
 8009b84:	bf00      	nop
 8009b86:	e008      	b.n	8009b9a <USBD_CDC_Setup+0x1ae>
          break;
 8009b88:	bf00      	nop
      }
      break;
 8009b8a:	e006      	b.n	8009b9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f001 fc21 	bl	800b3d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b94:	2303      	movs	r3, #3
 8009b96:	75fb      	strb	r3, [r7, #23]
      break;
 8009b98:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3718      	adds	r7, #24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	32b0      	adds	r2, #176	; 0xb0
 8009bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d101      	bne.n	8009bce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	e065      	b.n	8009c9a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	32b0      	adds	r2, #176	; 0xb0
 8009bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bdc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009bde:	78fb      	ldrb	r3, [r7, #3]
 8009be0:	f003 020f 	and.w	r2, r3, #15
 8009be4:	6879      	ldr	r1, [r7, #4]
 8009be6:	4613      	mov	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	440b      	add	r3, r1
 8009bf0:	3318      	adds	r3, #24
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d02f      	beq.n	8009c58 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	f003 020f 	and.w	r2, r3, #15
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	4613      	mov	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	440b      	add	r3, r1
 8009c0a:	3318      	adds	r3, #24
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	78fb      	ldrb	r3, [r7, #3]
 8009c10:	f003 010f 	and.w	r1, r3, #15
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	460b      	mov	r3, r1
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	440b      	add	r3, r1
 8009c1c:	00db      	lsls	r3, r3, #3
 8009c1e:	4403      	add	r3, r0
 8009c20:	3338      	adds	r3, #56	; 0x38
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c28:	fb01 f303 	mul.w	r3, r1, r3
 8009c2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d112      	bne.n	8009c58 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009c32:	78fb      	ldrb	r3, [r7, #3]
 8009c34:	f003 020f 	and.w	r2, r3, #15
 8009c38:	6879      	ldr	r1, [r7, #4]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4413      	add	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	440b      	add	r3, r1
 8009c44:	3318      	adds	r3, #24
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c4a:	78f9      	ldrb	r1, [r7, #3]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	2200      	movs	r2, #0
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f002 f9c5 	bl	800bfe0 <USBD_LL_Transmit>
 8009c56:	e01f      	b.n	8009c98 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	33b0      	adds	r3, #176	; 0xb0
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d010      	beq.n	8009c98 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	33b0      	adds	r3, #176	; 0xb0
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009c94:	78fa      	ldrb	r2, [r7, #3]
 8009c96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	460b      	mov	r3, r1
 8009cac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	32b0      	adds	r2, #176	; 0xb0
 8009cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	32b0      	adds	r2, #176	; 0xb0
 8009cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e01a      	b.n	8009d0a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009cd4:	78fb      	ldrb	r3, [r7, #3]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f002 f9f1 	bl	800c0c0 <USBD_LL_GetRxDataSize>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	33b0      	adds	r3, #176	; 0xb0
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009d04:	4611      	mov	r1, r2
 8009d06:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	32b0      	adds	r2, #176	; 0xb0
 8009d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e025      	b.n	8009d80 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	33b0      	adds	r3, #176	; 0xb0
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d01a      	beq.n	8009d7e <USBD_CDC_EP0_RxReady+0x6c>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009d4e:	2bff      	cmp	r3, #255	; 0xff
 8009d50:	d015      	beq.n	8009d7e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	33b0      	adds	r3, #176	; 0xb0
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009d6a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009d72:	b292      	uxth	r2, r2
 8009d74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	22ff      	movs	r2, #255	; 0xff
 8009d7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d90:	2182      	movs	r1, #130	; 0x82
 8009d92:	4818      	ldr	r0, [pc, #96]	; (8009df4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d94:	f000 fcbd 	bl	800a712 <USBD_GetEpDesc>
 8009d98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	4815      	ldr	r0, [pc, #84]	; (8009df4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d9e:	f000 fcb8 	bl	800a712 <USBD_GetEpDesc>
 8009da2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009da4:	2181      	movs	r1, #129	; 0x81
 8009da6:	4813      	ldr	r0, [pc, #76]	; (8009df4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009da8:	f000 fcb3 	bl	800a712 <USBD_GetEpDesc>
 8009dac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2210      	movs	r2, #16
 8009db8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d006      	beq.n	8009dce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dc8:	711a      	strb	r2, [r3, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d006      	beq.n	8009de2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ddc:	711a      	strb	r2, [r3, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2243      	movs	r2, #67	; 0x43
 8009de6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20000054 	.word	0x20000054

08009df8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e00:	2182      	movs	r1, #130	; 0x82
 8009e02:	4818      	ldr	r0, [pc, #96]	; (8009e64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e04:	f000 fc85 	bl	800a712 <USBD_GetEpDesc>
 8009e08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	4815      	ldr	r0, [pc, #84]	; (8009e64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e0e:	f000 fc80 	bl	800a712 <USBD_GetEpDesc>
 8009e12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e14:	2181      	movs	r1, #129	; 0x81
 8009e16:	4813      	ldr	r0, [pc, #76]	; (8009e64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e18:	f000 fc7b 	bl	800a712 <USBD_GetEpDesc>
 8009e1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2210      	movs	r2, #16
 8009e28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d006      	beq.n	8009e3e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2200      	movs	r2, #0
 8009e34:	711a      	strb	r2, [r3, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f042 0202 	orr.w	r2, r2, #2
 8009e3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d006      	beq.n	8009e52 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	711a      	strb	r2, [r3, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f042 0202 	orr.w	r2, r2, #2
 8009e50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2243      	movs	r2, #67	; 0x43
 8009e56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e58:	4b02      	ldr	r3, [pc, #8]	; (8009e64 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	20000054 	.word	0x20000054

08009e68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e70:	2182      	movs	r1, #130	; 0x82
 8009e72:	4818      	ldr	r0, [pc, #96]	; (8009ed4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e74:	f000 fc4d 	bl	800a712 <USBD_GetEpDesc>
 8009e78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	4815      	ldr	r0, [pc, #84]	; (8009ed4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e7e:	f000 fc48 	bl	800a712 <USBD_GetEpDesc>
 8009e82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e84:	2181      	movs	r1, #129	; 0x81
 8009e86:	4813      	ldr	r0, [pc, #76]	; (8009ed4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009e88:	f000 fc43 	bl	800a712 <USBD_GetEpDesc>
 8009e8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	2210      	movs	r2, #16
 8009e98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d006      	beq.n	8009eae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ea8:	711a      	strb	r2, [r3, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d006      	beq.n	8009ec2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ebc:	711a      	strb	r2, [r3, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2243      	movs	r2, #67	; 0x43
 8009ec6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ec8:	4b02      	ldr	r3, [pc, #8]	; (8009ed4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20000054 	.word	0x20000054

08009ed8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	220a      	movs	r2, #10
 8009ee4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009ee6:	4b03      	ldr	r3, [pc, #12]	; (8009ef4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	20000010 	.word	0x20000010

08009ef8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d101      	bne.n	8009f0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e009      	b.n	8009f20 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	33b0      	adds	r3, #176	; 0xb0
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b087      	sub	sp, #28
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	32b0      	adds	r2, #176	; 0xb0
 8009f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f46:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	e008      	b.n	8009f64 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	371c      	adds	r7, #28
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	32b0      	adds	r2, #176	; 0xb0
 8009f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e004      	b.n	8009f9e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
	...

08009fac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	32b0      	adds	r2, #176	; 0xb0
 8009fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	e025      	b.n	800a01e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d11f      	bne.n	800a01c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009fe4:	4b10      	ldr	r3, [pc, #64]	; (800a028 <USBD_CDC_TransmitPacket+0x7c>)
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	f003 020f 	and.w	r2, r3, #15
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	4413      	add	r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4403      	add	r3, r0
 8009ffe:	3318      	adds	r3, #24
 800a000:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a002:	4b09      	ldr	r3, [pc, #36]	; (800a028 <USBD_CDC_TransmitPacket+0x7c>)
 800a004:	7819      	ldrb	r1, [r3, #0]
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f001 ffe4 	bl	800bfe0 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20000097 	.word	0x20000097

0800a02c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	32b0      	adds	r2, #176	; 0xb0
 800a03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a042:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	32b0      	adds	r2, #176	; 0xb0
 800a04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a056:	2303      	movs	r3, #3
 800a058:	e018      	b.n	800a08c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	7c1b      	ldrb	r3, [r3, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10a      	bne.n	800a078 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a062:	4b0c      	ldr	r3, [pc, #48]	; (800a094 <USBD_CDC_ReceivePacket+0x68>)
 800a064:	7819      	ldrb	r1, [r3, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a06c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f001 ffed 	bl	800c050 <USBD_LL_PrepareReceive>
 800a076:	e008      	b.n	800a08a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a078:	4b06      	ldr	r3, [pc, #24]	; (800a094 <USBD_CDC_ReceivePacket+0x68>)
 800a07a:	7819      	ldrb	r1, [r3, #0]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a082:	2340      	movs	r3, #64	; 0x40
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f001 ffe3 	bl	800c050 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	20000098 	.word	0x20000098

0800a098 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d101      	bne.n	800a0b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e01f      	b.n	800a0f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d003      	beq.n	800a0d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	79fa      	ldrb	r2, [r7, #7]
 800a0e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f001 fda3 	bl	800bc30 <USBD_LL_Init>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3718      	adds	r7, #24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a102:	2300      	movs	r3, #0
 800a104:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d101      	bne.n	800a110 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e025      	b.n	800a15c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	32ae      	adds	r2, #174	; 0xae
 800a122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00f      	beq.n	800a14c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	32ae      	adds	r2, #174	; 0xae
 800a136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	f107 020e 	add.w	r2, r7, #14
 800a140:	4610      	mov	r0, r2
 800a142:	4798      	blx	r3
 800a144:	4602      	mov	r2, r0
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a152:	1c5a      	adds	r2, r3, #1
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 fdc1 	bl	800bcf4 <USBD_LL_Start>
 800a172:	4603      	mov	r3, r0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a184:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a186:	4618      	mov	r0, r3
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	460b      	mov	r3, r1
 800a19c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d009      	beq.n	800a1c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	78fa      	ldrb	r2, [r7, #3]
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	4798      	blx	r3
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	78fa      	ldrb	r2, [r7, #3]
 800a1e4:	4611      	mov	r1, r2
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	4798      	blx	r3
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	4618      	mov	r0, r3
 800a212:	f001 f8a6 	bl	800b362 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a224:	461a      	mov	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a232:	f003 031f 	and.w	r3, r3, #31
 800a236:	2b02      	cmp	r3, #2
 800a238:	d01a      	beq.n	800a270 <USBD_LL_SetupStage+0x72>
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d822      	bhi.n	800a284 <USBD_LL_SetupStage+0x86>
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d002      	beq.n	800a248 <USBD_LL_SetupStage+0x4a>
 800a242:	2b01      	cmp	r3, #1
 800a244:	d00a      	beq.n	800a25c <USBD_LL_SetupStage+0x5e>
 800a246:	e01d      	b.n	800a284 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fad3 	bl	800a7fc <USBD_StdDevReq>
 800a256:	4603      	mov	r3, r0
 800a258:	73fb      	strb	r3, [r7, #15]
      break;
 800a25a:	e020      	b.n	800a29e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a262:	4619      	mov	r1, r3
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fb3b 	bl	800a8e0 <USBD_StdItfReq>
 800a26a:	4603      	mov	r3, r0
 800a26c:	73fb      	strb	r3, [r7, #15]
      break;
 800a26e:	e016      	b.n	800a29e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fb9d 	bl	800a9b8 <USBD_StdEPReq>
 800a27e:	4603      	mov	r3, r0
 800a280:	73fb      	strb	r3, [r7, #15]
      break;
 800a282:	e00c      	b.n	800a29e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a28a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	4619      	mov	r1, r3
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f001 fdd4 	bl	800be40 <USBD_LL_StallEP>
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]
      break;
 800a29c:	bf00      	nop
  }

  return ret;
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	607a      	str	r2, [r7, #4]
 800a2b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a2ba:	7afb      	ldrb	r3, [r7, #11]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d16e      	bne.n	800a39e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a2c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	f040 8098 	bne.w	800a404 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	689a      	ldr	r2, [r3, #8]
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d913      	bls.n	800a308 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	1ad2      	subs	r2, r2, r3
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	68da      	ldr	r2, [r3, #12]
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	bf28      	it	cs
 800a2fa:	4613      	movcs	r3, r2
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f001 f922 	bl	800b54a <USBD_CtlContinueRx>
 800a306:	e07d      	b.n	800a404 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a30e:	f003 031f 	and.w	r3, r3, #31
 800a312:	2b02      	cmp	r3, #2
 800a314:	d014      	beq.n	800a340 <USBD_LL_DataOutStage+0x98>
 800a316:	2b02      	cmp	r3, #2
 800a318:	d81d      	bhi.n	800a356 <USBD_LL_DataOutStage+0xae>
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d002      	beq.n	800a324 <USBD_LL_DataOutStage+0x7c>
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d003      	beq.n	800a32a <USBD_LL_DataOutStage+0x82>
 800a322:	e018      	b.n	800a356 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a324:	2300      	movs	r3, #0
 800a326:	75bb      	strb	r3, [r7, #22]
            break;
 800a328:	e018      	b.n	800a35c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a330:	b2db      	uxtb	r3, r3
 800a332:	4619      	mov	r1, r3
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f000 f9d2 	bl	800a6de <USBD_CoreFindIF>
 800a33a:	4603      	mov	r3, r0
 800a33c:	75bb      	strb	r3, [r7, #22]
            break;
 800a33e:	e00d      	b.n	800a35c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a346:	b2db      	uxtb	r3, r3
 800a348:	4619      	mov	r1, r3
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f000 f9d4 	bl	800a6f8 <USBD_CoreFindEP>
 800a350:	4603      	mov	r3, r0
 800a352:	75bb      	strb	r3, [r7, #22]
            break;
 800a354:	e002      	b.n	800a35c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a356:	2300      	movs	r3, #0
 800a358:	75bb      	strb	r3, [r7, #22]
            break;
 800a35a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a35c:	7dbb      	ldrb	r3, [r7, #22]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d119      	bne.n	800a396 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	d113      	bne.n	800a396 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a36e:	7dba      	ldrb	r2, [r7, #22]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	32ae      	adds	r2, #174	; 0xae
 800a374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00b      	beq.n	800a396 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a37e:	7dba      	ldrb	r2, [r7, #22]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a386:	7dba      	ldrb	r2, [r7, #22]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	32ae      	adds	r2, #174	; 0xae
 800a38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f001 f8e8 	bl	800b56c <USBD_CtlSendStatus>
 800a39c:	e032      	b.n	800a404 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a39e:	7afb      	ldrb	r3, [r7, #11]
 800a3a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 f9a5 	bl	800a6f8 <USBD_CoreFindEP>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3b2:	7dbb      	ldrb	r3, [r7, #22]
 800a3b4:	2bff      	cmp	r3, #255	; 0xff
 800a3b6:	d025      	beq.n	800a404 <USBD_LL_DataOutStage+0x15c>
 800a3b8:	7dbb      	ldrb	r3, [r7, #22]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d122      	bne.n	800a404 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	d117      	bne.n	800a3fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a3ca:	7dba      	ldrb	r2, [r7, #22]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	32ae      	adds	r2, #174	; 0xae
 800a3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00f      	beq.n	800a3fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a3da:	7dba      	ldrb	r2, [r7, #22]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a3e2:	7dba      	ldrb	r2, [r7, #22]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	32ae      	adds	r2, #174	; 0xae
 800a3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	7afa      	ldrb	r2, [r7, #11]
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	4798      	blx	r3
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a3fa:	7dfb      	ldrb	r3, [r7, #23]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a400:	7dfb      	ldrb	r3, [r7, #23]
 800a402:	e000      	b.n	800a406 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b086      	sub	sp, #24
 800a412:	af00      	add	r7, sp, #0
 800a414:	60f8      	str	r0, [r7, #12]
 800a416:	460b      	mov	r3, r1
 800a418:	607a      	str	r2, [r7, #4]
 800a41a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a41c:	7afb      	ldrb	r3, [r7, #11]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d16f      	bne.n	800a502 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	3314      	adds	r3, #20
 800a426:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d15a      	bne.n	800a4e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	689a      	ldr	r2, [r3, #8]
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d914      	bls.n	800a468 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	689a      	ldr	r2, [r3, #8]
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	1ad2      	subs	r2, r2, r3
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	461a      	mov	r2, r3
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f001 f84a 	bl	800b4ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a45a:	2300      	movs	r3, #0
 800a45c:	2200      	movs	r2, #0
 800a45e:	2100      	movs	r1, #0
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f001 fdf5 	bl	800c050 <USBD_LL_PrepareReceive>
 800a466:	e03f      	b.n	800a4e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	68da      	ldr	r2, [r3, #12]
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	429a      	cmp	r2, r3
 800a472:	d11c      	bne.n	800a4ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d316      	bcc.n	800a4ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d20f      	bcs.n	800a4ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a48e:	2200      	movs	r2, #0
 800a490:	2100      	movs	r1, #0
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f001 f82b 	bl	800b4ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f001 fdd2 	bl	800c050 <USBD_LL_PrepareReceive>
 800a4ac:	e01c      	b.n	800a4e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d10f      	bne.n	800a4da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d009      	beq.n	800a4da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4da:	2180      	movs	r1, #128	; 0x80
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f001 fcaf 	bl	800be40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f001 f855 	bl	800b592 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d03a      	beq.n	800a568 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f7ff fe42 	bl	800a17c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a500:	e032      	b.n	800a568 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a502:	7afb      	ldrb	r3, [r7, #11]
 800a504:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	4619      	mov	r1, r3
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f000 f8f3 	bl	800a6f8 <USBD_CoreFindEP>
 800a512:	4603      	mov	r3, r0
 800a514:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	2bff      	cmp	r3, #255	; 0xff
 800a51a:	d025      	beq.n	800a568 <USBD_LL_DataInStage+0x15a>
 800a51c:	7dfb      	ldrb	r3, [r7, #23]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d122      	bne.n	800a568 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b03      	cmp	r3, #3
 800a52c:	d11c      	bne.n	800a568 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a52e:	7dfa      	ldrb	r2, [r7, #23]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	32ae      	adds	r2, #174	; 0xae
 800a534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d014      	beq.n	800a568 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a53e:	7dfa      	ldrb	r2, [r7, #23]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a546:	7dfa      	ldrb	r2, [r7, #23]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	32ae      	adds	r2, #174	; 0xae
 800a54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	7afa      	ldrb	r2, [r7, #11]
 800a554:	4611      	mov	r1, r2
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	4798      	blx	r3
 800a55a:	4603      	mov	r3, r0
 800a55c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a55e:	7dbb      	ldrb	r3, [r7, #22]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a564:	7dbb      	ldrb	r3, [r7, #22]
 800a566:	e000      	b.n	800a56a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3718      	adds	r7, #24
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d014      	beq.n	800a5d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00e      	beq.n	800a5d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	6852      	ldr	r2, [r2, #4]
 800a5c6:	b2d2      	uxtb	r2, r2
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	4798      	blx	r3
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5d8:	2340      	movs	r3, #64	; 0x40
 800a5da:	2200      	movs	r2, #0
 800a5dc:	2100      	movs	r1, #0
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 fbba 	bl	800bd58 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2240      	movs	r2, #64	; 0x40
 800a5f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5f4:	2340      	movs	r3, #64	; 0x40
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2180      	movs	r1, #128	; 0x80
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f001 fbac 	bl	800bd58 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2240      	movs	r2, #64	; 0x40
 800a60a:	621a      	str	r2, [r3, #32]

  return ret;
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a616:	b480      	push	{r7}
 800a618:	b083      	sub	sp, #12
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	460b      	mov	r3, r1
 800a620:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	78fa      	ldrb	r2, [r7, #3]
 800a626:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b04      	cmp	r3, #4
 800a648:	d006      	beq.n	800a658 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a650:	b2da      	uxtb	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2204      	movs	r2, #4
 800a65c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	2b04      	cmp	r3, #4
 800a680:	d106      	bne.n	800a690 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	d110      	bne.n	800a6d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00b      	beq.n	800a6d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d005      	beq.n	800a6d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b083      	sub	sp, #12
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a704:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a706:	4618      	mov	r0, r3
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b086      	sub	sp, #24
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	460b      	mov	r3, r1
 800a71c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a726:	2300      	movs	r3, #0
 800a728:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	885b      	ldrh	r3, [r3, #2]
 800a72e:	b29a      	uxth	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	b29b      	uxth	r3, r3
 800a736:	429a      	cmp	r2, r3
 800a738:	d920      	bls.n	800a77c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a742:	e013      	b.n	800a76c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a744:	f107 030a 	add.w	r3, r7, #10
 800a748:	4619      	mov	r1, r3
 800a74a:	6978      	ldr	r0, [r7, #20]
 800a74c:	f000 f81b 	bl	800a786 <USBD_GetNextDesc>
 800a750:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	785b      	ldrb	r3, [r3, #1]
 800a756:	2b05      	cmp	r3, #5
 800a758:	d108      	bne.n	800a76c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	789b      	ldrb	r3, [r3, #2]
 800a762:	78fa      	ldrb	r2, [r7, #3]
 800a764:	429a      	cmp	r2, r3
 800a766:	d008      	beq.n	800a77a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a768:	2300      	movs	r3, #0
 800a76a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	885b      	ldrh	r3, [r3, #2]
 800a770:	b29a      	uxth	r2, r3
 800a772:	897b      	ldrh	r3, [r7, #10]
 800a774:	429a      	cmp	r2, r3
 800a776:	d8e5      	bhi.n	800a744 <USBD_GetEpDesc+0x32>
 800a778:	e000      	b.n	800a77c <USBD_GetEpDesc+0x6a>
          break;
 800a77a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a77c:	693b      	ldr	r3, [r7, #16]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a786:	b480      	push	{r7}
 800a788:	b085      	sub	sp, #20
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	881a      	ldrh	r2, [r3, #0]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	4413      	add	r3, r2
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b087      	sub	sp, #28
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a7de:	8a3b      	ldrh	r3, [r7, #16]
 800a7e0:	021b      	lsls	r3, r3, #8
 800a7e2:	b21a      	sxth	r2, r3
 800a7e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	b21b      	sxth	r3, r3
 800a7ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a7ee:	89fb      	ldrh	r3, [r7, #14]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	371c      	adds	r7, #28
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a812:	2b40      	cmp	r3, #64	; 0x40
 800a814:	d005      	beq.n	800a822 <USBD_StdDevReq+0x26>
 800a816:	2b40      	cmp	r3, #64	; 0x40
 800a818:	d857      	bhi.n	800a8ca <USBD_StdDevReq+0xce>
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00f      	beq.n	800a83e <USBD_StdDevReq+0x42>
 800a81e:	2b20      	cmp	r3, #32
 800a820:	d153      	bne.n	800a8ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	32ae      	adds	r2, #174	; 0xae
 800a82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	4798      	blx	r3
 800a838:	4603      	mov	r3, r0
 800a83a:	73fb      	strb	r3, [r7, #15]
      break;
 800a83c:	e04a      	b.n	800a8d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	785b      	ldrb	r3, [r3, #1]
 800a842:	2b09      	cmp	r3, #9
 800a844:	d83b      	bhi.n	800a8be <USBD_StdDevReq+0xc2>
 800a846:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <USBD_StdDevReq+0x50>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a8a1 	.word	0x0800a8a1
 800a850:	0800a8b5 	.word	0x0800a8b5
 800a854:	0800a8bf 	.word	0x0800a8bf
 800a858:	0800a8ab 	.word	0x0800a8ab
 800a85c:	0800a8bf 	.word	0x0800a8bf
 800a860:	0800a87f 	.word	0x0800a87f
 800a864:	0800a875 	.word	0x0800a875
 800a868:	0800a8bf 	.word	0x0800a8bf
 800a86c:	0800a897 	.word	0x0800a897
 800a870:	0800a889 	.word	0x0800a889
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fa3c 	bl	800acf4 <USBD_GetDescriptor>
          break;
 800a87c:	e024      	b.n	800a8c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fbcb 	bl	800b01c <USBD_SetAddress>
          break;
 800a886:	e01f      	b.n	800a8c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fc0a 	bl	800b0a4 <USBD_SetConfig>
 800a890:	4603      	mov	r3, r0
 800a892:	73fb      	strb	r3, [r7, #15]
          break;
 800a894:	e018      	b.n	800a8c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fcad 	bl	800b1f8 <USBD_GetConfig>
          break;
 800a89e:	e013      	b.n	800a8c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fcde 	bl	800b264 <USBD_GetStatus>
          break;
 800a8a8:	e00e      	b.n	800a8c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a8aa:	6839      	ldr	r1, [r7, #0]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fd0d 	bl	800b2cc <USBD_SetFeature>
          break;
 800a8b2:	e009      	b.n	800a8c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fd31 	bl	800b31e <USBD_ClrFeature>
          break;
 800a8bc:	e004      	b.n	800a8c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fd88 	bl	800b3d6 <USBD_CtlError>
          break;
 800a8c6:	bf00      	nop
      }
      break;
 800a8c8:	e004      	b.n	800a8d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fd82 	bl	800b3d6 <USBD_CtlError>
      break;
 800a8d2:	bf00      	nop
  }

  return ret;
 800a8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop

0800a8e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8f6:	2b40      	cmp	r3, #64	; 0x40
 800a8f8:	d005      	beq.n	800a906 <USBD_StdItfReq+0x26>
 800a8fa:	2b40      	cmp	r3, #64	; 0x40
 800a8fc:	d852      	bhi.n	800a9a4 <USBD_StdItfReq+0xc4>
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d001      	beq.n	800a906 <USBD_StdItfReq+0x26>
 800a902:	2b20      	cmp	r3, #32
 800a904:	d14e      	bne.n	800a9a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	3b01      	subs	r3, #1
 800a910:	2b02      	cmp	r3, #2
 800a912:	d840      	bhi.n	800a996 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	889b      	ldrh	r3, [r3, #4]
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d836      	bhi.n	800a98c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	889b      	ldrh	r3, [r3, #4]
 800a922:	b2db      	uxtb	r3, r3
 800a924:	4619      	mov	r1, r3
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f7ff fed9 	bl	800a6de <USBD_CoreFindIF>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a930:	7bbb      	ldrb	r3, [r7, #14]
 800a932:	2bff      	cmp	r3, #255	; 0xff
 800a934:	d01d      	beq.n	800a972 <USBD_StdItfReq+0x92>
 800a936:	7bbb      	ldrb	r3, [r7, #14]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d11a      	bne.n	800a972 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a93c:	7bba      	ldrb	r2, [r7, #14]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	32ae      	adds	r2, #174	; 0xae
 800a942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00f      	beq.n	800a96c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a94c:	7bba      	ldrb	r2, [r7, #14]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a954:	7bba      	ldrb	r2, [r7, #14]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	32ae      	adds	r2, #174	; 0xae
 800a95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	6839      	ldr	r1, [r7, #0]
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	4798      	blx	r3
 800a966:	4603      	mov	r3, r0
 800a968:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a96a:	e004      	b.n	800a976 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a96c:	2303      	movs	r3, #3
 800a96e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a970:	e001      	b.n	800a976 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a972:	2303      	movs	r3, #3
 800a974:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	88db      	ldrh	r3, [r3, #6]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d110      	bne.n	800a9a0 <USBD_StdItfReq+0xc0>
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10d      	bne.n	800a9a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fdf1 	bl	800b56c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a98a:	e009      	b.n	800a9a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fd21 	bl	800b3d6 <USBD_CtlError>
          break;
 800a994:	e004      	b.n	800a9a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a996:	6839      	ldr	r1, [r7, #0]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 fd1c 	bl	800b3d6 <USBD_CtlError>
          break;
 800a99e:	e000      	b.n	800a9a2 <USBD_StdItfReq+0xc2>
          break;
 800a9a0:	bf00      	nop
      }
      break;
 800a9a2:	e004      	b.n	800a9ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fd15 	bl	800b3d6 <USBD_CtlError>
      break;
 800a9ac:	bf00      	nop
  }

  return ret;
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	889b      	ldrh	r3, [r3, #4]
 800a9ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9d4:	2b40      	cmp	r3, #64	; 0x40
 800a9d6:	d007      	beq.n	800a9e8 <USBD_StdEPReq+0x30>
 800a9d8:	2b40      	cmp	r3, #64	; 0x40
 800a9da:	f200 817f 	bhi.w	800acdc <USBD_StdEPReq+0x324>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d02a      	beq.n	800aa38 <USBD_StdEPReq+0x80>
 800a9e2:	2b20      	cmp	r3, #32
 800a9e4:	f040 817a 	bne.w	800acdc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7ff fe83 	bl	800a6f8 <USBD_CoreFindEP>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9f6:	7b7b      	ldrb	r3, [r7, #13]
 800a9f8:	2bff      	cmp	r3, #255	; 0xff
 800a9fa:	f000 8174 	beq.w	800ace6 <USBD_StdEPReq+0x32e>
 800a9fe:	7b7b      	ldrb	r3, [r7, #13]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f040 8170 	bne.w	800ace6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aa06:	7b7a      	ldrb	r2, [r7, #13]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aa0e:	7b7a      	ldrb	r2, [r7, #13]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	32ae      	adds	r2, #174	; 0xae
 800aa14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f000 8163 	beq.w	800ace6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aa20:	7b7a      	ldrb	r2, [r7, #13]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	32ae      	adds	r2, #174	; 0xae
 800aa26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	4798      	blx	r3
 800aa32:	4603      	mov	r3, r0
 800aa34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa36:	e156      	b.n	800ace6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	785b      	ldrb	r3, [r3, #1]
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	d008      	beq.n	800aa52 <USBD_StdEPReq+0x9a>
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	f300 8145 	bgt.w	800acd0 <USBD_StdEPReq+0x318>
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 809b 	beq.w	800ab82 <USBD_StdEPReq+0x1ca>
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d03c      	beq.n	800aaca <USBD_StdEPReq+0x112>
 800aa50:	e13e      	b.n	800acd0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d002      	beq.n	800aa64 <USBD_StdEPReq+0xac>
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d016      	beq.n	800aa90 <USBD_StdEPReq+0xd8>
 800aa62:	e02c      	b.n	800aabe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa64:	7bbb      	ldrb	r3, [r7, #14]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00d      	beq.n	800aa86 <USBD_StdEPReq+0xce>
 800aa6a:	7bbb      	ldrb	r3, [r7, #14]
 800aa6c:	2b80      	cmp	r3, #128	; 0x80
 800aa6e:	d00a      	beq.n	800aa86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa70:	7bbb      	ldrb	r3, [r7, #14]
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f001 f9e3 	bl	800be40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa7a:	2180      	movs	r1, #128	; 0x80
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f001 f9df 	bl	800be40 <USBD_LL_StallEP>
 800aa82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa84:	e020      	b.n	800aac8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fca4 	bl	800b3d6 <USBD_CtlError>
              break;
 800aa8e:	e01b      	b.n	800aac8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	885b      	ldrh	r3, [r3, #2]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10e      	bne.n	800aab6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00b      	beq.n	800aab6 <USBD_StdEPReq+0xfe>
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	2b80      	cmp	r3, #128	; 0x80
 800aaa2:	d008      	beq.n	800aab6 <USBD_StdEPReq+0xfe>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	88db      	ldrh	r3, [r3, #6]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d104      	bne.n	800aab6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f001 f9c5 	bl	800be40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fd58 	bl	800b56c <USBD_CtlSendStatus>

              break;
 800aabc:	e004      	b.n	800aac8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fc88 	bl	800b3d6 <USBD_CtlError>
              break;
 800aac6:	bf00      	nop
          }
          break;
 800aac8:	e107      	b.n	800acda <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d002      	beq.n	800aadc <USBD_StdEPReq+0x124>
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	d016      	beq.n	800ab08 <USBD_StdEPReq+0x150>
 800aada:	e04b      	b.n	800ab74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d00d      	beq.n	800aafe <USBD_StdEPReq+0x146>
 800aae2:	7bbb      	ldrb	r3, [r7, #14]
 800aae4:	2b80      	cmp	r3, #128	; 0x80
 800aae6:	d00a      	beq.n	800aafe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aae8:	7bbb      	ldrb	r3, [r7, #14]
 800aaea:	4619      	mov	r1, r3
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f001 f9a7 	bl	800be40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaf2:	2180      	movs	r1, #128	; 0x80
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f001 f9a3 	bl	800be40 <USBD_LL_StallEP>
 800aafa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aafc:	e040      	b.n	800ab80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fc68 	bl	800b3d6 <USBD_CtlError>
              break;
 800ab06:	e03b      	b.n	800ab80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	885b      	ldrh	r3, [r3, #2]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d136      	bne.n	800ab7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
 800ab12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d004      	beq.n	800ab24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f001 f9c4 	bl	800beac <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fd21 	bl	800b56c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7ff fde2 	bl	800a6f8 <USBD_CoreFindEP>
 800ab34:	4603      	mov	r3, r0
 800ab36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab38:	7b7b      	ldrb	r3, [r7, #13]
 800ab3a:	2bff      	cmp	r3, #255	; 0xff
 800ab3c:	d01f      	beq.n	800ab7e <USBD_StdEPReq+0x1c6>
 800ab3e:	7b7b      	ldrb	r3, [r7, #13]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d11c      	bne.n	800ab7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ab44:	7b7a      	ldrb	r2, [r7, #13]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ab4c:	7b7a      	ldrb	r2, [r7, #13]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	32ae      	adds	r2, #174	; 0xae
 800ab52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d010      	beq.n	800ab7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab5c:	7b7a      	ldrb	r2, [r7, #13]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	32ae      	adds	r2, #174	; 0xae
 800ab62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	4798      	blx	r3
 800ab6e:	4603      	mov	r3, r0
 800ab70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ab72:	e004      	b.n	800ab7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fc2d 	bl	800b3d6 <USBD_CtlError>
              break;
 800ab7c:	e000      	b.n	800ab80 <USBD_StdEPReq+0x1c8>
              break;
 800ab7e:	bf00      	nop
          }
          break;
 800ab80:	e0ab      	b.n	800acda <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d002      	beq.n	800ab94 <USBD_StdEPReq+0x1dc>
 800ab8e:	2b03      	cmp	r3, #3
 800ab90:	d032      	beq.n	800abf8 <USBD_StdEPReq+0x240>
 800ab92:	e097      	b.n	800acc4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d007      	beq.n	800abaa <USBD_StdEPReq+0x1f2>
 800ab9a:	7bbb      	ldrb	r3, [r7, #14]
 800ab9c:	2b80      	cmp	r3, #128	; 0x80
 800ab9e:	d004      	beq.n	800abaa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fc17 	bl	800b3d6 <USBD_CtlError>
                break;
 800aba8:	e091      	b.n	800acce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	da0b      	bge.n	800abca <USBD_StdEPReq+0x212>
 800abb2:	7bbb      	ldrb	r3, [r7, #14]
 800abb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abb8:	4613      	mov	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	3310      	adds	r3, #16
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	4413      	add	r3, r2
 800abc6:	3304      	adds	r3, #4
 800abc8:	e00b      	b.n	800abe2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abd0:	4613      	mov	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	4413      	add	r3, r2
 800abe0:	3304      	adds	r3, #4
 800abe2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2200      	movs	r2, #0
 800abe8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	2202      	movs	r2, #2
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fc61 	bl	800b4b8 <USBD_CtlSendData>
              break;
 800abf6:	e06a      	b.n	800acce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	da11      	bge.n	800ac24 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	f003 020f 	and.w	r2, r3, #15
 800ac06:	6879      	ldr	r1, [r7, #4]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	440b      	add	r3, r1
 800ac12:	3324      	adds	r3, #36	; 0x24
 800ac14:	881b      	ldrh	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d117      	bne.n	800ac4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fbda 	bl	800b3d6 <USBD_CtlError>
                  break;
 800ac22:	e054      	b.n	800acce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac24:	7bbb      	ldrb	r3, [r7, #14]
 800ac26:	f003 020f 	and.w	r2, r3, #15
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	440b      	add	r3, r1
 800ac36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d104      	bne.n	800ac4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fbc7 	bl	800b3d6 <USBD_CtlError>
                  break;
 800ac48:	e041      	b.n	800acce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	da0b      	bge.n	800ac6a <USBD_StdEPReq+0x2b2>
 800ac52:	7bbb      	ldrb	r3, [r7, #14]
 800ac54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac58:	4613      	mov	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	3310      	adds	r3, #16
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	4413      	add	r3, r2
 800ac66:	3304      	adds	r3, #4
 800ac68:	e00b      	b.n	800ac82 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac6a:	7bbb      	ldrb	r3, [r7, #14]
 800ac6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac70:	4613      	mov	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	4413      	add	r3, r2
 800ac80:	3304      	adds	r3, #4
 800ac82:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d002      	beq.n	800ac90 <USBD_StdEPReq+0x2d8>
 800ac8a:	7bbb      	ldrb	r3, [r7, #14]
 800ac8c:	2b80      	cmp	r3, #128	; 0x80
 800ac8e:	d103      	bne.n	800ac98 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]
 800ac96:	e00e      	b.n	800acb6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac98:	7bbb      	ldrb	r3, [r7, #14]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f001 f93b 	bl	800bf18 <USBD_LL_IsStallEP>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d003      	beq.n	800acb0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2201      	movs	r2, #1
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	e002      	b.n	800acb6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2202      	movs	r2, #2
 800acba:	4619      	mov	r1, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fbfb 	bl	800b4b8 <USBD_CtlSendData>
              break;
 800acc2:	e004      	b.n	800acce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fb85 	bl	800b3d6 <USBD_CtlError>
              break;
 800accc:	bf00      	nop
          }
          break;
 800acce:	e004      	b.n	800acda <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fb7f 	bl	800b3d6 <USBD_CtlError>
          break;
 800acd8:	bf00      	nop
      }
      break;
 800acda:	e005      	b.n	800ace8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fb79 	bl	800b3d6 <USBD_CtlError>
      break;
 800ace4:	e000      	b.n	800ace8 <USBD_StdEPReq+0x330>
      break;
 800ace6:	bf00      	nop
  }

  return ret;
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	885b      	ldrh	r3, [r3, #2]
 800ad0e:	0a1b      	lsrs	r3, r3, #8
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	3b01      	subs	r3, #1
 800ad14:	2b0e      	cmp	r3, #14
 800ad16:	f200 8152 	bhi.w	800afbe <USBD_GetDescriptor+0x2ca>
 800ad1a:	a201      	add	r2, pc, #4	; (adr r2, 800ad20 <USBD_GetDescriptor+0x2c>)
 800ad1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad20:	0800ad91 	.word	0x0800ad91
 800ad24:	0800ada9 	.word	0x0800ada9
 800ad28:	0800ade9 	.word	0x0800ade9
 800ad2c:	0800afbf 	.word	0x0800afbf
 800ad30:	0800afbf 	.word	0x0800afbf
 800ad34:	0800af5f 	.word	0x0800af5f
 800ad38:	0800af8b 	.word	0x0800af8b
 800ad3c:	0800afbf 	.word	0x0800afbf
 800ad40:	0800afbf 	.word	0x0800afbf
 800ad44:	0800afbf 	.word	0x0800afbf
 800ad48:	0800afbf 	.word	0x0800afbf
 800ad4c:	0800afbf 	.word	0x0800afbf
 800ad50:	0800afbf 	.word	0x0800afbf
 800ad54:	0800afbf 	.word	0x0800afbf
 800ad58:	0800ad5d 	.word	0x0800ad5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad62:	69db      	ldr	r3, [r3, #28]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00b      	beq.n	800ad80 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad6e:	69db      	ldr	r3, [r3, #28]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	7c12      	ldrb	r2, [r2, #16]
 800ad74:	f107 0108 	add.w	r1, r7, #8
 800ad78:	4610      	mov	r0, r2
 800ad7a:	4798      	blx	r3
 800ad7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad7e:	e126      	b.n	800afce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fb27 	bl	800b3d6 <USBD_CtlError>
        err++;
 800ad88:	7afb      	ldrb	r3, [r7, #11]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	72fb      	strb	r3, [r7, #11]
      break;
 800ad8e:	e11e      	b.n	800afce <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	7c12      	ldrb	r2, [r2, #16]
 800ad9c:	f107 0108 	add.w	r1, r7, #8
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	60f8      	str	r0, [r7, #12]
      break;
 800ada6:	e112      	b.n	800afce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	7c1b      	ldrb	r3, [r3, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10d      	bne.n	800adcc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb8:	f107 0208 	add.w	r2, r7, #8
 800adbc:	4610      	mov	r0, r2
 800adbe:	4798      	blx	r3
 800adc0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3301      	adds	r3, #1
 800adc6:	2202      	movs	r2, #2
 800adc8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adca:	e100      	b.n	800afce <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add4:	f107 0208 	add.w	r2, r7, #8
 800add8:	4610      	mov	r0, r2
 800adda:	4798      	blx	r3
 800addc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3301      	adds	r3, #1
 800ade2:	2202      	movs	r2, #2
 800ade4:	701a      	strb	r2, [r3, #0]
      break;
 800ade6:	e0f2      	b.n	800afce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	885b      	ldrh	r3, [r3, #2]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b05      	cmp	r3, #5
 800adf0:	f200 80ac 	bhi.w	800af4c <USBD_GetDescriptor+0x258>
 800adf4:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <USBD_GetDescriptor+0x108>)
 800adf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfa:	bf00      	nop
 800adfc:	0800ae15 	.word	0x0800ae15
 800ae00:	0800ae49 	.word	0x0800ae49
 800ae04:	0800ae7d 	.word	0x0800ae7d
 800ae08:	0800aeb1 	.word	0x0800aeb1
 800ae0c:	0800aee5 	.word	0x0800aee5
 800ae10:	0800af19 	.word	0x0800af19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00b      	beq.n	800ae38 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	7c12      	ldrb	r2, [r2, #16]
 800ae2c:	f107 0108 	add.w	r1, r7, #8
 800ae30:	4610      	mov	r0, r2
 800ae32:	4798      	blx	r3
 800ae34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae36:	e091      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 facb 	bl	800b3d6 <USBD_CtlError>
            err++;
 800ae40:	7afb      	ldrb	r3, [r7, #11]
 800ae42:	3301      	adds	r3, #1
 800ae44:	72fb      	strb	r3, [r7, #11]
          break;
 800ae46:	e089      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00b      	beq.n	800ae6c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	7c12      	ldrb	r2, [r2, #16]
 800ae60:	f107 0108 	add.w	r1, r7, #8
 800ae64:	4610      	mov	r0, r2
 800ae66:	4798      	blx	r3
 800ae68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae6a:	e077      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fab1 	bl	800b3d6 <USBD_CtlError>
            err++;
 800ae74:	7afb      	ldrb	r3, [r7, #11]
 800ae76:	3301      	adds	r3, #1
 800ae78:	72fb      	strb	r3, [r7, #11]
          break;
 800ae7a:	e06f      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00b      	beq.n	800aea0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	7c12      	ldrb	r2, [r2, #16]
 800ae94:	f107 0108 	add.w	r1, r7, #8
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4798      	blx	r3
 800ae9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae9e:	e05d      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fa97 	bl	800b3d6 <USBD_CtlError>
            err++;
 800aea8:	7afb      	ldrb	r3, [r7, #11]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	72fb      	strb	r3, [r7, #11]
          break;
 800aeae:	e055      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00b      	beq.n	800aed4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	7c12      	ldrb	r2, [r2, #16]
 800aec8:	f107 0108 	add.w	r1, r7, #8
 800aecc:	4610      	mov	r0, r2
 800aece:	4798      	blx	r3
 800aed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aed2:	e043      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fa7d 	bl	800b3d6 <USBD_CtlError>
            err++;
 800aedc:	7afb      	ldrb	r3, [r7, #11]
 800aede:	3301      	adds	r3, #1
 800aee0:	72fb      	strb	r3, [r7, #11]
          break;
 800aee2:	e03b      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00b      	beq.n	800af08 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	7c12      	ldrb	r2, [r2, #16]
 800aefc:	f107 0108 	add.w	r1, r7, #8
 800af00:	4610      	mov	r0, r2
 800af02:	4798      	blx	r3
 800af04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af06:	e029      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fa63 	bl	800b3d6 <USBD_CtlError>
            err++;
 800af10:	7afb      	ldrb	r3, [r7, #11]
 800af12:	3301      	adds	r3, #1
 800af14:	72fb      	strb	r3, [r7, #11]
          break;
 800af16:	e021      	b.n	800af5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00b      	beq.n	800af3c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	7c12      	ldrb	r2, [r2, #16]
 800af30:	f107 0108 	add.w	r1, r7, #8
 800af34:	4610      	mov	r0, r2
 800af36:	4798      	blx	r3
 800af38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af3a:	e00f      	b.n	800af5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fa49 	bl	800b3d6 <USBD_CtlError>
            err++;
 800af44:	7afb      	ldrb	r3, [r7, #11]
 800af46:	3301      	adds	r3, #1
 800af48:	72fb      	strb	r3, [r7, #11]
          break;
 800af4a:	e007      	b.n	800af5c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa41 	bl	800b3d6 <USBD_CtlError>
          err++;
 800af54:	7afb      	ldrb	r3, [r7, #11]
 800af56:	3301      	adds	r3, #1
 800af58:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800af5a:	bf00      	nop
      }
      break;
 800af5c:	e037      	b.n	800afce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	7c1b      	ldrb	r3, [r3, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d109      	bne.n	800af7a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6e:	f107 0208 	add.w	r2, r7, #8
 800af72:	4610      	mov	r0, r2
 800af74:	4798      	blx	r3
 800af76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af78:	e029      	b.n	800afce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fa2a 	bl	800b3d6 <USBD_CtlError>
        err++;
 800af82:	7afb      	ldrb	r3, [r7, #11]
 800af84:	3301      	adds	r3, #1
 800af86:	72fb      	strb	r3, [r7, #11]
      break;
 800af88:	e021      	b.n	800afce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	7c1b      	ldrb	r3, [r3, #16]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d10d      	bne.n	800afae <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9a:	f107 0208 	add.w	r2, r7, #8
 800af9e:	4610      	mov	r0, r2
 800afa0:	4798      	blx	r3
 800afa2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3301      	adds	r3, #1
 800afa8:	2207      	movs	r2, #7
 800afaa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afac:	e00f      	b.n	800afce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fa10 	bl	800b3d6 <USBD_CtlError>
        err++;
 800afb6:	7afb      	ldrb	r3, [r7, #11]
 800afb8:	3301      	adds	r3, #1
 800afba:	72fb      	strb	r3, [r7, #11]
      break;
 800afbc:	e007      	b.n	800afce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fa08 	bl	800b3d6 <USBD_CtlError>
      err++;
 800afc6:	7afb      	ldrb	r3, [r7, #11]
 800afc8:	3301      	adds	r3, #1
 800afca:	72fb      	strb	r3, [r7, #11]
      break;
 800afcc:	bf00      	nop
  }

  if (err != 0U)
 800afce:	7afb      	ldrb	r3, [r7, #11]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d11e      	bne.n	800b012 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	88db      	ldrh	r3, [r3, #6]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d016      	beq.n	800b00a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800afdc:	893b      	ldrh	r3, [r7, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00e      	beq.n	800b000 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	88da      	ldrh	r2, [r3, #6]
 800afe6:	893b      	ldrh	r3, [r7, #8]
 800afe8:	4293      	cmp	r3, r2
 800afea:	bf28      	it	cs
 800afec:	4613      	movcs	r3, r2
 800afee:	b29b      	uxth	r3, r3
 800aff0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aff2:	893b      	ldrh	r3, [r7, #8]
 800aff4:	461a      	mov	r2, r3
 800aff6:	68f9      	ldr	r1, [r7, #12]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fa5d 	bl	800b4b8 <USBD_CtlSendData>
 800affe:	e009      	b.n	800b014 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f9e7 	bl	800b3d6 <USBD_CtlError>
 800b008:	e004      	b.n	800b014 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 faae 	bl	800b56c <USBD_CtlSendStatus>
 800b010:	e000      	b.n	800b014 <USBD_GetDescriptor+0x320>
    return;
 800b012:	bf00      	nop
  }
}
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop

0800b01c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	889b      	ldrh	r3, [r3, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d131      	bne.n	800b092 <USBD_SetAddress+0x76>
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	88db      	ldrh	r3, [r3, #6]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d12d      	bne.n	800b092 <USBD_SetAddress+0x76>
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	885b      	ldrh	r3, [r3, #2]
 800b03a:	2b7f      	cmp	r3, #127	; 0x7f
 800b03c:	d829      	bhi.n	800b092 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	885b      	ldrh	r3, [r3, #2]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b048:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b03      	cmp	r3, #3
 800b054:	d104      	bne.n	800b060 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f9bc 	bl	800b3d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b05e:	e01d      	b.n	800b09c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	7bfa      	ldrb	r2, [r7, #15]
 800b064:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b068:	7bfb      	ldrb	r3, [r7, #15]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 ff81 	bl	800bf74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fa7a 	bl	800b56c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b078:	7bfb      	ldrb	r3, [r7, #15]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d004      	beq.n	800b088 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2202      	movs	r2, #2
 800b082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b086:	e009      	b.n	800b09c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b090:	e004      	b.n	800b09c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f99e 	bl	800b3d6 <USBD_CtlError>
  }
}
 800b09a:	bf00      	nop
 800b09c:	bf00      	nop
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	885b      	ldrh	r3, [r3, #2]
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	4b4e      	ldr	r3, [pc, #312]	; (800b1f4 <USBD_SetConfig+0x150>)
 800b0ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0bc:	4b4d      	ldr	r3, [pc, #308]	; (800b1f4 <USBD_SetConfig+0x150>)
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d905      	bls.n	800b0d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f985 	bl	800b3d6 <USBD_CtlError>
    return USBD_FAIL;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e08c      	b.n	800b1ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d002      	beq.n	800b0e2 <USBD_SetConfig+0x3e>
 800b0dc:	2b03      	cmp	r3, #3
 800b0de:	d029      	beq.n	800b134 <USBD_SetConfig+0x90>
 800b0e0:	e075      	b.n	800b1ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0e2:	4b44      	ldr	r3, [pc, #272]	; (800b1f4 <USBD_SetConfig+0x150>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d020      	beq.n	800b12c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b0ea:	4b42      	ldr	r3, [pc, #264]	; (800b1f4 <USBD_SetConfig+0x150>)
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0f4:	4b3f      	ldr	r3, [pc, #252]	; (800b1f4 <USBD_SetConfig+0x150>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7ff f849 	bl	800a192 <USBD_SetClassConfig>
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d008      	beq.n	800b11c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f962 	bl	800b3d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2202      	movs	r2, #2
 800b116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b11a:	e065      	b.n	800b1e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fa25 	bl	800b56c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2203      	movs	r2, #3
 800b126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b12a:	e05d      	b.n	800b1e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fa1d 	bl	800b56c <USBD_CtlSendStatus>
      break;
 800b132:	e059      	b.n	800b1e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b134:	4b2f      	ldr	r3, [pc, #188]	; (800b1f4 <USBD_SetConfig+0x150>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d112      	bne.n	800b162 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2202      	movs	r2, #2
 800b140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b144:	4b2b      	ldr	r3, [pc, #172]	; (800b1f4 <USBD_SetConfig+0x150>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	461a      	mov	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b14e:	4b29      	ldr	r3, [pc, #164]	; (800b1f4 <USBD_SetConfig+0x150>)
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7ff f838 	bl	800a1ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fa06 	bl	800b56c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b160:	e042      	b.n	800b1e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b162:	4b24      	ldr	r3, [pc, #144]	; (800b1f4 <USBD_SetConfig+0x150>)
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	461a      	mov	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d02a      	beq.n	800b1c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	b2db      	uxtb	r3, r3
 800b176:	4619      	mov	r1, r3
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f7ff f826 	bl	800a1ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b17e:	4b1d      	ldr	r3, [pc, #116]	; (800b1f4 <USBD_SetConfig+0x150>)
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	461a      	mov	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b188:	4b1a      	ldr	r3, [pc, #104]	; (800b1f4 <USBD_SetConfig+0x150>)
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7fe ffff 	bl	800a192 <USBD_SetClassConfig>
 800b194:	4603      	mov	r3, r0
 800b196:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b198:	7bfb      	ldrb	r3, [r7, #15]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00f      	beq.n	800b1be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f918 	bl	800b3d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f7ff f80b 	bl	800a1ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1bc:	e014      	b.n	800b1e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f9d4 	bl	800b56c <USBD_CtlSendStatus>
      break;
 800b1c4:	e010      	b.n	800b1e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f9d0 	bl	800b56c <USBD_CtlSendStatus>
      break;
 800b1cc:	e00c      	b.n	800b1e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f900 	bl	800b3d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1d6:	4b07      	ldr	r3, [pc, #28]	; (800b1f4 <USBD_SetConfig+0x150>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f7fe fff4 	bl	800a1ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1e6:	bf00      	nop
  }

  return ret;
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	2000068c 	.word	0x2000068c

0800b1f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	88db      	ldrh	r3, [r3, #6]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d004      	beq.n	800b214 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b20a:	6839      	ldr	r1, [r7, #0]
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f8e2 	bl	800b3d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b212:	e023      	b.n	800b25c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	dc02      	bgt.n	800b226 <USBD_GetConfig+0x2e>
 800b220:	2b00      	cmp	r3, #0
 800b222:	dc03      	bgt.n	800b22c <USBD_GetConfig+0x34>
 800b224:	e015      	b.n	800b252 <USBD_GetConfig+0x5a>
 800b226:	2b03      	cmp	r3, #3
 800b228:	d00b      	beq.n	800b242 <USBD_GetConfig+0x4a>
 800b22a:	e012      	b.n	800b252 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3308      	adds	r3, #8
 800b236:	2201      	movs	r2, #1
 800b238:	4619      	mov	r1, r3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 f93c 	bl	800b4b8 <USBD_CtlSendData>
        break;
 800b240:	e00c      	b.n	800b25c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	3304      	adds	r3, #4
 800b246:	2201      	movs	r2, #1
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f934 	bl	800b4b8 <USBD_CtlSendData>
        break;
 800b250:	e004      	b.n	800b25c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f8be 	bl	800b3d6 <USBD_CtlError>
        break;
 800b25a:	bf00      	nop
}
 800b25c:	bf00      	nop
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b274:	b2db      	uxtb	r3, r3
 800b276:	3b01      	subs	r3, #1
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d81e      	bhi.n	800b2ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	88db      	ldrh	r3, [r3, #6]
 800b280:	2b02      	cmp	r3, #2
 800b282:	d004      	beq.n	800b28e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 f8a5 	bl	800b3d6 <USBD_CtlError>
        break;
 800b28c:	e01a      	b.n	800b2c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d005      	beq.n	800b2aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	f043 0202 	orr.w	r2, r3, #2
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	330c      	adds	r3, #12
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f900 	bl	800b4b8 <USBD_CtlSendData>
      break;
 800b2b8:	e004      	b.n	800b2c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b2ba:	6839      	ldr	r1, [r7, #0]
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f88a 	bl	800b3d6 <USBD_CtlError>
      break;
 800b2c2:	bf00      	nop
  }
}
 800b2c4:	bf00      	nop
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	885b      	ldrh	r3, [r3, #2]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d107      	bne.n	800b2ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f940 	bl	800b56c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b2ec:	e013      	b.n	800b316 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	885b      	ldrh	r3, [r3, #2]
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d10b      	bne.n	800b30e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	889b      	ldrh	r3, [r3, #4]
 800b2fa:	0a1b      	lsrs	r3, r3, #8
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f930 	bl	800b56c <USBD_CtlSendStatus>
}
 800b30c:	e003      	b.n	800b316 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f860 	bl	800b3d6 <USBD_CtlError>
}
 800b316:	bf00      	nop
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b082      	sub	sp, #8
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
 800b326:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	3b01      	subs	r3, #1
 800b332:	2b02      	cmp	r3, #2
 800b334:	d80b      	bhi.n	800b34e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	885b      	ldrh	r3, [r3, #2]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d10c      	bne.n	800b358 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f910 	bl	800b56c <USBD_CtlSendStatus>
      }
      break;
 800b34c:	e004      	b.n	800b358 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f840 	bl	800b3d6 <USBD_CtlError>
      break;
 800b356:	e000      	b.n	800b35a <USBD_ClrFeature+0x3c>
      break;
 800b358:	bf00      	nop
  }
}
 800b35a:	bf00      	nop
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b084      	sub	sp, #16
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	781a      	ldrb	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	3301      	adds	r3, #1
 800b37c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	781a      	ldrb	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3301      	adds	r3, #1
 800b38a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f7ff fa17 	bl	800a7c0 <SWAPBYTE>
 800b392:	4603      	mov	r3, r0
 800b394:	461a      	mov	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3301      	adds	r3, #1
 800b39e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f7ff fa0a 	bl	800a7c0 <SWAPBYTE>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f7ff f9fd 	bl	800a7c0 <SWAPBYTE>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	80da      	strh	r2, [r3, #6]
}
 800b3ce:	bf00      	nop
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b082      	sub	sp, #8
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3e0:	2180      	movs	r1, #128	; 0x80
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fd2c 	bl	800be40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fd28 	bl	800be40 <USBD_LL_StallEP>
}
 800b3f0:	bf00      	nop
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b404:	2300      	movs	r3, #0
 800b406:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d036      	beq.n	800b47c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b412:	6938      	ldr	r0, [r7, #16]
 800b414:	f000 f836 	bl	800b484 <USBD_GetLen>
 800b418:	4603      	mov	r3, r0
 800b41a:	3301      	adds	r3, #1
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	005b      	lsls	r3, r3, #1
 800b420:	b29a      	uxth	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b426:	7dfb      	ldrb	r3, [r7, #23]
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	4413      	add	r3, r2
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	7812      	ldrb	r2, [r2, #0]
 800b430:	701a      	strb	r2, [r3, #0]
  idx++;
 800b432:	7dfb      	ldrb	r3, [r7, #23]
 800b434:	3301      	adds	r3, #1
 800b436:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b438:	7dfb      	ldrb	r3, [r7, #23]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	4413      	add	r3, r2
 800b43e:	2203      	movs	r2, #3
 800b440:	701a      	strb	r2, [r3, #0]
  idx++;
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	3301      	adds	r3, #1
 800b446:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b448:	e013      	b.n	800b472 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	4413      	add	r3, r2
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	7812      	ldrb	r2, [r2, #0]
 800b454:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	3301      	adds	r3, #1
 800b45a:	613b      	str	r3, [r7, #16]
    idx++;
 800b45c:	7dfb      	ldrb	r3, [r7, #23]
 800b45e:	3301      	adds	r3, #1
 800b460:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b462:	7dfb      	ldrb	r3, [r7, #23]
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	4413      	add	r3, r2
 800b468:	2200      	movs	r2, #0
 800b46a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b46c:	7dfb      	ldrb	r3, [r7, #23]
 800b46e:	3301      	adds	r3, #1
 800b470:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1e7      	bne.n	800b44a <USBD_GetString+0x52>
 800b47a:	e000      	b.n	800b47e <USBD_GetString+0x86>
    return;
 800b47c:	bf00      	nop
  }
}
 800b47e:	3718      	adds	r7, #24
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b48c:	2300      	movs	r3, #0
 800b48e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b494:	e005      	b.n	800b4a2 <USBD_GetLen+0x1e>
  {
    len++;
 800b496:	7bfb      	ldrb	r3, [r7, #15]
 800b498:	3301      	adds	r3, #1
 800b49a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1f5      	bne.n	800b496 <USBD_GetLen+0x12>
  }

  return len;
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3714      	adds	r7, #20
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	2100      	movs	r1, #0
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f000 fd7e 	bl	800bfe0 <USBD_LL_Transmit>

  return USBD_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b084      	sub	sp, #16
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	60f8      	str	r0, [r7, #12]
 800b4f6:	60b9      	str	r1, [r7, #8]
 800b4f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	2100      	movs	r1, #0
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 fd6d 	bl	800bfe0 <USBD_LL_Transmit>

  return USBD_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2203      	movs	r2, #3
 800b520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	2100      	movs	r1, #0
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f000 fd88 	bl	800c050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b084      	sub	sp, #16
 800b54e:	af00      	add	r7, sp, #0
 800b550:	60f8      	str	r0, [r7, #12]
 800b552:	60b9      	str	r1, [r7, #8]
 800b554:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	2100      	movs	r1, #0
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f000 fd77 	bl	800c050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2204      	movs	r2, #4
 800b578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b57c:	2300      	movs	r3, #0
 800b57e:	2200      	movs	r2, #0
 800b580:	2100      	movs	r1, #0
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fd2c 	bl	800bfe0 <USBD_LL_Transmit>

  return USBD_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b082      	sub	sp, #8
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2205      	movs	r2, #5
 800b59e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fd51 	bl	800c050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3708      	adds	r7, #8
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	4912      	ldr	r1, [pc, #72]	; (800b608 <MX_USB_DEVICE_Init+0x50>)
 800b5c0:	4812      	ldr	r0, [pc, #72]	; (800b60c <MX_USB_DEVICE_Init+0x54>)
 800b5c2:	f7fe fd69 	bl	800a098 <USBD_Init>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b5cc:	f7f5 fe5e 	bl	800128c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b5d0:	490f      	ldr	r1, [pc, #60]	; (800b610 <MX_USB_DEVICE_Init+0x58>)
 800b5d2:	480e      	ldr	r0, [pc, #56]	; (800b60c <MX_USB_DEVICE_Init+0x54>)
 800b5d4:	f7fe fd90 	bl	800a0f8 <USBD_RegisterClass>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d001      	beq.n	800b5e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b5de:	f7f5 fe55 	bl	800128c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b5e2:	490c      	ldr	r1, [pc, #48]	; (800b614 <MX_USB_DEVICE_Init+0x5c>)
 800b5e4:	4809      	ldr	r0, [pc, #36]	; (800b60c <MX_USB_DEVICE_Init+0x54>)
 800b5e6:	f7fe fc87 	bl	8009ef8 <USBD_CDC_RegisterInterface>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b5f0:	f7f5 fe4c 	bl	800128c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b5f4:	4805      	ldr	r0, [pc, #20]	; (800b60c <MX_USB_DEVICE_Init+0x54>)
 800b5f6:	f7fe fdb5 	bl	800a164 <USBD_Start>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d001      	beq.n	800b604 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b600:	f7f5 fe44 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b604:	bf00      	nop
 800b606:	bd80      	pop	{r7, pc}
 800b608:	200000b0 	.word	0x200000b0
 800b60c:	20000690 	.word	0x20000690
 800b610:	2000001c 	.word	0x2000001c
 800b614:	2000009c 	.word	0x2000009c

0800b618 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b61c:	2200      	movs	r2, #0
 800b61e:	4905      	ldr	r1, [pc, #20]	; (800b634 <CDC_Init_FS+0x1c>)
 800b620:	4805      	ldr	r0, [pc, #20]	; (800b638 <CDC_Init_FS+0x20>)
 800b622:	f7fe fc83 	bl	8009f2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b626:	4905      	ldr	r1, [pc, #20]	; (800b63c <CDC_Init_FS+0x24>)
 800b628:	4803      	ldr	r0, [pc, #12]	; (800b638 <CDC_Init_FS+0x20>)
 800b62a:	f7fe fca1 	bl	8009f70 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b62e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b630:	4618      	mov	r0, r3
 800b632:	bd80      	pop	{r7, pc}
 800b634:	20000d70 	.word	0x20000d70
 800b638:	20000690 	.word	0x20000690
 800b63c:	20000970 	.word	0x20000970

0800b640 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b640:	b480      	push	{r7}
 800b642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b644:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b646:	4618      	mov	r0, r3
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	4603      	mov	r3, r0
 800b658:	6039      	str	r1, [r7, #0]
 800b65a:	71fb      	strb	r3, [r7, #7]
 800b65c:	4613      	mov	r3, r2
 800b65e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	2b23      	cmp	r3, #35	; 0x23
 800b664:	d85a      	bhi.n	800b71c <CDC_Control_FS+0xcc>
 800b666:	a201      	add	r2, pc, #4	; (adr r2, 800b66c <CDC_Control_FS+0x1c>)
 800b668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b66c:	0800b71d 	.word	0x0800b71d
 800b670:	0800b71d 	.word	0x0800b71d
 800b674:	0800b71d 	.word	0x0800b71d
 800b678:	0800b71d 	.word	0x0800b71d
 800b67c:	0800b71d 	.word	0x0800b71d
 800b680:	0800b71d 	.word	0x0800b71d
 800b684:	0800b71d 	.word	0x0800b71d
 800b688:	0800b71d 	.word	0x0800b71d
 800b68c:	0800b71d 	.word	0x0800b71d
 800b690:	0800b71d 	.word	0x0800b71d
 800b694:	0800b71d 	.word	0x0800b71d
 800b698:	0800b71d 	.word	0x0800b71d
 800b69c:	0800b71d 	.word	0x0800b71d
 800b6a0:	0800b71d 	.word	0x0800b71d
 800b6a4:	0800b71d 	.word	0x0800b71d
 800b6a8:	0800b71d 	.word	0x0800b71d
 800b6ac:	0800b71d 	.word	0x0800b71d
 800b6b0:	0800b71d 	.word	0x0800b71d
 800b6b4:	0800b71d 	.word	0x0800b71d
 800b6b8:	0800b71d 	.word	0x0800b71d
 800b6bc:	0800b71d 	.word	0x0800b71d
 800b6c0:	0800b71d 	.word	0x0800b71d
 800b6c4:	0800b71d 	.word	0x0800b71d
 800b6c8:	0800b71d 	.word	0x0800b71d
 800b6cc:	0800b71d 	.word	0x0800b71d
 800b6d0:	0800b71d 	.word	0x0800b71d
 800b6d4:	0800b71d 	.word	0x0800b71d
 800b6d8:	0800b71d 	.word	0x0800b71d
 800b6dc:	0800b71d 	.word	0x0800b71d
 800b6e0:	0800b71d 	.word	0x0800b71d
 800b6e4:	0800b71d 	.word	0x0800b71d
 800b6e8:	0800b71d 	.word	0x0800b71d
 800b6ec:	0800b71d 	.word	0x0800b71d
 800b6f0:	0800b71d 	.word	0x0800b71d
 800b6f4:	0800b6fd 	.word	0x0800b6fd
 800b6f8:	0800b71d 	.word	0x0800b71d
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
    	USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	60fb      	str	r3, [r7, #12]
    	if ((req->wValue & 0x0001) != 0){
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	885b      	ldrh	r3, [r3, #2]
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d003      	beq.n	800b714 <CDC_Control_FS+0xc4>
    		USB_COM_Port_open = 1;
 800b70c:	4b07      	ldr	r3, [pc, #28]	; (800b72c <CDC_Control_FS+0xdc>)
 800b70e:	2201      	movs	r2, #1
 800b710:	701a      	strb	r2, [r3, #0]
    	}
    	else {
    		USB_COM_Port_open = 0;
    	}
    break;
 800b712:	e004      	b.n	800b71e <CDC_Control_FS+0xce>
    		USB_COM_Port_open = 0;
 800b714:	4b05      	ldr	r3, [pc, #20]	; (800b72c <CDC_Control_FS+0xdc>)
 800b716:	2200      	movs	r2, #0
 800b718:	701a      	strb	r2, [r3, #0]
    break;
 800b71a:	e000      	b.n	800b71e <CDC_Control_FS+0xce>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b71c:	bf00      	nop
  }

  return (USBD_OK);
 800b71e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b720:	4618      	mov	r0, r3
 800b722:	3714      	adds	r7, #20
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	2000096c 	.word	0x2000096c

0800b730 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b73a:	6879      	ldr	r1, [r7, #4]
 800b73c:	4808      	ldr	r0, [pc, #32]	; (800b760 <CDC_Receive_FS+0x30>)
 800b73e:	f7fe fc17 	bl	8009f70 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b742:	4807      	ldr	r0, [pc, #28]	; (800b760 <CDC_Receive_FS+0x30>)
 800b744:	f7fe fc72 	bl	800a02c <USBD_CDC_ReceivePacket>
  CDC_FS_RxDataReady_Callback(Buf, *Len); // User implemented callback
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7f4 fecf 	bl	80004f4 <CDC_FS_RxDataReady_Callback>
  return (USBD_OK);
 800b756:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20000690 	.word	0x20000690

0800b764 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	460b      	mov	r3, r1
 800b76e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b770:	2300      	movs	r3, #0
 800b772:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b774:	4b0d      	ldr	r3, [pc, #52]	; (800b7ac <CDC_Transmit_FS+0x48>)
 800b776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b77a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b786:	2301      	movs	r3, #1
 800b788:	e00b      	b.n	800b7a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b78a:	887b      	ldrh	r3, [r7, #2]
 800b78c:	461a      	mov	r2, r3
 800b78e:	6879      	ldr	r1, [r7, #4]
 800b790:	4806      	ldr	r0, [pc, #24]	; (800b7ac <CDC_Transmit_FS+0x48>)
 800b792:	f7fe fbcb 	bl	8009f2c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b796:	4805      	ldr	r0, [pc, #20]	; (800b7ac <CDC_Transmit_FS+0x48>)
 800b798:	f7fe fc08 	bl	8009fac <USBD_CDC_TransmitPacket>
 800b79c:	4603      	mov	r3, r0
 800b79e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	20000690 	.word	0x20000690

0800b7b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b7c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	371c      	adds	r7, #28
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
	...

0800b7d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	6039      	str	r1, [r7, #0]
 800b7de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2212      	movs	r2, #18
 800b7e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b7e6:	4b03      	ldr	r3, [pc, #12]	; (800b7f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	200000d0 	.word	0x200000d0

0800b7f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	6039      	str	r1, [r7, #0]
 800b802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	2204      	movs	r2, #4
 800b808:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b80a:	4b03      	ldr	r3, [pc, #12]	; (800b818 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr
 800b818:	200000f0 	.word	0x200000f0

0800b81c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	4603      	mov	r3, r0
 800b824:	6039      	str	r1, [r7, #0]
 800b826:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b828:	79fb      	ldrb	r3, [r7, #7]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d105      	bne.n	800b83a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	4907      	ldr	r1, [pc, #28]	; (800b850 <USBD_FS_ProductStrDescriptor+0x34>)
 800b832:	4808      	ldr	r0, [pc, #32]	; (800b854 <USBD_FS_ProductStrDescriptor+0x38>)
 800b834:	f7ff fde0 	bl	800b3f8 <USBD_GetString>
 800b838:	e004      	b.n	800b844 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	4904      	ldr	r1, [pc, #16]	; (800b850 <USBD_FS_ProductStrDescriptor+0x34>)
 800b83e:	4805      	ldr	r0, [pc, #20]	; (800b854 <USBD_FS_ProductStrDescriptor+0x38>)
 800b840:	f7ff fdda 	bl	800b3f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b844:	4b02      	ldr	r3, [pc, #8]	; (800b850 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b846:	4618      	mov	r0, r3
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	20001170 	.word	0x20001170
 800b854:	0800c904 	.word	0x0800c904

0800b858 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	4603      	mov	r3, r0
 800b860:	6039      	str	r1, [r7, #0]
 800b862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b864:	683a      	ldr	r2, [r7, #0]
 800b866:	4904      	ldr	r1, [pc, #16]	; (800b878 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b868:	4804      	ldr	r0, [pc, #16]	; (800b87c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b86a:	f7ff fdc5 	bl	800b3f8 <USBD_GetString>
  return USBD_StrDesc;
 800b86e:	4b02      	ldr	r3, [pc, #8]	; (800b878 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b870:	4618      	mov	r0, r3
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	20001170 	.word	0x20001170
 800b87c:	0800c91c 	.word	0x0800c91c

0800b880 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	4603      	mov	r3, r0
 800b888:	6039      	str	r1, [r7, #0]
 800b88a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	221a      	movs	r2, #26
 800b890:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b892:	f000 f855 	bl	800b940 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b896:	4b02      	ldr	r3, [pc, #8]	; (800b8a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	200000f4 	.word	0x200000f4

0800b8a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	6039      	str	r1, [r7, #0]
 800b8ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b8b0:	79fb      	ldrb	r3, [r7, #7]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d105      	bne.n	800b8c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	4907      	ldr	r1, [pc, #28]	; (800b8d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b8ba:	4808      	ldr	r0, [pc, #32]	; (800b8dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b8bc:	f7ff fd9c 	bl	800b3f8 <USBD_GetString>
 800b8c0:	e004      	b.n	800b8cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	4904      	ldr	r1, [pc, #16]	; (800b8d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b8c6:	4805      	ldr	r0, [pc, #20]	; (800b8dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b8c8:	f7ff fd96 	bl	800b3f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8cc:	4b02      	ldr	r3, [pc, #8]	; (800b8d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20001170 	.word	0x20001170
 800b8dc:	0800c930 	.word	0x0800c930

0800b8e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	6039      	str	r1, [r7, #0]
 800b8ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8ec:	79fb      	ldrb	r3, [r7, #7]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d105      	bne.n	800b8fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	4907      	ldr	r1, [pc, #28]	; (800b914 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8f6:	4808      	ldr	r0, [pc, #32]	; (800b918 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8f8:	f7ff fd7e 	bl	800b3f8 <USBD_GetString>
 800b8fc:	e004      	b.n	800b908 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	4904      	ldr	r1, [pc, #16]	; (800b914 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b902:	4805      	ldr	r0, [pc, #20]	; (800b918 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b904:	f7ff fd78 	bl	800b3f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b908:	4b02      	ldr	r3, [pc, #8]	; (800b914 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	20001170 	.word	0x20001170
 800b918:	0800c93c 	.word	0x0800c93c

0800b91c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	4603      	mov	r3, r0
 800b924:	6039      	str	r1, [r7, #0]
 800b926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	220c      	movs	r2, #12
 800b92c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b92e:	4b03      	ldr	r3, [pc, #12]	; (800b93c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b930:	4618      	mov	r0, r3
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	200000e4 	.word	0x200000e4

0800b940 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b946:	4b0f      	ldr	r3, [pc, #60]	; (800b984 <Get_SerialNum+0x44>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b94c:	4b0e      	ldr	r3, [pc, #56]	; (800b988 <Get_SerialNum+0x48>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b952:	4b0e      	ldr	r3, [pc, #56]	; (800b98c <Get_SerialNum+0x4c>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4413      	add	r3, r2
 800b95e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d009      	beq.n	800b97a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b966:	2208      	movs	r2, #8
 800b968:	4909      	ldr	r1, [pc, #36]	; (800b990 <Get_SerialNum+0x50>)
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f000 f814 	bl	800b998 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b970:	2204      	movs	r2, #4
 800b972:	4908      	ldr	r1, [pc, #32]	; (800b994 <Get_SerialNum+0x54>)
 800b974:	68b8      	ldr	r0, [r7, #8]
 800b976:	f000 f80f 	bl	800b998 <IntToUnicode>
  }
}
 800b97a:	bf00      	nop
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	1fff7590 	.word	0x1fff7590
 800b988:	1fff7594 	.word	0x1fff7594
 800b98c:	1fff7598 	.word	0x1fff7598
 800b990:	200000f6 	.word	0x200000f6
 800b994:	20000106 	.word	0x20000106

0800b998 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b998:	b480      	push	{r7}
 800b99a:	b087      	sub	sp, #28
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	75fb      	strb	r3, [r7, #23]
 800b9ae:	e027      	b.n	800ba00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	0f1b      	lsrs	r3, r3, #28
 800b9b4:	2b09      	cmp	r3, #9
 800b9b6:	d80b      	bhi.n	800b9d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	0f1b      	lsrs	r3, r3, #28
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	7dfb      	ldrb	r3, [r7, #23]
 800b9c0:	005b      	lsls	r3, r3, #1
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	440b      	add	r3, r1
 800b9c8:	3230      	adds	r2, #48	; 0x30
 800b9ca:	b2d2      	uxtb	r2, r2
 800b9cc:	701a      	strb	r2, [r3, #0]
 800b9ce:	e00a      	b.n	800b9e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	0f1b      	lsrs	r3, r3, #28
 800b9d4:	b2da      	uxtb	r2, r3
 800b9d6:	7dfb      	ldrb	r3, [r7, #23]
 800b9d8:	005b      	lsls	r3, r3, #1
 800b9da:	4619      	mov	r1, r3
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	440b      	add	r3, r1
 800b9e0:	3237      	adds	r2, #55	; 0x37
 800b9e2:	b2d2      	uxtb	r2, r2
 800b9e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	011b      	lsls	r3, r3, #4
 800b9ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	75fb      	strb	r3, [r7, #23]
 800ba00:	7dfa      	ldrb	r2, [r7, #23]
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d3d3      	bcc.n	800b9b0 <IntToUnicode+0x18>
  }
}
 800ba08:	bf00      	nop
 800ba0a:	bf00      	nop
 800ba0c:	371c      	adds	r7, #28
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
	...

0800ba18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b096      	sub	sp, #88	; 0x58
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ba24:	2200      	movs	r2, #0
 800ba26:	601a      	str	r2, [r3, #0]
 800ba28:	605a      	str	r2, [r3, #4]
 800ba2a:	609a      	str	r2, [r3, #8]
 800ba2c:	60da      	str	r2, [r3, #12]
 800ba2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ba30:	f107 0310 	add.w	r3, r7, #16
 800ba34:	2234      	movs	r2, #52	; 0x34
 800ba36:	2100      	movs	r1, #0
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f000 fba9 	bl	800c190 <memset>
  if(pcdHandle->Instance==USB)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a24      	ldr	r2, [pc, #144]	; (800bad4 <HAL_PCD_MspInit+0xbc>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d141      	bne.n	800bacc <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ba48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba4c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800ba4e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800ba52:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ba54:	f107 0310 	add.w	r3, r7, #16
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7f9 fd05 	bl	8005468 <HAL_RCCEx_PeriphCLKConfig>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d001      	beq.n	800ba68 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ba64:	f7f5 fc12 	bl	800128c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba68:	4b1b      	ldr	r3, [pc, #108]	; (800bad8 <HAL_PCD_MspInit+0xc0>)
 800ba6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba6c:	4a1a      	ldr	r2, [pc, #104]	; (800bad8 <HAL_PCD_MspInit+0xc0>)
 800ba6e:	f043 0301 	orr.w	r3, r3, #1
 800ba72:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba74:	4b18      	ldr	r3, [pc, #96]	; (800bad8 <HAL_PCD_MspInit+0xc0>)
 800ba76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	60fb      	str	r3, [r7, #12]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ba80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ba84:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba86:	2302      	movs	r3, #2
 800ba88:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba8e:	2303      	movs	r3, #3
 800ba90:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800ba92:	230a      	movs	r3, #10
 800ba94:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800baa0:	f7f6 fee0 	bl	8002864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800baa4:	4b0c      	ldr	r3, [pc, #48]	; (800bad8 <HAL_PCD_MspInit+0xc0>)
 800baa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baa8:	4a0b      	ldr	r2, [pc, #44]	; (800bad8 <HAL_PCD_MspInit+0xc0>)
 800baaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800baae:	6593      	str	r3, [r2, #88]	; 0x58
 800bab0:	4b09      	ldr	r3, [pc, #36]	; (800bad8 <HAL_PCD_MspInit+0xc0>)
 800bab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bab4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bab8:	60bb      	str	r3, [r7, #8]
 800baba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800babc:	2200      	movs	r2, #0
 800babe:	2100      	movs	r1, #0
 800bac0:	2043      	movs	r0, #67	; 0x43
 800bac2:	f7f6 fe98 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800bac6:	2043      	movs	r0, #67	; 0x43
 800bac8:	f7f6 feb1 	bl	800282e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bacc:	bf00      	nop
 800bace:	3758      	adds	r7, #88	; 0x58
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	40006800 	.word	0x40006800
 800bad8:	40021000 	.word	0x40021000

0800badc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800baf0:	4619      	mov	r1, r3
 800baf2:	4610      	mov	r0, r2
 800baf4:	f7fe fb83 	bl	800a1fe <USBD_LL_SetupStage>
}
 800baf8:	bf00      	nop
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800bb12:	78fa      	ldrb	r2, [r7, #3]
 800bb14:	6879      	ldr	r1, [r7, #4]
 800bb16:	4613      	mov	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	00db      	lsls	r3, r3, #3
 800bb1e:	440b      	add	r3, r1
 800bb20:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	78fb      	ldrb	r3, [r7, #3]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	f7fe fbbd 	bl	800a2a8 <USBD_LL_DataOutStage>
}
 800bb2e:	bf00      	nop
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b082      	sub	sp, #8
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
 800bb3e:	460b      	mov	r3, r1
 800bb40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800bb48:	78fa      	ldrb	r2, [r7, #3]
 800bb4a:	6879      	ldr	r1, [r7, #4]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4413      	add	r3, r2
 800bb52:	00db      	lsls	r3, r3, #3
 800bb54:	440b      	add	r3, r1
 800bb56:	333c      	adds	r3, #60	; 0x3c
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	78fb      	ldrb	r3, [r7, #3]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	f7fe fc56 	bl	800a40e <USBD_LL_DataInStage>
}
 800bb62:	bf00      	nop
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b082      	sub	sp, #8
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7fe fd90 	bl	800a69e <USBD_LL_SOF>
}
 800bb7e:	bf00      	nop
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b084      	sub	sp, #16
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d001      	beq.n	800bb9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bb9a:	f7f5 fb77 	bl	800128c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bba4:	7bfa      	ldrb	r2, [r7, #15]
 800bba6:	4611      	mov	r1, r2
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7fe fd34 	bl	800a616 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fe fcdc 	bl	800a572 <USBD_LL_Reset>
}
 800bbba:	bf00      	nop
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
	...

0800bbc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fe fd2f 	bl	800a636 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d005      	beq.n	800bbec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbe0:	4b04      	ldr	r3, [pc, #16]	; (800bbf4 <HAL_PCD_SuspendCallback+0x30>)
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	4a03      	ldr	r2, [pc, #12]	; (800bbf4 <HAL_PCD_SuspendCallback+0x30>)
 800bbe6:	f043 0306 	orr.w	r3, r3, #6
 800bbea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	e000ed00 	.word	0xe000ed00

0800bbf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	699b      	ldr	r3, [r3, #24]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d007      	beq.n	800bc18 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc08:	4b08      	ldr	r3, [pc, #32]	; (800bc2c <HAL_PCD_ResumeCallback+0x34>)
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	4a07      	ldr	r2, [pc, #28]	; (800bc2c <HAL_PCD_ResumeCallback+0x34>)
 800bc0e:	f023 0306 	bic.w	r3, r3, #6
 800bc12:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bc14:	f000 fab6 	bl	800c184 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe fd25 	bl	800a66e <USBD_LL_Resume>
}
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	e000ed00 	.word	0xe000ed00

0800bc30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800bc38:	f7f8 fd80 	bl	800473c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bc3c:	4a2b      	ldr	r2, [pc, #172]	; (800bcec <USBD_LL_Init+0xbc>)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a29      	ldr	r2, [pc, #164]	; (800bcec <USBD_LL_Init+0xbc>)
 800bc48:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800bc4c:	4b27      	ldr	r3, [pc, #156]	; (800bcec <USBD_LL_Init+0xbc>)
 800bc4e:	4a28      	ldr	r2, [pc, #160]	; (800bcf0 <USBD_LL_Init+0xc0>)
 800bc50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc52:	4b26      	ldr	r3, [pc, #152]	; (800bcec <USBD_LL_Init+0xbc>)
 800bc54:	2208      	movs	r2, #8
 800bc56:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc58:	4b24      	ldr	r3, [pc, #144]	; (800bcec <USBD_LL_Init+0xbc>)
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc5e:	4b23      	ldr	r3, [pc, #140]	; (800bcec <USBD_LL_Init+0xbc>)
 800bc60:	2202      	movs	r2, #2
 800bc62:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bc64:	4b21      	ldr	r3, [pc, #132]	; (800bcec <USBD_LL_Init+0xbc>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc6a:	4b20      	ldr	r3, [pc, #128]	; (800bcec <USBD_LL_Init+0xbc>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bc70:	4b1e      	ldr	r3, [pc, #120]	; (800bcec <USBD_LL_Init+0xbc>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bc76:	4b1d      	ldr	r3, [pc, #116]	; (800bcec <USBD_LL_Init+0xbc>)
 800bc78:	2200      	movs	r2, #0
 800bc7a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bc7c:	481b      	ldr	r0, [pc, #108]	; (800bcec <USBD_LL_Init+0xbc>)
 800bc7e:	f7f6 ff7b 	bl	8002b78 <HAL_PCD_Init>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800bc88:	f7f5 fb00 	bl	800128c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bc92:	2318      	movs	r3, #24
 800bc94:	2200      	movs	r2, #0
 800bc96:	2100      	movs	r1, #0
 800bc98:	f7f8 fc7f 	bl	800459a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bca2:	2358      	movs	r3, #88	; 0x58
 800bca4:	2200      	movs	r2, #0
 800bca6:	2180      	movs	r1, #128	; 0x80
 800bca8:	f7f8 fc77 	bl	800459a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bcb2:	23c0      	movs	r3, #192	; 0xc0
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	2181      	movs	r1, #129	; 0x81
 800bcb8:	f7f8 fc6f 	bl	800459a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bcc2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	2101      	movs	r1, #1
 800bcca:	f7f8 fc66 	bl	800459a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bcd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcd8:	2200      	movs	r2, #0
 800bcda:	2182      	movs	r1, #130	; 0x82
 800bcdc:	f7f8 fc5d 	bl	800459a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	20001370 	.word	0x20001370
 800bcf0:	40006800 	.word	0x40006800

0800bcf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7f7 f83a 	bl	8002d84 <HAL_PCD_Start>
 800bd10:	4603      	mov	r3, r0
 800bd12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd14:	7bbb      	ldrb	r3, [r7, #14]
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d816      	bhi.n	800bd48 <USBD_LL_Start+0x54>
 800bd1a:	a201      	add	r2, pc, #4	; (adr r2, 800bd20 <USBD_LL_Start+0x2c>)
 800bd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd20:	0800bd31 	.word	0x0800bd31
 800bd24:	0800bd37 	.word	0x0800bd37
 800bd28:	0800bd3d 	.word	0x0800bd3d
 800bd2c:	0800bd43 	.word	0x0800bd43
    case HAL_OK :
      usb_status = USBD_OK;
 800bd30:	2300      	movs	r3, #0
 800bd32:	73fb      	strb	r3, [r7, #15]
    break;
 800bd34:	e00b      	b.n	800bd4e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd36:	2303      	movs	r3, #3
 800bd38:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3a:	e008      	b.n	800bd4e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd40:	e005      	b.n	800bd4e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd42:	2303      	movs	r3, #3
 800bd44:	73fb      	strb	r3, [r7, #15]
    break;
 800bd46:	e002      	b.n	800bd4e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bd48:	2303      	movs	r3, #3
 800bd4a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd4c:	bf00      	nop
  }
  return usb_status;
 800bd4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	4608      	mov	r0, r1
 800bd62:	4611      	mov	r1, r2
 800bd64:	461a      	mov	r2, r3
 800bd66:	4603      	mov	r3, r0
 800bd68:	70fb      	strb	r3, [r7, #3]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	70bb      	strb	r3, [r7, #2]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd76:	2300      	movs	r3, #0
 800bd78:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bd80:	78bb      	ldrb	r3, [r7, #2]
 800bd82:	883a      	ldrh	r2, [r7, #0]
 800bd84:	78f9      	ldrb	r1, [r7, #3]
 800bd86:	f7f7 f96b 	bl	8003060 <HAL_PCD_EP_Open>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd8e:	7bbb      	ldrb	r3, [r7, #14]
 800bd90:	2b03      	cmp	r3, #3
 800bd92:	d817      	bhi.n	800bdc4 <USBD_LL_OpenEP+0x6c>
 800bd94:	a201      	add	r2, pc, #4	; (adr r2, 800bd9c <USBD_LL_OpenEP+0x44>)
 800bd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd9a:	bf00      	nop
 800bd9c:	0800bdad 	.word	0x0800bdad
 800bda0:	0800bdb3 	.word	0x0800bdb3
 800bda4:	0800bdb9 	.word	0x0800bdb9
 800bda8:	0800bdbf 	.word	0x0800bdbf
    case HAL_OK :
      usb_status = USBD_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb0:	e00b      	b.n	800bdca <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb6:	e008      	b.n	800bdca <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	73fb      	strb	r3, [r7, #15]
    break;
 800bdbc:	e005      	b.n	800bdca <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdbe:	2303      	movs	r3, #3
 800bdc0:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc2:	e002      	b.n	800bdca <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc8:	bf00      	nop
  }
  return usb_status;
 800bdca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	460b      	mov	r3, r1
 800bdde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bde0:	2300      	movs	r3, #0
 800bde2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdee:	78fa      	ldrb	r2, [r7, #3]
 800bdf0:	4611      	mov	r1, r2
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7f7 f991 	bl	800311a <HAL_PCD_EP_Close>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bdfc:	7bbb      	ldrb	r3, [r7, #14]
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d816      	bhi.n	800be30 <USBD_LL_CloseEP+0x5c>
 800be02:	a201      	add	r2, pc, #4	; (adr r2, 800be08 <USBD_LL_CloseEP+0x34>)
 800be04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be08:	0800be19 	.word	0x0800be19
 800be0c:	0800be1f 	.word	0x0800be1f
 800be10:	0800be25 	.word	0x0800be25
 800be14:	0800be2b 	.word	0x0800be2b
    case HAL_OK :
      usb_status = USBD_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
    break;
 800be1c:	e00b      	b.n	800be36 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be1e:	2303      	movs	r3, #3
 800be20:	73fb      	strb	r3, [r7, #15]
    break;
 800be22:	e008      	b.n	800be36 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be24:	2301      	movs	r3, #1
 800be26:	73fb      	strb	r3, [r7, #15]
    break;
 800be28:	e005      	b.n	800be36 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be2a:	2303      	movs	r3, #3
 800be2c:	73fb      	strb	r3, [r7, #15]
    break;
 800be2e:	e002      	b.n	800be36 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800be30:	2303      	movs	r3, #3
 800be32:	73fb      	strb	r3, [r7, #15]
    break;
 800be34:	bf00      	nop
  }
  return usb_status;
 800be36:	7bfb      	ldrb	r3, [r7, #15]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	460b      	mov	r3, r1
 800be4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be4c:	2300      	movs	r3, #0
 800be4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be50:	2300      	movs	r3, #0
 800be52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be5a:	78fa      	ldrb	r2, [r7, #3]
 800be5c:	4611      	mov	r1, r2
 800be5e:	4618      	mov	r0, r3
 800be60:	f7f7 fa23 	bl	80032aa <HAL_PCD_EP_SetStall>
 800be64:	4603      	mov	r3, r0
 800be66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be68:	7bbb      	ldrb	r3, [r7, #14]
 800be6a:	2b03      	cmp	r3, #3
 800be6c:	d816      	bhi.n	800be9c <USBD_LL_StallEP+0x5c>
 800be6e:	a201      	add	r2, pc, #4	; (adr r2, 800be74 <USBD_LL_StallEP+0x34>)
 800be70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be74:	0800be85 	.word	0x0800be85
 800be78:	0800be8b 	.word	0x0800be8b
 800be7c:	0800be91 	.word	0x0800be91
 800be80:	0800be97 	.word	0x0800be97
    case HAL_OK :
      usb_status = USBD_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	73fb      	strb	r3, [r7, #15]
    break;
 800be88:	e00b      	b.n	800bea2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be8a:	2303      	movs	r3, #3
 800be8c:	73fb      	strb	r3, [r7, #15]
    break;
 800be8e:	e008      	b.n	800bea2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be90:	2301      	movs	r3, #1
 800be92:	73fb      	strb	r3, [r7, #15]
    break;
 800be94:	e005      	b.n	800bea2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be96:	2303      	movs	r3, #3
 800be98:	73fb      	strb	r3, [r7, #15]
    break;
 800be9a:	e002      	b.n	800bea2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800be9c:	2303      	movs	r3, #3
 800be9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bea0:	bf00      	nop
  }
  return usb_status;
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	460b      	mov	r3, r1
 800beb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beb8:	2300      	movs	r3, #0
 800beba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bebc:	2300      	movs	r3, #0
 800bebe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bec6:	78fa      	ldrb	r2, [r7, #3]
 800bec8:	4611      	mov	r1, r2
 800beca:	4618      	mov	r0, r3
 800becc:	f7f7 fa4d 	bl	800336a <HAL_PCD_EP_ClrStall>
 800bed0:	4603      	mov	r3, r0
 800bed2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bed4:	7bbb      	ldrb	r3, [r7, #14]
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	d816      	bhi.n	800bf08 <USBD_LL_ClearStallEP+0x5c>
 800beda:	a201      	add	r2, pc, #4	; (adr r2, 800bee0 <USBD_LL_ClearStallEP+0x34>)
 800bedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee0:	0800bef1 	.word	0x0800bef1
 800bee4:	0800bef7 	.word	0x0800bef7
 800bee8:	0800befd 	.word	0x0800befd
 800beec:	0800bf03 	.word	0x0800bf03
    case HAL_OK :
      usb_status = USBD_OK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	73fb      	strb	r3, [r7, #15]
    break;
 800bef4:	e00b      	b.n	800bf0e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bef6:	2303      	movs	r3, #3
 800bef8:	73fb      	strb	r3, [r7, #15]
    break;
 800befa:	e008      	b.n	800bf0e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800befc:	2301      	movs	r3, #1
 800befe:	73fb      	strb	r3, [r7, #15]
    break;
 800bf00:	e005      	b.n	800bf0e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf02:	2303      	movs	r3, #3
 800bf04:	73fb      	strb	r3, [r7, #15]
    break;
 800bf06:	e002      	b.n	800bf0e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bf08:	2303      	movs	r3, #3
 800bf0a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf0c:	bf00      	nop
  }
  return usb_status;
 800bf0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	460b      	mov	r3, r1
 800bf22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	da0c      	bge.n	800bf4e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf34:	78fb      	ldrb	r3, [r7, #3]
 800bf36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf3a:	68f9      	ldr	r1, [r7, #12]
 800bf3c:	1c5a      	adds	r2, r3, #1
 800bf3e:	4613      	mov	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4413      	add	r3, r2
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	440b      	add	r3, r1
 800bf48:	3302      	adds	r3, #2
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	e00b      	b.n	800bf66 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf4e:	78fb      	ldrb	r3, [r7, #3]
 800bf50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf54:	68f9      	ldr	r1, [r7, #12]
 800bf56:	4613      	mov	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4413      	add	r3, r2
 800bf5c:	00db      	lsls	r3, r3, #3
 800bf5e:	440b      	add	r3, r1
 800bf60:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bf64:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3714      	adds	r7, #20
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
	...

0800bf74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf80:	2300      	movs	r3, #0
 800bf82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf84:	2300      	movs	r3, #0
 800bf86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf8e:	78fa      	ldrb	r2, [r7, #3]
 800bf90:	4611      	mov	r1, r2
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7f7 f83f 	bl	8003016 <HAL_PCD_SetAddress>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bf9c:	7bbb      	ldrb	r3, [r7, #14]
 800bf9e:	2b03      	cmp	r3, #3
 800bfa0:	d816      	bhi.n	800bfd0 <USBD_LL_SetUSBAddress+0x5c>
 800bfa2:	a201      	add	r2, pc, #4	; (adr r2, 800bfa8 <USBD_LL_SetUSBAddress+0x34>)
 800bfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa8:	0800bfb9 	.word	0x0800bfb9
 800bfac:	0800bfbf 	.word	0x0800bfbf
 800bfb0:	0800bfc5 	.word	0x0800bfc5
 800bfb4:	0800bfcb 	.word	0x0800bfcb
    case HAL_OK :
      usb_status = USBD_OK;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	73fb      	strb	r3, [r7, #15]
    break;
 800bfbc:	e00b      	b.n	800bfd6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	73fb      	strb	r3, [r7, #15]
    break;
 800bfc2:	e008      	b.n	800bfd6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfc8:	e005      	b.n	800bfd6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfca:	2303      	movs	r3, #3
 800bfcc:	73fb      	strb	r3, [r7, #15]
    break;
 800bfce:	e002      	b.n	800bfd6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd4:	bf00      	nop
  }
  return usb_status;
 800bfd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3710      	adds	r7, #16
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	607a      	str	r2, [r7, #4]
 800bfea:	603b      	str	r3, [r7, #0]
 800bfec:	460b      	mov	r3, r1
 800bfee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bffe:	7af9      	ldrb	r1, [r7, #11]
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	f7f7 f91a 	bl	800323c <HAL_PCD_EP_Transmit>
 800c008:	4603      	mov	r3, r0
 800c00a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c00c:	7dbb      	ldrb	r3, [r7, #22]
 800c00e:	2b03      	cmp	r3, #3
 800c010:	d816      	bhi.n	800c040 <USBD_LL_Transmit+0x60>
 800c012:	a201      	add	r2, pc, #4	; (adr r2, 800c018 <USBD_LL_Transmit+0x38>)
 800c014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c018:	0800c029 	.word	0x0800c029
 800c01c:	0800c02f 	.word	0x0800c02f
 800c020:	0800c035 	.word	0x0800c035
 800c024:	0800c03b 	.word	0x0800c03b
    case HAL_OK :
      usb_status = USBD_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	75fb      	strb	r3, [r7, #23]
    break;
 800c02c:	e00b      	b.n	800c046 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c02e:	2303      	movs	r3, #3
 800c030:	75fb      	strb	r3, [r7, #23]
    break;
 800c032:	e008      	b.n	800c046 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c034:	2301      	movs	r3, #1
 800c036:	75fb      	strb	r3, [r7, #23]
    break;
 800c038:	e005      	b.n	800c046 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c03a:	2303      	movs	r3, #3
 800c03c:	75fb      	strb	r3, [r7, #23]
    break;
 800c03e:	e002      	b.n	800c046 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c040:	2303      	movs	r3, #3
 800c042:	75fb      	strb	r3, [r7, #23]
    break;
 800c044:	bf00      	nop
  }
  return usb_status;
 800c046:	7dfb      	ldrb	r3, [r7, #23]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3718      	adds	r7, #24
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	607a      	str	r2, [r7, #4]
 800c05a:	603b      	str	r3, [r7, #0]
 800c05c:	460b      	mov	r3, r1
 800c05e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c060:	2300      	movs	r3, #0
 800c062:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c064:	2300      	movs	r3, #0
 800c066:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c06e:	7af9      	ldrb	r1, [r7, #11]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	f7f7 f899 	bl	80031aa <HAL_PCD_EP_Receive>
 800c078:	4603      	mov	r3, r0
 800c07a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c07c:	7dbb      	ldrb	r3, [r7, #22]
 800c07e:	2b03      	cmp	r3, #3
 800c080:	d816      	bhi.n	800c0b0 <USBD_LL_PrepareReceive+0x60>
 800c082:	a201      	add	r2, pc, #4	; (adr r2, 800c088 <USBD_LL_PrepareReceive+0x38>)
 800c084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c088:	0800c099 	.word	0x0800c099
 800c08c:	0800c09f 	.word	0x0800c09f
 800c090:	0800c0a5 	.word	0x0800c0a5
 800c094:	0800c0ab 	.word	0x0800c0ab
    case HAL_OK :
      usb_status = USBD_OK;
 800c098:	2300      	movs	r3, #0
 800c09a:	75fb      	strb	r3, [r7, #23]
    break;
 800c09c:	e00b      	b.n	800c0b6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	75fb      	strb	r3, [r7, #23]
    break;
 800c0a2:	e008      	b.n	800c0b6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	75fb      	strb	r3, [r7, #23]
    break;
 800c0a8:	e005      	b.n	800c0b6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	75fb      	strb	r3, [r7, #23]
    break;
 800c0ae:	e002      	b.n	800c0b6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	75fb      	strb	r3, [r7, #23]
    break;
 800c0b4:	bf00      	nop
  }
  return usb_status;
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3718      	adds	r7, #24
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0d2:	78fa      	ldrb	r2, [r7, #3]
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7f7 f898 	bl	800320c <HAL_PCD_EP_GetRxCount>
 800c0dc:	4603      	mov	r3, r0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c0f4:	78fb      	ldrb	r3, [r7, #3]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d002      	beq.n	800c100 <HAL_PCDEx_LPM_Callback+0x18>
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d013      	beq.n	800c126 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c0fe:	e023      	b.n	800c148 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d007      	beq.n	800c118 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c108:	f000 f83c 	bl	800c184 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c10c:	4b10      	ldr	r3, [pc, #64]	; (800c150 <HAL_PCDEx_LPM_Callback+0x68>)
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	4a0f      	ldr	r2, [pc, #60]	; (800c150 <HAL_PCDEx_LPM_Callback+0x68>)
 800c112:	f023 0306 	bic.w	r3, r3, #6
 800c116:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe faa5 	bl	800a66e <USBD_LL_Resume>
    break;
 800c124:	e010      	b.n	800c148 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fe fa82 	bl	800a636 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d005      	beq.n	800c146 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c13a:	4b05      	ldr	r3, [pc, #20]	; (800c150 <HAL_PCDEx_LPM_Callback+0x68>)
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	4a04      	ldr	r2, [pc, #16]	; (800c150 <HAL_PCDEx_LPM_Callback+0x68>)
 800c140:	f043 0306 	orr.w	r3, r3, #6
 800c144:	6113      	str	r3, [r2, #16]
    break;
 800c146:	bf00      	nop
}
 800c148:	bf00      	nop
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	e000ed00 	.word	0xe000ed00

0800c154 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c15c:	4b03      	ldr	r3, [pc, #12]	; (800c16c <USBD_static_malloc+0x18>)
}
 800c15e:	4618      	mov	r0, r3
 800c160:	370c      	adds	r7, #12
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	20001668 	.word	0x20001668

0800c170 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]

}
 800c178:	bf00      	nop
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c188:	f7f4 fe9e 	bl	8000ec8 <SystemClock_Config>
}
 800c18c:	bf00      	nop
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <memset>:
 800c190:	4402      	add	r2, r0
 800c192:	4603      	mov	r3, r0
 800c194:	4293      	cmp	r3, r2
 800c196:	d100      	bne.n	800c19a <memset+0xa>
 800c198:	4770      	bx	lr
 800c19a:	f803 1b01 	strb.w	r1, [r3], #1
 800c19e:	e7f9      	b.n	800c194 <memset+0x4>

0800c1a0 <strncmp>:
 800c1a0:	b510      	push	{r4, lr}
 800c1a2:	b16a      	cbz	r2, 800c1c0 <strncmp+0x20>
 800c1a4:	3901      	subs	r1, #1
 800c1a6:	1884      	adds	r4, r0, r2
 800c1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d103      	bne.n	800c1bc <strncmp+0x1c>
 800c1b4:	42a0      	cmp	r0, r4
 800c1b6:	d001      	beq.n	800c1bc <strncmp+0x1c>
 800c1b8:	2a00      	cmp	r2, #0
 800c1ba:	d1f5      	bne.n	800c1a8 <strncmp+0x8>
 800c1bc:	1ad0      	subs	r0, r2, r3
 800c1be:	bd10      	pop	{r4, pc}
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	e7fc      	b.n	800c1be <strncmp+0x1e>

0800c1c4 <strncpy>:
 800c1c4:	b510      	push	{r4, lr}
 800c1c6:	3901      	subs	r1, #1
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	b132      	cbz	r2, 800c1da <strncpy+0x16>
 800c1cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c1d0:	f803 4b01 	strb.w	r4, [r3], #1
 800c1d4:	3a01      	subs	r2, #1
 800c1d6:	2c00      	cmp	r4, #0
 800c1d8:	d1f7      	bne.n	800c1ca <strncpy+0x6>
 800c1da:	441a      	add	r2, r3
 800c1dc:	2100      	movs	r1, #0
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d100      	bne.n	800c1e4 <strncpy+0x20>
 800c1e2:	bd10      	pop	{r4, pc}
 800c1e4:	f803 1b01 	strb.w	r1, [r3], #1
 800c1e8:	e7f9      	b.n	800c1de <strncpy+0x1a>
	...

0800c1ec <__libc_init_array>:
 800c1ec:	b570      	push	{r4, r5, r6, lr}
 800c1ee:	4d0d      	ldr	r5, [pc, #52]	; (800c224 <__libc_init_array+0x38>)
 800c1f0:	4c0d      	ldr	r4, [pc, #52]	; (800c228 <__libc_init_array+0x3c>)
 800c1f2:	1b64      	subs	r4, r4, r5
 800c1f4:	10a4      	asrs	r4, r4, #2
 800c1f6:	2600      	movs	r6, #0
 800c1f8:	42a6      	cmp	r6, r4
 800c1fa:	d109      	bne.n	800c210 <__libc_init_array+0x24>
 800c1fc:	4d0b      	ldr	r5, [pc, #44]	; (800c22c <__libc_init_array+0x40>)
 800c1fe:	4c0c      	ldr	r4, [pc, #48]	; (800c230 <__libc_init_array+0x44>)
 800c200:	f000 f818 	bl	800c234 <_init>
 800c204:	1b64      	subs	r4, r4, r5
 800c206:	10a4      	asrs	r4, r4, #2
 800c208:	2600      	movs	r6, #0
 800c20a:	42a6      	cmp	r6, r4
 800c20c:	d105      	bne.n	800c21a <__libc_init_array+0x2e>
 800c20e:	bd70      	pop	{r4, r5, r6, pc}
 800c210:	f855 3b04 	ldr.w	r3, [r5], #4
 800c214:	4798      	blx	r3
 800c216:	3601      	adds	r6, #1
 800c218:	e7ee      	b.n	800c1f8 <__libc_init_array+0xc>
 800c21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c21e:	4798      	blx	r3
 800c220:	3601      	adds	r6, #1
 800c222:	e7f2      	b.n	800c20a <__libc_init_array+0x1e>
 800c224:	0800c99c 	.word	0x0800c99c
 800c228:	0800c99c 	.word	0x0800c99c
 800c22c:	0800c99c 	.word	0x0800c99c
 800c230:	0800c9a0 	.word	0x0800c9a0

0800c234 <_init>:
 800c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c236:	bf00      	nop
 800c238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23a:	bc08      	pop	{r3}
 800c23c:	469e      	mov	lr, r3
 800c23e:	4770      	bx	lr

0800c240 <_fini>:
 800c240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c242:	bf00      	nop
 800c244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c246:	bc08      	pop	{r3}
 800c248:	469e      	mov	lr, r3
 800c24a:	4770      	bx	lr
