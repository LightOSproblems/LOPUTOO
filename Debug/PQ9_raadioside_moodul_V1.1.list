
PQ9_raadioside_moodul_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac8  0800e128  0800e128  0001e128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebf0  0800ebf0  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebf0  0800ebf0  0001ebf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebf8  0800ebf8  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebf8  0800ebf8  0001ebf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebfc  0800ebfc  0001ebfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800ec00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001914  20000160  0800ed60  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a74  0800ed60  00021a74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c08b  00000000  00000000  000201d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000409d  00000000  00000000  0003c25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  00040300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112f  00000000  00000000  00041990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001efda  00000000  00000000  00042abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c934  00000000  00000000  00061a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba66f  00000000  00000000  0007e3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064b0  00000000  00000000  00138a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013eeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e110 	.word	0x0800e110

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800e110 	.word	0x0800e110

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b970 	b.w	8000b84 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9e08      	ldr	r6, [sp, #32]
 80008c2:	460d      	mov	r5, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4694      	mov	ip, r2
 80008d0:	d965      	bls.n	800099e <__udivmoddi4+0xe2>
 80008d2:	fab2 f382 	clz	r3, r2
 80008d6:	b143      	cbz	r3, 80008ea <__udivmoddi4+0x2e>
 80008d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008dc:	f1c3 0220 	rsb	r2, r3, #32
 80008e0:	409f      	lsls	r7, r3
 80008e2:	fa20 f202 	lsr.w	r2, r0, r2
 80008e6:	4317      	orrs	r7, r2
 80008e8:	409c      	lsls	r4, r3
 80008ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ee:	fa1f f58c 	uxth.w	r5, ip
 80008f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008f6:	0c22      	lsrs	r2, r4, #16
 80008f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000900:	fb01 f005 	mul.w	r0, r1, r5
 8000904:	4290      	cmp	r0, r2
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x62>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000910:	f080 811c 	bcs.w	8000b4c <__udivmoddi4+0x290>
 8000914:	4290      	cmp	r0, r2
 8000916:	f240 8119 	bls.w	8000b4c <__udivmoddi4+0x290>
 800091a:	3902      	subs	r1, #2
 800091c:	4462      	add	r2, ip
 800091e:	1a12      	subs	r2, r2, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092e:	fb00 f505 	mul.w	r5, r0, r5
 8000932:	42a5      	cmp	r5, r4
 8000934:	d90a      	bls.n	800094c <__udivmoddi4+0x90>
 8000936:	eb1c 0404 	adds.w	r4, ip, r4
 800093a:	f100 32ff 	add.w	r2, r0, #4294967295
 800093e:	f080 8107 	bcs.w	8000b50 <__udivmoddi4+0x294>
 8000942:	42a5      	cmp	r5, r4
 8000944:	f240 8104 	bls.w	8000b50 <__udivmoddi4+0x294>
 8000948:	4464      	add	r4, ip
 800094a:	3802      	subs	r0, #2
 800094c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	2100      	movs	r1, #0
 8000954:	b11e      	cbz	r6, 800095e <__udivmoddi4+0xa2>
 8000956:	40dc      	lsrs	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	e9c6 4300 	strd	r4, r3, [r6]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0xbc>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80ed 	beq.w	8000b46 <__udivmoddi4+0x28a>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d149      	bne.n	8000a14 <__udivmoddi4+0x158>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0xce>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80f8 	bhi.w	8000b7a <__udivmoddi4+0x2be>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0203 	sbc.w	r2, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	4617      	mov	r7, r2
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0e2      	beq.n	800095e <__udivmoddi4+0xa2>
 8000998:	e9c6 4700 	strd	r4, r7, [r6]
 800099c:	e7df      	b.n	800095e <__udivmoddi4+0xa2>
 800099e:	b902      	cbnz	r2, 80009a2 <__udivmoddi4+0xe6>
 80009a0:	deff      	udf	#255	; 0xff
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <__udivmoddi4+0x210>
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009bc:	fb07 2015 	mls	r0, r7, r5, r2
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	fb0e f005 	mul.w	r0, lr, r5
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x124>
 80009ce:	eb1c 0202 	adds.w	r2, ip, r2
 80009d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x122>
 80009d8:	4290      	cmp	r0, r2
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2b8>
 80009de:	4645      	mov	r5, r8
 80009e0:	1a12      	subs	r2, r2, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x14e>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x14c>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2c2>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a12:	e79f      	b.n	8000954 <__udivmoddi4+0x98>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa05 f401 	lsl.w	r4, r5, r1
 8000a26:	fa20 f307 	lsr.w	r3, r0, r7
 8000a2a:	40fd      	lsrs	r5, r7
 8000a2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a30:	4323      	orrs	r3, r4
 8000a32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a3e:	0c1c      	lsrs	r4, r3, #16
 8000a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a44:	fb08 f50e 	mul.w	r5, r8, lr
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b0>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2b4>
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2b4>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4464      	add	r4, ip
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	b29d      	uxth	r5, r3
 8000a70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a74:	fb09 4413 	mls	r4, r9, r3, r4
 8000a78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a80:	45a6      	cmp	lr, r4
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1da>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2ac>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2ac>
 8000a92:	3b02      	subs	r3, #2
 8000a94:	4464      	add	r4, ip
 8000a96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46ae      	mov	lr, r5
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x29c>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x298>
 8000aac:	b156      	cbz	r6, 8000ac4 <__udivmoddi4+0x208>
 8000aae:	ebb0 0208 	subs.w	r2, r0, r8
 8000ab2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ab6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	40cc      	lsrs	r4, r1
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c3 0120 	rsb	r1, r3, #32
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad8:	fa25 f101 	lsr.w	r1, r5, r1
 8000adc:	409d      	lsls	r5, r3
 8000ade:	432a      	orrs	r2, r5
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aec:	fb07 1510 	mls	r5, r7, r0, r1
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000af6:	fb00 f50e 	mul.w	r5, r0, lr
 8000afa:	428d      	cmp	r5, r1
 8000afc:	fa04 f403 	lsl.w	r4, r4, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x258>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b0c:	428d      	cmp	r5, r1
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1b49      	subs	r1, r1, r5
 8000b16:	b292      	uxth	r2, r2
 8000b18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	fb05 f10e 	mul.w	r1, r5, lr
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x282>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000b36:	4291      	cmp	r1, r2
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000b3a:	3d02      	subs	r5, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0xfc>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e708      	b.n	800095e <__udivmoddi4+0xa2>
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e6e6      	b.n	800091e <__udivmoddi4+0x62>
 8000b50:	4610      	mov	r0, r2
 8000b52:	e6fb      	b.n	800094c <__udivmoddi4+0x90>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f0>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b60:	3b01      	subs	r3, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f0>
 8000b64:	4645      	mov	r5, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b68:	462b      	mov	r3, r5
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1da>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x258>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b0>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x124>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e70a      	b.n	8000994 <__udivmoddi4+0xd8>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x14e>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b8c:	f3bf 8f4f 	dsb	sy
}
 8000b90:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <__NVIC_SystemReset+0x24>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b9a:	4904      	ldr	r1, [pc, #16]	; (8000bac <__NVIC_SystemReset+0x24>)
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_SystemReset+0x28>)
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba2:	f3bf 8f4f 	dsb	sy
}
 8000ba6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <__NVIC_SystemReset+0x20>
 8000bac:	e000ed00 	.word	0xe000ed00
 8000bb0:	05fa0004 	.word	0x05fa0004

08000bb4 <CDC_FS_RxDataReady_Callback>:
/* USER CODE BEGIN 0 */

/* A callback function for USB received data handling.
 * NB! Must be kept short because it is triggered by an interrupt.
 */
void CDC_FS_RxDataReady_Callback(uint8_t * RxBuf, uint8_t Length){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
	if (Length == 1){
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d16a      	bne.n	8000c9c <CDC_FS_RxDataReady_Callback+0xe8>
		switch (*RxBuf){
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b7f      	cmp	r3, #127	; 0x7f
 8000bcc:	d02e      	beq.n	8000c2c <CDC_FS_RxDataReady_Callback+0x78>
 8000bce:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd0:	dc37      	bgt.n	8000c42 <CDC_FS_RxDataReady_Callback+0x8e>
 8000bd2:	2b78      	cmp	r3, #120	; 0x78
 8000bd4:	d026      	beq.n	8000c24 <CDC_FS_RxDataReady_Callback+0x70>
 8000bd6:	2b78      	cmp	r3, #120	; 0x78
 8000bd8:	dc33      	bgt.n	8000c42 <CDC_FS_RxDataReady_Callback+0x8e>
 8000bda:	2b0d      	cmp	r3, #13
 8000bdc:	d006      	beq.n	8000bec <CDC_FS_RxDataReady_Callback+0x38>
 8000bde:	2b0d      	cmp	r3, #13
 8000be0:	dc2f      	bgt.n	8000c42 <CDC_FS_RxDataReady_Callback+0x8e>
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d00e      	beq.n	8000c04 <CDC_FS_RxDataReady_Callback+0x50>
 8000be6:	2b0c      	cmp	r3, #12
 8000be8:	d017      	beq.n	8000c1a <CDC_FS_RxDataReady_Callback+0x66>
 8000bea:	e02a      	b.n	8000c42 <CDC_FS_RxDataReady_Callback+0x8e>
		case '\r': // Marks the end of buffer
			if (!DenyReturnKey){
 8000bec:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <CDC_FS_RxDataReady_Callback+0x118>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d161      	bne.n	8000cb8 <CDC_FS_RxDataReady_Callback+0x104>
				CDC_Transmit_FS((uint8_t *) "\r\n", 2);
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4836      	ldr	r0, [pc, #216]	; (8000cd0 <CDC_FS_RxDataReady_Callback+0x11c>)
 8000bf8:	f00c f8aa 	bl	800cd50 <CDC_Transmit_FS>
				USB_RxDataReadyFlag = 1; // The contents of the buffer are ready to be parsed
 8000bfc:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <CDC_FS_RxDataReady_Callback+0x120>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c02:	e059      	b.n	8000cb8 <CDC_FS_RxDataReady_Callback+0x104>
		case '\b': // BACKSPACE key (backspace for Minicom)
			if (USB_RxBufIndex > 0){
 8000c04:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <CDC_FS_RxDataReady_Callback+0x124>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d057      	beq.n	8000cbc <CDC_FS_RxDataReady_Callback+0x108>
				USB_RxBufIndex--; // Take a step back in the buffer
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <CDC_FS_RxDataReady_Callback+0x124>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <CDC_FS_RxDataReady_Callback+0x124>)
 8000c16:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c18:	e050      	b.n	8000cbc <CDC_FS_RxDataReady_Callback+0x108>
		case 0x0C:
			CDC_Transmit_FS((uint8_t *) "\e[2J\e[0;0HEnter a command: ", 27);
 8000c1a:	211b      	movs	r1, #27
 8000c1c:	482f      	ldr	r0, [pc, #188]	; (8000cdc <CDC_FS_RxDataReady_Callback+0x128>)
 8000c1e:	f00c f897 	bl	800cd50 <CDC_Transmit_FS>
			break;
 8000c22:	e04e      	b.n	8000cc2 <CDC_FS_RxDataReady_Callback+0x10e>
		case 'x':
			ExitSignalReceived = 1;
 8000c24:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <CDC_FS_RxDataReady_Callback+0x12c>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
			break;
 8000c2a:	e04a      	b.n	8000cc2 <CDC_FS_RxDataReady_Callback+0x10e>
		case 0x7F: // DEL key (backspace for Picocom and Tio)
			if (USB_RxBufIndex > 0){
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <CDC_FS_RxDataReady_Callback+0x124>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d045      	beq.n	8000cc0 <CDC_FS_RxDataReady_Callback+0x10c>
				USB_RxBufIndex--; // Take a step back in the buffer
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <CDC_FS_RxDataReady_Callback+0x124>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <CDC_FS_RxDataReady_Callback+0x124>)
 8000c3e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c40:	e03e      	b.n	8000cc0 <CDC_FS_RxDataReady_Callback+0x10c>
		default:
			if (USB_RxBufIndex < (USB_RxBufLen - 1)){
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <CDC_FS_RxDataReady_Callback+0x124>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <CDC_FS_RxDataReady_Callback+0x130>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	da0d      	bge.n	8000c6e <CDC_FS_RxDataReady_Callback+0xba>
				USB_RxBuf[USB_RxBufIndex] = *RxBuf;
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <CDC_FS_RxDataReady_Callback+0x124>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7819      	ldrb	r1, [r3, #0]
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <CDC_FS_RxDataReady_Callback+0x134>)
 8000c5e:	5499      	strb	r1, [r3, r2]
				USB_RxBufIndex++;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <CDC_FS_RxDataReady_Callback+0x124>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <CDC_FS_RxDataReady_Callback+0x124>)
 8000c6a:	701a      	strb	r2, [r3, #0]
		// Copy the contents of the main USB buffer to a secondary buffer for parsing
		strncpy((char *) USB_RxBuf, (char *) RxBuf, Length);
		USB_RxBufLen = Length;
		USB_RxDataReadyFlag = 1;
	}
}
 8000c6c:	e029      	b.n	8000cc2 <CDC_FS_RxDataReady_Callback+0x10e>
			else if (USB_RxBufIndex == USB_RxBufLen - 1){
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <CDC_FS_RxDataReady_Callback+0x124>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <CDC_FS_RxDataReady_Callback+0x130>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d10a      	bne.n	8000c94 <CDC_FS_RxDataReady_Callback+0xe0>
				USB_RxBuf[USB_RxBufIndex] = *RxBuf;
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <CDC_FS_RxDataReady_Callback+0x124>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7819      	ldrb	r1, [r3, #0]
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <CDC_FS_RxDataReady_Callback+0x134>)
 8000c8a:	5499      	strb	r1, [r3, r2]
				USB_RxBufFull = 1;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <CDC_FS_RxDataReady_Callback+0x138>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
}
 8000c92:	e016      	b.n	8000cc2 <CDC_FS_RxDataReady_Callback+0x10e>
				USB_RxBufOverflow = 1;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <CDC_FS_RxDataReady_Callback+0x13c>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
}
 8000c9a:	e012      	b.n	8000cc2 <CDC_FS_RxDataReady_Callback+0x10e>
		strncpy((char *) USB_RxBuf, (char *) RxBuf, Length);
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <CDC_FS_RxDataReady_Callback+0x134>)
 8000ca4:	f00c fda4 	bl	800d7f0 <strncpy>
		USB_RxBufLen = Length;
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <CDC_FS_RxDataReady_Callback+0x130>)
 8000cae:	801a      	strh	r2, [r3, #0]
		USB_RxDataReadyFlag = 1;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <CDC_FS_RxDataReady_Callback+0x120>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
}
 8000cb6:	e004      	b.n	8000cc2 <CDC_FS_RxDataReady_Callback+0x10e>
			break;
 8000cb8:	bf00      	nop
 8000cba:	e002      	b.n	8000cc2 <CDC_FS_RxDataReady_Callback+0x10e>
			break;
 8000cbc:	bf00      	nop
 8000cbe:	e000      	b.n	8000cc2 <CDC_FS_RxDataReady_Callback+0x10e>
			break;
 8000cc0:	bf00      	nop
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000724 	.word	0x20000724
 8000cd0:	0800e128 	.word	0x0800e128
 8000cd4:	20000721 	.word	0x20000721
 8000cd8:	2000071c 	.word	0x2000071c
 8000cdc:	0800e12c 	.word	0x0800e12c
 8000ce0:	20000723 	.word	0x20000723
 8000ce4:	20000002 	.word	0x20000002
 8000ce8:	2000031c 	.word	0x2000031c
 8000cec:	2000071d 	.word	0x2000071d
 8000cf0:	2000071e 	.word	0x2000071e

08000cf4 <USB_Rx_Parser>:

void USB_Rx_Parser(void){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8000cfa:	af00      	add	r7, sp, #0
	char USB_MSG_TxBuf[1024];
	uint8_t Si4468_CmdTxBuf[128], Si4468_CmdRxBuf[128];
	if (USB_RxDataReadyFlag){
 8000cfc:	4bc3      	ldr	r3, [pc, #780]	; (800100c <USB_Rx_Parser+0x318>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 83a0 	beq.w	8001446 <USB_Rx_Parser+0x752>
		if (USB_RxBufIndex == 0){
 8000d06:	4bc2      	ldr	r3, [pc, #776]	; (8001010 <USB_Rx_Parser+0x31c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 8395 	beq.w	800143a <USB_Rx_Parser+0x746>
			// NO-OP
		}
		else if (Reset){
 8000d10:	4bc0      	ldr	r3, [pc, #768]	; (8001014 <USB_Rx_Parser+0x320>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d039      	beq.n	8000d8c <USB_Rx_Parser+0x98>
			if (USB_RxBufIndex == 1){
 8000d18:	4bbd      	ldr	r3, [pc, #756]	; (8001010 <USB_Rx_Parser+0x31c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d12d      	bne.n	8000d7c <USB_Rx_Parser+0x88>
				switch (*USB_RxBuf){
 8000d20:	4bbd      	ldr	r3, [pc, #756]	; (8001018 <USB_Rx_Parser+0x324>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b6e      	cmp	r3, #110	; 0x6e
 8000d26:	d019      	beq.n	8000d5c <USB_Rx_Parser+0x68>
 8000d28:	2b79      	cmp	r3, #121	; 0x79
 8000d2a:	d11f      	bne.n	8000d6c <USB_Rx_Parser+0x78>
					case 'y':
						if (ANSI_ColorsOn){
 8000d2c:	4bbb      	ldr	r3, [pc, #748]	; (800101c <USB_Rx_Parser+0x328>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d007      	beq.n	8000d44 <USB_Rx_Parser+0x50>
							HAL_Delay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f001 faff 	bl	8002338 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "\e[1m\e[31mRESTARTING!\r\n\e[37m\e[0m", 31);
 8000d3a:	211f      	movs	r1, #31
 8000d3c:	48b8      	ldr	r0, [pc, #736]	; (8001020 <USB_Rx_Parser+0x32c>)
 8000d3e:	f00c f807 	bl	800cd50 <CDC_Transmit_FS>
 8000d42:	e006      	b.n	8000d52 <USB_Rx_Parser+0x5e>
						}
						else{
							HAL_Delay(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f001 faf7 	bl	8002338 <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "RESTARTING!\r\n", 13);
 8000d4a:	210d      	movs	r1, #13
 8000d4c:	48b5      	ldr	r0, [pc, #724]	; (8001024 <USB_Rx_Parser+0x330>)
 8000d4e:	f00b ffff 	bl	800cd50 <CDC_Transmit_FS>
						}
						HAL_Delay(1);
 8000d52:	2001      	movs	r0, #1
 8000d54:	f001 faf0 	bl	8002338 <HAL_Delay>
						NVIC_SystemReset(); // Reset the device
 8000d58:	f7ff ff16 	bl	8000b88 <__NVIC_SystemReset>
					case 'n':
						Reset = 0;
 8000d5c:	4bad      	ldr	r3, [pc, #692]	; (8001014 <USB_Rx_Parser+0x320>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
						USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_ENTER_CMD);
 8000d62:	2102      	movs	r1, #2
 8000d64:	2000      	movs	r0, #0
 8000d66:	f000 fc21 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
						break;
 8000d6a:	e366      	b.n	800143a <USB_Rx_Parser+0x746>
					default:
						HAL_Delay(1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f001 fae3 	bl	8002338 <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 8000d72:	2119      	movs	r1, #25
 8000d74:	48ac      	ldr	r0, [pc, #688]	; (8001028 <USB_Rx_Parser+0x334>)
 8000d76:	f00b ffeb 	bl	800cd50 <CDC_Transmit_FS>
 8000d7a:	e35e      	b.n	800143a <USB_Rx_Parser+0x746>
				}
			}
			else{
				HAL_Delay(1);
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f001 fadb 	bl	8002338 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 8000d82:	2119      	movs	r1, #25
 8000d84:	48a8      	ldr	r0, [pc, #672]	; (8001028 <USB_Rx_Parser+0x334>)
 8000d86:	f00b ffe3 	bl	800cd50 <CDC_Transmit_FS>
 8000d8a:	e356      	b.n	800143a <USB_Rx_Parser+0x746>
			}
		}
		else if (USB_RxBufIndex == 1){
 8000d8c:	4ba0      	ldr	r3, [pc, #640]	; (8001010 <USB_Rx_Parser+0x31c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	f040 828d 	bne.w	80012b0 <USB_Rx_Parser+0x5bc>
			switch (*USB_RxBuf){
 8000d96:	4ba0      	ldr	r3, [pc, #640]	; (8001018 <USB_Rx_Parser+0x324>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	3b52      	subs	r3, #82	; 0x52
 8000d9c:	2b22      	cmp	r3, #34	; 0x22
 8000d9e:	f200 820d 	bhi.w	80011bc <USB_Rx_Parser+0x4c8>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <USB_Rx_Parser+0xb4>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000ff7 	.word	0x08000ff7
 8000dac:	080011bd 	.word	0x080011bd
 8000db0:	080011bd 	.word	0x080011bd
 8000db4:	080011bd 	.word	0x080011bd
 8000db8:	080011bd 	.word	0x080011bd
 8000dbc:	080011bd 	.word	0x080011bd
 8000dc0:	080011bd 	.word	0x080011bd
 8000dc4:	080011bd 	.word	0x080011bd
 8000dc8:	080011bd 	.word	0x080011bd
 8000dcc:	080011bd 	.word	0x080011bd
 8000dd0:	080011bd 	.word	0x080011bd
 8000dd4:	080011bd 	.word	0x080011bd
 8000dd8:	080011bd 	.word	0x080011bd
 8000ddc:	080011bd 	.word	0x080011bd
 8000de0:	080011bd 	.word	0x080011bd
 8000de4:	080011bd 	.word	0x080011bd
 8000de8:	080011bd 	.word	0x080011bd
 8000dec:	08000fc5 	.word	0x08000fc5
 8000df0:	080011bd 	.word	0x080011bd
 8000df4:	080011bd 	.word	0x080011bd
 8000df8:	080011bd 	.word	0x080011bd
 8000dfc:	080011bd 	.word	0x080011bd
 8000e00:	080011bd 	.word	0x080011bd
 8000e04:	08001113 	.word	0x08001113
 8000e08:	080011bd 	.word	0x080011bd
 8000e0c:	080011bd 	.word	0x080011bd
 8000e10:	08000e35 	.word	0x08000e35
 8000e14:	08000e59 	.word	0x08000e59
 8000e18:	080011bd 	.word	0x080011bd
 8000e1c:	080011bd 	.word	0x080011bd
 8000e20:	08001121 	.word	0x08001121
 8000e24:	080011bd 	.word	0x080011bd
 8000e28:	08001051 	.word	0x08001051
 8000e2c:	080011bd 	.word	0x080011bd
 8000e30:	080010b5 	.word	0x080010b5
			case 'l':
				if (ANSI_ColorsOn){
 8000e34:	4b79      	ldr	r3, [pc, #484]	; (800101c <USB_Rx_Parser+0x328>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d004      	beq.n	8000e46 <USB_Rx_Parser+0x152>
					USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_CMD_LIST);
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f000 fbb4 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
 8000e44:	e003      	b.n	8000e4e <USB_Rx_Parser+0x15a>
				}
				else{
					USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_CMD_LIST);
 8000e46:	2101      	movs	r1, #1
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 fbaf 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
				}
				USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_ENTER_CMD);
 8000e4e:	2102      	movs	r1, #2
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 fbab 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
				break;
 8000e56:	e2f0      	b.n	800143a <USB_Rx_Parser+0x746>
			case 'm':
				uint16_t MeasuredTxPower = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8a7 351c 	strh.w	r3, [r7, #1308]	; 0x51c
				double MeasuredTxPowerDouble = 0;
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8000e6a:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Turn the forward meas. amplifier ON
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	486e      	ldr	r0, [pc, #440]	; (800102c <USB_Rx_Parser+0x338>)
 8000e74:	f003 faee 	bl	8004454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Turn the reverse meas. amplifier ON
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	486b      	ldr	r0, [pc, #428]	; (800102c <USB_Rx_Parser+0x338>)
 8000e7e:	f003 fae9 	bl	8004454 <HAL_GPIO_WritePin>
				HAL_Delay(100); // Wait for the amplifiers to turn on
 8000e82:	2064      	movs	r0, #100	; 0x64
 8000e84:	f001 fa58 	bl	8002338 <HAL_Delay>
				USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_OPAMPS_ON);
 8000e88:	4b64      	ldr	r3, [pc, #400]	; (800101c <USB_Rx_Parser+0x328>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2109      	movs	r1, #9
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fb8c 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
				USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_MEAS_MODE_ON);
 8000e94:	4b61      	ldr	r3, [pc, #388]	; (800101c <USB_Rx_Parser+0x328>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	210b      	movs	r1, #11
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fb86 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
				HAL_ADC_Start_DMA(&hadc1, ADC_Raw_Results, 2);
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	4963      	ldr	r1, [pc, #396]	; (8001030 <USB_Rx_Parser+0x33c>)
 8000ea4:	4863      	ldr	r0, [pc, #396]	; (8001034 <USB_Rx_Parser+0x340>)
 8000ea6:	f001 fdeb 	bl	8002a80 <HAL_ADC_Start_DMA>
				HAL_Delay(100);
 8000eaa:	2064      	movs	r0, #100	; 0x64
 8000eac:	f001 fa44 	bl	8002338 <HAL_Delay>
				HAL_ADC_Stop_DMA(&hadc1);
 8000eb0:	4860      	ldr	r0, [pc, #384]	; (8001034 <USB_Rx_Parser+0x340>)
 8000eb2:	f001 fe99 	bl	8002be8 <HAL_ADC_Stop_DMA>
				//CDC_Transmit_FS((uint8_t *) "\e[A\e[A", 6);
				if (ANSI_ColorsOn){
 8000eb6:	4b59      	ldr	r3, [pc, #356]	; (800101c <USB_Rx_Parser+0x328>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d019      	beq.n	8000ef2 <USB_Rx_Parser+0x1fe>
					sprintf(USB_MSG_TxBuf, "\e[31m\tTx ADC raw: \e[37m%u    \r\n\e[32m\tRx ADC raw: \e[37m%u    \r\n", (uint16_t) ADC_Raw_Results[0], (uint16_t) ADC_Raw_Results[1]);
 8000ebe:	4b5c      	ldr	r3, [pc, #368]	; (8001030 <USB_Rx_Parser+0x33c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b5a      	ldr	r3, [pc, #360]	; (8001030 <USB_Rx_Parser+0x33c>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8000ed0:	4959      	ldr	r1, [pc, #356]	; (8001038 <USB_Rx_Parser+0x344>)
 8000ed2:	f00c fc53 	bl	800d77c <siprintf>
					CDC_Transmit_FS((uint8_t *)USB_MSG_TxBuf, strlen(USB_MSG_TxBuf));
 8000ed6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff f978 	bl	80001d0 <strlen>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f00b ff30 	bl	800cd50 <CDC_Transmit_FS>
 8000ef0:	e018      	b.n	8000f24 <USB_Rx_Parser+0x230>
				}
				else{
					sprintf(USB_MSG_TxBuf, "\tTx ADC raw: %u    \r\n\tRx ADC raw: %u    \r\n", (uint16_t) ADC_Raw_Results[0], (uint16_t) ADC_Raw_Results[1]);
 8000ef2:	4b4f      	ldr	r3, [pc, #316]	; (8001030 <USB_Rx_Parser+0x33c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b4d      	ldr	r3, [pc, #308]	; (8001030 <USB_Rx_Parser+0x33c>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8000f04:	494d      	ldr	r1, [pc, #308]	; (800103c <USB_Rx_Parser+0x348>)
 8000f06:	f00c fc39 	bl	800d77c <siprintf>
					CDC_Transmit_FS((uint8_t *)USB_MSG_TxBuf, strlen(USB_MSG_TxBuf));
 8000f0a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f95e 	bl	80001d0 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f00b ff16 	bl	800cd50 <CDC_Transmit_FS>
				}
				MeasuredTxPowerDouble = ConvertTxADCtoPower(ADC_Raw_Results[0]);
 8000f24:	4b42      	ldr	r3, [pc, #264]	; (8001030 <USB_Rx_Parser+0x33c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fa9d 	bl	8001468 <ConvertTxADCtoPower>
 8000f2e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8000f32:	ed83 0b00 	vstr	d0, [r3]
				MeasuredTxPower = (uint16_t) (0.5 + MeasuredTxPowerDouble); // convert to integer
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	4b41      	ldr	r3, [pc, #260]	; (8001040 <USB_Rx_Parser+0x34c>)
 8000f3c:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8000f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f44:	f7ff facc 	bl	80004e0 <__adddf3>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f7ff fc7c 	bl	800084c <__aeabi_d2uiz>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f8a7 351c 	strh.w	r3, [r7, #1308]	; 0x51c
				sprintf(USB_MSG_TxBuf, "\tEstimated Tx power [mW]: %d    \r\n", MeasuredTxPower);
 8000f5a:	f8b7 251c 	ldrh.w	r2, [r7, #1308]	; 0x51c
 8000f5e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000f62:	4938      	ldr	r1, [pc, #224]	; (8001044 <USB_Rx_Parser+0x350>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f00c fc09 	bl	800d77c <siprintf>
				HAL_Delay(1);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f001 f9e4 	bl	8002338 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *)USB_MSG_TxBuf, strlen(USB_MSG_TxBuf));
 8000f70:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f92b 	bl	80001d0 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f00b fee3 	bl	800cd50 <CDC_Transmit_FS>
				ExitSignalReceived = 0;
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <USB_Rx_Parser+0x354>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
				DenyReturnKey = 0;
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <USB_Rx_Parser+0x358>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Turn the forward meas. amplifier OFF
 8000f96:	2200      	movs	r2, #0
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	4824      	ldr	r0, [pc, #144]	; (800102c <USB_Rx_Parser+0x338>)
 8000f9c:	f003 fa5a 	bl	8004454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Turn the reverse meas. amplifier OFF
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	4821      	ldr	r0, [pc, #132]	; (800102c <USB_Rx_Parser+0x338>)
 8000fa6:	f003 fa55 	bl	8004454 <HAL_GPIO_WritePin>
				USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_OPAMPS_OFF);
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <USB_Rx_Parser+0x328>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	210a      	movs	r1, #10
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 fafb 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
				USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_ENTER_CMD);
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <USB_Rx_Parser+0x328>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2102      	movs	r1, #2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 faf5 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
				break;
 8000fc2:	e23a      	b.n	800143a <USB_Rx_Parser+0x746>
			case 'c':
				ANSI_ColorsOn ^= 0x01; // Toggle the terminal color mode
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <USB_Rx_Parser+0x328>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f083 0301 	eor.w	r3, r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <USB_Rx_Parser+0x328>)
 8000fd0:	701a      	strb	r2, [r3, #0]
				if (ANSI_ColorsOn){
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <USB_Rx_Parser+0x328>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d004      	beq.n	8000fe4 <USB_Rx_Parser+0x2f0>
					USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_COLORS_ACTIVE);
 8000fda:	2104      	movs	r1, #4
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f000 fae5 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
 8000fe2:	e003      	b.n	8000fec <USB_Rx_Parser+0x2f8>
				}
				else{
					USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_COLORS_INACTIVE);
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f000 fae0 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
				}
				USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_ENTER_CMD);
 8000fec:	2102      	movs	r1, #2
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f000 fadc 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
				break;
 8000ff4:	e221      	b.n	800143a <USB_Rx_Parser+0x746>
			case 'R':
				HAL_Delay(1);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f001 f99e 	bl	8002338 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 8000ffc:	2119      	movs	r1, #25
 8000ffe:	480a      	ldr	r0, [pc, #40]	; (8001028 <USB_Rx_Parser+0x334>)
 8001000:	f00b fea6 	bl	800cd50 <CDC_Transmit_FS>
				Reset = 1;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <USB_Rx_Parser+0x320>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
				break;
 800100a:	e216      	b.n	800143a <USB_Rx_Parser+0x746>
 800100c:	20000721 	.word	0x20000721
 8001010:	2000071c 	.word	0x2000071c
 8001014:	20000722 	.word	0x20000722
 8001018:	2000031c 	.word	0x2000031c
 800101c:	2000071f 	.word	0x2000071f
 8001020:	0800e148 	.word	0x0800e148
 8001024:	0800e168 	.word	0x0800e168
 8001028:	0800e178 	.word	0x0800e178
 800102c:	48000400 	.word	0x48000400
 8001030:	20000314 	.word	0x20000314
 8001034:	2000017c 	.word	0x2000017c
 8001038:	0800e194 	.word	0x0800e194
 800103c:	0800e1d4 	.word	0x0800e1d4
 8001040:	3fe00000 	.word	0x3fe00000
 8001044:	0800e200 	.word	0x0800e200
 8001048:	20000723 	.word	0x20000723
 800104c:	20000724 	.word	0x20000724
			case 'r':
				DeviceState = STATE_RX;
 8001050:	4bb1      	ldr	r3, [pc, #708]	; (8001318 <USB_Rx_Parser+0x624>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
				Si4468_CmdTxBuf[0] = Si4468_CHANGE_STATE;
 8001056:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800105a:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800105e:	2234      	movs	r2, #52	; 0x34
 8001060:	701a      	strb	r2, [r3, #0]
				Si4468_CmdTxBuf[1] = Si4468_RX_STATE; // RX
 8001062:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001066:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800106a:	2208      	movs	r2, #8
 800106c:	705a      	strb	r2, [r3, #1]
				Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 800106e:	f107 010c 	add.w	r1, r7, #12
 8001072:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001076:	2202      	movs	r2, #2
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fb9b 	bl	80017b4 <Si4468_CmdTransmitReceive>
				Si4468_WaitForCTS();
 800107e:	f000 fbf1 	bl	8001864 <Si4468_WaitForCTS>
				HAL_Delay(100);
 8001082:	2064      	movs	r0, #100	; 0x64
 8001084:	f001 f958 	bl	8002338 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the RF amplifier stage 1 OFF
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800108e:	48a3      	ldr	r0, [pc, #652]	; (800131c <USB_Rx_Parser+0x628>)
 8001090:	f003 f9e0 	bl	8004454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn the RF amplifier stage 2 OFF
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109a:	48a0      	ldr	r0, [pc, #640]	; (800131c <USB_Rx_Parser+0x628>)
 800109c:	f003 f9da 	bl	8004454 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80010a0:	2064      	movs	r0, #100	; 0x64
 80010a2:	f001 f949 	bl	8002338 <HAL_Delay>
				USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_RX_MODE_ON);
 80010a6:	4b9e      	ldr	r3, [pc, #632]	; (8001320 <USB_Rx_Parser+0x62c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	210f      	movs	r1, #15
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fa7d 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
				break;
 80010b2:	e1c2      	b.n	800143a <USB_Rx_Parser+0x746>
			case 't':
				DeviceState = STATE_TX;
 80010b4:	4b98      	ldr	r3, [pc, #608]	; (8001318 <USB_Rx_Parser+0x624>)
 80010b6:	2202      	movs	r2, #2
 80010b8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); // Turn the RF amplifier stage 1 ON
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c0:	4896      	ldr	r0, [pc, #600]	; (800131c <USB_Rx_Parser+0x628>)
 80010c2:	f003 f9c7 	bl	8004454 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // Turn the RF amplifier stage 2 ON
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010cc:	4893      	ldr	r0, [pc, #588]	; (800131c <USB_Rx_Parser+0x628>)
 80010ce:	f003 f9c1 	bl	8004454 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80010d2:	2064      	movs	r0, #100	; 0x64
 80010d4:	f001 f930 	bl	8002338 <HAL_Delay>
				Si4468_CmdTxBuf[0] = Si4468_CHANGE_STATE;
 80010d8:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80010dc:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80010e0:	2234      	movs	r2, #52	; 0x34
 80010e2:	701a      	strb	r2, [r3, #0]
				Si4468_CmdTxBuf[1] = Si4468_TX_STATE; // TX
 80010e4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80010e8:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80010ec:	2207      	movs	r2, #7
 80010ee:	705a      	strb	r2, [r3, #1]
				Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 80010f0:	f107 010c 	add.w	r1, r7, #12
 80010f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010f8:	2202      	movs	r2, #2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fb5a 	bl	80017b4 <Si4468_CmdTransmitReceive>
				Si4468_WaitForCTS();
 8001100:	f000 fbb0 	bl	8001864 <Si4468_WaitForCTS>
				USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_TX_MODE_ON);
 8001104:	4b86      	ldr	r3, [pc, #536]	; (8001320 <USB_Rx_Parser+0x62c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	210d      	movs	r1, #13
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fa4e 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
				break;
 8001110:	e193      	b.n	800143a <USB_Rx_Parser+0x746>
			case 'i':
				USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_DEVICE_INFO);
 8001112:	4b83      	ldr	r3, [pc, #524]	; (8001320 <USB_Rx_Parser+0x62c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2111      	movs	r1, #17
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fa47 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
				break;
 800111e:	e18c      	b.n	800143a <USB_Rx_Parser+0x746>
			case 'p':
				if (RF_AmpSupplyOnWarning){
 8001120:	4b80      	ldr	r3, [pc, #512]	; (8001324 <USB_Rx_Parser+0x630>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00f      	beq.n	8001148 <USB_Rx_Parser+0x454>
					USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_RF_AMP_WARNING);
 8001128:	4b7d      	ldr	r3, [pc, #500]	; (8001320 <USB_Rx_Parser+0x62c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2106      	movs	r1, #6
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fa3c 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
					USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_ENTER_CMD);
 8001134:	4b7a      	ldr	r3, [pc, #488]	; (8001320 <USB_Rx_Parser+0x62c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2102      	movs	r1, #2
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fa36 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
					RF_AmpSupplyOnWarning = 0;
 8001140:	4b78      	ldr	r3, [pc, #480]	; (8001324 <USB_Rx_Parser+0x630>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the RF amplifier stage 1 OFF
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn the RF amplifier stage 2 OFF
						RF_AmpSupplyOnWarning = 1; // Reset the warning flag for next turn-on event
					}
				}
				break;
 8001146:	e178      	b.n	800143a <USB_Rx_Parser+0x746>
					RF_AmpSupplyOn ^= 0x01; // Toggle the RF amp flag
 8001148:	4b77      	ldr	r3, [pc, #476]	; (8001328 <USB_Rx_Parser+0x634>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	f083 0301 	eor.w	r3, r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b75      	ldr	r3, [pc, #468]	; (8001328 <USB_Rx_Parser+0x634>)
 8001154:	701a      	strb	r2, [r3, #0]
					if (RF_AmpSupplyOn){
 8001156:	4b74      	ldr	r3, [pc, #464]	; (8001328 <USB_Rx_Parser+0x634>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d015      	beq.n	800118a <USB_Rx_Parser+0x496>
						USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_RF_AMP_ON);
 800115e:	4b70      	ldr	r3, [pc, #448]	; (8001320 <USB_Rx_Parser+0x62c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2107      	movs	r1, #7
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fa21 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
						HAL_Delay(1);
 800116a:	2001      	movs	r0, #1
 800116c:	f001 f8e4 	bl	8002338 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); // Turn the RF amplifier stage 1 ON
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001176:	4869      	ldr	r0, [pc, #420]	; (800131c <USB_Rx_Parser+0x628>)
 8001178:	f003 f96c 	bl	8004454 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // Turn the RF amplifier stage 2 ON
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001182:	4866      	ldr	r0, [pc, #408]	; (800131c <USB_Rx_Parser+0x628>)
 8001184:	f003 f966 	bl	8004454 <HAL_GPIO_WritePin>
				break;
 8001188:	e157      	b.n	800143a <USB_Rx_Parser+0x746>
						USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_RF_AMP_OFF);
 800118a:	4b65      	ldr	r3, [pc, #404]	; (8001320 <USB_Rx_Parser+0x62c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2108      	movs	r1, #8
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fa0b 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
						HAL_Delay(1);
 8001196:	2001      	movs	r0, #1
 8001198:	f001 f8ce 	bl	8002338 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the RF amplifier stage 1 OFF
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a2:	485e      	ldr	r0, [pc, #376]	; (800131c <USB_Rx_Parser+0x628>)
 80011a4:	f003 f956 	bl	8004454 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn the RF amplifier stage 2 OFF
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ae:	485b      	ldr	r0, [pc, #364]	; (800131c <USB_Rx_Parser+0x628>)
 80011b0:	f003 f950 	bl	8004454 <HAL_GPIO_WritePin>
						RF_AmpSupplyOnWarning = 1; // Reset the warning flag for next turn-on event
 80011b4:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <USB_Rx_Parser+0x630>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
				break;
 80011ba:	e13e      	b.n	800143a <USB_Rx_Parser+0x746>
			default:
				uint32_t parsed_number = 0;
 80011bc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80011c0:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
				uint8_t error = ParseUSBInputAsInteger(&parsed_number);
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f997 	bl	8001500 <ParseUSBInputAsInteger>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
				if (error){
 80011d8:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <USB_Rx_Parser+0x4fa>
					USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_CMD_NOT_FOUND);
 80011e0:	4b4f      	ldr	r3, [pc, #316]	; (8001320 <USB_Rx_Parser+0x62c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2103      	movs	r1, #3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f9e0 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
 80011ec:	e125      	b.n	800143a <USB_Rx_Parser+0x746>
				}
				else{
					sprintf(USB_MSG_TxBuf, "Input was a number: %u    \r\n", (uint16_t)parsed_number);
 80011ee:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80011f2:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001200:	494a      	ldr	r1, [pc, #296]	; (800132c <USB_Rx_Parser+0x638>)
 8001202:	4618      	mov	r0, r3
 8001204:	f00c faba 	bl	800d77c <siprintf>
					CDC_Transmit_FS((uint8_t *) USB_MSG_TxBuf, strlen(USB_MSG_TxBuf));
 8001208:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800120c:	4618      	mov	r0, r3
 800120e:	f7fe ffdf 	bl	80001d0 <strlen>
 8001212:	4603      	mov	r3, r0
 8001214:	b29a      	uxth	r2, r3
 8001216:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f00b fd97 	bl	800cd50 <CDC_Transmit_FS>
					if (DeviceState == STATE_TX){
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <USB_Rx_Parser+0x624>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b02      	cmp	r3, #2
 8001228:	f040 8107 	bne.w	800143a <USB_Rx_Parser+0x746>
						Si4468_CmdTxBuf[0] = Si4468_SET_PROPERTY;
 800122c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001230:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8001234:	2211      	movs	r2, #17
 8001236:	701a      	strb	r2, [r3, #0]
						Si4468_CmdTxBuf[1] = 0x22; // Group
 8001238:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800123c:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8001240:	2222      	movs	r2, #34	; 0x22
 8001242:	705a      	strb	r2, [r3, #1]
						Si4468_CmdTxBuf[2] = 0x04; // Number of properties
 8001244:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001248:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800124c:	2204      	movs	r2, #4
 800124e:	709a      	strb	r2, [r3, #2]
						Si4468_CmdTxBuf[3] = 0x00; // Index of the first property to be set
 8001250:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001254:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8001258:	2200      	movs	r2, #0
 800125a:	70da      	strb	r2, [r3, #3]
						Si4468_CmdTxBuf[4] = 0x08; //
 800125c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001260:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8001264:	2208      	movs	r2, #8
 8001266:	711a      	strb	r2, [r3, #4]
						Si4468_CmdTxBuf[5] = (uint8_t) parsed_number; // TRANSCEIVER TX POWER LEVEL
 8001268:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800126c:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001278:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800127c:	715a      	strb	r2, [r3, #5]
						Si4468_CmdTxBuf[6] = 0x00; //
 800127e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001282:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8001286:	2200      	movs	r2, #0
 8001288:	719a      	strb	r2, [r3, #6]
						Si4468_CmdTxBuf[7] = 0x1D; //
 800128a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800128e:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8001292:	221d      	movs	r2, #29
 8001294:	71da      	strb	r2, [r3, #7]
						Si4468_CmdTransmit(Si4468_CmdTxBuf, 8);
 8001296:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800129a:	2108      	movs	r1, #8
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fab7 	bl	8001810 <Si4468_CmdTransmit>
						Si4468_WaitForCTS();
 80012a2:	f000 fadf 	bl	8001864 <Si4468_WaitForCTS>
						CDC_Transmit_FS((uint8_t *) "TX power adjusted!\r\n", 20);
 80012a6:	2114      	movs	r1, #20
 80012a8:	4821      	ldr	r0, [pc, #132]	; (8001330 <USB_Rx_Parser+0x63c>)
 80012aa:	f00b fd51 	bl	800cd50 <CDC_Transmit_FS>
 80012ae:	e0c4      	b.n	800143a <USB_Rx_Parser+0x746>
					}
				}
			}
		}
		else if((strncmp((char *)USB_RxBuf, "test", 4) == 0) && (USB_RxBufIndex == 4)){
 80012b0:	2204      	movs	r2, #4
 80012b2:	4920      	ldr	r1, [pc, #128]	; (8001334 <USB_Rx_Parser+0x640>)
 80012b4:	4820      	ldr	r0, [pc, #128]	; (8001338 <USB_Rx_Parser+0x644>)
 80012b6:	f00c fa89 	bl	800d7cc <strncmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d112      	bne.n	80012e6 <USB_Rx_Parser+0x5f2>
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <USB_Rx_Parser+0x648>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d10e      	bne.n	80012e6 <USB_Rx_Parser+0x5f2>
			HAL_Delay(1);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f001 f835 	bl	8002338 <HAL_Delay>
			CDC_Transmit_FS((uint8_t *) "\tEaster egg~! uwu\r\n", 19);
 80012ce:	2113      	movs	r1, #19
 80012d0:	481b      	ldr	r0, [pc, #108]	; (8001340 <USB_Rx_Parser+0x64c>)
 80012d2:	f00b fd3d 	bl	800cd50 <CDC_Transmit_FS>
			HAL_Delay(1);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f001 f82e 	bl	8002338 <HAL_Delay>
			CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 80012dc:	2111      	movs	r1, #17
 80012de:	4819      	ldr	r0, [pc, #100]	; (8001344 <USB_Rx_Parser+0x650>)
 80012e0:	f00b fd36 	bl	800cd50 <CDC_Transmit_FS>
 80012e4:	e0a9      	b.n	800143a <USB_Rx_Parser+0x746>
		}
		else{
			uint32_t parsed_number = 0;
 80012e6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80012ea:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
			uint8_t error = ParseUSBInputAsInteger(&parsed_number);
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f903 	bl	8001500 <ParseUSBInputAsInteger>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
			if (error){
 8001300:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01f      	beq.n	8001348 <USB_Rx_Parser+0x654>
				USB_CDC_TransmitPredefinedMessage(ANSI_ColorsOn, MSG_CMD_NOT_FOUND);
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <USB_Rx_Parser+0x62c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2103      	movs	r1, #3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f94c 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>
 8001314:	e091      	b.n	800143a <USB_Rx_Parser+0x746>
 8001316:	bf00      	nop
 8001318:	20000725 	.word	0x20000725
 800131c:	48000800 	.word	0x48000800
 8001320:	2000071f 	.word	0x2000071f
 8001324:	20000000 	.word	0x20000000
 8001328:	20000720 	.word	0x20000720
 800132c:	0800e224 	.word	0x0800e224
 8001330:	0800e244 	.word	0x0800e244
 8001334:	0800e25c 	.word	0x0800e25c
 8001338:	2000031c 	.word	0x2000031c
 800133c:	2000071c 	.word	0x2000071c
 8001340:	0800e264 	.word	0x0800e264
 8001344:	0800e278 	.word	0x0800e278
			}
			else{
				sprintf(USB_MSG_TxBuf, "Input was a number: %u    \r\n", (uint16_t)parsed_number);
 8001348:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800134c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800135a:	493d      	ldr	r1, [pc, #244]	; (8001450 <USB_Rx_Parser+0x75c>)
 800135c:	4618      	mov	r0, r3
 800135e:	f00c fa0d 	bl	800d77c <siprintf>
				CDC_Transmit_FS((uint8_t *) USB_MSG_TxBuf, strlen(USB_MSG_TxBuf));
 8001362:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001366:	4618      	mov	r0, r3
 8001368:	f7fe ff32 	bl	80001d0 <strlen>
 800136c:	4603      	mov	r3, r0
 800136e:	b29a      	uxth	r2, r3
 8001370:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f00b fcea 	bl	800cd50 <CDC_Transmit_FS>
				if (DeviceState == STATE_TX){
 800137c:	4b35      	ldr	r3, [pc, #212]	; (8001454 <USB_Rx_Parser+0x760>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d15a      	bne.n	800143a <USB_Rx_Parser+0x746>
					Si4468_CmdTxBuf[0] = Si4468_SET_PROPERTY;
 8001384:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001388:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800138c:	2211      	movs	r2, #17
 800138e:	701a      	strb	r2, [r3, #0]
					Si4468_CmdTxBuf[1] = 0x22; // Group
 8001390:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001394:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8001398:	2222      	movs	r2, #34	; 0x22
 800139a:	705a      	strb	r2, [r3, #1]
					Si4468_CmdTxBuf[2] = 0x04; // Number of properties
 800139c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80013a0:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80013a4:	2204      	movs	r2, #4
 80013a6:	709a      	strb	r2, [r3, #2]
					Si4468_CmdTxBuf[3] = 0x00; // Index of the first property to be set
 80013a8:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80013ac:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80013b0:	2200      	movs	r2, #0
 80013b2:	70da      	strb	r2, [r3, #3]
					Si4468_CmdTxBuf[4] = 0x08; //
 80013b4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80013b8:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80013bc:	2208      	movs	r2, #8
 80013be:	711a      	strb	r2, [r3, #4]
					Si4468_CmdTxBuf[5] = (uint8_t) parsed_number & 0x7F;// TRANSCEIVER TX POWER LEVEL
 80013c0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80013c4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80013d6:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80013da:	715a      	strb	r2, [r3, #5]
					Si4468_CmdTxBuf[6] = 0x00; //
 80013dc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80013e0:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80013e4:	2200      	movs	r2, #0
 80013e6:	719a      	strb	r2, [r3, #6]
					Si4468_CmdTxBuf[7] = 0x1D; //
 80013e8:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80013ec:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80013f0:	221d      	movs	r2, #29
 80013f2:	71da      	strb	r2, [r3, #7]
					Si4468_CmdTransmit(Si4468_CmdTxBuf, 8);
 80013f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013f8:	2108      	movs	r1, #8
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fa08 	bl	8001810 <Si4468_CmdTransmit>
					Si4468_WaitForCTS();
 8001400:	f000 fa30 	bl	8001864 <Si4468_WaitForCTS>
					sprintf(USB_MSG_TxBuf, "TX power adjusted to: %u    \r\n", (uint8_t)parsed_number & 0x7F);
 8001404:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001408:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001414:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001418:	490f      	ldr	r1, [pc, #60]	; (8001458 <USB_Rx_Parser+0x764>)
 800141a:	4618      	mov	r0, r3
 800141c:	f00c f9ae 	bl	800d77c <siprintf>
					CDC_Transmit_FS(USB_MSG_TxBuf, strlen(USB_MSG_TxBuf));
 8001420:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe fed3 	bl	80001d0 <strlen>
 800142a:	4603      	mov	r3, r0
 800142c:	b29a      	uxth	r2, r3
 800142e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f00b fc8b 	bl	800cd50 <CDC_Transmit_FS>
				}
			}
		}
		USB_RxDataReadyFlag = 0; // Clear the flag
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <USB_Rx_Parser+0x768>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
		USB_RxBufIndex = 0; // Reset the index
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <USB_Rx_Parser+0x76c>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
	}
}
 8001446:	bf00      	nop
 8001448:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	0800e224 	.word	0x0800e224
 8001454:	20000725 	.word	0x20000725
 8001458:	0800e28c 	.word	0x0800e28c
 800145c:	20000721 	.word	0x20000721
 8001460:	2000071c 	.word	0x2000071c
 8001464:	00000000 	.word	0x00000000

08001468 <ConvertTxADCtoPower>:

double ConvertTxADCtoPower(uint32_t ADCrawResult){
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	return ((double)0.00002 * ADCrawResult * ADCrawResult) + ((double)0.0301 * ADCrawResult) + ((double)1.6865);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff f971 	bl	8000758 <__aeabi_ui2d>
 8001476:	a31c      	add	r3, pc, #112	; (adr r3, 80014e8 <ConvertTxADCtoPower+0x80>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7fe ff00 	bl	8000280 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4614      	mov	r4, r2
 8001486:	461d      	mov	r5, r3
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff f965 	bl	8000758 <__aeabi_ui2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4620      	mov	r0, r4
 8001494:	4629      	mov	r1, r5
 8001496:	f7fe fef3 	bl	8000280 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4614      	mov	r4, r2
 80014a0:	461d      	mov	r5, r3
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff f958 	bl	8000758 <__aeabi_ui2d>
 80014a8:	a311      	add	r3, pc, #68	; (adr r3, 80014f0 <ConvertTxADCtoPower+0x88>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7fe fee7 	bl	8000280 <__aeabi_dmul>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4620      	mov	r0, r4
 80014b8:	4629      	mov	r1, r5
 80014ba:	f7ff f811 	bl	80004e0 <__adddf3>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	a30c      	add	r3, pc, #48	; (adr r3, 80014f8 <ConvertTxADCtoPower+0x90>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f808 	bl	80004e0 <__adddf3>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80014d8:	eeb0 0a47 	vmov.f32	s0, s14
 80014dc:	eef0 0a67 	vmov.f32	s1, s15
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	88e368f1 	.word	0x88e368f1
 80014ec:	3ef4f8b5 	.word	0x3ef4f8b5
 80014f0:	ce703afb 	.word	0xce703afb
 80014f4:	3f9ed288 	.word	0x3f9ed288
 80014f8:	6c8b4396 	.word	0x6c8b4396
 80014fc:	3ffafbe7 	.word	0x3ffafbe7

08001500 <ParseUSBInputAsInteger>:

uint8_t ParseUSBInputAsInteger(uint32_t * result){
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	uint8_t error = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	77fb      	strb	r3, [r7, #31]
	uint32_t parsed_number = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
	uint32_t order = 1;
 8001510:	2301      	movs	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
	// Try to parse the input as a decimal integer:
	for (int i = 0; i < USB_RxBufIndex; i++){
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	e033      	b.n	8001582 <ParseUSBInputAsInteger+0x82>
		if (USB_RxBuf[i] >= 48 && USB_RxBuf[i] <= 57){
 800151a:	4a22      	ldr	r2, [pc, #136]	; (80015a4 <ParseUSBInputAsInteger+0xa4>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b2f      	cmp	r3, #47	; 0x2f
 8001524:	d928      	bls.n	8001578 <ParseUSBInputAsInteger+0x78>
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <ParseUSBInputAsInteger+0xa4>)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b39      	cmp	r3, #57	; 0x39
 8001530:	d822      	bhi.n	8001578 <ParseUSBInputAsInteger+0x78>
			for (int j = USB_RxBufIndex - (i + 1); j > 0; j--){
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <ParseUSBInputAsInteger+0xa8>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	3301      	adds	r3, #1
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	e008      	b.n	8001554 <ParseUSBInputAsInteger+0x54>
				order *= 10;
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	617b      	str	r3, [r7, #20]
			for (int j = USB_RxBufIndex - (i + 1); j > 0; j--){
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3b01      	subs	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	dcf3      	bgt.n	8001542 <ParseUSBInputAsInteger+0x42>
			}
			parsed_number += (USB_RxBuf[i] - 48)*order;
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <ParseUSBInputAsInteger+0xa4>)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4413      	add	r3, r2
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	3b30      	subs	r3, #48	; 0x30
 8001564:	461a      	mov	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4413      	add	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
			order = 1;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e001      	b.n	800157c <ParseUSBInputAsInteger+0x7c>
		}
		else{
			error = 1;
 8001578:	2301      	movs	r3, #1
 800157a:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < USB_RxBufIndex; i++){
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	3301      	adds	r3, #1
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <ParseUSBInputAsInteger+0xa8>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4293      	cmp	r3, r2
 800158c:	dbc5      	blt.n	800151a <ParseUSBInputAsInteger+0x1a>
		}
	}
	*result = parsed_number;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	601a      	str	r2, [r3, #0]
	return error;
 8001594:	7ffb      	ldrb	r3, [r7, #31]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	2000031c 	.word	0x2000031c
 80015a8:	2000071c 	.word	0x2000071c

080015ac <USB_CDC_TransmitPredefinedMessage>:

void USB_CDC_TransmitPredefinedMessage(uint8_t ANSI_Color_State, uint8_t Select_Message){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	460a      	mov	r2, r1
 80015b6:	71fb      	strb	r3, [r7, #7]
 80015b8:	4613      	mov	r3, r2
 80015ba:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(1);
 80015bc:	2001      	movs	r0, #1
 80015be:	f000 febb 	bl	8002338 <HAL_Delay>
	switch(ANSI_Color_State){
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <USB_CDC_TransmitPredefinedMessage+0x22>
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d060      	beq.n	800168e <USB_CDC_TransmitPredefinedMessage+0xe2>
								"Enter a command: ", 63);
			break;
		}
		break;
	}
}
 80015cc:	e0c5      	b.n	800175a <USB_CDC_TransmitPredefinedMessage+0x1ae>
		switch(Select_Message){
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	2b11      	cmp	r3, #17
 80015d2:	f200 80bf 	bhi.w	8001754 <USB_CDC_TransmitPredefinedMessage+0x1a8>
 80015d6:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <USB_CDC_TransmitPredefinedMessage+0x30>)
 80015d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015dc:	08001625 	.word	0x08001625
 80015e0:	0800162f 	.word	0x0800162f
 80015e4:	08001645 	.word	0x08001645
 80015e8:	0800166d 	.word	0x0800166d
 80015ec:	08001755 	.word	0x08001755
 80015f0:	08001755 	.word	0x08001755
 80015f4:	0800164f 	.word	0x0800164f
 80015f8:	08001677 	.word	0x08001677
 80015fc:	08001681 	.word	0x08001681
 8001600:	08001755 	.word	0x08001755
 8001604:	08001755 	.word	0x08001755
 8001608:	08001755 	.word	0x08001755
 800160c:	08001755 	.word	0x08001755
 8001610:	08001659 	.word	0x08001659
 8001614:	0800168b 	.word	0x0800168b
 8001618:	08001663 	.word	0x08001663
 800161c:	0800168b 	.word	0x0800168b
 8001620:	0800163b 	.word	0x0800163b
			CDC_Transmit_FS((uint8_t *) "\e[2J\e[0;0HPQ9 COM module V2.0 by 213415IACB\r\n"
 8001624:	2192      	movs	r1, #146	; 0x92
 8001626:	484f      	ldr	r0, [pc, #316]	; (8001764 <USB_CDC_TransmitPredefinedMessage+0x1b8>)
 8001628:	f00b fb92 	bl	800cd50 <CDC_Transmit_FS>
			break;
 800162c:	e02e      	b.n	800168c <USB_CDC_TransmitPredefinedMessage+0xe0>
			CDC_Transmit_FS((uint8_t *) "\r\nLIST OF COMMANDS:\r\n"
 800162e:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8001632:	484d      	ldr	r0, [pc, #308]	; (8001768 <USB_CDC_TransmitPredefinedMessage+0x1bc>)
 8001634:	f00b fb8c 	bl	800cd50 <CDC_Transmit_FS>
			break;
 8001638:	e028      	b.n	800168c <USB_CDC_TransmitPredefinedMessage+0xe0>
			CDC_Transmit_FS((uint8_t *) "Device info:\r\n", 14);
 800163a:	210e      	movs	r1, #14
 800163c:	484b      	ldr	r0, [pc, #300]	; (800176c <USB_CDC_TransmitPredefinedMessage+0x1c0>)
 800163e:	f00b fb87 	bl	800cd50 <CDC_Transmit_FS>
			break;
 8001642:	e023      	b.n	800168c <USB_CDC_TransmitPredefinedMessage+0xe0>
			CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 8001644:	2111      	movs	r1, #17
 8001646:	484a      	ldr	r0, [pc, #296]	; (8001770 <USB_CDC_TransmitPredefinedMessage+0x1c4>)
 8001648:	f00b fb82 	bl	800cd50 <CDC_Transmit_FS>
			break;
 800164c:	e01e      	b.n	800168c <USB_CDC_TransmitPredefinedMessage+0xe0>
			CDC_Transmit_FS((uint8_t *) "WARNING! When the amplifier is turned on, the current\r\n"
 800164e:	21af      	movs	r1, #175	; 0xaf
 8001650:	4848      	ldr	r0, [pc, #288]	; (8001774 <USB_CDC_TransmitPredefinedMessage+0x1c8>)
 8001652:	f00b fb7d 	bl	800cd50 <CDC_Transmit_FS>
			break;
 8001656:	e019      	b.n	800168c <USB_CDC_TransmitPredefinedMessage+0xe0>
			CDC_Transmit_FS((uint8_t *) "Transmit mode active!\r\n", 23);
 8001658:	2117      	movs	r1, #23
 800165a:	4847      	ldr	r0, [pc, #284]	; (8001778 <USB_CDC_TransmitPredefinedMessage+0x1cc>)
 800165c:	f00b fb78 	bl	800cd50 <CDC_Transmit_FS>
			break;
 8001660:	e014      	b.n	800168c <USB_CDC_TransmitPredefinedMessage+0xe0>
			CDC_Transmit_FS((uint8_t *) "Receive mode active!\r\n", 22);
 8001662:	2116      	movs	r1, #22
 8001664:	4845      	ldr	r0, [pc, #276]	; (800177c <USB_CDC_TransmitPredefinedMessage+0x1d0>)
 8001666:	f00b fb73 	bl	800cd50 <CDC_Transmit_FS>
			break;
 800166a:	e00f      	b.n	800168c <USB_CDC_TransmitPredefinedMessage+0xe0>
			CDC_Transmit_FS((uint8_t *) "COMMAND NOT FOUND!\r\n"
 800166c:	214c      	movs	r1, #76	; 0x4c
 800166e:	4844      	ldr	r0, [pc, #272]	; (8001780 <USB_CDC_TransmitPredefinedMessage+0x1d4>)
 8001670:	f00b fb6e 	bl	800cd50 <CDC_Transmit_FS>
			break;
 8001674:	e00a      	b.n	800168c <USB_CDC_TransmitPredefinedMessage+0xe0>
			CDC_Transmit_FS((uint8_t *) "# RF AMPLIFIER SUPPLY ON!\r\n"
 8001676:	212c      	movs	r1, #44	; 0x2c
 8001678:	4842      	ldr	r0, [pc, #264]	; (8001784 <USB_CDC_TransmitPredefinedMessage+0x1d8>)
 800167a:	f00b fb69 	bl	800cd50 <CDC_Transmit_FS>
			break;
 800167e:	e005      	b.n	800168c <USB_CDC_TransmitPredefinedMessage+0xe0>
			CDC_Transmit_FS((uint8_t *) "# RF AMPLIFIER SUPPLY OFF!\r\n"
 8001680:	212d      	movs	r1, #45	; 0x2d
 8001682:	4841      	ldr	r0, [pc, #260]	; (8001788 <USB_CDC_TransmitPredefinedMessage+0x1dc>)
 8001684:	f00b fb64 	bl	800cd50 <CDC_Transmit_FS>
			break;
 8001688:	e000      	b.n	800168c <USB_CDC_TransmitPredefinedMessage+0xe0>
			break;
 800168a:	bf00      	nop
		break;
 800168c:	e062      	b.n	8001754 <USB_CDC_TransmitPredefinedMessage+0x1a8>
		switch(Select_Message){
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	3b01      	subs	r3, #1
 8001692:	2b10      	cmp	r3, #16
 8001694:	d860      	bhi.n	8001758 <USB_CDC_TransmitPredefinedMessage+0x1ac>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <USB_CDC_TransmitPredefinedMessage+0xf0>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	080016e1 	.word	0x080016e1
 80016a0:	080016f7 	.word	0x080016f7
 80016a4:	08001733 	.word	0x08001733
 80016a8:	08001701 	.word	0x08001701
 80016ac:	0800170b 	.word	0x0800170b
 80016b0:	08001715 	.word	0x08001715
 80016b4:	0800173d 	.word	0x0800173d
 80016b8:	08001747 	.word	0x08001747
 80016bc:	08001759 	.word	0x08001759
 80016c0:	08001759 	.word	0x08001759
 80016c4:	08001759 	.word	0x08001759
 80016c8:	08001759 	.word	0x08001759
 80016cc:	0800171f 	.word	0x0800171f
 80016d0:	08001751 	.word	0x08001751
 80016d4:	08001729 	.word	0x08001729
 80016d8:	08001751 	.word	0x08001751
 80016dc:	080016ed 	.word	0x080016ed
			CDC_Transmit_FS((uint8_t *) "\e[36m\r\nLIST OF COMMANDS:\r\n\e[37m"
 80016e0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80016e4:	4829      	ldr	r0, [pc, #164]	; (800178c <USB_CDC_TransmitPredefinedMessage+0x1e0>)
 80016e6:	f00b fb33 	bl	800cd50 <CDC_Transmit_FS>
			break;
 80016ea:	e032      	b.n	8001752 <USB_CDC_TransmitPredefinedMessage+0x1a6>
			CDC_Transmit_FS((uint8_t *) "\e[32m\r\nDevice info:\e[37m\r\n", 26);
 80016ec:	211a      	movs	r1, #26
 80016ee:	4828      	ldr	r0, [pc, #160]	; (8001790 <USB_CDC_TransmitPredefinedMessage+0x1e4>)
 80016f0:	f00b fb2e 	bl	800cd50 <CDC_Transmit_FS>
			break;
 80016f4:	e02d      	b.n	8001752 <USB_CDC_TransmitPredefinedMessage+0x1a6>
			CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 80016f6:	2111      	movs	r1, #17
 80016f8:	481d      	ldr	r0, [pc, #116]	; (8001770 <USB_CDC_TransmitPredefinedMessage+0x1c4>)
 80016fa:	f00b fb29 	bl	800cd50 <CDC_Transmit_FS>
			break;
 80016fe:	e028      	b.n	8001752 <USB_CDC_TransmitPredefinedMessage+0x1a6>
			CDC_Transmit_FS((uint8_t *) "\e[32mANSI COLORS ACTIVATED!\e[37m\r\n", 36);
 8001700:	2124      	movs	r1, #36	; 0x24
 8001702:	4824      	ldr	r0, [pc, #144]	; (8001794 <USB_CDC_TransmitPredefinedMessage+0x1e8>)
 8001704:	f00b fb24 	bl	800cd50 <CDC_Transmit_FS>
			break;
 8001708:	e023      	b.n	8001752 <USB_CDC_TransmitPredefinedMessage+0x1a6>
			CDC_Transmit_FS((uint8_t *) "\e[31mANSI COLORS DEACTIVATED!\e[37m\r\n", 36);
 800170a:	2124      	movs	r1, #36	; 0x24
 800170c:	4822      	ldr	r0, [pc, #136]	; (8001798 <USB_CDC_TransmitPredefinedMessage+0x1ec>)
 800170e:	f00b fb1f 	bl	800cd50 <CDC_Transmit_FS>
			break;
 8001712:	e01e      	b.n	8001752 <USB_CDC_TransmitPredefinedMessage+0x1a6>
			CDC_Transmit_FS((uint8_t *) "\e[31m\e[1mWARNING!\e[0m\e[31m When the amplifier is turned on, the current\r\n"
 8001714:	21c6      	movs	r1, #198	; 0xc6
 8001716:	4821      	ldr	r0, [pc, #132]	; (800179c <USB_CDC_TransmitPredefinedMessage+0x1f0>)
 8001718:	f00b fb1a 	bl	800cd50 <CDC_Transmit_FS>
			break;
 800171c:	e019      	b.n	8001752 <USB_CDC_TransmitPredefinedMessage+0x1a6>
			CDC_Transmit_FS((uint8_t *) "\e[32mTransmit mode active!\e[37m\r\n", 33);
 800171e:	2121      	movs	r1, #33	; 0x21
 8001720:	481f      	ldr	r0, [pc, #124]	; (80017a0 <USB_CDC_TransmitPredefinedMessage+0x1f4>)
 8001722:	f00b fb15 	bl	800cd50 <CDC_Transmit_FS>
			break;
 8001726:	e014      	b.n	8001752 <USB_CDC_TransmitPredefinedMessage+0x1a6>
			CDC_Transmit_FS((uint8_t *) "\e[32mReceive mode active!\e[37m\r\n", 32);
 8001728:	2120      	movs	r1, #32
 800172a:	481e      	ldr	r0, [pc, #120]	; (80017a4 <USB_CDC_TransmitPredefinedMessage+0x1f8>)
 800172c:	f00b fb10 	bl	800cd50 <CDC_Transmit_FS>
			break;
 8001730:	e00f      	b.n	8001752 <USB_CDC_TransmitPredefinedMessage+0x1a6>
			CDC_Transmit_FS((uint8_t *) "\e[1m\e[31mCOMMAND NOT FOUND!\e[37m\e[0m\r\n"
 8001732:	215e      	movs	r1, #94	; 0x5e
 8001734:	481c      	ldr	r0, [pc, #112]	; (80017a8 <USB_CDC_TransmitPredefinedMessage+0x1fc>)
 8001736:	f00b fb0b 	bl	800cd50 <CDC_Transmit_FS>
			break;
 800173a:	e00a      	b.n	8001752 <USB_CDC_TransmitPredefinedMessage+0x1a6>
			CDC_Transmit_FS((uint8_t *) "\e[1m\e[32m# RF AMPLIFIER SUPPLY ON!\e[37m\r\n\e[0m"
 800173c:	213e      	movs	r1, #62	; 0x3e
 800173e:	481b      	ldr	r0, [pc, #108]	; (80017ac <USB_CDC_TransmitPredefinedMessage+0x200>)
 8001740:	f00b fb06 	bl	800cd50 <CDC_Transmit_FS>
			break;
 8001744:	e005      	b.n	8001752 <USB_CDC_TransmitPredefinedMessage+0x1a6>
			CDC_Transmit_FS((uint8_t *) "\e[1m\e[31m# RF AMPLIFIER SUPPLY OFF!\e[37m\r\n\e[0m"
 8001746:	213f      	movs	r1, #63	; 0x3f
 8001748:	4819      	ldr	r0, [pc, #100]	; (80017b0 <USB_CDC_TransmitPredefinedMessage+0x204>)
 800174a:	f00b fb01 	bl	800cd50 <CDC_Transmit_FS>
			break;
 800174e:	e000      	b.n	8001752 <USB_CDC_TransmitPredefinedMessage+0x1a6>
			break;
 8001750:	bf00      	nop
		break;
 8001752:	e001      	b.n	8001758 <USB_CDC_TransmitPredefinedMessage+0x1ac>
		break;
 8001754:	bf00      	nop
 8001756:	e000      	b.n	800175a <USB_CDC_TransmitPredefinedMessage+0x1ae>
		break;
 8001758:	bf00      	nop
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	0800e2ac 	.word	0x0800e2ac
 8001768:	0800e340 	.word	0x0800e340
 800176c:	0800e46c 	.word	0x0800e46c
 8001770:	0800e278 	.word	0x0800e278
 8001774:	0800e47c 	.word	0x0800e47c
 8001778:	0800e52c 	.word	0x0800e52c
 800177c:	0800e544 	.word	0x0800e544
 8001780:	0800e55c 	.word	0x0800e55c
 8001784:	0800e5ac 	.word	0x0800e5ac
 8001788:	0800e5dc 	.word	0x0800e5dc
 800178c:	0800e60c 	.word	0x0800e60c
 8001790:	0800e744 	.word	0x0800e744
 8001794:	0800e760 	.word	0x0800e760
 8001798:	0800e784 	.word	0x0800e784
 800179c:	0800e7ac 	.word	0x0800e7ac
 80017a0:	0800e874 	.word	0x0800e874
 80017a4:	0800e898 	.word	0x0800e898
 80017a8:	0800e8bc 	.word	0x0800e8bc
 80017ac:	0800e91c 	.word	0x0800e91c
 80017b0:	0800e95c 	.word	0x0800e95c

080017b4 <Si4468_CmdTransmitReceive>:

uint8_t Si4468_CmdTransmitReceive(uint8_t * TxBuf, uint8_t * RxBuf, uint8_t Length){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	4613      	mov	r3, r2
 80017c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017cc:	f002 fe42 	bl	8004454 <HAL_GPIO_WritePin>
	uint8_t result = HAL_SPI_TransmitReceive(&hspi1, TxBuf, RxBuf, Length, HAL_MAX_DELAY);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	480b      	ldr	r0, [pc, #44]	; (800180c <Si4468_CmdTransmitReceive+0x58>)
 80017e0:	f005 fe66 	bl	80074b0 <HAL_SPI_TransmitReceive>
 80017e4:	4603      	mov	r3, r0
 80017e6:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 80017e8:	2201      	movs	r2, #1
 80017ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f002 fe2f 	bl	8004454 <HAL_GPIO_WritePin>
	if (result != HAL_OK) return 1;
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <Si4468_CmdTransmitReceive+0x4c>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <Si4468_CmdTransmitReceive+0x4e>
	return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002b0 	.word	0x200002b0

08001810 <Si4468_CmdTransmit>:

uint8_t Si4468_CmdTransmit(uint8_t * TxBuf, uint8_t Length){
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001826:	f002 fe15 	bl	8004454 <HAL_GPIO_WritePin>
	uint8_t result = HAL_SPI_Transmit(&hspi1, TxBuf, Length, HAL_MAX_DELAY);
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	b29a      	uxth	r2, r3
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	480a      	ldr	r0, [pc, #40]	; (8001860 <Si4468_CmdTransmit+0x50>)
 8001836:	f005 fcc6 	bl	80071c6 <HAL_SPI_Transmit>
 800183a:	4603      	mov	r3, r0
 800183c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 800183e:	2201      	movs	r2, #1
 8001840:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001848:	f002 fe04 	bl	8004454 <HAL_GPIO_WritePin>
	if (result != HAL_OK) return 1;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <Si4468_CmdTransmit+0x46>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <Si4468_CmdTransmit+0x48>
	return 0;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200002b0 	.word	0x200002b0

08001864 <Si4468_WaitForCTS>:
	result += HAL_SPI_Receive(&hspi1, RxBuf, Length, HAL_MAX_DELAY);
	if (result != HAL_OK) return 1;
	return 0;
}

void Si4468_WaitForCTS(void){
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	uint8_t Si4468_CmdTxBuf[2], Si4468_CmdRxBuf[2];
	Si4468_CmdTxBuf[0] = Si4468_READ_CMD_BUFF;
 800186a:	2344      	movs	r3, #68	; 0x44
 800186c:	713b      	strb	r3, [r7, #4]
	Si4468_CmdRxBuf[1] = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	707b      	strb	r3, [r7, #1]
	while(Si4468_CmdRxBuf[1] != 0xFF){
 8001872:	e005      	b.n	8001880 <Si4468_WaitForCTS+0x1c>
		Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 8001874:	4639      	mov	r1, r7
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	2202      	movs	r2, #2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff9a 	bl	80017b4 <Si4468_CmdTransmitReceive>
	while(Si4468_CmdRxBuf[1] != 0xFF){
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d1f6      	bne.n	8001874 <Si4468_WaitForCTS+0x10>
	}
}
 8001886:	bf00      	nop
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t Si4468_ConfigArray[] = RADIO_CONFIGURATION_DATA_ARRAY;
 8001898:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800189c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80018a0:	4a5f      	ldr	r2, [pc, #380]	; (8001a20 <main+0x190>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	4611      	mov	r1, r2
 80018a6:	f240 138d 	movw	r3, #397	; 0x18d
 80018aa:	461a      	mov	r2, r3
 80018ac:	f00b ffe0 	bl	800d870 <memcpy>
	uint8_t Si4468_TxBuf[64] = {0}; // For writing to Si4468 FIFO registers
 80018b0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80018b4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	3304      	adds	r3, #4
 80018be:	223c      	movs	r2, #60	; 0x3c
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f00b ff7a 	bl	800d7bc <memset>
	uint8_t Si4468_RxBuf[64] = {0}; // For reading from Si4468 FIFO registers
 80018c8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80018cc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	3304      	adds	r3, #4
 80018d6:	223c      	movs	r2, #60	; 0x3c
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f00b ff6e 	bl	800d7bc <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e0:	f000 fcb5 	bl	800224e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e4:	f000 f8a2 	bl	8001a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e8:	f000 fa0a 	bl	8001d00 <MX_GPIO_Init>
  MX_DMA_Init();
 80018ec:	f000 f9ea 	bl	8001cc4 <MX_DMA_Init>
  MX_ADC1_Init();
 80018f0:	f000 f8f2 	bl	8001ad8 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80018f4:	f000 f976 	bl	8001be4 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80018f8:	f000 f9a6 	bl	8001c48 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80018fc:	f00b f952 	bl	800cba4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Set SPI NSS high
 8001900:	2201      	movs	r2, #1
 8001902:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190a:	f002 fda3 	bl	8004454 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn the RF amplifier stage 2 OFF
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001914:	4843      	ldr	r0, [pc, #268]	; (8001a24 <main+0x194>)
 8001916:	f002 fd9d 	bl	8004454 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the RF amplifier stage 1 OFF
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001920:	4840      	ldr	r0, [pc, #256]	; (8001a24 <main+0x194>)
 8001922:	f002 fd97 	bl	8004454 <HAL_GPIO_WritePin>

  // ### Si4468 TRANSCEIVER STARTUP
  // Perform a POR (Power on reset)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800192c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001930:	f002 fd90 	bl	8004454 <HAL_GPIO_WritePin>
  HAL_Delay(1); // A minimum of 10 us is required
 8001934:	2001      	movs	r0, #1
 8001936:	f000 fcff 	bl	8002338 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001944:	f002 fd86 	bl	8004454 <HAL_GPIO_WritePin>
  HAL_Delay(10); // POR should not take more than 6 ms, but let's be safe...
 8001948:	200a      	movs	r0, #10
 800194a:	f000 fcf5 	bl	8002338 <HAL_Delay>

  /* Configure the Si4468 transceiver based on the settings in the header file
   * NB! To generate a custom config. header file, use the Silicon Lab's "Wireless Development Suite"
   *
   */
  uint16_t i = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	f8a7 3316 	strh.w	r3, [r7, #790]	; 0x316
  uint16_t Si4468_ConfigArrayLength = sizeof(Si4468_ConfigArray)/sizeof(Si4468_ConfigArray[0]);
 8001954:	f240 138d 	movw	r3, #397	; 0x18d
 8001958:	f8a7 3314 	strh.w	r3, [r7, #788]	; 0x314
  while (Si4468_ConfigArray[i] != 0x00){ // The last byte in the autogen. array should indicate the end
 800195c:	e020      	b.n	80019a0 <main+0x110>
	  Si4468_CmdTransmit(&Si4468_ConfigArray[i + 1], Si4468_ConfigArray[i]);
 800195e:	f8b7 3316 	ldrh.w	r3, [r7, #790]	; 0x316
 8001962:	3301      	adds	r3, #1
 8001964:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8001968:	18d0      	adds	r0, r2, r3
 800196a:	f8b7 3316 	ldrh.w	r3, [r7, #790]	; 0x316
 800196e:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8001972:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff ff49 	bl	8001810 <Si4468_CmdTransmit>
	  Si4468_WaitForCTS();
 800197e:	f7ff ff71 	bl	8001864 <Si4468_WaitForCTS>
	  i += (Si4468_ConfigArray[i] + 1);
 8001982:	f8b7 3316 	ldrh.w	r3, [r7, #790]	; 0x316
 8001986:	f507 7246 	add.w	r2, r7, #792	; 0x318
 800198a:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	b29a      	uxth	r2, r3
 8001992:	f8b7 3316 	ldrh.w	r3, [r7, #790]	; 0x316
 8001996:	4413      	add	r3, r2
 8001998:	b29b      	uxth	r3, r3
 800199a:	3301      	adds	r3, #1
 800199c:	f8a7 3316 	strh.w	r3, [r7, #790]	; 0x316
  while (Si4468_ConfigArray[i] != 0x00){ // The last byte in the autogen. array should indicate the end
 80019a0:	f8b7 3316 	ldrh.w	r3, [r7, #790]	; 0x316
 80019a4:	f507 7246 	add.w	r2, r7, #792	; 0x318
 80019a8:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1d5      	bne.n	800195e <main+0xce>
  }

  /* For testing purposes, put the Si4468 into Continuous Wave (CW) transmission mode
   *
   */
  Si4468_CmdTxBuf[0] = Si4468_SET_PROPERTY;
 80019b2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80019b6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80019ba:	2211      	movs	r2, #17
 80019bc:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x20; // Group
 80019be:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80019c2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80019c6:	2220      	movs	r2, #32
 80019c8:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x01; // Number of properties
 80019ca:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80019ce:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80019d2:	2201      	movs	r2, #1
 80019d4:	709a      	strb	r2, [r3, #2]
  Si4468_CmdTxBuf[3] = 0x00; // Index of the first property to be set
 80019d6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80019da:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80019de:	2200      	movs	r2, #0
 80019e0:	70da      	strb	r2, [r3, #3]
  Si4468_CmdTxBuf[4] = 0x00; // Data
 80019e2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80019e6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80019ea:	2200      	movs	r2, #0
 80019ec:	711a      	strb	r2, [r3, #4]
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 5);
 80019ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019f2:	2105      	movs	r1, #5
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff0b 	bl	8001810 <Si4468_CmdTransmit>
  Si4468_WaitForCTS();
 80019fa:	f7ff ff33 	bl	8001864 <Si4468_WaitForCTS>

  // Wait for the COM port to open:
  while(!USB_COM_Port_open){
 80019fe:	bf00      	nop
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <main+0x198>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0fb      	beq.n	8001a00 <main+0x170>
	  //
  };
  HAL_Delay(1000);
 8001a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a0c:	f000 fc94 	bl	8002338 <HAL_Delay>
  // Send the welcome message:
  USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_WELCOME);
 8001a10:	2100      	movs	r1, #0
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fdca 	bl	80015ac <USB_CDC_TransmitPredefinedMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  USB_Rx_Parser();
 8001a18:	f7ff f96c 	bl	8000cf4 <USB_Rx_Parser>
 8001a1c:	e7fc      	b.n	8001a18 <main+0x188>
 8001a1e:	bf00      	nop
 8001a20:	0800e99c 	.word	0x0800e99c
 8001a24:	48000800 	.word	0x48000800
 8001a28:	20000a10 	.word	0x20000a10

08001a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b096      	sub	sp, #88	; 0x58
 8001a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	2244      	movs	r2, #68	; 0x44
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00b febe 	bl	800d7bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a40:	463b      	mov	r3, r7
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a52:	f004 faa3 	bl	8005f9c <HAL_PWREx_ControlVoltageScaling>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a5c:	f000 f9f6 	bl	8001e4c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001a60:	2312      	movs	r3, #18
 8001a62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a6a:	2340      	movs	r3, #64	; 0x40
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001a76:	23b0      	movs	r3, #176	; 0xb0
 8001a78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a86:	230a      	movs	r3, #10
 8001a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4618      	mov	r0, r3
 8001a98:	f004 fae6 	bl	8006068 <HAL_RCC_OscConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001aa2:	f000 f9d3 	bl	8001e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa6:	230f      	movs	r3, #15
 8001aa8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	2104      	movs	r1, #4
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 ff34 	bl	800692c <HAL_RCC_ClockConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001aca:	f000 f9bf 	bl	8001e4c <Error_Handler>
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3758      	adds	r7, #88	; 0x58
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001afa:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001afc:	4a36      	ldr	r2, [pc, #216]	; (8001bd8 <MX_ADC1_Init+0x100>)
 8001afe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b06:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b0c:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b12:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b3e:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b5a:	481e      	ldr	r0, [pc, #120]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b5c:	f000 fe46 	bl	80027ec <HAL_ADC_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001b66:	f000 f971 	bl	8001e4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	4817      	ldr	r0, [pc, #92]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001b76:	f001 ff0f 	bl	8003998 <HAL_ADCEx_MultiModeConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b80:	f000 f964 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <MX_ADC1_Init+0x104>)
 8001b86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b88:	2306      	movs	r3, #6
 8001b8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b90:	237f      	movs	r3, #127	; 0x7f
 8001b92:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b94:	2304      	movs	r3, #4
 8001b96:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001ba2:	f001 f8a1 	bl	8002ce8 <HAL_ADC_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001bac:	f000 f94e 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <MX_ADC1_Init+0x108>)
 8001bb2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_ADC1_Init+0xfc>)
 8001bbe:	f001 f893 	bl	8002ce8 <HAL_ADC_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001bc8:	f000 f940 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000017c 	.word	0x2000017c
 8001bd8:	50040000 	.word	0x50040000
 8001bdc:	2e300800 	.word	0x2e300800
 8001be0:	32601000 	.word	0x32601000

08001be4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MX_LPUART1_UART_Init+0x58>)
 8001bea:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <MX_LPUART1_UART_Init+0x5c>)
 8001bec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <MX_LPUART1_UART_Init+0x58>)
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <MX_LPUART1_UART_Init+0x60>)
 8001bf2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_LPUART1_UART_Init+0x58>)
 8001bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bfa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_LPUART1_UART_Init+0x58>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_LPUART1_UART_Init+0x58>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_LPUART1_UART_Init+0x58>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_LPUART1_UART_Init+0x58>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_LPUART1_UART_Init+0x58>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MX_LPUART1_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001c20:	2300      	movs	r3, #0
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_LPUART1_UART_Init+0x58>)
 8001c28:	f006 fc37 	bl	800849a <HAL_RS485Ex_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c32:	f000 f90b 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000228 	.word	0x20000228
 8001c40:	40008000 	.word	0x40008000
 8001c44:	00033324 	.word	0x00033324

08001c48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <MX_SPI1_Init+0x78>)
 8001c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c7e:	2210      	movs	r2, #16
 8001c80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c96:	2207      	movs	r2, #7
 8001c98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001ca8:	f005 f9ea 	bl	8007080 <HAL_SPI_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cb2:	f000 f8cb 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200002b0 	.word	0x200002b0
 8001cc0:	40013000 	.word	0x40013000

08001cc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_DMA_Init+0x38>)
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <MX_DMA_Init+0x38>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6493      	str	r3, [r2, #72]	; 0x48
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_DMA_Init+0x38>)
 8001cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	200b      	movs	r0, #11
 8001ce8:	f001 ffd5 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cec:	200b      	movs	r0, #11
 8001cee:	f001 ffee 	bl	8003cce <HAL_NVIC_EnableIRQ>

}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000

08001d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d16:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <MX_GPIO_Init+0x140>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	4a49      	ldr	r2, [pc, #292]	; (8001e40 <MX_GPIO_Init+0x140>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d22:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <MX_GPIO_Init+0x140>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <MX_GPIO_Init+0x140>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	4a43      	ldr	r2, [pc, #268]	; (8001e40 <MX_GPIO_Init+0x140>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <MX_GPIO_Init+0x140>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <MX_GPIO_Init+0x140>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	4a3d      	ldr	r2, [pc, #244]	; (8001e40 <MX_GPIO_Init+0x140>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <MX_GPIO_Init+0x140>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_AMP_EN1_Pin|RF_AMP_EN2_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001d64:	4837      	ldr	r0, [pc, #220]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d66:	f002 fb75 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYS_RST_Pin|TRANS_SDN_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f248 1110 	movw	r1, #33040	; 0x8110
 8001d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d74:	f002 fb6e 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FWD_MEAS_AMP_EN_Pin|REV_MEAS_AMP_EN_Pin, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	21c0      	movs	r1, #192	; 0xc0
 8001d7c:	4832      	ldr	r0, [pc, #200]	; (8001e48 <MX_GPIO_Init+0x148>)
 8001d7e:	f002 fb69 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_AMP_EN1_Pin RF_AMP_EN2_Pin */
  GPIO_InitStruct.Pin = RF_AMP_EN1_Pin|RF_AMP_EN2_Pin;
 8001d82:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	4619      	mov	r1, r3
 8001d9a:	482a      	ldr	r0, [pc, #168]	; (8001e44 <MX_GPIO_Init+0x144>)
 8001d9c:	f002 f9e8 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRANS_GPIO1_Pin TRANS_GPIO0_Pin LDO_PG_Pin */
  GPIO_InitStruct.Pin = TRANS_GPIO1_Pin|TRANS_GPIO0_Pin|LDO_PG_Pin;
 8001da0:	f240 2303 	movw	r3, #515	; 0x203
 8001da4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db8:	f002 f9da 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYS_RST_Pin TRANS_SDN_Pin */
  GPIO_InitStruct.Pin = SYS_RST_Pin|TRANS_SDN_Pin;
 8001dbc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd8:	f002 f9ca 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRANS_NIRQ_Pin */
  GPIO_InitStruct.Pin = TRANS_NIRQ_Pin;
 8001ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001de2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TRANS_NIRQ_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	4619      	mov	r1, r3
 8001df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df6:	f002 f9bb 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e16:	f002 f9ab 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : FWD_MEAS_AMP_EN_Pin REV_MEAS_AMP_EN_Pin */
  GPIO_InitStruct.Pin = FWD_MEAS_AMP_EN_Pin|REV_MEAS_AMP_EN_Pin;
 8001e1a:	23c0      	movs	r3, #192	; 0xc0
 8001e1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_GPIO_Init+0x148>)
 8001e32:	f002 f99d 	bl	8004170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e36:	bf00      	nop
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	48000800 	.word	0x48000800
 8001e48:	48000400 	.word	0x48000400

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <Error_Handler+0x8>
	...

08001e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_MspInit+0x44>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e62:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <HAL_MspInit+0x44>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_MspInit+0x44>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_MspInit+0x44>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <HAL_MspInit+0x44>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6593      	str	r3, [r2, #88]	; 0x58
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_MspInit+0x44>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <HAL_ADC_MspInit+0xcc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d14f      	bne.n	8001f62 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ec2:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <HAL_ADC_MspInit+0xd0>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	4a2a      	ldr	r2, [pc, #168]	; (8001f70 <HAL_ADC_MspInit+0xd0>)
 8001ec8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <HAL_ADC_MspInit+0xd0>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_ADC_MspInit+0xd0>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	4a24      	ldr	r2, [pc, #144]	; (8001f70 <HAL_ADC_MspInit+0xd0>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_ADC_MspInit+0xd0>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = FWD_MEAS_ADC_Pin|REV_MEAS_ADC_Pin;
 8001ef2:	23c0      	movs	r3, #192	; 0xc0
 8001ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ef6:	230b      	movs	r3, #11
 8001ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f08:	f002 f932 	bl	8004170 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_ADC_MspInit+0xd4>)
 8001f0e:	4a1a      	ldr	r2, [pc, #104]	; (8001f78 <HAL_ADC_MspInit+0xd8>)
 8001f10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_ADC_MspInit+0xd4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f18:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_ADC_MspInit+0xd4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_ADC_MspInit+0xd4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <HAL_ADC_MspInit+0xd4>)
 8001f26:	2280      	movs	r2, #128	; 0x80
 8001f28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_ADC_MspInit+0xd4>)
 8001f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_ADC_MspInit+0xd4>)
 8001f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_ADC_MspInit+0xd4>)
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_ADC_MspInit+0xd4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f46:	480b      	ldr	r0, [pc, #44]	; (8001f74 <HAL_ADC_MspInit+0xd4>)
 8001f48:	f001 fedc 	bl	8003d04 <HAL_DMA_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8001f52:	f7ff ff7b 	bl	8001e4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a06      	ldr	r2, [pc, #24]	; (8001f74 <HAL_ADC_MspInit+0xd4>)
 8001f5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f5c:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <HAL_ADC_MspInit+0xd4>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	50040000 	.word	0x50040000
 8001f70:	40021000 	.word	0x40021000
 8001f74:	200001e0 	.word	0x200001e0
 8001f78:	40020008 	.word	0x40020008

08001f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b098      	sub	sp, #96	; 0x60
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	2234      	movs	r2, #52	; 0x34
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00b fc0d 	bl	800d7bc <memset>
  if(huart->Instance==LPUART1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a2d      	ldr	r2, [pc, #180]	; (800205c <HAL_UART_MspInit+0xe0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d152      	bne.n	8002052 <HAL_UART_MspInit+0xd6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001fac:	2320      	movs	r3, #32
 8001fae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb4:	f107 0318 	add.w	r3, r7, #24
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f004 fedb 	bl	8006d74 <HAL_RCCEx_PeriphCLKConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fc4:	f7ff ff42 	bl	8001e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_UART_MspInit+0xe4>)
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	4a24      	ldr	r2, [pc, #144]	; (8002060 <HAL_UART_MspInit+0xe4>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_UART_MspInit+0xe4>)
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_UART_MspInit+0xe4>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe4:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <HAL_UART_MspInit+0xe4>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fec:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <HAL_UART_MspInit+0xe4>)
 8001fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_UART_MspInit+0xe4>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	4a18      	ldr	r2, [pc, #96]	; (8002060 <HAL_UART_MspInit+0xe4>)
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002004:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_UART_MspInit+0xe4>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002010:	230c      	movs	r3, #12
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002020:	2308      	movs	r3, #8
 8002022:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002028:	4619      	mov	r1, r3
 800202a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202e:	f002 f89f 	bl	8004170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002032:	2302      	movs	r3, #2
 8002034:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002042:	2308      	movs	r3, #8
 8002044:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <HAL_UART_MspInit+0xe8>)
 800204e:	f002 f88f 	bl	8004170 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002052:	bf00      	nop
 8002054:	3760      	adds	r7, #96	; 0x60
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40008000 	.word	0x40008000
 8002060:	40021000 	.word	0x40021000
 8002064:	48000400 	.word	0x48000400

08002068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_SPI_MspInit+0x7c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d127      	bne.n	80020da <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_SPI_MspInit+0x80>)
 800208c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208e:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <HAL_SPI_MspInit+0x80>)
 8002090:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002094:	6613      	str	r3, [r2, #96]	; 0x60
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_SPI_MspInit+0x80>)
 8002098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_SPI_MspInit+0x80>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a6:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <HAL_SPI_MspInit+0x80>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_SPI_MspInit+0x80>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80020ba:	2338      	movs	r3, #56	; 0x38
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ca:	2305      	movs	r3, #5
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <HAL_SPI_MspInit+0x84>)
 80020d6:	f002 f84b 	bl	8004170 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40013000 	.word	0x40013000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	48000400 	.word	0x48000400

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020f4:	e7fe      	b.n	80020f4 <NMI_Handler+0x4>

080020f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <MemManage_Handler+0x4>

08002102 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <UsageFault_Handler+0x4>

0800210e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800213c:	f000 f8dc 	bl	80022f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <DMA1_Channel1_IRQHandler+0x10>)
 800214a:	f001 ff31 	bl	8003fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200001e0 	.word	0x200001e0

08002158 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <USB_IRQHandler+0x10>)
 800215e:	f002 fab9 	bl	80046d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20001414 	.word	0x20001414

0800216c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <_sbrk+0x5c>)
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <_sbrk+0x60>)
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <_sbrk+0x64>)
 800218a:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <_sbrk+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d207      	bcs.n	80021ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800219c:	f00b fb3c 	bl	800d818 <__errno>
 80021a0:	4603      	mov	r3, r0
 80021a2:	220c      	movs	r2, #12
 80021a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e009      	b.n	80021c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <_sbrk+0x64>)
 80021bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2000a000 	.word	0x2000a000
 80021cc:	00000400 	.word	0x00000400
 80021d0:	20000728 	.word	0x20000728
 80021d4:	20001a78 	.word	0x20001a78

080021d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <SystemInit+0x20>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <SystemInit+0x20>)
 80021e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002234 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002200:	f7ff ffea 	bl	80021d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002204:	480c      	ldr	r0, [pc, #48]	; (8002238 <LoopForever+0x6>)
  ldr r1, =_edata
 8002206:	490d      	ldr	r1, [pc, #52]	; (800223c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002208:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <LoopForever+0xe>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <LoopForever+0x12>)
  ldr r4, =_ebss
 800221c:	4c0a      	ldr	r4, [pc, #40]	; (8002248 <LoopForever+0x16>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800222a:	f00b fafb 	bl	800d824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800222e:	f7ff fb2f 	bl	8001890 <main>

08002232 <LoopForever>:

LoopForever:
    b LoopForever
 8002232:	e7fe      	b.n	8002232 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002234:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800223c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8002240:	0800ec00 	.word	0x0800ec00
  ldr r2, =_sbss
 8002244:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8002248:	20001a74 	.word	0x20001a74

0800224c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800224c:	e7fe      	b.n	800224c <ADC1_2_IRQHandler>

0800224e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002258:	2003      	movs	r0, #3
 800225a:	f001 fd11 	bl	8003c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800225e:	200f      	movs	r0, #15
 8002260:	f000 f80e 	bl	8002280 <HAL_InitTick>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	71fb      	strb	r3, [r7, #7]
 800226e:	e001      	b.n	8002274 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002270:	f7ff fdf2 	bl	8001e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002274:	79fb      	ldrb	r3, [r7, #7]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800228c:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_InitTick+0x6c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d023      	beq.n	80022dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_InitTick+0x70>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <HAL_InitTick+0x6c>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f001 fd1d 	bl	8003cea <HAL_SYSTICK_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10f      	bne.n	80022d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d809      	bhi.n	80022d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f001 fce7 	bl	8003c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022c8:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_InitTick+0x74>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e007      	b.n	80022e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	e004      	b.n	80022e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	e001      	b.n	80022e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000000c 	.word	0x2000000c
 80022f0:	20000004 	.word	0x20000004
 80022f4:	20000008 	.word	0x20000008

080022f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x20>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_IncTick+0x24>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4413      	add	r3, r2
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_IncTick+0x24>)
 800230a:	6013      	str	r3, [r2, #0]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	2000000c 	.word	0x2000000c
 800231c:	2000072c 	.word	0x2000072c

08002320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return uwTick;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_GetTick+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	2000072c 	.word	0x2000072c

08002338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff ffee 	bl	8002320 <HAL_GetTick>
 8002344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d005      	beq.n	800235e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_Delay+0x44>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800235e:	bf00      	nop
 8002360:	f7ff ffde 	bl	8002320 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d8f7      	bhi.n	8002360 <HAL_Delay+0x28>
  {
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000000c 	.word	0x2000000c

08002380 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	609a      	str	r2, [r3, #8]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3360      	adds	r3, #96	; 0x60
 80023fa:	461a      	mov	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <LL_ADC_SetOffset+0x44>)
 800240a:	4013      	ands	r3, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	4313      	orrs	r3, r2
 8002418:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002420:	bf00      	nop
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	03fff000 	.word	0x03fff000

08002430 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3360      	adds	r3, #96	; 0x60
 800243e:	461a      	mov	r2, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3360      	adds	r3, #96	; 0x60
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	431a      	orrs	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002486:	bf00      	nop
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	615a      	str	r2, [r3, #20]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024de:	b480      	push	{r7}
 80024e0:	b087      	sub	sp, #28
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3330      	adds	r3, #48	; 0x30
 80024ee:	461a      	mov	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	4413      	add	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	211f      	movs	r1, #31
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	401a      	ands	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	f003 011f 	and.w	r1, r3, #31
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	431a      	orrs	r2, r3
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800252a:	bf00      	nop
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002536:	b480      	push	{r7}
 8002538:	b087      	sub	sp, #28
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3314      	adds	r3, #20
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	0e5b      	lsrs	r3, r3, #25
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	4413      	add	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	0d1b      	lsrs	r3, r3, #20
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	2107      	movs	r1, #7
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	401a      	ands	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	0d1b      	lsrs	r3, r3, #20
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	431a      	orrs	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	43db      	mvns	r3, r3
 80025a6:	401a      	ands	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f003 0318 	and.w	r3, r3, #24
 80025ae:	4908      	ldr	r1, [pc, #32]	; (80025d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025b0:	40d9      	lsrs	r1, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	400b      	ands	r3, r1
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ba:	431a      	orrs	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	0007ffff 	.word	0x0007ffff

080025d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 031f 	and.w	r3, r3, #31
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6093      	str	r3, [r2, #8]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002628:	d101      	bne.n	800262e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800264c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002650:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002678:	d101      	bne.n	800267e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800269c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026c8:	f043 0202 	orr.w	r2, r3, #2
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <LL_ADC_IsEnabled+0x18>
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <LL_ADC_IsEnabled+0x1a>
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d101      	bne.n	800271a <LL_ADC_IsDisableOngoing+0x18>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <LL_ADC_IsDisableOngoing+0x1a>
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800273c:	f043 0204 	orr.w	r2, r3, #4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002764:	f043 0210 	orr.w	r2, r3, #16
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b04      	cmp	r3, #4
 800278a:	d101      	bne.n	8002790 <LL_ADC_REG_IsConversionOngoing+0x18>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b2:	f043 0220 	orr.w	r2, r3, #32
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d101      	bne.n	80027de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e12b      	b.n	8002a5e <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff fb43 	bl	8001ea0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fef1 	bl	8002614 <LL_ADC_IsDeepPowerDownEnabled>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fed7 	bl	80025f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff0c 	bl	8002664 <LL_ADC_IsInternalRegulatorEnabled>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d115      	bne.n	800287e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fef0 	bl	800263c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800285c:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <HAL_ADC_Init+0x27c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	4a82      	ldr	r2, [pc, #520]	; (8002a6c <HAL_ADC_Init+0x280>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	3301      	adds	r3, #1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002870:	e002      	b.n	8002878 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3b01      	subs	r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f9      	bne.n	8002872 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff feee 	bl	8002664 <LL_ADC_IsInternalRegulatorEnabled>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10d      	bne.n	80028aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002892:	f043 0210 	orr.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff62 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 80028b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 80c4 	bne.w	8002a4c <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f040 80c0 	bne.w	8002a4c <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028d4:	f043 0202 	orr.w	r2, r3, #2
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fefb 	bl	80026dc <LL_ADC_IsEnabled>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d110      	bne.n	800290e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ec:	4860      	ldr	r0, [pc, #384]	; (8002a70 <HAL_ADC_Init+0x284>)
 80028ee:	f7ff fef5 	bl	80026dc <LL_ADC_IsEnabled>
 80028f2:	4604      	mov	r4, r0
 80028f4:	485f      	ldr	r0, [pc, #380]	; (8002a74 <HAL_ADC_Init+0x288>)
 80028f6:	f7ff fef1 	bl	80026dc <LL_ADC_IsEnabled>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4323      	orrs	r3, r4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d105      	bne.n	800290e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4619      	mov	r1, r3
 8002908:	485b      	ldr	r0, [pc, #364]	; (8002a78 <HAL_ADC_Init+0x28c>)
 800290a:	f7ff fd39 	bl	8002380 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7e5b      	ldrb	r3, [r3, #25]
 8002912:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002918:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800291e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002924:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800292c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d106      	bne.n	800294a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	3b01      	subs	r3, #1
 8002942:	045b      	lsls	r3, r3, #17
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	4b43      	ldr	r3, [pc, #268]	; (8002a7c <HAL_ADC_Init+0x290>)
 800296e:	4013      	ands	r3, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	69b9      	ldr	r1, [r7, #24]
 8002976:	430b      	orrs	r3, r1
 8002978:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff ff21 	bl	80027c6 <LL_ADC_INJ_IsConversionOngoing>
 8002984:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d13d      	bne.n	8002a08 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d13a      	bne.n	8002a08 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002996:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800299e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ae:	f023 0302 	bic.w	r3, r3, #2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	430b      	orrs	r3, r1
 80029ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d118      	bne.n	80029f8 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029dc:	4311      	orrs	r1, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029e2:	4311      	orrs	r1, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029e8:	430a      	orrs	r2, r1
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	611a      	str	r2, [r3, #16]
 80029f6:	e007      	b.n	8002a08 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d10c      	bne.n	8002a2a <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f023 010f 	bic.w	r1, r3, #15
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	1e5a      	subs	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	631a      	str	r2, [r3, #48]	; 0x30
 8002a28:	e007      	b.n	8002a3a <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 020f 	bic.w	r2, r2, #15
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	f023 0303 	bic.w	r3, r3, #3
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
 8002a4a:	e007      	b.n	8002a5c <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	f043 0210 	orr.w	r2, r3, #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3724      	adds	r7, #36	; 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd90      	pop	{r4, r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	053e2d63 	.word	0x053e2d63
 8002a70:	50040000 	.word	0x50040000
 8002a74:	50040100 	.word	0x50040100
 8002a78:	50040300 	.word	0x50040300
 8002a7c:	fff0c007 	.word	0xfff0c007

08002a80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a8c:	4850      	ldr	r0, [pc, #320]	; (8002bd0 <HAL_ADC_Start_DMA+0x150>)
 8002a8e:	f7ff fda1 	bl	80025d4 <LL_ADC_GetMultimode>
 8002a92:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fe6d 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f040 808e 	bne.w	8002bc2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_Start_DMA+0x34>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e089      	b.n	8002bc8 <HAL_ADC_Start_DMA+0x148>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d002      	beq.n	8002ace <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b09      	cmp	r3, #9
 8002acc:	d172      	bne.n	8002bb4 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fdc2 	bl	8003658 <ADC_Enable>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d165      	bne.n	8002baa <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a37      	ldr	r2, [pc, #220]	; (8002bd4 <HAL_ADC_Start_DMA+0x154>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d002      	beq.n	8002b02 <HAL_ADC_Start_DMA+0x82>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	e000      	b.n	8002b04 <HAL_ADC_Start_DMA+0x84>
 8002b02:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <HAL_ADC_Start_DMA+0x158>)
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d002      	beq.n	8002b12 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d105      	bne.n	8002b1e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	f023 0206 	bic.w	r2, r3, #6
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	659a      	str	r2, [r3, #88]	; 0x58
 8002b36:	e002      	b.n	8002b3e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b42:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <HAL_ADC_Start_DMA+0x15c>)
 8002b44:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4a:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <HAL_ADC_Start_DMA+0x160>)
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	4a24      	ldr	r2, [pc, #144]	; (8002be4 <HAL_ADC_Start_DMA+0x164>)
 8002b54:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	221c      	movs	r2, #28
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0210 	orr.w	r2, r2, #16
 8002b74:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3340      	adds	r3, #64	; 0x40
 8002b90:	4619      	mov	r1, r3
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f001 f96d 	bl	8003e74 <HAL_DMA_Start_IT>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fdc0 	bl	8002728 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ba8:	e00d      	b.n	8002bc6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002bb2:	e008      	b.n	8002bc6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002bc0:	e001      	b.n	8002bc6 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	50040300 	.word	0x50040300
 8002bd4:	50040100 	.word	0x50040100
 8002bd8:	50040000 	.word	0x50040000
 8002bdc:	08003823 	.word	0x08003823
 8002be0:	080038fb 	.word	0x080038fb
 8002be4:	08003917 	.word	0x08003917

08002be8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_Stop_DMA+0x16>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e051      	b.n	8002ca2 <HAL_ADC_Stop_DMA+0xba>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c06:	2103      	movs	r1, #3
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fc69 	bl	80034e0 <ADC_ConversionStop>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d13f      	bne.n	8002c98 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d10f      	bne.n	8002c56 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 f97a 	bl	8003f34 <HAL_DMA_Abort>
 8002c40:	4603      	mov	r3, r0
 8002c42:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0210 	bic.w	r2, r2, #16
 8002c64:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fd79 	bl	8003764 <ADC_Disable>
 8002c72:	4603      	mov	r3, r0
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	e002      	b.n	8002c7e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fd73 	bl	8003764 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	f043 0201 	orr.w	r2, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b0b6      	sub	sp, #216	; 0xd8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x22>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e3d5      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x7ce>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fd2e 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 83ba 	bne.w	8003498 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d824      	bhi.n	8002d7e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	3b02      	subs	r3, #2
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d81b      	bhi.n	8002d76 <HAL_ADC_ConfigChannel+0x8e>
 8002d3e:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <HAL_ADC_ConfigChannel+0x5c>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002d55 	.word	0x08002d55
 8002d48:	08002d5d 	.word	0x08002d5d
 8002d4c:	08002d65 	.word	0x08002d65
 8002d50:	08002d6d 	.word	0x08002d6d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002d54:	230c      	movs	r3, #12
 8002d56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002d5a:	e010      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002d5c:	2312      	movs	r3, #18
 8002d5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002d62:	e00c      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002d64:	2318      	movs	r3, #24
 8002d66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002d6a:	e008      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002d74:	e003      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002d76:	2306      	movs	r3, #6
 8002d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002d7c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002d8c:	f7ff fba7 	bl	80024de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fcef 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 8002d9a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fd0f 	bl	80027c6 <LL_ADC_INJ_IsConversionOngoing>
 8002da8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f040 81bf 	bne.w	8003134 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002db6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 81ba 	bne.w	8003134 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dc8:	d10f      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f7ff fbae 	bl	8002536 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fb55 	bl	8002492 <LL_ADC_SetSamplingTimeCommonConfig>
 8002de8:	e00e      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6819      	ldr	r1, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f7ff fb9d 	bl	8002536 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fb45 	bl	8002492 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	08db      	lsrs	r3, r3, #3
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d00a      	beq.n	8002e40 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6919      	ldr	r1, [r3, #16]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e3a:	f7ff fad5 	bl	80023e8 <LL_ADC_SetOffset>
 8002e3e:	e179      	b.n	8003134 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff faf2 	bl	8002430 <LL_ADC_GetOffsetChannel>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x184>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fae7 	bl	8002430 <LL_ADC_GetOffsetChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	0e9b      	lsrs	r3, r3, #26
 8002e66:	f003 021f 	and.w	r2, r3, #31
 8002e6a:	e01e      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x1c2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fadc 	bl	8002430 <LL_ADC_GetOffsetChannel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e004      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002e9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x1da>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	0e9b      	lsrs	r3, r3, #26
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	e018      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x20c>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002ede:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	e004      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002eea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d106      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff faab 	bl	800245c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fa8f 	bl	8002430 <LL_ADC_GetOffsetChannel>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x24a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fa84 	bl	8002430 <LL_ADC_GetOffsetChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	e01e      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x288>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fa79 	bl	8002430 <LL_ADC_GetOffsetChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002f58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e004      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002f64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x2a0>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0e9b      	lsrs	r3, r3, #26
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	e018      	b.n	8002fba <HAL_ADC_ConfigChannel+0x2d2>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002fac:	2320      	movs	r3, #32
 8002fae:	e004      	b.n	8002fba <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d106      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fa48 	bl	800245c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fa2c 	bl	8002430 <LL_ADC_GetOffsetChannel>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x310>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fa21 	bl	8002430 <LL_ADC_GetOffsetChannel>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	0e9b      	lsrs	r3, r3, #26
 8002ff2:	f003 021f 	and.w	r2, r3, #31
 8002ff6:	e01e      	b.n	8003036 <HAL_ADC_ConfigChannel+0x34e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fa16 	bl	8002430 <LL_ADC_GetOffsetChannel>
 8003004:	4603      	mov	r3, r0
 8003006:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003016:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800301a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800301e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003026:	2320      	movs	r3, #32
 8003028:	e004      	b.n	8003034 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800302a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303e:	2b00      	cmp	r3, #0
 8003040:	d105      	bne.n	800304e <HAL_ADC_ConfigChannel+0x366>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	0e9b      	lsrs	r3, r3, #26
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	e014      	b.n	8003078 <HAL_ADC_ConfigChannel+0x390>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800305c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800305e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003062:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800306a:	2320      	movs	r3, #32
 800306c:	e004      	b.n	8003078 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800306e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003078:	429a      	cmp	r2, r3
 800307a:	d106      	bne.n	800308a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2200      	movs	r2, #0
 8003082:	2102      	movs	r1, #2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff f9e9 	bl	800245c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2103      	movs	r1, #3
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff f9cd 	bl	8002430 <LL_ADC_GetOffsetChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x3ce>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2103      	movs	r1, #3
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f9c2 	bl	8002430 <LL_ADC_GetOffsetChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	e017      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x3fe>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2103      	movs	r1, #3
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff f9b7 	bl	8002430 <LL_ADC_GetOffsetChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80030d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80030d8:	2320      	movs	r3, #32
 80030da:	e003      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80030dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x416>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	0e9b      	lsrs	r3, r3, #26
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	e011      	b.n	8003122 <HAL_ADC_ConfigChannel+0x43a>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800310c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800310e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003116:	2320      	movs	r3, #32
 8003118:	e003      	b.n	8003122 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800311a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003122:	429a      	cmp	r2, r3
 8003124:	d106      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	2103      	movs	r1, #3
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f994 	bl	800245c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff facf 	bl	80026dc <LL_ADC_IsEnabled>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	f040 813f 	bne.w	80033c4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6819      	ldr	r1, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	461a      	mov	r2, r3
 8003154:	f7ff fa1a 	bl	800258c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a8e      	ldr	r2, [pc, #568]	; (8003398 <HAL_ADC_ConfigChannel+0x6b0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	f040 8130 	bne.w	80033c4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10b      	bne.n	800318c <HAL_ADC_ConfigChannel+0x4a4>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	3301      	adds	r3, #1
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2b09      	cmp	r3, #9
 8003182:	bf94      	ite	ls
 8003184:	2301      	movls	r3, #1
 8003186:	2300      	movhi	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e019      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x4d8>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800319a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800319e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e003      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80031a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2b09      	cmp	r3, #9
 80031b8:	bf94      	ite	ls
 80031ba:	2301      	movls	r3, #1
 80031bc:	2300      	movhi	r3, #0
 80031be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d079      	beq.n	80032b8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d107      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x4f8>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	0e9b      	lsrs	r3, r3, #26
 80031d6:	3301      	adds	r3, #1
 80031d8:	069b      	lsls	r3, r3, #26
 80031da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031de:	e015      	b.n	800320c <HAL_ADC_ConfigChannel+0x524>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80031ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80031f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e003      	b.n	8003204 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80031fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	069b      	lsls	r3, r3, #26
 8003208:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_ADC_ConfigChannel+0x544>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	3301      	adds	r3, #1
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2101      	movs	r1, #1
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	e017      	b.n	800325c <HAL_ADC_ConfigChannel+0x574>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800323a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800323e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e003      	b.n	8003250 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	3301      	adds	r3, #1
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	ea42 0103 	orr.w	r1, r2, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x59a>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0e9b      	lsrs	r3, r3, #26
 8003272:	3301      	adds	r3, #1
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	051b      	lsls	r3, r3, #20
 8003280:	e018      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x5cc>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e003      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b4:	430b      	orrs	r3, r1
 80032b6:	e080      	b.n	80033ba <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x5ec>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	3301      	adds	r3, #1
 80032cc:	069b      	lsls	r3, r3, #26
 80032ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032d2:	e015      	b.n	8003300 <HAL_ADC_ConfigChannel+0x618>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80032ec:	2320      	movs	r3, #32
 80032ee:	e003      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	069b      	lsls	r3, r3, #26
 80032fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x638>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	3301      	adds	r3, #1
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	e017      	b.n	8003350 <HAL_ADC_ConfigChannel+0x668>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	61bb      	str	r3, [r7, #24]
  return result;
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e003      	b.n	8003344 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	ea42 0103 	orr.w	r1, r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10d      	bne.n	800337c <HAL_ADC_ConfigChannel+0x694>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0e9b      	lsrs	r3, r3, #26
 8003366:	3301      	adds	r3, #1
 8003368:	f003 021f 	and.w	r2, r3, #31
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	3b1e      	subs	r3, #30
 8003374:	051b      	lsls	r3, r3, #20
 8003376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800337a:	e01d      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x6d0>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	60fb      	str	r3, [r7, #12]
  return result;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e005      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x6bc>
 8003398:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	f003 021f 	and.w	r2, r3, #31
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	3b1e      	subs	r3, #30
 80033b2:	051b      	lsls	r3, r3, #20
 80033b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033be:	4619      	mov	r1, r3
 80033c0:	f7ff f8b9 	bl	8002536 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <HAL_ADC_ConfigChannel+0x7d8>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d06c      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033d0:	483c      	ldr	r0, [pc, #240]	; (80034c4 <HAL_ADC_ConfigChannel+0x7dc>)
 80033d2:	f7fe fffb 	bl	80023cc <LL_ADC_GetCommonPathInternalCh>
 80033d6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a3a      	ldr	r2, [pc, #232]	; (80034c8 <HAL_ADC_ConfigChannel+0x7e0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d127      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d121      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a35      	ldr	r2, [pc, #212]	; (80034cc <HAL_ADC_ConfigChannel+0x7e4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d157      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003402:	4619      	mov	r1, r3
 8003404:	482f      	ldr	r0, [pc, #188]	; (80034c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003406:	f7fe ffce 	bl	80023a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_ADC_ConfigChannel+0x7e8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	099b      	lsrs	r3, r3, #6
 8003410:	4a30      	ldr	r2, [pc, #192]	; (80034d4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003424:	e002      	b.n	800342c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	3b01      	subs	r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f9      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003432:	e03a      	b.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a27      	ldr	r2, [pc, #156]	; (80034d8 <HAL_ADC_ConfigChannel+0x7f0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d113      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800343e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10d      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <HAL_ADC_ConfigChannel+0x7e4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d12a      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003454:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345c:	4619      	mov	r1, r3
 800345e:	4819      	ldr	r0, [pc, #100]	; (80034c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003460:	f7fe ffa1 	bl	80023a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003464:	e021      	b.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <HAL_ADC_ConfigChannel+0x7f4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d11c      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003470:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d116      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a12      	ldr	r2, [pc, #72]	; (80034cc <HAL_ADC_ConfigChannel+0x7e4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d111      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003486:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800348a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800348e:	4619      	mov	r1, r3
 8003490:	480c      	ldr	r0, [pc, #48]	; (80034c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003492:	f7fe ff88 	bl	80023a6 <LL_ADC_SetCommonPathInternalCh>
 8003496:	e008      	b.n	80034aa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	f043 0220 	orr.w	r2, r3, #32
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	37d8      	adds	r7, #216	; 0xd8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	80080000 	.word	0x80080000
 80034c4:	50040300 	.word	0x50040300
 80034c8:	c7520000 	.word	0xc7520000
 80034cc:	50040000 	.word	0x50040000
 80034d0:	20000004 	.word	0x20000004
 80034d4:	053e2d63 	.word	0x053e2d63
 80034d8:	cb840000 	.word	0xcb840000
 80034dc:	80000001 	.word	0x80000001

080034e0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff f93e 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 80034fc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff f95f 	bl	80027c6 <LL_ADC_INJ_IsConversionOngoing>
 8003508:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d103      	bne.n	8003518 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8098 	beq.w	8003648 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d02a      	beq.n	800357c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7e5b      	ldrb	r3, [r3, #25]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d126      	bne.n	800357c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	7e1b      	ldrb	r3, [r3, #24]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d122      	bne.n	800357c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003536:	2301      	movs	r3, #1
 8003538:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800353a:	e014      	b.n	8003566 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4a45      	ldr	r2, [pc, #276]	; (8003654 <ADC_ConversionStop+0x174>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d90d      	bls.n	8003560 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003548:	f043 0210 	orr.w	r2, r3, #16
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	f043 0201 	orr.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e074      	b.n	800364a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3301      	adds	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003570:	2b40      	cmp	r3, #64	; 0x40
 8003572:	d1e3      	bne.n	800353c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2240      	movs	r2, #64	; 0x40
 800357a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d014      	beq.n	80035ac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff f8f6 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00c      	beq.n	80035ac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff f8b3 	bl	8002702 <LL_ADC_IsDisableOngoing>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff f8d2 	bl	8002750 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d014      	beq.n	80035dc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff f905 	bl	80027c6 <LL_ADC_INJ_IsConversionOngoing>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00c      	beq.n	80035dc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff f89b 	bl	8002702 <LL_ADC_IsDisableOngoing>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff f8e1 	bl	800279e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d005      	beq.n	80035ee <ADC_ConversionStop+0x10e>
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d105      	bne.n	80035f4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80035e8:	230c      	movs	r3, #12
 80035ea:	617b      	str	r3, [r7, #20]
        break;
 80035ec:	e005      	b.n	80035fa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80035ee:	2308      	movs	r3, #8
 80035f0:	617b      	str	r3, [r7, #20]
        break;
 80035f2:	e002      	b.n	80035fa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80035f4:	2304      	movs	r3, #4
 80035f6:	617b      	str	r3, [r7, #20]
        break;
 80035f8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80035fa:	f7fe fe91 	bl	8002320 <HAL_GetTick>
 80035fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003600:	e01b      	b.n	800363a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003602:	f7fe fe8d 	bl	8002320 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b05      	cmp	r3, #5
 800360e:	d914      	bls.n	800363a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	f043 0210 	orr.w	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e007      	b.n	800364a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1dc      	bne.n	8003602 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	a33fffff 	.word	0xa33fffff

08003658 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003660:	2300      	movs	r3, #0
 8003662:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff f837 	bl	80026dc <LL_ADC_IsEnabled>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d169      	bne.n	8003748 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	4b36      	ldr	r3, [pc, #216]	; (8003754 <ADC_Enable+0xfc>)
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	f043 0210 	orr.w	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	f043 0201 	orr.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e055      	b.n	800374a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fff2 	bl	800268c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036a8:	482b      	ldr	r0, [pc, #172]	; (8003758 <ADC_Enable+0x100>)
 80036aa:	f7fe fe8f 	bl	80023cc <LL_ADC_GetCommonPathInternalCh>
 80036ae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d013      	beq.n	80036e0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036b8:	4b28      	ldr	r3, [pc, #160]	; (800375c <ADC_Enable+0x104>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	099b      	lsrs	r3, r3, #6
 80036be:	4a28      	ldr	r2, [pc, #160]	; (8003760 <ADC_Enable+0x108>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	099b      	lsrs	r3, r3, #6
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	4613      	mov	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036d2:	e002      	b.n	80036da <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f9      	bne.n	80036d4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036e0:	f7fe fe1e 	bl	8002320 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036e6:	e028      	b.n	800373a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe fff5 	bl	80026dc <LL_ADC_IsEnabled>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe ffc5 	bl	800268c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003702:	f7fe fe0d 	bl	8002320 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d914      	bls.n	800373a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b01      	cmp	r3, #1
 800371c:	d00d      	beq.n	800373a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	f043 0210 	orr.w	r2, r3, #16
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	f043 0201 	orr.w	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e007      	b.n	800374a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b01      	cmp	r3, #1
 8003746:	d1cf      	bne.n	80036e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	8000003f 	.word	0x8000003f
 8003758:	50040300 	.word	0x50040300
 800375c:	20000004 	.word	0x20000004
 8003760:	053e2d63 	.word	0x053e2d63

08003764 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe ffc6 	bl	8002702 <LL_ADC_IsDisableOngoing>
 8003776:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe ffad 	bl	80026dc <LL_ADC_IsEnabled>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d047      	beq.n	8003818 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d144      	bne.n	8003818 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 030d 	and.w	r3, r3, #13
 8003798:	2b01      	cmp	r3, #1
 800379a:	d10c      	bne.n	80037b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe ff87 	bl	80026b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2203      	movs	r2, #3
 80037ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037ae:	f7fe fdb7 	bl	8002320 <HAL_GetTick>
 80037b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037b4:	e029      	b.n	800380a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	f043 0210 	orr.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e023      	b.n	800381a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037d2:	f7fe fda5 	bl	8002320 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d914      	bls.n	800380a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00d      	beq.n	800380a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f043 0210 	orr.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	f043 0201 	orr.w	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e007      	b.n	800381a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1dc      	bne.n	80037d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003838:	2b00      	cmp	r3, #0
 800383a:	d14b      	bne.n	80038d4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d021      	beq.n	800389a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fe2c 	bl	80024b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d032      	beq.n	80038cc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d12b      	bne.n	80038cc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d11f      	bne.n	80038cc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	655a      	str	r2, [r3, #84]	; 0x54
 8003898:	e018      	b.n	80038cc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d111      	bne.n	80038cc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	f043 0201 	orr.w	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff f9ec 	bl	8002caa <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038d2:	e00e      	b.n	80038f2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f7ff f9f6 	bl	8002cd2 <HAL_ADC_ErrorCallback>
}
 80038e6:	e004      	b.n	80038f2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff f9d8 	bl	8002cbe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	f043 0204 	orr.w	r2, r3, #4
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f7ff f9c8 	bl	8002cd2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <LL_ADC_IsEnabled>:
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <LL_ADC_IsEnabled+0x18>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <LL_ADC_IsEnabled+0x1a>
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_ADC_REG_IsConversionOngoing>:
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d101      	bne.n	8003988 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b09f      	sub	sp, #124	; 0x7c
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e089      	b.n	8003aca <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80039be:	2300      	movs	r3, #0
 80039c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80039c2:	2300      	movs	r3, #0
 80039c4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a42      	ldr	r2, [pc, #264]	; (8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d102      	bne.n	80039d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039d0:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	e001      	b.n	80039da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e068      	b.n	8003aca <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ffb8 	bl	8003970 <LL_ADC_REG_IsConversionOngoing>
 8003a00:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff ffb2 	bl	8003970 <LL_ADC_REG_IsConversionOngoing>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d14a      	bne.n	8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d147      	bne.n	8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a18:	4b30      	ldr	r3, [pc, #192]	; (8003adc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003a1a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d027      	beq.n	8003a74 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a36:	035b      	lsls	r3, r3, #13
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a40:	4824      	ldr	r0, [pc, #144]	; (8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003a42:	f7ff ff82 	bl	800394a <LL_ADC_IsEnabled>
 8003a46:	4604      	mov	r4, r0
 8003a48:	4823      	ldr	r0, [pc, #140]	; (8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a4a:	f7ff ff7e 	bl	800394a <LL_ADC_IsEnabled>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4323      	orrs	r3, r4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d132      	bne.n	8003abc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a5e:	f023 030f 	bic.w	r3, r3, #15
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	6811      	ldr	r1, [r2, #0]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	6892      	ldr	r2, [r2, #8]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a70:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a72:	e023      	b.n	8003abc <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a80:	4814      	ldr	r0, [pc, #80]	; (8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003a82:	f7ff ff62 	bl	800394a <LL_ADC_IsEnabled>
 8003a86:	4604      	mov	r4, r0
 8003a88:	4813      	ldr	r0, [pc, #76]	; (8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a8a:	f7ff ff5e 	bl	800394a <LL_ADC_IsEnabled>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4323      	orrs	r3, r4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d112      	bne.n	8003abc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a9e:	f023 030f 	bic.w	r3, r3, #15
 8003aa2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003aa4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003aa6:	e009      	b.n	8003abc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003aba:	e000      	b.n	8003abe <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003abc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ac6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	377c      	adds	r7, #124	; 0x7c
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd90      	pop	{r4, r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	50040000 	.word	0x50040000
 8003ad8:	50040100 	.word	0x50040100
 8003adc:	50040300 	.word	0x50040300

08003ae0 <__NVIC_SetPriorityGrouping>:
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003afc:	4013      	ands	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b12:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	60d3      	str	r3, [r2, #12]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <__NVIC_GetPriorityGrouping>:
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <__NVIC_GetPriorityGrouping+0x18>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	f003 0307 	and.w	r3, r3, #7
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <__NVIC_EnableIRQ>:
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	db0b      	blt.n	8003b6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	f003 021f 	and.w	r2, r3, #31
 8003b5c:	4907      	ldr	r1, [pc, #28]	; (8003b7c <__NVIC_EnableIRQ+0x38>)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2001      	movs	r0, #1
 8003b66:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	e000e100 	.word	0xe000e100

08003b80 <__NVIC_SetPriority>:
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	6039      	str	r1, [r7, #0]
 8003b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	db0a      	blt.n	8003baa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	490c      	ldr	r1, [pc, #48]	; (8003bcc <__NVIC_SetPriority+0x4c>)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	0112      	lsls	r2, r2, #4
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ba8:	e00a      	b.n	8003bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4908      	ldr	r1, [pc, #32]	; (8003bd0 <__NVIC_SetPriority+0x50>)
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	3b04      	subs	r3, #4
 8003bb8:	0112      	lsls	r2, r2, #4
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	761a      	strb	r2, [r3, #24]
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	e000e100 	.word	0xe000e100
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <NVIC_EncodePriority>:
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f1c3 0307 	rsb	r3, r3, #7
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	bf28      	it	cs
 8003bf2:	2304      	movcs	r3, #4
 8003bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2b06      	cmp	r3, #6
 8003bfc:	d902      	bls.n	8003c04 <NVIC_EncodePriority+0x30>
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3b03      	subs	r3, #3
 8003c02:	e000      	b.n	8003c06 <NVIC_EncodePriority+0x32>
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	401a      	ands	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	43d9      	mvns	r1, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	4313      	orrs	r3, r2
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3724      	adds	r7, #36	; 0x24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c4c:	d301      	bcc.n	8003c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00f      	b.n	8003c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <SysTick_Config+0x40>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c5a:	210f      	movs	r1, #15
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c60:	f7ff ff8e 	bl	8003b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <SysTick_Config+0x40>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <SysTick_Config+0x40>)
 8003c6c:	2207      	movs	r2, #7
 8003c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	e000e010 	.word	0xe000e010

08003c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff29 	bl	8003ae0 <__NVIC_SetPriorityGrouping>
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca8:	f7ff ff3e 	bl	8003b28 <__NVIC_GetPriorityGrouping>
 8003cac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f7ff ff8e 	bl	8003bd4 <NVIC_EncodePriority>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff ff5d 	bl	8003b80 <__NVIC_SetPriority>
}
 8003cc6:	bf00      	nop
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff31 	bl	8003b44 <__NVIC_EnableIRQ>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ffa2 	bl	8003c3c <SysTick_Config>
 8003cf8:	4603      	mov	r3, r0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e098      	b.n	8003e48 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4b4d      	ldr	r3, [pc, #308]	; (8003e54 <HAL_DMA_Init+0x150>)
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d80f      	bhi.n	8003d42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_DMA_Init+0x154>)
 8003d2a:	4413      	add	r3, r2
 8003d2c:	4a4b      	ldr	r2, [pc, #300]	; (8003e5c <HAL_DMA_Init+0x158>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	009a      	lsls	r2, r3, #2
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a48      	ldr	r2, [pc, #288]	; (8003e60 <HAL_DMA_Init+0x15c>)
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d40:	e00e      	b.n	8003d60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	4b46      	ldr	r3, [pc, #280]	; (8003e64 <HAL_DMA_Init+0x160>)
 8003d4a:	4413      	add	r3, r2
 8003d4c:	4a43      	ldr	r2, [pc, #268]	; (8003e5c <HAL_DMA_Init+0x158>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	091b      	lsrs	r3, r3, #4
 8003d54:	009a      	lsls	r2, r3, #2
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a42      	ldr	r2, [pc, #264]	; (8003e68 <HAL_DMA_Init+0x164>)
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dba:	d039      	beq.n	8003e30 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	4a27      	ldr	r2, [pc, #156]	; (8003e60 <HAL_DMA_Init+0x15c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d11a      	bne.n	8003dfc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003dc6:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <HAL_DMA_Init+0x168>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f003 031c 	and.w	r3, r3, #28
 8003dd2:	210f      	movs	r1, #15
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	4924      	ldr	r1, [pc, #144]	; (8003e6c <HAL_DMA_Init+0x168>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003de0:	4b22      	ldr	r3, [pc, #136]	; (8003e6c <HAL_DMA_Init+0x168>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6859      	ldr	r1, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f003 031c 	and.w	r3, r3, #28
 8003df0:	fa01 f303 	lsl.w	r3, r1, r3
 8003df4:	491d      	ldr	r1, [pc, #116]	; (8003e6c <HAL_DMA_Init+0x168>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	600b      	str	r3, [r1, #0]
 8003dfa:	e019      	b.n	8003e30 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003dfc:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <HAL_DMA_Init+0x16c>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e04:	f003 031c 	and.w	r3, r3, #28
 8003e08:	210f      	movs	r1, #15
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	4917      	ldr	r1, [pc, #92]	; (8003e70 <HAL_DMA_Init+0x16c>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e16:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <HAL_DMA_Init+0x16c>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6859      	ldr	r1, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f003 031c 	and.w	r3, r3, #28
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	4911      	ldr	r1, [pc, #68]	; (8003e70 <HAL_DMA_Init+0x16c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40020407 	.word	0x40020407
 8003e58:	bffdfff8 	.word	0xbffdfff8
 8003e5c:	cccccccd 	.word	0xcccccccd
 8003e60:	40020000 	.word	0x40020000
 8003e64:	bffdfbf8 	.word	0xbffdfbf8
 8003e68:	40020400 	.word	0x40020400
 8003e6c:	400200a8 	.word	0x400200a8
 8003e70:	400204a8 	.word	0x400204a8

08003e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_DMA_Start_IT+0x20>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e04b      	b.n	8003f2c <HAL_DMA_Start_IT+0xb8>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d13a      	bne.n	8003f1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f91e 	bl	800410e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 020e 	orr.w	r2, r2, #14
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e00f      	b.n	8003f0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0204 	bic.w	r2, r2, #4
 8003efa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 020a 	orr.w	r2, r2, #10
 8003f0a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e005      	b.n	8003f2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
 8003f28:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d008      	beq.n	8003f5e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2204      	movs	r2, #4
 8003f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e022      	b.n	8003fa4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 020e 	bic.w	r2, r2, #14
 8003f6c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f003 021c 	and.w	r2, r3, #28
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f90:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fcc:	f003 031c 	and.w	r3, r3, #28
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d026      	beq.n	800402a <HAL_DMA_IRQHandler+0x7a>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d021      	beq.n	800402a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d107      	bne.n	8004004 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0204 	bic.w	r2, r2, #4
 8004002:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004008:	f003 021c 	and.w	r2, r3, #28
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	2104      	movs	r1, #4
 8004012:	fa01 f202 	lsl.w	r2, r1, r2
 8004016:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	2b00      	cmp	r3, #0
 800401e:	d071      	beq.n	8004104 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004028:	e06c      	b.n	8004104 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f003 031c 	and.w	r3, r3, #28
 8004032:	2202      	movs	r2, #2
 8004034:	409a      	lsls	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02e      	beq.n	800409c <HAL_DMA_IRQHandler+0xec>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d029      	beq.n	800409c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 020a 	bic.w	r2, r2, #10
 8004064:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f003 021c 	and.w	r2, r3, #28
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	2102      	movs	r1, #2
 800407c:	fa01 f202 	lsl.w	r2, r1, r2
 8004080:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d038      	beq.n	8004104 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800409a:	e033      	b.n	8004104 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a0:	f003 031c 	and.w	r3, r3, #28
 80040a4:	2208      	movs	r2, #8
 80040a6:	409a      	lsls	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d02a      	beq.n	8004106 <HAL_DMA_IRQHandler+0x156>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d025      	beq.n	8004106 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 020e 	bic.w	r2, r2, #14
 80040c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	f003 021c 	and.w	r2, r3, #28
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	2101      	movs	r1, #1
 80040d8:	fa01 f202 	lsl.w	r2, r1, r2
 80040dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004104:	bf00      	nop
 8004106:	bf00      	nop
}
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	f003 021c 	and.w	r2, r3, #28
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	2101      	movs	r1, #1
 800412a:	fa01 f202 	lsl.w	r2, r1, r2
 800412e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b10      	cmp	r3, #16
 800413e:	d108      	bne.n	8004152 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004150:	e007      	b.n	8004162 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	60da      	str	r2, [r3, #12]
}
 8004162:	bf00      	nop
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800417e:	e14e      	b.n	800441e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	2101      	movs	r1, #1
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	fa01 f303 	lsl.w	r3, r1, r3
 800418c:	4013      	ands	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8140 	beq.w	8004418 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d005      	beq.n	80041b0 <HAL_GPIO_Init+0x40>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d130      	bne.n	8004212 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	2203      	movs	r2, #3
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	43db      	mvns	r3, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041e6:	2201      	movs	r2, #1
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 0201 	and.w	r2, r3, #1
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b03      	cmp	r3, #3
 800421c:	d017      	beq.n	800424e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	2203      	movs	r2, #3
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4013      	ands	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d123      	bne.n	80042a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	08da      	lsrs	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3208      	adds	r2, #8
 8004262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004266:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	220f      	movs	r2, #15
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	08da      	lsrs	r2, r3, #3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3208      	adds	r2, #8
 800429c:	6939      	ldr	r1, [r7, #16]
 800429e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	2203      	movs	r2, #3
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43db      	mvns	r3, r3
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0203 	and.w	r2, r3, #3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 809a 	beq.w	8004418 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e4:	4b55      	ldr	r3, [pc, #340]	; (800443c <HAL_GPIO_Init+0x2cc>)
 80042e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e8:	4a54      	ldr	r2, [pc, #336]	; (800443c <HAL_GPIO_Init+0x2cc>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6613      	str	r3, [r2, #96]	; 0x60
 80042f0:	4b52      	ldr	r3, [pc, #328]	; (800443c <HAL_GPIO_Init+0x2cc>)
 80042f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042fc:	4a50      	ldr	r2, [pc, #320]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	3302      	adds	r3, #2
 8004304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004308:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	220f      	movs	r2, #15
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004326:	d013      	beq.n	8004350 <HAL_GPIO_Init+0x1e0>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a46      	ldr	r2, [pc, #280]	; (8004444 <HAL_GPIO_Init+0x2d4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00d      	beq.n	800434c <HAL_GPIO_Init+0x1dc>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a45      	ldr	r2, [pc, #276]	; (8004448 <HAL_GPIO_Init+0x2d8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <HAL_GPIO_Init+0x1d8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a44      	ldr	r2, [pc, #272]	; (800444c <HAL_GPIO_Init+0x2dc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d101      	bne.n	8004344 <HAL_GPIO_Init+0x1d4>
 8004340:	2303      	movs	r3, #3
 8004342:	e006      	b.n	8004352 <HAL_GPIO_Init+0x1e2>
 8004344:	2307      	movs	r3, #7
 8004346:	e004      	b.n	8004352 <HAL_GPIO_Init+0x1e2>
 8004348:	2302      	movs	r3, #2
 800434a:	e002      	b.n	8004352 <HAL_GPIO_Init+0x1e2>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_GPIO_Init+0x1e2>
 8004350:	2300      	movs	r3, #0
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	f002 0203 	and.w	r2, r2, #3
 8004358:	0092      	lsls	r2, r2, #2
 800435a:	4093      	lsls	r3, r2
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004362:	4937      	ldr	r1, [pc, #220]	; (8004440 <HAL_GPIO_Init+0x2d0>)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	3302      	adds	r3, #2
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004370:	4b37      	ldr	r3, [pc, #220]	; (8004450 <HAL_GPIO_Init+0x2e0>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	43db      	mvns	r3, r3
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4013      	ands	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004394:	4a2e      	ldr	r2, [pc, #184]	; (8004450 <HAL_GPIO_Init+0x2e0>)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800439a:	4b2d      	ldr	r3, [pc, #180]	; (8004450 <HAL_GPIO_Init+0x2e0>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	43db      	mvns	r3, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043be:	4a24      	ldr	r2, [pc, #144]	; (8004450 <HAL_GPIO_Init+0x2e0>)
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80043c4:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_GPIO_Init+0x2e0>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043e8:	4a19      	ldr	r2, [pc, #100]	; (8004450 <HAL_GPIO_Init+0x2e0>)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80043ee:	4b18      	ldr	r3, [pc, #96]	; (8004450 <HAL_GPIO_Init+0x2e0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	43db      	mvns	r3, r3
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4013      	ands	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004412:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <HAL_GPIO_Init+0x2e0>)
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	3301      	adds	r3, #1
 800441c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	f47f aea9 	bne.w	8004180 <HAL_GPIO_Init+0x10>
  }
}
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40021000 	.word	0x40021000
 8004440:	40010000 	.word	0x40010000
 8004444:	48000400 	.word	0x48000400
 8004448:	48000800 	.word	0x48000800
 800444c:	48000c00 	.word	0x48000c00
 8004450:	40010400 	.word	0x40010400

08004454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	807b      	strh	r3, [r7, #2]
 8004460:	4613      	mov	r3, r2
 8004462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004464:	787b      	ldrb	r3, [r7, #1]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004470:	e002      	b.n	8004478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004486:	b08b      	sub	sp, #44	; 0x2c
 8004488:	af06      	add	r7, sp, #24
 800448a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e0f8      	b.n	8004688 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f008 fdaa 	bl	800d004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2203      	movs	r2, #3
 80044b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f004 f87b 	bl	80085b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	687e      	ldr	r6, [r7, #4]
 80044ca:	466d      	mov	r5, sp
 80044cc:	f106 0410 	add.w	r4, r6, #16
 80044d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	602b      	str	r3, [r5, #0]
 80044d8:	1d33      	adds	r3, r6, #4
 80044da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044dc:	6838      	ldr	r0, [r7, #0]
 80044de:	f004 f843 	bl	8008568 <USB_CoreInit>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0c9      	b.n	8004688 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2100      	movs	r1, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f004 f877 	bl	80085ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004500:	2300      	movs	r3, #0
 8004502:	73fb      	strb	r3, [r7, #15]
 8004504:	e040      	b.n	8004588 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	440b      	add	r3, r1
 8004516:	3301      	adds	r3, #1
 8004518:	2201      	movs	r2, #1
 800451a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	440b      	add	r3, r1
 800452c:	7bfa      	ldrb	r2, [r7, #15]
 800452e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	440b      	add	r3, r1
 8004540:	3303      	adds	r3, #3
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004546:	7bfa      	ldrb	r2, [r7, #15]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	440b      	add	r3, r1
 8004554:	3338      	adds	r3, #56	; 0x38
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800455a:	7bfa      	ldrb	r2, [r7, #15]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	440b      	add	r3, r1
 8004568:	333c      	adds	r3, #60	; 0x3c
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800456e:	7bfa      	ldrb	r2, [r7, #15]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	440b      	add	r3, r1
 800457c:	3340      	adds	r3, #64	; 0x40
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	3301      	adds	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
 8004588:	7bfa      	ldrb	r2, [r7, #15]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	429a      	cmp	r2, r3
 8004590:	d3b9      	bcc.n	8004506 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	e044      	b.n	8004622 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	440b      	add	r3, r1
 80045a6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045ae:	7bfa      	ldrb	r2, [r7, #15]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	440b      	add	r3, r1
 80045bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045c4:	7bfa      	ldrb	r2, [r7, #15]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	440b      	add	r3, r1
 80045d2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045da:	7bfa      	ldrb	r2, [r7, #15]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	440b      	add	r3, r1
 80045e8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045f0:	7bfa      	ldrb	r2, [r7, #15]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	440b      	add	r3, r1
 80045fe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	440b      	add	r3, r1
 8004614:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	3301      	adds	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
 8004622:	7bfa      	ldrb	r2, [r7, #15]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	429a      	cmp	r2, r3
 800462a:	d3b5      	bcc.n	8004598 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	687e      	ldr	r6, [r7, #4]
 8004634:	466d      	mov	r5, sp
 8004636:	f106 0410 	add.w	r4, r6, #16
 800463a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800463c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	602b      	str	r3, [r5, #0]
 8004642:	1d33      	adds	r3, r6, #4
 8004644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004646:	6838      	ldr	r0, [r7, #0]
 8004648:	f003 ffde 	bl	8008608 <USB_DevInit>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e014      	b.n	8004688 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d102      	bne.n	800467c <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f001 fc58 	bl	8005f2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f006 fa6f 	bl	800ab64 <USB_DevDisconnect>

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004690 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_PCD_Start+0x16>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e012      	b.n	80046cc <HAL_PCD_Start+0x3c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f003 ff69 	bl	800858a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f006 fa3a 	bl	800ab36 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f006 fa54 	bl	800ab8e <USB_ReadInterrupts>
 80046e6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fb13 	bl	8004d1e <PCD_EP_ISR_Handler>

    return;
 80046f8:	e110      	b.n	800491c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800470c:	b29a      	uxth	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004716:	b292      	uxth	r2, r2
 8004718:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f008 fd28 	bl	800d172 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004722:	2100      	movs	r1, #0
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f8fc 	bl	8004922 <HAL_PCD_SetAddress>

    return;
 800472a:	e0f7      	b.n	800491c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00c      	beq.n	8004750 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004748:	b292      	uxth	r2, r2
 800474a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800474e:	e0e5      	b.n	800491c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476c:	b292      	uxth	r2, r2
 800476e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004772:	e0d3      	b.n	800491c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d034      	beq.n	80047e8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004786:	b29a      	uxth	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0204 	bic.w	r2, r2, #4
 8004790:	b292      	uxth	r2, r2
 8004792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800479e:	b29a      	uxth	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0208 	bic.w	r2, r2, #8
 80047a8:	b292      	uxth	r2, r2
 80047aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d107      	bne.n	80047c8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80047c0:	2100      	movs	r1, #0
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f008 ff86 	bl	800d6d4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f008 fd0b 	bl	800d1e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047e0:	b292      	uxth	r2, r2
 80047e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80047e6:	e099      	b.n	800491c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d027      	beq.n	8004842 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0208 	orr.w	r2, r2, #8
 8004804:	b292      	uxth	r2, r2
 8004806:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004812:	b29a      	uxth	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800481c:	b292      	uxth	r2, r2
 800481e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0204 	orr.w	r2, r2, #4
 8004834:	b292      	uxth	r2, r2
 8004836:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f008 fcb8 	bl	800d1b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004840:	e06c      	b.n	800491c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004848:	2b00      	cmp	r3, #0
 800484a:	d040      	beq.n	80048ce <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004854:	b29a      	uxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800485e:	b292      	uxth	r2, r2
 8004860:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d12b      	bne.n	80048c6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004876:	b29a      	uxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0204 	orr.w	r2, r2, #4
 8004880:	b292      	uxth	r2, r2
 8004882:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0208 	orr.w	r2, r2, #8
 8004898:	b292      	uxth	r2, r2
 800489a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	089b      	lsrs	r3, r3, #2
 80048b2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80048bc:	2101      	movs	r1, #1
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f008 ff08 	bl	800d6d4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80048c4:	e02a      	b.n	800491c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f008 fc72 	bl	800d1b0 <HAL_PCD_SuspendCallback>
    return;
 80048cc:	e026      	b.n	800491c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00f      	beq.n	80048f8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048ea:	b292      	uxth	r2, r2
 80048ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f008 fc30 	bl	800d156 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80048f6:	e011      	b.n	800491c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004914:	b292      	uxth	r2, r2
 8004916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800491a:	bf00      	nop
  }
}
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	460b      	mov	r3, r1
 800492c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_PCD_SetAddress+0x1a>
 8004938:	2302      	movs	r3, #2
 800493a:	e013      	b.n	8004964 <HAL_PCD_SetAddress+0x42>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	78fa      	ldrb	r2, [r7, #3]
 8004948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	4611      	mov	r1, r2
 8004954:	4618      	mov	r0, r3
 8004956:	f006 f8da 	bl	800ab0e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	4608      	mov	r0, r1
 8004976:	4611      	mov	r1, r2
 8004978:	461a      	mov	r2, r3
 800497a:	4603      	mov	r3, r0
 800497c:	70fb      	strb	r3, [r7, #3]
 800497e:	460b      	mov	r3, r1
 8004980:	803b      	strh	r3, [r7, #0]
 8004982:	4613      	mov	r3, r2
 8004984:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800498a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800498e:	2b00      	cmp	r3, #0
 8004990:	da0e      	bge.n	80049b0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4413      	add	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	705a      	strb	r2, [r3, #1]
 80049ae:	e00e      	b.n	80049ce <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f003 0207 	and.w	r2, r3, #7
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4413      	add	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049da:	883a      	ldrh	r2, [r7, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	78ba      	ldrb	r2, [r7, #2]
 80049e4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049e6:	78bb      	ldrb	r3, [r7, #2]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d102      	bne.n	80049f2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_PCD_EP_Open+0x94>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e00e      	b.n	8004a1e <HAL_PCD_EP_Open+0xb2>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68f9      	ldr	r1, [r7, #12]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f003 fe1c 	bl	800864c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004a1c:	7afb      	ldrb	r3, [r7, #11]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	da0e      	bge.n	8004a58 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	705a      	strb	r2, [r3, #1]
 8004a56:	e00e      	b.n	8004a76 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	f003 0207 	and.w	r2, r3, #7
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_PCD_EP_Close+0x6a>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e00e      	b.n	8004aae <HAL_PCD_EP_Close+0x88>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68f9      	ldr	r1, [r7, #12]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f004 f998 	bl	8008dd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b086      	sub	sp, #24
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ac6:	7afb      	ldrb	r3, [r7, #11]
 8004ac8:	f003 0207 	and.w	r2, r3, #7
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2200      	movs	r2, #0
 8004aee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2200      	movs	r2, #0
 8004af4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004af6:	7afb      	ldrb	r3, [r7, #11]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6979      	ldr	r1, [r7, #20]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f004 fb50 	bl	80091ae <USB_EPStartXfer>

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	f003 0207 	and.w	r2, r3, #7
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	440b      	add	r3, r1
 8004b36:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004b3a:	681b      	ldr	r3, [r3, #0]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	460b      	mov	r3, r1
 8004b56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b58:	7afb      	ldrb	r3, [r7, #11]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2201      	movs	r2, #1
 8004b92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b94:	7afb      	ldrb	r3, [r7, #11]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6979      	ldr	r1, [r7, #20]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f004 fb01 	bl	80091ae <USB_EPStartXfer>

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	f003 0207 	and.w	r2, r3, #7
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d901      	bls.n	8004bd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e04c      	b.n	8004c6e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	da0e      	bge.n	8004bfa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4413      	add	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	705a      	strb	r2, [r3, #1]
 8004bf8:	e00c      	b.n	8004c14 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bfa:	78fa      	ldrb	r2, [r7, #3]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_PCD_EP_SetStall+0x7e>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e01c      	b.n	8004c6e <HAL_PCD_EP_SetStall+0xb8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68f9      	ldr	r1, [r7, #12]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f005 fe64 	bl	800a910 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d108      	bne.n	8004c64 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	f005 ffa5 	bl	800abae <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	f003 020f 	and.w	r2, r3, #15
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d901      	bls.n	8004c94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e040      	b.n	8004d16 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	da0e      	bge.n	8004cba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	4413      	add	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	705a      	strb	r2, [r3, #1]
 8004cb8:	e00e      	b.n	8004cd8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	f003 0207 	and.w	r2, r3, #7
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	4413      	add	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_PCD_EP_ClrStall+0x82>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e00e      	b.n	8004d16 <HAL_PCD_EP_ClrStall+0xa0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68f9      	ldr	r1, [r7, #12]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f005 fe53 	bl	800a9b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b096      	sub	sp, #88	; 0x58
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d26:	e3b1      	b.n	800548c <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004d34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8004d42:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f040 8173 	bne.w	8005032 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d150      	bne.n	8004dfa <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d68:	81fb      	strh	r3, [r7, #14]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	89fb      	ldrh	r3, [r7, #14]
 8004d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3328      	adds	r3, #40	; 0x28
 8004d80:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4413      	add	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	441a      	add	r2, r3
 8004db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004db8:	2100      	movs	r1, #0
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f008 f9b1 	bl	800d122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 835f 	beq.w	800548c <PCD_EP_ISR_Handler+0x76e>
 8004dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f040 835a 	bne.w	800548c <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	b292      	uxth	r2, r2
 8004dec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004df8:	e348      	b.n	800548c <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e00:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d032      	beq.n	8004e7e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	4413      	add	r3, r2
 8004e32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e3e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6818      	ldr	r0, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e4c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e50:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f005 fef9 	bl	800ac4a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e64:	4013      	ands	r3, r2
 8004e66:	823b      	strh	r3, [r7, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	8a3a      	ldrh	r2, [r7, #16]
 8004e6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e72:	b292      	uxth	r2, r2
 8004e74:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f008 f926 	bl	800d0c8 <HAL_PCD_SetupStageCallback>
 8004e7c:	e306      	b.n	800548c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e7e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f280 8302 	bge.w	800548c <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e94:	4013      	ands	r3, r2
 8004e96:	83fb      	strh	r3, [r7, #30]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	8bfa      	ldrh	r2, [r7, #30]
 8004e9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ea2:	b292      	uxth	r2, r2
 8004ea4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	4413      	add	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ecc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d019      	beq.n	8004f0a <PCD_EP_ISR_Handler+0x1ec>
 8004ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d015      	beq.n	8004f0a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee4:	6959      	ldr	r1, [r3, #20]
 8004ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f005 feab 	bl	800ac4a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	441a      	add	r2, r3
 8004efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f00:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f02:	2100      	movs	r1, #0
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f008 f8f1 	bl	800d0ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004f14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 82b5 	bne.w	800548c <PCD_EP_ISR_Handler+0x76e>
 8004f22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f2e:	f000 82ad 	beq.w	800548c <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	61bb      	str	r3, [r7, #24]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	4413      	add	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b3e      	cmp	r3, #62	; 0x3e
 8004f68:	d91d      	bls.n	8004fa6 <PCD_EP_ISR_Handler+0x288>
 8004f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	647b      	str	r3, [r7, #68]	; 0x44
 8004f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <PCD_EP_ISR_Handler+0x266>
 8004f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f80:	3b01      	subs	r3, #1
 8004f82:	647b      	str	r3, [r7, #68]	; 0x44
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	029b      	lsls	r3, r3, #10
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	4313      	orrs	r3, r2
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	e026      	b.n	8004ff4 <PCD_EP_ISR_Handler+0x2d6>
 8004fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10a      	bne.n	8004fc4 <PCD_EP_ISR_Handler+0x2a6>
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	801a      	strh	r2, [r3, #0]
 8004fc2:	e017      	b.n	8004ff4 <PCD_EP_ISR_Handler+0x2d6>
 8004fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	085b      	lsrs	r3, r3, #1
 8004fca:	647b      	str	r3, [r7, #68]	; 0x44
 8004fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <PCD_EP_ISR_Handler+0x2c0>
 8004fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fda:	3301      	adds	r3, #1
 8004fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	029b      	lsls	r3, r3, #10
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	4313      	orrs	r3, r2
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005004:	827b      	strh	r3, [r7, #18]
 8005006:	8a7b      	ldrh	r3, [r7, #18]
 8005008:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800500c:	827b      	strh	r3, [r7, #18]
 800500e:	8a7b      	ldrh	r3, [r7, #18]
 8005010:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005014:	827b      	strh	r3, [r7, #18]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	8a7b      	ldrh	r3, [r7, #18]
 800501c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502c:	b29b      	uxth	r3, r3
 800502e:	8013      	strh	r3, [r2, #0]
 8005030:	e22c      	b.n	800548c <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005046:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800504a:	2b00      	cmp	r3, #0
 800504c:	f280 80f6 	bge.w	800523c <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29a      	uxth	r2, r3
 8005062:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005066:	4013      	ands	r3, r2
 8005068:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800507e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005082:	b292      	uxth	r2, r2
 8005084:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005086:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800509c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800509e:	7b1b      	ldrb	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d123      	bne.n	80050ec <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4413      	add	r3, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6812      	ldr	r2, [r2, #0]
 80050bc:	4413      	add	r3, r2
 80050be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80050cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 808e 	beq.w	80051f2 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050dc:	6959      	ldr	r1, [r3, #20]
 80050de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050e0:	88da      	ldrh	r2, [r3, #6]
 80050e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80050e6:	f005 fdb0 	bl	800ac4a <USB_ReadPMA>
 80050ea:	e082      	b.n	80051f2 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80050ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ee:	78db      	ldrb	r3, [r3, #3]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d10a      	bne.n	800510a <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80050f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050f8:	461a      	mov	r2, r3
 80050fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f9d3 	bl	80054a8 <HAL_PCD_EP_DB_Receive>
 8005102:	4603      	mov	r3, r0
 8005104:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005108:	e073      	b.n	80051f2 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005124:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	441a      	add	r2, r3
 8005136:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800513a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005146:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800514a:	b29b      	uxth	r3, r3
 800514c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d022      	beq.n	80051ae <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005170:	b29b      	uxth	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	4413      	add	r3, r2
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	4413      	add	r3, r2
 8005182:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800518c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005190:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005194:	2b00      	cmp	r3, #0
 8005196:	d02c      	beq.n	80051f2 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800519e:	6959      	ldr	r1, [r3, #20]
 80051a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a2:	891a      	ldrh	r2, [r3, #8]
 80051a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80051a8:	f005 fd4f 	bl	800ac4a <USB_ReadPMA>
 80051ac:	e021      	b.n	80051f2 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4413      	add	r3, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	4413      	add	r3, r2
 80051c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80051d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051e4:	6959      	ldr	r1, [r3, #20]
 80051e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051e8:	895a      	ldrh	r2, [r3, #10]
 80051ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80051ee:	f005 fd2c 	bl	800ac4a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80051f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f4:	69da      	ldr	r2, [r3, #28]
 80051f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80051fa:	441a      	add	r2, r3
 80051fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005208:	441a      	add	r2, r3
 800520a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800520c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800520e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <PCD_EP_ISR_Handler+0x504>
 8005216:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800521a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	429a      	cmp	r2, r3
 8005220:	d206      	bcs.n	8005230 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f007 ff5f 	bl	800d0ec <HAL_PCD_DataOutStageCallback>
 800522e:	e005      	b.n	800523c <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005236:	4618      	mov	r0, r3
 8005238:	f003 ffb9 	bl	80091ae <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800523c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8121 	beq.w	800548c <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 800524a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4413      	add	r3, r2
 800525c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005278:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	441a      	add	r2, r3
 800528a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800528e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005296:	b29b      	uxth	r3, r3
 8005298:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800529a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800529c:	78db      	ldrb	r3, [r3, #3]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	f040 80a2 	bne.w	80053e8 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 80052a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a6:	2200      	movs	r2, #0
 80052a8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80052aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ac:	7b1b      	ldrb	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 8093 	beq.w	80053da <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80052b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d046      	beq.n	800534e <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d126      	bne.n	8005316 <PCD_EP_ISR_Handler+0x5f8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	4413      	add	r3, r2
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
 80052e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	00da      	lsls	r2, r3, #3
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	4413      	add	r3, r2
 80052ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052ee:	623b      	str	r3, [r7, #32]
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	b29b      	uxth	r3, r3
 8005306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800530e:	b29a      	uxth	r2, r3
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	e061      	b.n	80053da <PCD_EP_ISR_Handler+0x6bc>
 8005316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005318:	785b      	ldrb	r3, [r3, #1]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d15d      	bne.n	80053da <PCD_EP_ISR_Handler+0x6bc>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532c:	b29b      	uxth	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	4413      	add	r3, r2
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	00da      	lsls	r2, r3, #3
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	4413      	add	r3, r2
 8005340:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	2200      	movs	r2, #0
 800534a:	801a      	strh	r2, [r3, #0]
 800534c:	e045      	b.n	80053da <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005356:	785b      	ldrb	r3, [r3, #1]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d126      	bne.n	80053aa <PCD_EP_ISR_Handler+0x68c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536a:	b29b      	uxth	r3, r3
 800536c:	461a      	mov	r2, r3
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	4413      	add	r3, r2
 8005372:	637b      	str	r3, [r7, #52]	; 0x34
 8005374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	00da      	lsls	r2, r3, #3
 800537a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537c:	4413      	add	r3, r2
 800537e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005382:	633b      	str	r3, [r7, #48]	; 0x30
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800538e:	b29a      	uxth	r2, r3
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	e017      	b.n	80053da <PCD_EP_ISR_Handler+0x6bc>
 80053aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ac:	785b      	ldrb	r3, [r3, #1]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d113      	bne.n	80053da <PCD_EP_ISR_Handler+0x6bc>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c0:	4413      	add	r3, r2
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	00da      	lsls	r2, r3, #3
 80053ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053cc:	4413      	add	r3, r2
 80053ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	2200      	movs	r2, #0
 80053d8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f007 fe9e 	bl	800d122 <HAL_PCD_DataInStageCallback>
 80053e6:	e051      	b.n	800548c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80053e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d144      	bne.n	800547e <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	4413      	add	r3, r2
 800540e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005418:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800541c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800541e:	699a      	ldr	r2, [r3, #24]
 8005420:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005424:	429a      	cmp	r2, r3
 8005426:	d907      	bls.n	8005438 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8005428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542a:	699a      	ldr	r2, [r3, #24]
 800542c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005430:	1ad2      	subs	r2, r2, r3
 8005432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005434:	619a      	str	r2, [r3, #24]
 8005436:	e002      	b.n	800543e <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8005438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800543a:	2200      	movs	r2, #0
 800543c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800543e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f007 fe68 	bl	800d122 <HAL_PCD_DataInStageCallback>
 8005452:	e01b      	b.n	800548c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800545c:	441a      	add	r2, r3
 800545e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005460:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005464:	69da      	ldr	r2, [r3, #28]
 8005466:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800546a:	441a      	add	r2, r3
 800546c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005476:	4618      	mov	r0, r3
 8005478:	f003 fe99 	bl	80091ae <USB_EPStartXfer>
 800547c:	e006      	b.n	800548c <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800547e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005482:	461a      	mov	r2, r3
 8005484:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f917 	bl	80056ba <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005494:	b29b      	uxth	r3, r3
 8005496:	b21b      	sxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	f6ff ac45 	blt.w	8004d28 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3758      	adds	r7, #88	; 0x58
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d07c      	beq.n	80055ba <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4413      	add	r3, r2
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	4413      	add	r3, r2
 80054da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	8b7b      	ldrh	r3, [r7, #26]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d306      	bcc.n	80054fe <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	699a      	ldr	r2, [r3, #24]
 80054f4:	8b7b      	ldrh	r3, [r7, #26]
 80054f6:	1ad2      	subs	r2, r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	619a      	str	r2, [r3, #24]
 80054fc:	e002      	b.n	8005504 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2200      	movs	r2, #0
 8005502:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d123      	bne.n	8005554 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29b      	uxth	r3, r3
 800551e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005526:	833b      	strh	r3, [r7, #24]
 8005528:	8b3b      	ldrh	r3, [r7, #24]
 800552a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800552e:	833b      	strh	r3, [r7, #24]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	8b3b      	ldrh	r3, [r7, #24]
 8005540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005550:	b29b      	uxth	r3, r3
 8005552:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01f      	beq.n	800559e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005578:	82fb      	strh	r3, [r7, #22]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	441a      	add	r2, r3
 8005588:	8afb      	ldrh	r3, [r7, #22]
 800558a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005596:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800559a:	b29b      	uxth	r3, r3
 800559c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800559e:	8b7b      	ldrh	r3, [r7, #26]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8085 	beq.w	80056b0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6959      	ldr	r1, [r3, #20]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	891a      	ldrh	r2, [r3, #8]
 80055b2:	8b7b      	ldrh	r3, [r7, #26]
 80055b4:	f005 fb49 	bl	800ac4a <USB_ReadPMA>
 80055b8:	e07a      	b.n	80056b0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4413      	add	r3, r2
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	4413      	add	r3, r2
 80055d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055de:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	8b7b      	ldrh	r3, [r7, #26]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d306      	bcc.n	80055f8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	8b7b      	ldrh	r3, [r7, #26]
 80055f0:	1ad2      	subs	r2, r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	619a      	str	r2, [r3, #24]
 80055f6:	e002      	b.n	80055fe <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d123      	bne.n	800564e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800561c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005620:	83fb      	strh	r3, [r7, #30]
 8005622:	8bfb      	ldrh	r3, [r7, #30]
 8005624:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005628:	83fb      	strh	r3, [r7, #30]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	441a      	add	r2, r3
 8005638:	8bfb      	ldrh	r3, [r7, #30]
 800563a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564a:	b29b      	uxth	r3, r3
 800564c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11f      	bne.n	8005698 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005672:	83bb      	strh	r3, [r7, #28]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	8bbb      	ldrh	r3, [r7, #28]
 8005684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005690:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005694:	b29b      	uxth	r3, r3
 8005696:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005698:	8b7b      	ldrh	r3, [r7, #26]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6959      	ldr	r1, [r3, #20]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	895a      	ldrh	r2, [r3, #10]
 80056aa:	8b7b      	ldrh	r3, [r7, #26]
 80056ac:	f005 facd 	bl	800ac4a <USB_ReadPMA>
    }
  }

  return count;
 80056b0:	8b7b      	ldrh	r3, [r7, #26]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3720      	adds	r7, #32
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b0a4      	sub	sp, #144	; 0x90
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	4613      	mov	r3, r2
 80056c6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056c8:	88fb      	ldrh	r3, [r7, #6]
 80056ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 81db 	beq.w	8005a8a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056dc:	b29b      	uxth	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4413      	add	r3, r2
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	4413      	add	r3, r2
 80056ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056f8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	699a      	ldr	r2, [r3, #24]
 8005700:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005704:	429a      	cmp	r2, r3
 8005706:	d907      	bls.n	8005718 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005710:	1ad2      	subs	r2, r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	619a      	str	r2, [r3, #24]
 8005716:	e002      	b.n	800571e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2200      	movs	r2, #0
 800571c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f040 80b9 	bne.w	800589a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d126      	bne.n	800577e <HAL_PCD_EP_DB_Transmit+0xc4>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573e:	b29b      	uxth	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005744:	4413      	add	r3, r2
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	00da      	lsls	r2, r3, #3
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	4413      	add	r3, r2
 8005752:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005762:	b29a      	uxth	r2, r3
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005776:	b29a      	uxth	r2, r3
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	e01a      	b.n	80057b4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	785b      	ldrb	r3, [r3, #1]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d116      	bne.n	80057b4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	4413      	add	r3, r2
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	00da      	lsls	r2, r3, #3
 80057a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a6:	4413      	add	r3, r2
 80057a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057ac:	633b      	str	r3, [r7, #48]	; 0x30
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2200      	movs	r2, #0
 80057b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d126      	bne.n	8005810 <HAL_PCD_EP_DB_Transmit+0x156>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	461a      	mov	r2, r3
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	00da      	lsls	r2, r3, #3
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005808:	b29a      	uxth	r2, r3
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e017      	b.n	8005840 <HAL_PCD_EP_DB_Transmit+0x186>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d113      	bne.n	8005840 <HAL_PCD_EP_DB_Transmit+0x186>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005820:	b29b      	uxth	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	4413      	add	r3, r2
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	00da      	lsls	r2, r3, #3
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	4413      	add	r3, r2
 8005834:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005838:	623b      	str	r3, [r7, #32]
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	2200      	movs	r2, #0
 800583e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	4619      	mov	r1, r3
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f007 fc6b 	bl	800d122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 82fa 	beq.w	8005e4c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	82fb      	strh	r3, [r7, #22]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	461a      	mov	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	441a      	add	r2, r3
 8005882:	8afb      	ldrh	r3, [r7, #22]
 8005884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005894:	b29b      	uxth	r3, r3
 8005896:	8013      	strh	r3, [r2, #0]
 8005898:	e2d8      	b.n	8005e4c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d021      	beq.n	80058e8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	441a      	add	r2, r3
 80058d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80058d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	f040 82ac 	bne.w	8005e4c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80058fc:	441a      	add	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800590a:	441a      	add	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6a1a      	ldr	r2, [r3, #32]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	429a      	cmp	r2, r3
 800591a:	d30b      	bcc.n	8005934 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6a1a      	ldr	r2, [r3, #32]
 8005928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800592c:	1ad2      	subs	r2, r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	621a      	str	r2, [r3, #32]
 8005932:	e017      	b.n	8005964 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d108      	bne.n	800594e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800593c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005940:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800594c:	e00a      	b.n	8005964 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2200      	movs	r2, #0
 8005962:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d165      	bne.n	8005a38 <HAL_PCD_EP_DB_Transmit+0x37e>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597a:	b29b      	uxth	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005980:	4413      	add	r3, r2
 8005982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	00da      	lsls	r2, r3, #3
 800598a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598c:	4413      	add	r3, r2
 800598e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005992:	63bb      	str	r3, [r7, #56]	; 0x38
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800599e:	b29a      	uxth	r2, r3
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	801a      	strh	r2, [r3, #0]
 80059a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059a8:	2b3e      	cmp	r3, #62	; 0x3e
 80059aa:	d91d      	bls.n	80059e8 <HAL_PCD_EP_DB_Transmit+0x32e>
 80059ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80059b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <HAL_PCD_EP_DB_Transmit+0x30c>
 80059c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c2:	3b01      	subs	r3, #1
 80059c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	029b      	lsls	r3, r3, #10
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	4313      	orrs	r3, r2
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	e044      	b.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80059e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <HAL_PCD_EP_DB_Transmit+0x34c>
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	801a      	strh	r2, [r3, #0]
 8005a04:	e035      	b.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_PCD_EP_DB_Transmit+0x366>
 8005a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	029b      	lsls	r3, r3, #10
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	e01c      	b.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d118      	bne.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	647b      	str	r3, [r7, #68]	; 0x44
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a54:	4413      	add	r3, r2
 8005a56:	647b      	str	r3, [r7, #68]	; 0x44
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	00da      	lsls	r2, r3, #3
 8005a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a60:	4413      	add	r3, r2
 8005a62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a66:	643b      	str	r3, [r7, #64]	; 0x40
 8005a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a70:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6959      	ldr	r1, [r3, #20]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	891a      	ldrh	r2, [r3, #8]
 8005a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f005 f89f 	bl	800abc6 <USB_WritePMA>
 8005a88:	e1e0      	b.n	8005e4c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d307      	bcc.n	8005ace <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	619a      	str	r2, [r3, #24]
 8005acc:	e002      	b.n	8005ad4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f040 80c0 	bne.w	8005c5e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d126      	bne.n	8005b34 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005afa:	4413      	add	r3, r2
 8005afc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	00da      	lsls	r2, r3, #3
 8005b04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b06:	4413      	add	r3, r2
 8005b08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b1c:	801a      	strh	r2, [r3, #0]
 8005b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b30:	801a      	strh	r2, [r3, #0]
 8005b32:	e01a      	b.n	8005b6a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d116      	bne.n	8005b6a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	667b      	str	r3, [r7, #100]	; 0x64
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b50:	4413      	add	r3, r2
 8005b52:	667b      	str	r3, [r7, #100]	; 0x64
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	00da      	lsls	r2, r3, #3
 8005b5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b62:	663b      	str	r3, [r7, #96]	; 0x60
 8005b64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b66:	2200      	movs	r2, #0
 8005b68:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	677b      	str	r3, [r7, #116]	; 0x74
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	785b      	ldrb	r3, [r3, #1]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d12b      	bne.n	8005bd0 <HAL_PCD_EP_DB_Transmit+0x516>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8c:	4413      	add	r3, r2
 8005b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	00da      	lsls	r2, r3, #3
 8005b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b98:	4413      	add	r3, r2
 8005b9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	e017      	b.n	8005c00 <HAL_PCD_EP_DB_Transmit+0x546>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d113      	bne.n	8005c00 <HAL_PCD_EP_DB_Transmit+0x546>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be6:	4413      	add	r3, r2
 8005be8:	677b      	str	r3, [r7, #116]	; 0x74
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	00da      	lsls	r2, r3, #3
 8005bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bf8:	673b      	str	r3, [r7, #112]	; 0x70
 8005bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	4619      	mov	r1, r3
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f007 fa8b 	bl	800d122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f040 811a 	bne.w	8005e4c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	441a      	add	r2, r3
 8005c44:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	8013      	strh	r3, [r2, #0]
 8005c5c:	e0f6      	b.n	8005e4c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d121      	bne.n	8005cac <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	441a      	add	r2, r3
 8005c94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	f040 80ca 	bne.w	8005e4c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005cc0:	441a      	add	r2, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	69da      	ldr	r2, [r3, #28]
 8005cca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005cce:	441a      	add	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	6a1a      	ldr	r2, [r3, #32]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d30b      	bcc.n	8005cf8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6a1a      	ldr	r2, [r3, #32]
 8005cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cf0:	1ad2      	subs	r2, r2, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	621a      	str	r2, [r3, #32]
 8005cf6:	e017      	b.n	8005d28 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d108      	bne.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005d00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d10:	e00a      	b.n	8005d28 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	657b      	str	r3, [r7, #84]	; 0x54
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d165      	bne.n	8005e02 <HAL_PCD_EP_DB_Transmit+0x748>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d4a:	4413      	add	r3, r2
 8005d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	00da      	lsls	r2, r3, #3
 8005d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d56:	4413      	add	r3, r2
 8005d58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d72:	2b3e      	cmp	r3, #62	; 0x3e
 8005d74:	d91d      	bls.n	8005db2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d102      	bne.n	8005d90 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	029b      	lsls	r3, r3, #10
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	e041      	b.n	8005e36 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <HAL_PCD_EP_DB_Transmit+0x716>
 8005dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	e032      	b.n	8005e36 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dd4:	085b      	lsrs	r3, r3, #1
 8005dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <HAL_PCD_EP_DB_Transmit+0x730>
 8005de4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005de6:	3301      	adds	r3, #1
 8005de8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	029b      	lsls	r3, r3, #10
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	e019      	b.n	8005e36 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d115      	bne.n	8005e36 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e18:	4413      	add	r3, r2
 8005e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	00da      	lsls	r2, r3, #3
 8005e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e24:	4413      	add	r3, r2
 8005e26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e34:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6959      	ldr	r1, [r3, #20]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	895a      	ldrh	r2, [r3, #10]
 8005e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f004 febd 	bl	800abc6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e66:	82bb      	strh	r3, [r7, #20]
 8005e68:	8abb      	ldrh	r3, [r7, #20]
 8005e6a:	f083 0310 	eor.w	r3, r3, #16
 8005e6e:	82bb      	strh	r3, [r7, #20]
 8005e70:	8abb      	ldrh	r3, [r7, #20]
 8005e72:	f083 0320 	eor.w	r3, r3, #32
 8005e76:	82bb      	strh	r3, [r7, #20]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	441a      	add	r2, r3
 8005e86:	8abb      	ldrh	r3, [r7, #20]
 8005e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3790      	adds	r7, #144	; 0x90
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b087      	sub	sp, #28
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	607b      	str	r3, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	817b      	strh	r3, [r7, #10]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005eb8:	897b      	ldrh	r3, [r7, #10]
 8005eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00b      	beq.n	8005edc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ec4:	897b      	ldrh	r3, [r7, #10]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	e009      	b.n	8005ef0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005edc:	897a      	ldrh	r2, [r7, #10]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4413      	add	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005ef0:	893b      	ldrh	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	80da      	strh	r2, [r3, #6]
 8005f04:	e00b      	b.n	8005f1e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f043 0302 	orr.w	r3, r3, #2
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005f84:	4b04      	ldr	r3, [pc, #16]	; (8005f98 <HAL_PWREx_GetVoltageRange+0x18>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40007000 	.word	0x40007000

08005f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005faa:	d130      	bne.n	800600e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fac:	4b23      	ldr	r3, [pc, #140]	; (800603c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb8:	d038      	beq.n	800602c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fba:	4b20      	ldr	r3, [pc, #128]	; (800603c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fc2:	4a1e      	ldr	r2, [pc, #120]	; (800603c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fca:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2232      	movs	r2, #50	; 0x32
 8005fd0:	fb02 f303 	mul.w	r3, r2, r3
 8005fd4:	4a1b      	ldr	r2, [pc, #108]	; (8006044 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	0c9b      	lsrs	r3, r3, #18
 8005fdc:	3301      	adds	r3, #1
 8005fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fe0:	e002      	b.n	8005fe8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fe8:	4b14      	ldr	r3, [pc, #80]	; (800603c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff4:	d102      	bne.n	8005ffc <HAL_PWREx_ControlVoltageScaling+0x60>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f2      	bne.n	8005fe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ffc:	4b0f      	ldr	r3, [pc, #60]	; (800603c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d110      	bne.n	800602c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e00f      	b.n	800602e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800600e:	4b0b      	ldr	r3, [pc, #44]	; (800603c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601a:	d007      	beq.n	800602c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800601c:	4b07      	ldr	r3, [pc, #28]	; (800603c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006024:	4a05      	ldr	r2, [pc, #20]	; (800603c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800602a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40007000 	.word	0x40007000
 8006040:	20000004 	.word	0x20000004
 8006044:	431bde83 	.word	0x431bde83

08006048 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_PWREx_EnableVddUSB+0x1c>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	4a04      	ldr	r2, [pc, #16]	; (8006064 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006056:	6053      	str	r3, [r2, #4]
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40007000 	.word	0x40007000

08006068 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d102      	bne.n	800607c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f000 bc4f 	b.w	800691a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800607c:	4b97      	ldr	r3, [pc, #604]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 030c 	and.w	r3, r3, #12
 8006084:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006086:	4b95      	ldr	r3, [pc, #596]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80e6 	beq.w	800626a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d007      	beq.n	80060b4 <HAL_RCC_OscConfig+0x4c>
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	2b0c      	cmp	r3, #12
 80060a8:	f040 808d 	bne.w	80061c6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	f040 8089 	bne.w	80061c6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060b4:	4b89      	ldr	r3, [pc, #548]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d006      	beq.n	80060ce <HAL_RCC_OscConfig+0x66>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d102      	bne.n	80060ce <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f000 bc26 	b.w	800691a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d2:	4b82      	ldr	r3, [pc, #520]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <HAL_RCC_OscConfig+0x80>
 80060de:	4b7f      	ldr	r3, [pc, #508]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060e6:	e005      	b.n	80060f4 <HAL_RCC_OscConfig+0x8c>
 80060e8:	4b7c      	ldr	r3, [pc, #496]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80060ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ee:	091b      	lsrs	r3, r3, #4
 80060f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d224      	bcs.n	8006142 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 fdd9 	bl	8006cb4 <RCC_SetFlashLatencyFromMSIRange>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	f000 bc06 	b.w	800691a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800610e:	4b73      	ldr	r3, [pc, #460]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a72      	ldr	r2, [pc, #456]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006114:	f043 0308 	orr.w	r3, r3, #8
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	4b70      	ldr	r3, [pc, #448]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	496d      	ldr	r1, [pc, #436]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006128:	4313      	orrs	r3, r2
 800612a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800612c:	4b6b      	ldr	r3, [pc, #428]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	4968      	ldr	r1, [pc, #416]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 800613c:	4313      	orrs	r3, r2
 800613e:	604b      	str	r3, [r1, #4]
 8006140:	e025      	b.n	800618e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006142:	4b66      	ldr	r3, [pc, #408]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a65      	ldr	r2, [pc, #404]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006148:	f043 0308 	orr.w	r3, r3, #8
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	4b63      	ldr	r3, [pc, #396]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	4960      	ldr	r1, [pc, #384]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 800615c:	4313      	orrs	r3, r2
 800615e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006160:	4b5e      	ldr	r3, [pc, #376]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	495b      	ldr	r1, [pc, #364]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006170:	4313      	orrs	r3, r2
 8006172:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d109      	bne.n	800618e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fd98 	bl	8006cb4 <RCC_SetFlashLatencyFromMSIRange>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e3c5      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800618e:	f000 fccd 	bl	8006b2c <HAL_RCC_GetSysClockFreq>
 8006192:	4602      	mov	r2, r0
 8006194:	4b51      	ldr	r3, [pc, #324]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	091b      	lsrs	r3, r3, #4
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	4950      	ldr	r1, [pc, #320]	; (80062e0 <HAL_RCC_OscConfig+0x278>)
 80061a0:	5ccb      	ldrb	r3, [r1, r3]
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	fa22 f303 	lsr.w	r3, r2, r3
 80061aa:	4a4e      	ldr	r2, [pc, #312]	; (80062e4 <HAL_RCC_OscConfig+0x27c>)
 80061ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80061ae:	4b4e      	ldr	r3, [pc, #312]	; (80062e8 <HAL_RCC_OscConfig+0x280>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fc f864 	bl	8002280 <HAL_InitTick>
 80061b8:	4603      	mov	r3, r0
 80061ba:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d052      	beq.n	8006268 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	e3a9      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d032      	beq.n	8006234 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80061ce:	4b43      	ldr	r3, [pc, #268]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a42      	ldr	r2, [pc, #264]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061da:	f7fc f8a1 	bl	8002320 <HAL_GetTick>
 80061de:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061e2:	f7fc f89d 	bl	8002320 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e392      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061f4:	4b39      	ldr	r3, [pc, #228]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0f0      	beq.n	80061e2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006200:	4b36      	ldr	r3, [pc, #216]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a35      	ldr	r2, [pc, #212]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006206:	f043 0308 	orr.w	r3, r3, #8
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	4b33      	ldr	r3, [pc, #204]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	4930      	ldr	r1, [pc, #192]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800621e:	4b2f      	ldr	r3, [pc, #188]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	492b      	ldr	r1, [pc, #172]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 800622e:	4313      	orrs	r3, r2
 8006230:	604b      	str	r3, [r1, #4]
 8006232:	e01a      	b.n	800626a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006234:	4b29      	ldr	r3, [pc, #164]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a28      	ldr	r2, [pc, #160]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 800623a:	f023 0301 	bic.w	r3, r3, #1
 800623e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006240:	f7fc f86e 	bl	8002320 <HAL_GetTick>
 8006244:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006248:	f7fc f86a 	bl	8002320 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e35f      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800625a:	4b20      	ldr	r3, [pc, #128]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1f0      	bne.n	8006248 <HAL_RCC_OscConfig+0x1e0>
 8006266:	e000      	b.n	800626a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006268:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d073      	beq.n	800635e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	2b08      	cmp	r3, #8
 800627a:	d005      	beq.n	8006288 <HAL_RCC_OscConfig+0x220>
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	2b0c      	cmp	r3, #12
 8006280:	d10e      	bne.n	80062a0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d10b      	bne.n	80062a0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006288:	4b14      	ldr	r3, [pc, #80]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d063      	beq.n	800635c <HAL_RCC_OscConfig+0x2f4>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d15f      	bne.n	800635c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e33c      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a8:	d106      	bne.n	80062b8 <HAL_RCC_OscConfig+0x250>
 80062aa:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a0b      	ldr	r2, [pc, #44]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80062b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	e025      	b.n	8006304 <HAL_RCC_OscConfig+0x29c>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062c0:	d114      	bne.n	80062ec <HAL_RCC_OscConfig+0x284>
 80062c2:	4b06      	ldr	r3, [pc, #24]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a05      	ldr	r2, [pc, #20]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80062c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	4b03      	ldr	r3, [pc, #12]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a02      	ldr	r2, [pc, #8]	; (80062dc <HAL_RCC_OscConfig+0x274>)
 80062d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	e013      	b.n	8006304 <HAL_RCC_OscConfig+0x29c>
 80062dc:	40021000 	.word	0x40021000
 80062e0:	0800eb74 	.word	0x0800eb74
 80062e4:	20000004 	.word	0x20000004
 80062e8:	20000008 	.word	0x20000008
 80062ec:	4b8f      	ldr	r3, [pc, #572]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a8e      	ldr	r2, [pc, #568]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80062f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	4b8c      	ldr	r3, [pc, #560]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a8b      	ldr	r2, [pc, #556]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80062fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d013      	beq.n	8006334 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630c:	f7fc f808 	bl	8002320 <HAL_GetTick>
 8006310:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006314:	f7fc f804 	bl	8002320 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b64      	cmp	r3, #100	; 0x64
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e2f9      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006326:	4b81      	ldr	r3, [pc, #516]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0f0      	beq.n	8006314 <HAL_RCC_OscConfig+0x2ac>
 8006332:	e014      	b.n	800635e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006334:	f7fb fff4 	bl	8002320 <HAL_GetTick>
 8006338:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800633c:	f7fb fff0 	bl	8002320 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b64      	cmp	r3, #100	; 0x64
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e2e5      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800634e:	4b77      	ldr	r3, [pc, #476]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f0      	bne.n	800633c <HAL_RCC_OscConfig+0x2d4>
 800635a:	e000      	b.n	800635e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800635c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d060      	beq.n	800642c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	2b04      	cmp	r3, #4
 800636e:	d005      	beq.n	800637c <HAL_RCC_OscConfig+0x314>
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	2b0c      	cmp	r3, #12
 8006374:	d119      	bne.n	80063aa <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	2b02      	cmp	r3, #2
 800637a:	d116      	bne.n	80063aa <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800637c:	4b6b      	ldr	r3, [pc, #428]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <HAL_RCC_OscConfig+0x32c>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e2c2      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006394:	4b65      	ldr	r3, [pc, #404]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	061b      	lsls	r3, r3, #24
 80063a2:	4962      	ldr	r1, [pc, #392]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063a8:	e040      	b.n	800642c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d023      	beq.n	80063fa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063b2:	4b5e      	ldr	r3, [pc, #376]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a5d      	ldr	r2, [pc, #372]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80063b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063be:	f7fb ffaf 	bl	8002320 <HAL_GetTick>
 80063c2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063c6:	f7fb ffab 	bl	8002320 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e2a0      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063d8:	4b54      	ldr	r3, [pc, #336]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0f0      	beq.n	80063c6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e4:	4b51      	ldr	r3, [pc, #324]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	061b      	lsls	r3, r3, #24
 80063f2:	494e      	ldr	r1, [pc, #312]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	604b      	str	r3, [r1, #4]
 80063f8:	e018      	b.n	800642c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063fa:	4b4c      	ldr	r3, [pc, #304]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a4b      	ldr	r2, [pc, #300]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 8006400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006406:	f7fb ff8b 	bl	8002320 <HAL_GetTick>
 800640a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800640e:	f7fb ff87 	bl	8002320 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e27c      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006420:	4b42      	ldr	r3, [pc, #264]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1f0      	bne.n	800640e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8082 	beq.w	800653e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d05f      	beq.n	8006502 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8006442:	4b3a      	ldr	r3, [pc, #232]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 8006444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006448:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	429a      	cmp	r2, r3
 8006456:	d037      	beq.n	80064c8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d006      	beq.n	8006470 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e254      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01b      	beq.n	80064b2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800647a:	4b2c      	ldr	r3, [pc, #176]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 800647c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006480:	4a2a      	ldr	r2, [pc, #168]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 8006482:	f023 0301 	bic.w	r3, r3, #1
 8006486:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800648a:	f7fb ff49 	bl	8002320 <HAL_GetTick>
 800648e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006492:	f7fb ff45 	bl	8002320 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b11      	cmp	r3, #17
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e23a      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064a4:	4b21      	ldr	r3, [pc, #132]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80064a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1ef      	bne.n	8006492 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80064b2:	4b1e      	ldr	r3, [pc, #120]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80064b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064b8:	f023 0210 	bic.w	r2, r3, #16
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	491a      	ldr	r1, [pc, #104]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064c8:	4b18      	ldr	r3, [pc, #96]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80064ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ce:	4a17      	ldr	r2, [pc, #92]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80064d0:	f043 0301 	orr.w	r3, r3, #1
 80064d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d8:	f7fb ff22 	bl	8002320 <HAL_GetTick>
 80064dc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064e0:	f7fb ff1e 	bl	8002320 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b11      	cmp	r3, #17
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e213      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064f2:	4b0e      	ldr	r3, [pc, #56]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 80064f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0ef      	beq.n	80064e0 <HAL_RCC_OscConfig+0x478>
 8006500:	e01d      	b.n	800653e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006502:	4b0a      	ldr	r3, [pc, #40]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 8006504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006508:	4a08      	ldr	r2, [pc, #32]	; (800652c <HAL_RCC_OscConfig+0x4c4>)
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006512:	f7fb ff05 	bl	8002320 <HAL_GetTick>
 8006516:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006518:	e00a      	b.n	8006530 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800651a:	f7fb ff01 	bl	8002320 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b11      	cmp	r3, #17
 8006526:	d903      	bls.n	8006530 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e1f6      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
 800652c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006530:	4ba9      	ldr	r3, [pc, #676]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1ed      	bne.n	800651a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 80bd 	beq.w	80066c6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800654c:	2300      	movs	r3, #0
 800654e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006552:	4ba1      	ldr	r3, [pc, #644]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10e      	bne.n	800657c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800655e:	4b9e      	ldr	r3, [pc, #632]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006562:	4a9d      	ldr	r2, [pc, #628]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006568:	6593      	str	r3, [r2, #88]	; 0x58
 800656a:	4b9b      	ldr	r3, [pc, #620]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 800656c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800657c:	4b97      	ldr	r3, [pc, #604]	; (80067dc <HAL_RCC_OscConfig+0x774>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d118      	bne.n	80065ba <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006588:	4b94      	ldr	r3, [pc, #592]	; (80067dc <HAL_RCC_OscConfig+0x774>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a93      	ldr	r2, [pc, #588]	; (80067dc <HAL_RCC_OscConfig+0x774>)
 800658e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006592:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006594:	f7fb fec4 	bl	8002320 <HAL_GetTick>
 8006598:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659c:	f7fb fec0 	bl	8002320 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e1b5      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ae:	4b8b      	ldr	r3, [pc, #556]	; (80067dc <HAL_RCC_OscConfig+0x774>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d02c      	beq.n	8006620 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80065c6:	4b84      	ldr	r3, [pc, #528]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80065c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d8:	497f      	ldr	r1, [pc, #508]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d010      	beq.n	800660e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80065ec:	4b7a      	ldr	r3, [pc, #488]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f2:	4a79      	ldr	r2, [pc, #484]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80065f4:	f043 0304 	orr.w	r3, r3, #4
 80065f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80065fc:	4b76      	ldr	r3, [pc, #472]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80065fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006602:	4a75      	ldr	r2, [pc, #468]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006604:	f043 0301 	orr.w	r3, r3, #1
 8006608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800660c:	e018      	b.n	8006640 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800660e:	4b72      	ldr	r3, [pc, #456]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006614:	4a70      	ldr	r2, [pc, #448]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800661e:	e00f      	b.n	8006640 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006620:	4b6d      	ldr	r3, [pc, #436]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006626:	4a6c      	ldr	r2, [pc, #432]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006628:	f023 0301 	bic.w	r3, r3, #1
 800662c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006630:	4b69      	ldr	r3, [pc, #420]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	4a68      	ldr	r2, [pc, #416]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006638:	f023 0304 	bic.w	r3, r3, #4
 800663c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d016      	beq.n	8006676 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006648:	f7fb fe6a 	bl	8002320 <HAL_GetTick>
 800664c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800664e:	e00a      	b.n	8006666 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006650:	f7fb fe66 	bl	8002320 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	f241 3288 	movw	r2, #5000	; 0x1388
 800665e:	4293      	cmp	r3, r2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e159      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006666:	4b5c      	ldr	r3, [pc, #368]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0ed      	beq.n	8006650 <HAL_RCC_OscConfig+0x5e8>
 8006674:	e01d      	b.n	80066b2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006676:	f7fb fe53 	bl	8002320 <HAL_GetTick>
 800667a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800667c:	e00a      	b.n	8006694 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800667e:	f7fb fe4f 	bl	8002320 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	f241 3288 	movw	r2, #5000	; 0x1388
 800668c:	4293      	cmp	r3, r2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e142      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006694:	4b50      	ldr	r3, [pc, #320]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1ed      	bne.n	800667e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80066a2:	4b4d      	ldr	r3, [pc, #308]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80066a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a8:	4a4b      	ldr	r2, [pc, #300]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80066aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d105      	bne.n	80066c6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066ba:	4b47      	ldr	r3, [pc, #284]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80066bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066be:	4a46      	ldr	r2, [pc, #280]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80066c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d03c      	beq.n	800674c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d01c      	beq.n	8006714 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066da:	4b3f      	ldr	r3, [pc, #252]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80066dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066e0:	4a3d      	ldr	r2, [pc, #244]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80066e2:	f043 0301 	orr.w	r3, r3, #1
 80066e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ea:	f7fb fe19 	bl	8002320 <HAL_GetTick>
 80066ee:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066f2:	f7fb fe15 	bl	8002320 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e10a      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006704:	4b34      	ldr	r3, [pc, #208]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0ef      	beq.n	80066f2 <HAL_RCC_OscConfig+0x68a>
 8006712:	e01b      	b.n	800674c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006714:	4b30      	ldr	r3, [pc, #192]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800671a:	4a2f      	ldr	r2, [pc, #188]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006724:	f7fb fdfc 	bl	8002320 <HAL_GetTick>
 8006728:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800672c:	f7fb fdf8 	bl	8002320 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e0ed      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800673e:	4b26      	ldr	r3, [pc, #152]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1ef      	bne.n	800672c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 80e1 	beq.w	8006918 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	2b02      	cmp	r3, #2
 800675c:	f040 80b5 	bne.w	80068ca <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006760:	4b1d      	ldr	r3, [pc, #116]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	f003 0203 	and.w	r2, r3, #3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	429a      	cmp	r2, r3
 8006772:	d124      	bne.n	80067be <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677e:	3b01      	subs	r3, #1
 8006780:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006782:	429a      	cmp	r2, r3
 8006784:	d11b      	bne.n	80067be <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006792:	429a      	cmp	r2, r3
 8006794:	d113      	bne.n	80067be <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	3b01      	subs	r3, #1
 80067a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d109      	bne.n	80067be <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	3b01      	subs	r3, #1
 80067b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d05f      	beq.n	800687e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	2b0c      	cmp	r3, #12
 80067c2:	d05a      	beq.n	800687a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80067c4:	4b04      	ldr	r3, [pc, #16]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a03      	ldr	r2, [pc, #12]	; (80067d8 <HAL_RCC_OscConfig+0x770>)
 80067ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067d0:	f7fb fda6 	bl	8002320 <HAL_GetTick>
 80067d4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067d6:	e00c      	b.n	80067f2 <HAL_RCC_OscConfig+0x78a>
 80067d8:	40021000 	.word	0x40021000
 80067dc:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e0:	f7fb fd9e 	bl	8002320 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e093      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067f2:	4b4c      	ldr	r3, [pc, #304]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1f0      	bne.n	80067e0 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067fe:	4b49      	ldr	r3, [pc, #292]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	4b49      	ldr	r3, [pc, #292]	; (8006928 <HAL_RCC_OscConfig+0x8c0>)
 8006804:	4013      	ands	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800680e:	3a01      	subs	r2, #1
 8006810:	0112      	lsls	r2, r2, #4
 8006812:	4311      	orrs	r1, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006818:	0212      	lsls	r2, r2, #8
 800681a:	4311      	orrs	r1, r2
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006820:	0852      	lsrs	r2, r2, #1
 8006822:	3a01      	subs	r2, #1
 8006824:	0552      	lsls	r2, r2, #21
 8006826:	4311      	orrs	r1, r2
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800682c:	0852      	lsrs	r2, r2, #1
 800682e:	3a01      	subs	r2, #1
 8006830:	0652      	lsls	r2, r2, #25
 8006832:	430a      	orrs	r2, r1
 8006834:	493b      	ldr	r1, [pc, #236]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 8006836:	4313      	orrs	r3, r2
 8006838:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800683a:	4b3a      	ldr	r3, [pc, #232]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a39      	ldr	r2, [pc, #228]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 8006840:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006844:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006846:	4b37      	ldr	r3, [pc, #220]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	4a36      	ldr	r2, [pc, #216]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 800684c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006850:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006852:	f7fb fd65 	bl	8002320 <HAL_GetTick>
 8006856:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006858:	e008      	b.n	800686c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800685a:	f7fb fd61 	bl	8002320 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e056      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800686c:	4b2d      	ldr	r3, [pc, #180]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0f0      	beq.n	800685a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006878:	e04e      	b.n	8006918 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e04d      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800687e:	4b29      	ldr	r3, [pc, #164]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d146      	bne.n	8006918 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800688a:	4b26      	ldr	r3, [pc, #152]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a25      	ldr	r2, [pc, #148]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 8006890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006894:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006896:	4b23      	ldr	r3, [pc, #140]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	4a22      	ldr	r2, [pc, #136]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 800689c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068a0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068a2:	f7fb fd3d 	bl	8002320 <HAL_GetTick>
 80068a6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068aa:	f7fb fd39 	bl	8002320 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e02e      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068bc:	4b19      	ldr	r3, [pc, #100]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCC_OscConfig+0x842>
 80068c8:	e026      	b.n	8006918 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	2b0c      	cmp	r3, #12
 80068ce:	d021      	beq.n	8006914 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d0:	4b14      	ldr	r3, [pc, #80]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a13      	ldr	r2, [pc, #76]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 80068d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068dc:	f7fb fd20 	bl	8002320 <HAL_GetTick>
 80068e0:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068e4:	f7fb fd1c 	bl	8002320 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e011      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f0      	bne.n	80068e4 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8006902:	4b08      	ldr	r3, [pc, #32]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	4a07      	ldr	r2, [pc, #28]	; (8006924 <HAL_RCC_OscConfig+0x8bc>)
 8006908:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800690c:	f023 0303 	bic.w	r3, r3, #3
 8006910:	60d3      	str	r3, [r2, #12]
 8006912:	e001      	b.n	8006918 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3728      	adds	r7, #40	; 0x28
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40021000 	.word	0x40021000
 8006928:	f99f808c 	.word	0xf99f808c

0800692c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e0e7      	b.n	8006b10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006940:	4b75      	ldr	r3, [pc, #468]	; (8006b18 <HAL_RCC_ClockConfig+0x1ec>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d910      	bls.n	8006970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694e:	4b72      	ldr	r3, [pc, #456]	; (8006b18 <HAL_RCC_ClockConfig+0x1ec>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f023 0207 	bic.w	r2, r3, #7
 8006956:	4970      	ldr	r1, [pc, #448]	; (8006b18 <HAL_RCC_ClockConfig+0x1ec>)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	4313      	orrs	r3, r2
 800695c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800695e:	4b6e      	ldr	r3, [pc, #440]	; (8006b18 <HAL_RCC_ClockConfig+0x1ec>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d001      	beq.n	8006970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0cf      	b.n	8006b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d010      	beq.n	800699e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	4b66      	ldr	r3, [pc, #408]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006988:	429a      	cmp	r2, r3
 800698a:	d908      	bls.n	800699e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800698c:	4b63      	ldr	r3, [pc, #396]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	4960      	ldr	r1, [pc, #384]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 800699a:	4313      	orrs	r3, r2
 800699c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d04c      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d107      	bne.n	80069c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069b2:	4b5a      	ldr	r3, [pc, #360]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d121      	bne.n	8006a02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e0a6      	b.n	8006b10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d107      	bne.n	80069da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069ca:	4b54      	ldr	r3, [pc, #336]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d115      	bne.n	8006a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e09a      	b.n	8006b10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d107      	bne.n	80069f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069e2:	4b4e      	ldr	r3, [pc, #312]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e08e      	b.n	8006b10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069f2:	4b4a      	ldr	r3, [pc, #296]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e086      	b.n	8006b10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a02:	4b46      	ldr	r3, [pc, #280]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f023 0203 	bic.w	r2, r3, #3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	4943      	ldr	r1, [pc, #268]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a14:	f7fb fc84 	bl	8002320 <HAL_GetTick>
 8006a18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1a:	e00a      	b.n	8006a32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a1c:	f7fb fc80 	bl	8002320 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e06e      	b.n	8006b10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a32:	4b3a      	ldr	r3, [pc, #232]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 020c 	and.w	r2, r3, #12
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d1eb      	bne.n	8006a1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d010      	beq.n	8006a72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	4b31      	ldr	r3, [pc, #196]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d208      	bcs.n	8006a72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a60:	4b2e      	ldr	r3, [pc, #184]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	492b      	ldr	r1, [pc, #172]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a72:	4b29      	ldr	r3, [pc, #164]	; (8006b18 <HAL_RCC_ClockConfig+0x1ec>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d210      	bcs.n	8006aa2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a80:	4b25      	ldr	r3, [pc, #148]	; (8006b18 <HAL_RCC_ClockConfig+0x1ec>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f023 0207 	bic.w	r2, r3, #7
 8006a88:	4923      	ldr	r1, [pc, #140]	; (8006b18 <HAL_RCC_ClockConfig+0x1ec>)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a90:	4b21      	ldr	r3, [pc, #132]	; (8006b18 <HAL_RCC_ClockConfig+0x1ec>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d001      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e036      	b.n	8006b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d008      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006aae:	4b1b      	ldr	r3, [pc, #108]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	4918      	ldr	r1, [pc, #96]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d009      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006acc:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	4910      	ldr	r1, [pc, #64]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ae0:	f000 f824 	bl	8006b2c <HAL_RCC_GetSysClockFreq>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	; (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	091b      	lsrs	r3, r3, #4
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	490b      	ldr	r1, [pc, #44]	; (8006b20 <HAL_RCC_ClockConfig+0x1f4>)
 8006af2:	5ccb      	ldrb	r3, [r1, r3]
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
 8006afc:	4a09      	ldr	r2, [pc, #36]	; (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 8006afe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006b00:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <HAL_RCC_ClockConfig+0x1fc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fb fbbb 	bl	8002280 <HAL_InitTick>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8006b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40022000 	.word	0x40022000
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	0800eb74 	.word	0x0800eb74
 8006b24:	20000004 	.word	0x20000004
 8006b28:	20000008 	.word	0x20000008

08006b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b089      	sub	sp, #36	; 0x24
 8006b30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	2300      	movs	r3, #0
 8006b38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b3a:	4b3e      	ldr	r3, [pc, #248]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 030c 	and.w	r3, r3, #12
 8006b42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b44:	4b3b      	ldr	r3, [pc, #236]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0303 	and.w	r3, r3, #3
 8006b4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d005      	beq.n	8006b60 <HAL_RCC_GetSysClockFreq+0x34>
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b0c      	cmp	r3, #12
 8006b58:	d121      	bne.n	8006b9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d11e      	bne.n	8006b9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006b60:	4b34      	ldr	r3, [pc, #208]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0308 	and.w	r3, r3, #8
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d107      	bne.n	8006b7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006b6c:	4b31      	ldr	r3, [pc, #196]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b72:	0a1b      	lsrs	r3, r3, #8
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	61fb      	str	r3, [r7, #28]
 8006b7a:	e005      	b.n	8006b88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006b7c:	4b2d      	ldr	r3, [pc, #180]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	091b      	lsrs	r3, r3, #4
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006b88:	4a2b      	ldr	r2, [pc, #172]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10d      	bne.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b9c:	e00a      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d102      	bne.n	8006baa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ba4:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8006ba6:	61bb      	str	r3, [r7, #24]
 8006ba8:	e004      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d101      	bne.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006bb0:	4b23      	ldr	r3, [pc, #140]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8006bb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	2b0c      	cmp	r3, #12
 8006bb8:	d134      	bne.n	8006c24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bba:	4b1e      	ldr	r3, [pc, #120]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d003      	beq.n	8006bd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d003      	beq.n	8006bd8 <HAL_RCC_GetSysClockFreq+0xac>
 8006bd0:	e005      	b.n	8006bde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006bd2:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8006bd4:	617b      	str	r3, [r7, #20]
      break;
 8006bd6:	e005      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006bd8:	4b19      	ldr	r3, [pc, #100]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8006bda:	617b      	str	r3, [r7, #20]
      break;
 8006bdc:	e002      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	617b      	str	r3, [r7, #20]
      break;
 8006be2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006be4:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	091b      	lsrs	r3, r3, #4
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	3301      	adds	r3, #1
 8006bf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006bf2:	4b10      	ldr	r3, [pc, #64]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	0a1b      	lsrs	r3, r3, #8
 8006bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	fb03 f202 	mul.w	r2, r3, r2
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	0e5b      	lsrs	r3, r3, #25
 8006c10:	f003 0303 	and.w	r3, r3, #3
 8006c14:	3301      	adds	r3, #1
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006c24:	69bb      	ldr	r3, [r7, #24]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3724      	adds	r7, #36	; 0x24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	40021000 	.word	0x40021000
 8006c38:	0800eb8c 	.word	0x0800eb8c
 8006c3c:	00f42400 	.word	0x00f42400
 8006c40:	007a1200 	.word	0x007a1200

08006c44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c48:	4b03      	ldr	r3, [pc, #12]	; (8006c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	20000004 	.word	0x20000004

08006c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c60:	f7ff fff0 	bl	8006c44 <HAL_RCC_GetHCLKFreq>
 8006c64:	4602      	mov	r2, r0
 8006c66:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	0a1b      	lsrs	r3, r3, #8
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	4904      	ldr	r1, [pc, #16]	; (8006c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c72:	5ccb      	ldrb	r3, [r1, r3]
 8006c74:	f003 031f 	and.w	r3, r3, #31
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40021000 	.word	0x40021000
 8006c84:	0800eb84 	.word	0x0800eb84

08006c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c8c:	f7ff ffda 	bl	8006c44 <HAL_RCC_GetHCLKFreq>
 8006c90:	4602      	mov	r2, r0
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	0adb      	lsrs	r3, r3, #11
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	4904      	ldr	r1, [pc, #16]	; (8006cb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ca0:	f003 031f 	and.w	r3, r3, #31
 8006ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	0800eb84 	.word	0x0800eb84

08006cb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006cc0:	4b2a      	ldr	r3, [pc, #168]	; (8006d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ccc:	f7ff f958 	bl	8005f80 <HAL_PWREx_GetVoltageRange>
 8006cd0:	6178      	str	r0, [r7, #20]
 8006cd2:	e014      	b.n	8006cfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cd4:	4b25      	ldr	r3, [pc, #148]	; (8006d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd8:	4a24      	ldr	r2, [pc, #144]	; (8006d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cde:	6593      	str	r3, [r2, #88]	; 0x58
 8006ce0:	4b22      	ldr	r3, [pc, #136]	; (8006d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006cec:	f7ff f948 	bl	8005f80 <HAL_PWREx_GetVoltageRange>
 8006cf0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006cf2:	4b1e      	ldr	r3, [pc, #120]	; (8006d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf6:	4a1d      	ldr	r2, [pc, #116]	; (8006d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d04:	d10b      	bne.n	8006d1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b80      	cmp	r3, #128	; 0x80
 8006d0a:	d919      	bls.n	8006d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2ba0      	cmp	r3, #160	; 0xa0
 8006d10:	d902      	bls.n	8006d18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d12:	2302      	movs	r3, #2
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	e013      	b.n	8006d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d18:	2301      	movs	r3, #1
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	e010      	b.n	8006d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b80      	cmp	r3, #128	; 0x80
 8006d22:	d902      	bls.n	8006d2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006d24:	2303      	movs	r3, #3
 8006d26:	613b      	str	r3, [r7, #16]
 8006d28:	e00a      	b.n	8006d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b80      	cmp	r3, #128	; 0x80
 8006d2e:	d102      	bne.n	8006d36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d30:	2302      	movs	r3, #2
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	e004      	b.n	8006d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b70      	cmp	r3, #112	; 0x70
 8006d3a:	d101      	bne.n	8006d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006d40:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f023 0207 	bic.w	r2, r3, #7
 8006d48:	4909      	ldr	r1, [pc, #36]	; (8006d70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006d50:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d001      	beq.n	8006d62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40021000 	.word	0x40021000
 8006d70:	40022000 	.word	0x40022000

08006d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d80:	2300      	movs	r3, #0
 8006d82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 809e 	beq.w	8006ece <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d92:	2300      	movs	r3, #0
 8006d94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d96:	4b46      	ldr	r3, [pc, #280]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00d      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dac:	4b40      	ldr	r3, [pc, #256]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db0:	4a3f      	ldr	r2, [pc, #252]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db6:	6593      	str	r3, [r2, #88]	; 0x58
 8006db8:	4b3d      	ldr	r3, [pc, #244]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc0:	60bb      	str	r3, [r7, #8]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dc8:	4b3a      	ldr	r3, [pc, #232]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a39      	ldr	r2, [pc, #228]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006dd4:	f7fb faa4 	bl	8002320 <HAL_GetTick>
 8006dd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006dda:	e009      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ddc:	f7fb faa0 	bl	8002320 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d902      	bls.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	74fb      	strb	r3, [r7, #19]
        break;
 8006dee:	e005      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006df0:	4b30      	ldr	r3, [pc, #192]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0ef      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8006dfc:	7cfb      	ldrb	r3, [r7, #19]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d15a      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e02:	4b2b      	ldr	r3, [pc, #172]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01e      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d019      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e1e:	4b24      	ldr	r3, [pc, #144]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e2a:	4b21      	ldr	r3, [pc, #132]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e30:	4a1f      	ldr	r2, [pc, #124]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e3a:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e40:	4a1b      	ldr	r2, [pc, #108]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e4a:	4a19      	ldr	r2, [pc, #100]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d016      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5c:	f7fb fa60 	bl	8002320 <HAL_GetTick>
 8006e60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e62:	e00b      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e64:	f7fb fa5c 	bl	8002320 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d902      	bls.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	74fb      	strb	r3, [r7, #19]
            break;
 8006e7a:	e006      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e7c:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0ec      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8006e8a:	7cfb      	ldrb	r3, [r7, #19]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10b      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	4904      	ldr	r1, [pc, #16]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006ea6:	e009      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ea8:	7cfb      	ldrb	r3, [r7, #19]
 8006eaa:	74bb      	strb	r3, [r7, #18]
 8006eac:	e006      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006eae:	bf00      	nop
 8006eb0:	40021000 	.word	0x40021000
 8006eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb8:	7cfb      	ldrb	r3, [r7, #19]
 8006eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ebc:	7c7b      	ldrb	r3, [r7, #17]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d105      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec2:	4b6e      	ldr	r3, [pc, #440]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec6:	4a6d      	ldr	r2, [pc, #436]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ecc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006eda:	4b68      	ldr	r3, [pc, #416]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee0:	f023 0203 	bic.w	r2, r3, #3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	4964      	ldr	r1, [pc, #400]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006efc:	4b5f      	ldr	r3, [pc, #380]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f02:	f023 020c 	bic.w	r2, r3, #12
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	495c      	ldr	r1, [pc, #368]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f1e:	4b57      	ldr	r3, [pc, #348]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	4953      	ldr	r1, [pc, #332]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f40:	4b4e      	ldr	r3, [pc, #312]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	494b      	ldr	r1, [pc, #300]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f62:	4b46      	ldr	r3, [pc, #280]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	4942      	ldr	r1, [pc, #264]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f84:	4b3d      	ldr	r3, [pc, #244]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	493a      	ldr	r1, [pc, #232]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fa6:	4b35      	ldr	r3, [pc, #212]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	4931      	ldr	r1, [pc, #196]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00a      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fc8:	4b2c      	ldr	r3, [pc, #176]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	4929      	ldr	r1, [pc, #164]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fea:	4b24      	ldr	r3, [pc, #144]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	4920      	ldr	r1, [pc, #128]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d015      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800700c:	4b1b      	ldr	r3, [pc, #108]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800700e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	4918      	ldr	r1, [pc, #96]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800701c:	4313      	orrs	r3, r2
 800701e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800702a:	d105      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800702c:	4b13      	ldr	r3, [pc, #76]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	4a12      	ldr	r2, [pc, #72]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007036:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d015      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007044:	4b0d      	ldr	r3, [pc, #52]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007052:	490a      	ldr	r1, [pc, #40]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007054:	4313      	orrs	r3, r2
 8007056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007062:	d105      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007064:	4b05      	ldr	r3, [pc, #20]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	4a04      	ldr	r2, [pc, #16]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800706a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800706e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007070:	7cbb      	ldrb	r3, [r7, #18]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	40021000 	.word	0x40021000

08007080 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e095      	b.n	80071be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	2b00      	cmp	r3, #0
 8007098:	d108      	bne.n	80070ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070a2:	d009      	beq.n	80070b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	61da      	str	r2, [r3, #28]
 80070aa:	e005      	b.n	80070b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fa ffc8 	bl	8002068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070f8:	d902      	bls.n	8007100 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	e002      	b.n	8007106 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007104:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800710e:	d007      	beq.n	8007120 <HAL_SPI_Init+0xa0>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007118:	d002      	beq.n	8007120 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007162:	ea42 0103 	orr.w	r1, r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	0c1b      	lsrs	r3, r3, #16
 800717c:	f003 0204 	and.w	r2, r3, #4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718e:	f003 0308 	and.w	r3, r3, #8
 8007192:	431a      	orrs	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800719c:	ea42 0103 	orr.w	r1, r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b088      	sub	sp, #32
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	603b      	str	r3, [r7, #0]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d101      	bne.n	80071e8 <HAL_SPI_Transmit+0x22>
 80071e4:	2302      	movs	r3, #2
 80071e6:	e15f      	b.n	80074a8 <HAL_SPI_Transmit+0x2e2>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071f0:	f7fb f896 	bl	8002320 <HAL_GetTick>
 80071f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80071f6:	88fb      	ldrh	r3, [r7, #6]
 80071f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b01      	cmp	r3, #1
 8007204:	d002      	beq.n	800720c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007206:	2302      	movs	r3, #2
 8007208:	77fb      	strb	r3, [r7, #31]
    goto error;
 800720a:	e148      	b.n	800749e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <HAL_SPI_Transmit+0x52>
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800721c:	e13f      	b.n	800749e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2203      	movs	r2, #3
 8007222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	88fa      	ldrh	r2, [r7, #6]
 8007236:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	88fa      	ldrh	r2, [r7, #6]
 800723c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007268:	d10f      	bne.n	800728a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007278:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007288:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007294:	2b40      	cmp	r3, #64	; 0x40
 8007296:	d007      	beq.n	80072a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072b0:	d94f      	bls.n	8007352 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_SPI_Transmit+0xfa>
 80072ba:	8afb      	ldrh	r3, [r7, #22]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d142      	bne.n	8007346 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c4:	881a      	ldrh	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	1c9a      	adds	r2, r3, #2
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072e4:	e02f      	b.n	8007346 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d112      	bne.n	800731a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f8:	881a      	ldrh	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	1c9a      	adds	r2, r3, #2
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007318:	e015      	b.n	8007346 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800731a:	f7fb f801 	bl	8002320 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d803      	bhi.n	8007332 <HAL_SPI_Transmit+0x16c>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007330:	d102      	bne.n	8007338 <HAL_SPI_Transmit+0x172>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d106      	bne.n	8007346 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007344:	e0ab      	b.n	800749e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800734a:	b29b      	uxth	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1ca      	bne.n	80072e6 <HAL_SPI_Transmit+0x120>
 8007350:	e080      	b.n	8007454 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_SPI_Transmit+0x19a>
 800735a:	8afb      	ldrh	r3, [r7, #22]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d174      	bne.n	800744a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b01      	cmp	r3, #1
 8007368:	d912      	bls.n	8007390 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	881a      	ldrh	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	1c9a      	adds	r2, r3, #2
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b02      	subs	r3, #2
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800738e:	e05c      	b.n	800744a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	330c      	adds	r3, #12
 800739a:	7812      	ldrb	r2, [r2, #0]
 800739c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80073b6:	e048      	b.n	800744a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d12b      	bne.n	800741e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d912      	bls.n	80073f6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	881a      	ldrh	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e0:	1c9a      	adds	r2, r3, #2
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	3b02      	subs	r3, #2
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073f4:	e029      	b.n	800744a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007412:	b29b      	uxth	r3, r3
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800741c:	e015      	b.n	800744a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800741e:	f7fa ff7f 	bl	8002320 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d803      	bhi.n	8007436 <HAL_SPI_Transmit+0x270>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007434:	d102      	bne.n	800743c <HAL_SPI_Transmit+0x276>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d106      	bne.n	800744a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007448:	e029      	b.n	800749e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800744e:	b29b      	uxth	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1b1      	bne.n	80073b8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fb69 	bl	8007b30 <SPI_EndRxTxTransaction>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2220      	movs	r2, #32
 8007468:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007472:	2300      	movs	r3, #0
 8007474:	613b      	str	r3, [r7, #16]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	77fb      	strb	r3, [r7, #31]
 8007494:	e003      	b.n	800749e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80074a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3720      	adds	r7, #32
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08a      	sub	sp, #40	; 0x28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074be:	2301      	movs	r3, #1
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x26>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e20a      	b.n	80078ec <HAL_SPI_TransmitReceive+0x43c>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074de:	f7fa ff1f 	bl	8002320 <HAL_GetTick>
 80074e2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074ea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80074f2:	887b      	ldrh	r3, [r7, #2]
 80074f4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80074f6:	887b      	ldrh	r3, [r7, #2]
 80074f8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074fa:	7efb      	ldrb	r3, [r7, #27]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d00e      	beq.n	800751e <HAL_SPI_TransmitReceive+0x6e>
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007506:	d106      	bne.n	8007516 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d102      	bne.n	8007516 <HAL_SPI_TransmitReceive+0x66>
 8007510:	7efb      	ldrb	r3, [r7, #27]
 8007512:	2b04      	cmp	r3, #4
 8007514:	d003      	beq.n	800751e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007516:	2302      	movs	r3, #2
 8007518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800751c:	e1e0      	b.n	80078e0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <HAL_SPI_TransmitReceive+0x80>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <HAL_SPI_TransmitReceive+0x80>
 800752a:	887b      	ldrh	r3, [r7, #2]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d103      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007536:	e1d3      	b.n	80078e0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b04      	cmp	r3, #4
 8007542:	d003      	beq.n	800754c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2205      	movs	r2, #5
 8007548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	887a      	ldrh	r2, [r7, #2]
 800755c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	887a      	ldrh	r2, [r7, #2]
 8007564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	887a      	ldrh	r2, [r7, #2]
 8007572:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	887a      	ldrh	r2, [r7, #2]
 8007578:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800758e:	d802      	bhi.n	8007596 <HAL_SPI_TransmitReceive+0xe6>
 8007590:	8a3b      	ldrh	r3, [r7, #16]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d908      	bls.n	80075a8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075a4:	605a      	str	r2, [r3, #4]
 80075a6:	e007      	b.n	80075b8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075b6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d007      	beq.n	80075d6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075de:	f240 8081 	bls.w	80076e4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_SPI_TransmitReceive+0x140>
 80075ea:	8a7b      	ldrh	r3, [r7, #18]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d16d      	bne.n	80076cc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	881a      	ldrh	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	1c9a      	adds	r2, r3, #2
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007614:	e05a      	b.n	80076cc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b02      	cmp	r3, #2
 8007622:	d11b      	bne.n	800765c <HAL_SPI_TransmitReceive+0x1ac>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d016      	beq.n	800765c <HAL_SPI_TransmitReceive+0x1ac>
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	2b01      	cmp	r3, #1
 8007632:	d113      	bne.n	800765c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007638:	881a      	ldrh	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007644:	1c9a      	adds	r2, r3, #2
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764e:	b29b      	uxth	r3, r3
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b01      	cmp	r3, #1
 8007668:	d11c      	bne.n	80076a4 <HAL_SPI_TransmitReceive+0x1f4>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d016      	beq.n	80076a4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007680:	b292      	uxth	r2, r2
 8007682:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007688:	1c9a      	adds	r2, r3, #2
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007694:	b29b      	uxth	r3, r3
 8007696:	3b01      	subs	r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076a0:	2301      	movs	r3, #1
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076a4:	f7fa fe3c 	bl	8002320 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d80b      	bhi.n	80076cc <HAL_SPI_TransmitReceive+0x21c>
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ba:	d007      	beq.n	80076cc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80076ca:	e109      	b.n	80078e0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d19f      	bne.n	8007616 <HAL_SPI_TransmitReceive+0x166>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d199      	bne.n	8007616 <HAL_SPI_TransmitReceive+0x166>
 80076e2:	e0e3      	b.n	80078ac <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <HAL_SPI_TransmitReceive+0x244>
 80076ec:	8a7b      	ldrh	r3, [r7, #18]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	f040 80cf 	bne.w	8007892 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d912      	bls.n	8007724 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	881a      	ldrh	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770e:	1c9a      	adds	r2, r3, #2
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007718:	b29b      	uxth	r3, r3
 800771a:	3b02      	subs	r3, #2
 800771c:	b29a      	uxth	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007722:	e0b6      	b.n	8007892 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	330c      	adds	r3, #12
 800772e:	7812      	ldrb	r2, [r2, #0]
 8007730:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800774a:	e0a2      	b.n	8007892 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b02      	cmp	r3, #2
 8007758:	d134      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x314>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800775e:	b29b      	uxth	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	d02f      	beq.n	80077c4 <HAL_SPI_TransmitReceive+0x314>
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	2b01      	cmp	r3, #1
 8007768:	d12c      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800776e:	b29b      	uxth	r3, r3
 8007770:	2b01      	cmp	r3, #1
 8007772:	d912      	bls.n	800779a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007778:	881a      	ldrh	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	1c9a      	adds	r2, r3, #2
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b02      	subs	r3, #2
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007798:	e012      	b.n	80077c0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	330c      	adds	r3, #12
 80077a4:	7812      	ldrb	r2, [r2, #0]
 80077a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d148      	bne.n	8007864 <HAL_SPI_TransmitReceive+0x3b4>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d042      	beq.n	8007864 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d923      	bls.n	8007832 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68da      	ldr	r2, [r3, #12]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f4:	b292      	uxth	r2, r2
 80077f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	1c9a      	adds	r2, r3, #2
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b02      	subs	r3, #2
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800781a:	b29b      	uxth	r3, r3
 800781c:	2b01      	cmp	r3, #1
 800781e:	d81f      	bhi.n	8007860 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800782e:	605a      	str	r2, [r3, #4]
 8007830:	e016      	b.n	8007860 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f103 020c 	add.w	r2, r3, #12
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	7812      	ldrb	r2, [r2, #0]
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b01      	subs	r3, #1
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007860:	2301      	movs	r3, #1
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007864:	f7fa fd5c 	bl	8002320 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007870:	429a      	cmp	r2, r3
 8007872:	d803      	bhi.n	800787c <HAL_SPI_TransmitReceive+0x3cc>
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d102      	bne.n	8007882 <HAL_SPI_TransmitReceive+0x3d2>
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	2b00      	cmp	r3, #0
 8007880:	d107      	bne.n	8007892 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007890:	e026      	b.n	80078e0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007896:	b29b      	uxth	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	f47f af57 	bne.w	800774c <HAL_SPI_TransmitReceive+0x29c>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f47f af50 	bne.w	800774c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f93d 	bl	8007b30 <SPI_EndRxTxTransaction>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2220      	movs	r2, #32
 80078c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078d6:	e003      	b.n	80078e0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80078e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3728      	adds	r7, #40	; 0x28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	4613      	mov	r3, r2
 8007902:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007904:	f7fa fd0c 	bl	8002320 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	1a9b      	subs	r3, r3, r2
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	4413      	add	r3, r2
 8007912:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007914:	f7fa fd04 	bl	8002320 <HAL_GetTick>
 8007918:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800791a:	4b39      	ldr	r3, [pc, #228]	; (8007a00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	015b      	lsls	r3, r3, #5
 8007920:	0d1b      	lsrs	r3, r3, #20
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	fb02 f303 	mul.w	r3, r2, r3
 8007928:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800792a:	e054      	b.n	80079d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007932:	d050      	beq.n	80079d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007934:	f7fa fcf4 	bl	8002320 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	429a      	cmp	r2, r3
 8007942:	d902      	bls.n	800794a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d13d      	bne.n	80079c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007958:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007962:	d111      	bne.n	8007988 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800796c:	d004      	beq.n	8007978 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007976:	d107      	bne.n	8007988 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007986:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007990:	d10f      	bne.n	80079b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e017      	b.n	80079f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	4013      	ands	r3, r2
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	bf0c      	ite	eq
 80079e6:	2301      	moveq	r3, #1
 80079e8:	2300      	movne	r3, #0
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	79fb      	ldrb	r3, [r7, #7]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d19b      	bne.n	800792c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000004 	.word	0x20000004

08007a04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08a      	sub	sp, #40	; 0x28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a16:	f7fa fc83 	bl	8002320 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	1a9b      	subs	r3, r3, r2
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	4413      	add	r3, r2
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007a26:	f7fa fc7b 	bl	8002320 <HAL_GetTick>
 8007a2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	330c      	adds	r3, #12
 8007a32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a34:	4b3d      	ldr	r3, [pc, #244]	; (8007b2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	00da      	lsls	r2, r3, #3
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	0d1b      	lsrs	r3, r3, #20
 8007a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a46:	fb02 f303 	mul.w	r3, r2, r3
 8007a4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a4c:	e060      	b.n	8007b10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a54:	d107      	bne.n	8007a66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d104      	bne.n	8007a66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6c:	d050      	beq.n	8007b10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a6e:	f7fa fc57 	bl	8002320 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d902      	bls.n	8007a84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d13d      	bne.n	8007b00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a9c:	d111      	bne.n	8007ac2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aa6:	d004      	beq.n	8007ab2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ab0:	d107      	bne.n	8007ac2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ac0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aca:	d10f      	bne.n	8007aec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e010      	b.n	8007b22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689a      	ldr	r2, [r3, #8]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d196      	bne.n	8007a4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3728      	adds	r7, #40	; 0x28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20000004 	.word	0x20000004

08007b30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f7ff ff5b 	bl	8007a04 <SPI_WaitFifoStateUntilTimeout>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d007      	beq.n	8007b64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b58:	f043 0220 	orr.w	r2, r3, #32
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e027      	b.n	8007bb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2180      	movs	r1, #128	; 0x80
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f7ff fec0 	bl	80078f4 <SPI_WaitFlagStateUntilTimeout>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d007      	beq.n	8007b8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b7e:	f043 0220 	orr.w	r2, r3, #32
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e014      	b.n	8007bb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff ff34 	bl	8007a04 <SPI_WaitFifoStateUntilTimeout>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d007      	beq.n	8007bb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba6:	f043 0220 	orr.w	r2, r3, #32
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e000      	b.n	8007bb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bc0:	b08a      	sub	sp, #40	; 0x28
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4b9e      	ldr	r3, [pc, #632]	; (8007e64 <UART_SetConfig+0x2a8>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	6812      	ldr	r2, [r2, #0]
 8007bf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a93      	ldr	r2, [pc, #588]	; (8007e68 <UART_SetConfig+0x2ac>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d004      	beq.n	8007c28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c24:	4313      	orrs	r3, r2
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a8a      	ldr	r2, [pc, #552]	; (8007e6c <UART_SetConfig+0x2b0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d126      	bne.n	8007c94 <UART_SetConfig+0xd8>
 8007c46:	4b8a      	ldr	r3, [pc, #552]	; (8007e70 <UART_SetConfig+0x2b4>)
 8007c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d81b      	bhi.n	8007c8c <UART_SetConfig+0xd0>
 8007c54:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <UART_SetConfig+0xa0>)
 8007c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5a:	bf00      	nop
 8007c5c:	08007c6d 	.word	0x08007c6d
 8007c60:	08007c7d 	.word	0x08007c7d
 8007c64:	08007c75 	.word	0x08007c75
 8007c68:	08007c85 	.word	0x08007c85
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c72:	e0ab      	b.n	8007dcc <UART_SetConfig+0x210>
 8007c74:	2302      	movs	r3, #2
 8007c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c7a:	e0a7      	b.n	8007dcc <UART_SetConfig+0x210>
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c82:	e0a3      	b.n	8007dcc <UART_SetConfig+0x210>
 8007c84:	2308      	movs	r3, #8
 8007c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c8a:	e09f      	b.n	8007dcc <UART_SetConfig+0x210>
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c92:	e09b      	b.n	8007dcc <UART_SetConfig+0x210>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a76      	ldr	r2, [pc, #472]	; (8007e74 <UART_SetConfig+0x2b8>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d138      	bne.n	8007d10 <UART_SetConfig+0x154>
 8007c9e:	4b74      	ldr	r3, [pc, #464]	; (8007e70 <UART_SetConfig+0x2b4>)
 8007ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca4:	f003 030c 	and.w	r3, r3, #12
 8007ca8:	2b0c      	cmp	r3, #12
 8007caa:	d82d      	bhi.n	8007d08 <UART_SetConfig+0x14c>
 8007cac:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <UART_SetConfig+0xf8>)
 8007cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb2:	bf00      	nop
 8007cb4:	08007ce9 	.word	0x08007ce9
 8007cb8:	08007d09 	.word	0x08007d09
 8007cbc:	08007d09 	.word	0x08007d09
 8007cc0:	08007d09 	.word	0x08007d09
 8007cc4:	08007cf9 	.word	0x08007cf9
 8007cc8:	08007d09 	.word	0x08007d09
 8007ccc:	08007d09 	.word	0x08007d09
 8007cd0:	08007d09 	.word	0x08007d09
 8007cd4:	08007cf1 	.word	0x08007cf1
 8007cd8:	08007d09 	.word	0x08007d09
 8007cdc:	08007d09 	.word	0x08007d09
 8007ce0:	08007d09 	.word	0x08007d09
 8007ce4:	08007d01 	.word	0x08007d01
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cee:	e06d      	b.n	8007dcc <UART_SetConfig+0x210>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf6:	e069      	b.n	8007dcc <UART_SetConfig+0x210>
 8007cf8:	2304      	movs	r3, #4
 8007cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cfe:	e065      	b.n	8007dcc <UART_SetConfig+0x210>
 8007d00:	2308      	movs	r3, #8
 8007d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d06:	e061      	b.n	8007dcc <UART_SetConfig+0x210>
 8007d08:	2310      	movs	r3, #16
 8007d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d0e:	e05d      	b.n	8007dcc <UART_SetConfig+0x210>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a58      	ldr	r2, [pc, #352]	; (8007e78 <UART_SetConfig+0x2bc>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d125      	bne.n	8007d66 <UART_SetConfig+0x1aa>
 8007d1a:	4b55      	ldr	r3, [pc, #340]	; (8007e70 <UART_SetConfig+0x2b4>)
 8007d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d24:	2b30      	cmp	r3, #48	; 0x30
 8007d26:	d016      	beq.n	8007d56 <UART_SetConfig+0x19a>
 8007d28:	2b30      	cmp	r3, #48	; 0x30
 8007d2a:	d818      	bhi.n	8007d5e <UART_SetConfig+0x1a2>
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	d00a      	beq.n	8007d46 <UART_SetConfig+0x18a>
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d814      	bhi.n	8007d5e <UART_SetConfig+0x1a2>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <UART_SetConfig+0x182>
 8007d38:	2b10      	cmp	r3, #16
 8007d3a:	d008      	beq.n	8007d4e <UART_SetConfig+0x192>
 8007d3c:	e00f      	b.n	8007d5e <UART_SetConfig+0x1a2>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d44:	e042      	b.n	8007dcc <UART_SetConfig+0x210>
 8007d46:	2302      	movs	r3, #2
 8007d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d4c:	e03e      	b.n	8007dcc <UART_SetConfig+0x210>
 8007d4e:	2304      	movs	r3, #4
 8007d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d54:	e03a      	b.n	8007dcc <UART_SetConfig+0x210>
 8007d56:	2308      	movs	r3, #8
 8007d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d5c:	e036      	b.n	8007dcc <UART_SetConfig+0x210>
 8007d5e:	2310      	movs	r3, #16
 8007d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d64:	e032      	b.n	8007dcc <UART_SetConfig+0x210>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a3f      	ldr	r2, [pc, #252]	; (8007e68 <UART_SetConfig+0x2ac>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d12a      	bne.n	8007dc6 <UART_SetConfig+0x20a>
 8007d70:	4b3f      	ldr	r3, [pc, #252]	; (8007e70 <UART_SetConfig+0x2b4>)
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d7e:	d01a      	beq.n	8007db6 <UART_SetConfig+0x1fa>
 8007d80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d84:	d81b      	bhi.n	8007dbe <UART_SetConfig+0x202>
 8007d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d8a:	d00c      	beq.n	8007da6 <UART_SetConfig+0x1ea>
 8007d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d90:	d815      	bhi.n	8007dbe <UART_SetConfig+0x202>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <UART_SetConfig+0x1e2>
 8007d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d9a:	d008      	beq.n	8007dae <UART_SetConfig+0x1f2>
 8007d9c:	e00f      	b.n	8007dbe <UART_SetConfig+0x202>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007da4:	e012      	b.n	8007dcc <UART_SetConfig+0x210>
 8007da6:	2302      	movs	r3, #2
 8007da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dac:	e00e      	b.n	8007dcc <UART_SetConfig+0x210>
 8007dae:	2304      	movs	r3, #4
 8007db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007db4:	e00a      	b.n	8007dcc <UART_SetConfig+0x210>
 8007db6:	2308      	movs	r3, #8
 8007db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dbc:	e006      	b.n	8007dcc <UART_SetConfig+0x210>
 8007dbe:	2310      	movs	r3, #16
 8007dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc4:	e002      	b.n	8007dcc <UART_SetConfig+0x210>
 8007dc6:	2310      	movs	r3, #16
 8007dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a25      	ldr	r2, [pc, #148]	; (8007e68 <UART_SetConfig+0x2ac>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	f040 808a 	bne.w	8007eec <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d824      	bhi.n	8007e2a <UART_SetConfig+0x26e>
 8007de0:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <UART_SetConfig+0x22c>)
 8007de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de6:	bf00      	nop
 8007de8:	08007e0d 	.word	0x08007e0d
 8007dec:	08007e2b 	.word	0x08007e2b
 8007df0:	08007e15 	.word	0x08007e15
 8007df4:	08007e2b 	.word	0x08007e2b
 8007df8:	08007e1b 	.word	0x08007e1b
 8007dfc:	08007e2b 	.word	0x08007e2b
 8007e00:	08007e2b 	.word	0x08007e2b
 8007e04:	08007e2b 	.word	0x08007e2b
 8007e08:	08007e23 	.word	0x08007e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e0c:	f7fe ff26 	bl	8006c5c <HAL_RCC_GetPCLK1Freq>
 8007e10:	61f8      	str	r0, [r7, #28]
        break;
 8007e12:	e010      	b.n	8007e36 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e14:	4b19      	ldr	r3, [pc, #100]	; (8007e7c <UART_SetConfig+0x2c0>)
 8007e16:	61fb      	str	r3, [r7, #28]
        break;
 8007e18:	e00d      	b.n	8007e36 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e1a:	f7fe fe87 	bl	8006b2c <HAL_RCC_GetSysClockFreq>
 8007e1e:	61f8      	str	r0, [r7, #28]
        break;
 8007e20:	e009      	b.n	8007e36 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e26:	61fb      	str	r3, [r7, #28]
        break;
 8007e28:	e005      	b.n	8007e36 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 8109 	beq.w	8008050 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	4613      	mov	r3, r2
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	4413      	add	r3, r2
 8007e48:	69fa      	ldr	r2, [r7, #28]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d305      	bcc.n	8007e5a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e54:	69fa      	ldr	r2, [r7, #28]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d912      	bls.n	8007e80 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007e60:	e0f6      	b.n	8008050 <UART_SetConfig+0x494>
 8007e62:	bf00      	nop
 8007e64:	efff69f3 	.word	0xefff69f3
 8007e68:	40008000 	.word	0x40008000
 8007e6c:	40013800 	.word	0x40013800
 8007e70:	40021000 	.word	0x40021000
 8007e74:	40004400 	.word	0x40004400
 8007e78:	40004800 	.word	0x40004800
 8007e7c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	2200      	movs	r2, #0
 8007e84:	461c      	mov	r4, r3
 8007e86:	4615      	mov	r5, r2
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	022b      	lsls	r3, r5, #8
 8007e92:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007e96:	0222      	lsls	r2, r4, #8
 8007e98:	68f9      	ldr	r1, [r7, #12]
 8007e9a:	6849      	ldr	r1, [r1, #4]
 8007e9c:	0849      	lsrs	r1, r1, #1
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	4688      	mov	r8, r1
 8007ea2:	4681      	mov	r9, r0
 8007ea4:	eb12 0a08 	adds.w	sl, r2, r8
 8007ea8:	eb43 0b09 	adc.w	fp, r3, r9
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	607a      	str	r2, [r7, #4]
 8007eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eba:	4650      	mov	r0, sl
 8007ebc:	4659      	mov	r1, fp
 8007ebe:	f7f8 fce5 	bl	800088c <__aeabi_uldivmod>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ed0:	d308      	bcc.n	8007ee4 <UART_SetConfig+0x328>
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed8:	d204      	bcs.n	8007ee4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	60da      	str	r2, [r3, #12]
 8007ee2:	e0b5      	b.n	8008050 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007eea:	e0b1      	b.n	8008050 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef4:	d15d      	bne.n	8007fb2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007efa:	2b08      	cmp	r3, #8
 8007efc:	d827      	bhi.n	8007f4e <UART_SetConfig+0x392>
 8007efe:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <UART_SetConfig+0x348>)
 8007f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f04:	08007f29 	.word	0x08007f29
 8007f08:	08007f31 	.word	0x08007f31
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	08007f4f 	.word	0x08007f4f
 8007f14:	08007f3f 	.word	0x08007f3f
 8007f18:	08007f4f 	.word	0x08007f4f
 8007f1c:	08007f4f 	.word	0x08007f4f
 8007f20:	08007f4f 	.word	0x08007f4f
 8007f24:	08007f47 	.word	0x08007f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f28:	f7fe fe98 	bl	8006c5c <HAL_RCC_GetPCLK1Freq>
 8007f2c:	61f8      	str	r0, [r7, #28]
        break;
 8007f2e:	e014      	b.n	8007f5a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f30:	f7fe feaa 	bl	8006c88 <HAL_RCC_GetPCLK2Freq>
 8007f34:	61f8      	str	r0, [r7, #28]
        break;
 8007f36:	e010      	b.n	8007f5a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f38:	4b4c      	ldr	r3, [pc, #304]	; (800806c <UART_SetConfig+0x4b0>)
 8007f3a:	61fb      	str	r3, [r7, #28]
        break;
 8007f3c:	e00d      	b.n	8007f5a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f3e:	f7fe fdf5 	bl	8006b2c <HAL_RCC_GetSysClockFreq>
 8007f42:	61f8      	str	r0, [r7, #28]
        break;
 8007f44:	e009      	b.n	8007f5a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f4a:	61fb      	str	r3, [r7, #28]
        break;
 8007f4c:	e005      	b.n	8007f5a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d077      	beq.n	8008050 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	005a      	lsls	r2, r3, #1
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	085b      	lsrs	r3, r3, #1
 8007f6a:	441a      	add	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	2b0f      	cmp	r3, #15
 8007f7a:	d916      	bls.n	8007faa <UART_SetConfig+0x3ee>
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f82:	d212      	bcs.n	8007faa <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f023 030f 	bic.w	r3, r3, #15
 8007f8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	085b      	lsrs	r3, r3, #1
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	8afb      	ldrh	r3, [r7, #22]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	8afa      	ldrh	r2, [r7, #22]
 8007fa6:	60da      	str	r2, [r3, #12]
 8007fa8:	e052      	b.n	8008050 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007fb0:	e04e      	b.n	8008050 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fb6:	2b08      	cmp	r3, #8
 8007fb8:	d827      	bhi.n	800800a <UART_SetConfig+0x44e>
 8007fba:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <UART_SetConfig+0x404>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	08007fe5 	.word	0x08007fe5
 8007fc4:	08007fed 	.word	0x08007fed
 8007fc8:	08007ff5 	.word	0x08007ff5
 8007fcc:	0800800b 	.word	0x0800800b
 8007fd0:	08007ffb 	.word	0x08007ffb
 8007fd4:	0800800b 	.word	0x0800800b
 8007fd8:	0800800b 	.word	0x0800800b
 8007fdc:	0800800b 	.word	0x0800800b
 8007fe0:	08008003 	.word	0x08008003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe4:	f7fe fe3a 	bl	8006c5c <HAL_RCC_GetPCLK1Freq>
 8007fe8:	61f8      	str	r0, [r7, #28]
        break;
 8007fea:	e014      	b.n	8008016 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fec:	f7fe fe4c 	bl	8006c88 <HAL_RCC_GetPCLK2Freq>
 8007ff0:	61f8      	str	r0, [r7, #28]
        break;
 8007ff2:	e010      	b.n	8008016 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ff4:	4b1d      	ldr	r3, [pc, #116]	; (800806c <UART_SetConfig+0x4b0>)
 8007ff6:	61fb      	str	r3, [r7, #28]
        break;
 8007ff8:	e00d      	b.n	8008016 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ffa:	f7fe fd97 	bl	8006b2c <HAL_RCC_GetSysClockFreq>
 8007ffe:	61f8      	str	r0, [r7, #28]
        break;
 8008000:	e009      	b.n	8008016 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008006:	61fb      	str	r3, [r7, #28]
        break;
 8008008:	e005      	b.n	8008016 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008014:	bf00      	nop
    }

    if (pclk != 0U)
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d019      	beq.n	8008050 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	085a      	lsrs	r2, r3, #1
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	441a      	add	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	fbb2 f3f3 	udiv	r3, r2, r3
 800802e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	2b0f      	cmp	r3, #15
 8008034:	d909      	bls.n	800804a <UART_SetConfig+0x48e>
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800803c:	d205      	bcs.n	800804a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	b29a      	uxth	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60da      	str	r2, [r3, #12]
 8008048:	e002      	b.n	8008050 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800805c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008060:	4618      	mov	r0, r3
 8008062:	3728      	adds	r7, #40	; 0x28
 8008064:	46bd      	mov	sp, r7
 8008066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800806a:	bf00      	nop
 800806c:	00f42400 	.word	0x00f42400

08008070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	f003 0308 	and.w	r3, r3, #8
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00a      	beq.n	800809a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00a      	beq.n	80080de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	f003 0310 	and.w	r3, r3, #16
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01a      	beq.n	8008186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800816e:	d10a      	bne.n	8008186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	605a      	str	r2, [r3, #4]
  }
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b098      	sub	sp, #96	; 0x60
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081c4:	f7fa f8ac 	bl	8002320 <HAL_GetTick>
 80081c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0308 	and.w	r3, r3, #8
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d12e      	bne.n	8008236 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e0:	2200      	movs	r2, #0
 80081e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f88c 	bl	8008304 <UART_WaitOnFlagUntilTimeout>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d021      	beq.n	8008236 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	e853 3f00 	ldrex	r3, [r3]
 80081fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008206:	653b      	str	r3, [r7, #80]	; 0x50
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008210:	647b      	str	r3, [r7, #68]	; 0x44
 8008212:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008218:	e841 2300 	strex	r3, r2, [r1]
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800821e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e6      	bne.n	80081f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2220      	movs	r2, #32
 8008228:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e062      	b.n	80082fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b04      	cmp	r3, #4
 8008242:	d149      	bne.n	80082d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800824c:	2200      	movs	r2, #0
 800824e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f856 	bl	8008304 <UART_WaitOnFlagUntilTimeout>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d03c      	beq.n	80082d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	e853 3f00 	ldrex	r3, [r3]
 800826a:	623b      	str	r3, [r7, #32]
   return(result);
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	461a      	mov	r2, r3
 800827a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800827c:	633b      	str	r3, [r7, #48]	; 0x30
 800827e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e6      	bne.n	800825e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3308      	adds	r3, #8
 8008296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	60fb      	str	r3, [r7, #12]
   return(result);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 0301 	bic.w	r3, r3, #1
 80082a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3308      	adds	r3, #8
 80082ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082b0:	61fa      	str	r2, [r7, #28]
 80082b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	69b9      	ldr	r1, [r7, #24]
 80082b6:	69fa      	ldr	r2, [r7, #28]
 80082b8:	e841 2300 	strex	r3, r2, [r1]
 80082bc:	617b      	str	r3, [r7, #20]
   return(result);
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1e5      	bne.n	8008290 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e011      	b.n	80082fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2220      	movs	r2, #32
 80082dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3758      	adds	r7, #88	; 0x58
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	603b      	str	r3, [r7, #0]
 8008310:	4613      	mov	r3, r2
 8008312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008314:	e049      	b.n	80083aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831c:	d045      	beq.n	80083aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800831e:	f7f9 ffff 	bl	8002320 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	429a      	cmp	r2, r3
 800832c:	d302      	bcc.n	8008334 <UART_WaitOnFlagUntilTimeout+0x30>
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e048      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0304 	and.w	r3, r3, #4
 8008342:	2b00      	cmp	r3, #0
 8008344:	d031      	beq.n	80083aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b08      	cmp	r3, #8
 8008352:	d110      	bne.n	8008376 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2208      	movs	r2, #8
 800835a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 f838 	bl	80083d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2208      	movs	r2, #8
 8008366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e029      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008384:	d111      	bne.n	80083aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800838e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f81e 	bl	80083d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2220      	movs	r2, #32
 800839a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e00f      	b.n	80083ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69da      	ldr	r2, [r3, #28]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4013      	ands	r3, r2
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	bf0c      	ite	eq
 80083ba:	2301      	moveq	r3, #1
 80083bc:	2300      	movne	r3, #0
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d0a6      	beq.n	8008316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b095      	sub	sp, #84	; 0x54
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	461a      	mov	r2, r3
 80083f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f8:	643b      	str	r3, [r7, #64]	; 0x40
 80083fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e6      	bne.n	80083da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3308      	adds	r3, #8
 8008412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	e853 3f00 	ldrex	r3, [r3]
 800841a:	61fb      	str	r3, [r7, #28]
   return(result);
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f023 0301 	bic.w	r3, r3, #1
 8008422:	64bb      	str	r3, [r7, #72]	; 0x48
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3308      	adds	r3, #8
 800842a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800842c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800842e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008434:	e841 2300 	strex	r3, r2, [r1]
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e5      	bne.n	800840c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008444:	2b01      	cmp	r3, #1
 8008446:	d118      	bne.n	800847a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	60bb      	str	r3, [r7, #8]
   return(result);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f023 0310 	bic.w	r3, r3, #16
 800845c:	647b      	str	r3, [r7, #68]	; 0x44
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008466:	61bb      	str	r3, [r7, #24]
 8008468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6979      	ldr	r1, [r7, #20]
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	613b      	str	r3, [r7, #16]
   return(result);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e6      	bne.n	8008448 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800848e:	bf00      	nop
 8008490:	3754      	adds	r7, #84	; 0x54
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b086      	sub	sp, #24
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	607a      	str	r2, [r7, #4]
 80084a6:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e056      	b.n	8008560 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d106      	bne.n	80084c8 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f7f9 fd5a 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2224      	movs	r2, #36	; 0x24
 80084cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 0201 	bic.w	r2, r2, #1
 80084dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff fdc2 	bl	8008070 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7ff fb65 	bl	8007bbc <UART_SetConfig>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d101      	bne.n	80084fc <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e031      	b.n	8008560 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800850a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	430a      	orrs	r2, r1
 800851e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	055b      	lsls	r3, r3, #21
 8008524:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	041b      	lsls	r3, r3, #16
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	4313      	orrs	r3, r2
 800852e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 800853a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	6812      	ldr	r2, [r2, #0]
 8008542:	6979      	ldr	r1, [r7, #20]
 8008544:	430b      	orrs	r3, r1
 8008546:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f7ff fe2b 	bl	80081b4 <UART_CheckIdleState>
 800855e:	4603      	mov	r3, r0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3718      	adds	r7, #24
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008568:	b084      	sub	sp, #16
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	f107 0014 	add.w	r0, r7, #20
 8008576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	b004      	add	sp, #16
 8008588:	4770      	bx	lr

0800858a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800859a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800859e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80085c0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80085c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	43db      	mvns	r3, r3
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	4013      	ands	r3, r2
 80085d8:	b29a      	uxth	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	460b      	mov	r3, r1
 80085f8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008608:	b084      	sub	sp, #16
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	f107 0014 	add.w	r0, r7, #20
 8008616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	b004      	add	sp, #16
 8008648:	4770      	bx	lr
	...

0800864c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800864c:	b480      	push	{r7}
 800864e:	b09d      	sub	sp, #116	; 0x74
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	b29b      	uxth	r3, r3
 800866a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800866e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008672:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	78db      	ldrb	r3, [r3, #3]
 800867a:	2b03      	cmp	r3, #3
 800867c:	d81f      	bhi.n	80086be <USB_ActivateEndpoint+0x72>
 800867e:	a201      	add	r2, pc, #4	; (adr r2, 8008684 <USB_ActivateEndpoint+0x38>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	08008695 	.word	0x08008695
 8008688:	080086b1 	.word	0x080086b1
 800868c:	080086c7 	.word	0x080086c7
 8008690:	080086a3 	.word	0x080086a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008694:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800869c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80086a0:	e012      	b.n	80086c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80086a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80086a6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80086aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80086ae:	e00b      	b.n	80086c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80086b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80086b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80086bc:	e004      	b.n	80086c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80086c4:	e000      	b.n	80086c8 <USB_ActivateEndpoint+0x7c>
      break;
 80086c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	441a      	add	r2, r3
 80086d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80086d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	b21b      	sxth	r3, r3
 80086fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008702:	b21a      	sxth	r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	b21b      	sxth	r3, r3
 800870a:	4313      	orrs	r3, r2
 800870c:	b21b      	sxth	r3, r3
 800870e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	441a      	add	r2, r3
 800871c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800872c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008730:	b29b      	uxth	r3, r3
 8008732:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	7b1b      	ldrb	r3, [r3, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	f040 8178 	bne.w	8008a2e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8084 	beq.w	8008850 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	61bb      	str	r3, [r7, #24]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008752:	b29b      	uxth	r3, r3
 8008754:	461a      	mov	r2, r3
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	4413      	add	r3, r2
 800875a:	61bb      	str	r3, [r7, #24]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	00da      	lsls	r2, r3, #3
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	4413      	add	r3, r2
 8008766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800876a:	617b      	str	r3, [r7, #20]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	88db      	ldrh	r3, [r3, #6]
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	b29b      	uxth	r3, r3
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	b29a      	uxth	r2, r3
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	827b      	strh	r3, [r7, #18]
 800878a:	8a7b      	ldrh	r3, [r7, #18]
 800878c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008790:	2b00      	cmp	r3, #0
 8008792:	d01b      	beq.n	80087cc <USB_ActivateEndpoint+0x180>
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087aa:	823b      	strh	r3, [r7, #16]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	441a      	add	r2, r3
 80087b6:	8a3b      	ldrh	r3, [r7, #16]
 80087b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	78db      	ldrb	r3, [r3, #3]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d020      	beq.n	8008816 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ea:	81bb      	strh	r3, [r7, #12]
 80087ec:	89bb      	ldrh	r3, [r7, #12]
 80087ee:	f083 0320 	eor.w	r3, r3, #32
 80087f2:	81bb      	strh	r3, [r7, #12]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	441a      	add	r2, r3
 80087fe:	89bb      	ldrh	r3, [r7, #12]
 8008800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800880c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008810:	b29b      	uxth	r3, r3
 8008812:	8013      	strh	r3, [r2, #0]
 8008814:	e2d5      	b.n	8008dc2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	b29b      	uxth	r3, r3
 8008824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800882c:	81fb      	strh	r3, [r7, #14]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	441a      	add	r2, r3
 8008838:	89fb      	ldrh	r3, [r7, #14]
 800883a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800883e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884a:	b29b      	uxth	r3, r3
 800884c:	8013      	strh	r3, [r2, #0]
 800884e:	e2b8      	b.n	8008dc2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	633b      	str	r3, [r7, #48]	; 0x30
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800885a:	b29b      	uxth	r3, r3
 800885c:	461a      	mov	r2, r3
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	4413      	add	r3, r2
 8008862:	633b      	str	r3, [r7, #48]	; 0x30
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	00da      	lsls	r2, r3, #3
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	4413      	add	r3, r2
 800886e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	88db      	ldrh	r3, [r3, #6]
 8008878:	085b      	lsrs	r3, r3, #1
 800887a:	b29b      	uxth	r3, r3
 800887c:	005b      	lsls	r3, r3, #1
 800887e:	b29a      	uxth	r2, r3
 8008880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008882:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800888e:	b29b      	uxth	r3, r3
 8008890:	461a      	mov	r2, r3
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	4413      	add	r3, r2
 8008896:	62bb      	str	r3, [r7, #40]	; 0x28
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	00da      	lsls	r2, r3, #3
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a0:	4413      	add	r3, r2
 80088a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088a6:	627b      	str	r3, [r7, #36]	; 0x24
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	801a      	strh	r2, [r3, #0]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	2b3e      	cmp	r3, #62	; 0x3e
 80088be:	d91d      	bls.n	80088fc <USB_ActivateEndpoint+0x2b0>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	095b      	lsrs	r3, r3, #5
 80088c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	f003 031f 	and.w	r3, r3, #31
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <USB_ActivateEndpoint+0x28e>
 80088d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088d6:	3b01      	subs	r3, #1
 80088d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b29a      	uxth	r2, r3
 80088e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	029b      	lsls	r3, r3, #10
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	4313      	orrs	r3, r2
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	e026      	b.n	800894a <USB_ActivateEndpoint+0x2fe>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10a      	bne.n	800891a <USB_ActivateEndpoint+0x2ce>
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	b29b      	uxth	r3, r3
 800890a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800890e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008912:	b29a      	uxth	r2, r3
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	801a      	strh	r2, [r3, #0]
 8008918:	e017      	b.n	800894a <USB_ActivateEndpoint+0x2fe>
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	66bb      	str	r3, [r7, #104]	; 0x68
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <USB_ActivateEndpoint+0x2e8>
 800892e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008930:	3301      	adds	r3, #1
 8008932:	66bb      	str	r3, [r7, #104]	; 0x68
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	b29a      	uxth	r2, r3
 800893a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800893c:	b29b      	uxth	r3, r3
 800893e:	029b      	lsls	r3, r3, #10
 8008940:	b29b      	uxth	r3, r3
 8008942:	4313      	orrs	r3, r2
 8008944:	b29a      	uxth	r2, r3
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	847b      	strh	r3, [r7, #34]	; 0x22
 8008958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800895a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d01b      	beq.n	800899a <USB_ActivateEndpoint+0x34e>
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	b29b      	uxth	r3, r3
 8008970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008978:	843b      	strh	r3, [r7, #32]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	441a      	add	r2, r3
 8008984:	8c3b      	ldrh	r3, [r7, #32]
 8008986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800898a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800898e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008996:	b29b      	uxth	r3, r3
 8008998:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d124      	bne.n	80089ec <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b8:	83bb      	strh	r3, [r7, #28]
 80089ba:	8bbb      	ldrh	r3, [r7, #28]
 80089bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089c0:	83bb      	strh	r3, [r7, #28]
 80089c2:	8bbb      	ldrh	r3, [r7, #28]
 80089c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80089c8:	83bb      	strh	r3, [r7, #28]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	441a      	add	r2, r3
 80089d4:	8bbb      	ldrh	r3, [r7, #28]
 80089d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	8013      	strh	r3, [r2, #0]
 80089ea:	e1ea      	b.n	8008dc2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a02:	83fb      	strh	r3, [r7, #30]
 8008a04:	8bfb      	ldrh	r3, [r7, #30]
 8008a06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a0a:	83fb      	strh	r3, [r7, #30]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	441a      	add	r2, r3
 8008a16:	8bfb      	ldrh	r3, [r7, #30]
 8008a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	8013      	strh	r3, [r2, #0]
 8008a2c:	e1c9      	b.n	8008dc2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	78db      	ldrb	r3, [r3, #3]
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d11e      	bne.n	8008a74 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	441a      	add	r2, r3
 8008a5a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a66:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	8013      	strh	r3, [r2, #0]
 8008a72:	e01d      	b.n	8008ab0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4413      	add	r3, r2
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	441a      	add	r2, r3
 8008a98:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	461a      	mov	r2, r3
 8008abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ac0:	4413      	add	r3, r2
 8008ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	00da      	lsls	r2, r3, #3
 8008aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ad2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	891b      	ldrh	r3, [r3, #8]
 8008ad8:	085b      	lsrs	r3, r3, #1
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ae2:	801a      	strh	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008af4:	4413      	add	r3, r2
 8008af6:	657b      	str	r3, [r7, #84]	; 0x54
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	00da      	lsls	r2, r3, #3
 8008afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b00:	4413      	add	r3, r2
 8008b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b06:	653b      	str	r3, [r7, #80]	; 0x50
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	895b      	ldrh	r3, [r3, #10]
 8008b0c:	085b      	lsrs	r3, r3, #1
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	005b      	lsls	r3, r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b16:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	785b      	ldrb	r3, [r3, #1]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f040 8093 	bne.w	8008c48 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008b32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d01b      	beq.n	8008b76 <USB_ActivateEndpoint+0x52a>
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b54:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	441a      	add	r2, r3
 8008b60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008b84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d01b      	beq.n	8008bc6 <USB_ActivateEndpoint+0x57a>
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	441a      	add	r2, r3
 8008bb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bdc:	873b      	strh	r3, [r7, #56]	; 0x38
 8008bde:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008be0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008be4:	873b      	strh	r3, [r7, #56]	; 0x38
 8008be6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008be8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008bec:	873b      	strh	r3, [r7, #56]	; 0x38
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	441a      	add	r2, r3
 8008bf8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4413      	add	r3, r2
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c24:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	441a      	add	r2, r3
 8008c30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	8013      	strh	r3, [r2, #0]
 8008c46:	e0bc      	b.n	8008dc2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008c58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01d      	beq.n	8008ca0 <USB_ActivateEndpoint+0x654>
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	441a      	add	r2, r3
 8008c88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008cb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01d      	beq.n	8008cf8 <USB_ActivateEndpoint+0x6ac>
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	441a      	add	r2, r3
 8008ce0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	78db      	ldrb	r3, [r3, #3]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d024      	beq.n	8008d4a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	881b      	ldrh	r3, [r3, #0]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008d1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008d1e:	f083 0320 	eor.w	r3, r3, #32
 8008d22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	441a      	add	r2, r3
 8008d30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	8013      	strh	r3, [r2, #0]
 8008d48:	e01d      	b.n	8008d86 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d60:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	441a      	add	r2, r3
 8008d6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	441a      	add	r2, r3
 8008daa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008dc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3774      	adds	r7, #116	; 0x74
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop

08008dd4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b08d      	sub	sp, #52	; 0x34
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	7b1b      	ldrb	r3, [r3, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f040 808e 	bne.w	8008f04 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	785b      	ldrb	r3, [r3, #1]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d044      	beq.n	8008e7a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	81bb      	strh	r3, [r7, #12]
 8008dfe:	89bb      	ldrh	r3, [r7, #12]
 8008e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d01b      	beq.n	8008e40 <USB_DeactivateEndpoint+0x6c>
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e1e:	817b      	strh	r3, [r7, #10]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	441a      	add	r2, r3
 8008e2a:	897b      	ldrh	r3, [r7, #10]
 8008e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e56:	813b      	strh	r3, [r7, #8]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	441a      	add	r2, r3
 8008e62:	893b      	ldrh	r3, [r7, #8]
 8008e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	8013      	strh	r3, [r2, #0]
 8008e78:	e192      	b.n	80091a0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	881b      	ldrh	r3, [r3, #0]
 8008e86:	827b      	strh	r3, [r7, #18]
 8008e88:	8a7b      	ldrh	r3, [r7, #18]
 8008e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d01b      	beq.n	8008eca <USB_DeactivateEndpoint+0xf6>
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea8:	823b      	strh	r3, [r7, #16]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	441a      	add	r2, r3
 8008eb4:	8a3b      	ldrh	r3, [r7, #16]
 8008eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4413      	add	r3, r2
 8008ed4:	881b      	ldrh	r3, [r3, #0]
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ee0:	81fb      	strh	r3, [r7, #14]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	441a      	add	r2, r3
 8008eec:	89fb      	ldrh	r3, [r7, #14]
 8008eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	8013      	strh	r3, [r2, #0]
 8008f02:	e14d      	b.n	80091a0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	785b      	ldrb	r3, [r3, #1]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f040 80a5 	bne.w	8009058 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	843b      	strh	r3, [r7, #32]
 8008f1c:	8c3b      	ldrh	r3, [r7, #32]
 8008f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d01b      	beq.n	8008f5e <USB_DeactivateEndpoint+0x18a>
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f3c:	83fb      	strh	r3, [r7, #30]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	441a      	add	r2, r3
 8008f48:	8bfb      	ldrh	r3, [r7, #30]
 8008f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	83bb      	strh	r3, [r7, #28]
 8008f6c:	8bbb      	ldrh	r3, [r7, #28]
 8008f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d01b      	beq.n	8008fae <USB_DeactivateEndpoint+0x1da>
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f8c:	837b      	strh	r3, [r7, #26]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	441a      	add	r2, r3
 8008f98:	8b7b      	ldrh	r3, [r7, #26]
 8008f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc4:	833b      	strh	r3, [r7, #24]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	441a      	add	r2, r3
 8008fd0:	8b3b      	ldrh	r3, [r7, #24]
 8008fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	881b      	ldrh	r3, [r3, #0]
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ffc:	82fb      	strh	r3, [r7, #22]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	441a      	add	r2, r3
 8009008:	8afb      	ldrh	r3, [r7, #22]
 800900a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800900e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800901a:	b29b      	uxth	r3, r3
 800901c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	b29b      	uxth	r3, r3
 800902c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009034:	82bb      	strh	r3, [r7, #20]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	441a      	add	r2, r3
 8009040:	8abb      	ldrh	r3, [r7, #20]
 8009042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800904a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800904e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009052:	b29b      	uxth	r3, r3
 8009054:	8013      	strh	r3, [r2, #0]
 8009056:	e0a3      	b.n	80091a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d01b      	beq.n	80090a8 <USB_DeactivateEndpoint+0x2d4>
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	b29b      	uxth	r3, r3
 800907e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009086:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	441a      	add	r2, r3
 8009092:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800909c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	881b      	ldrh	r3, [r3, #0]
 80090b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80090b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80090b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01b      	beq.n	80090f8 <USB_DeactivateEndpoint+0x324>
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	441a      	add	r2, r3
 80090e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80090e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	b29b      	uxth	r3, r3
 8009106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800910a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800910e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	441a      	add	r2, r3
 800911a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800911c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009124:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800912c:	b29b      	uxth	r3, r3
 800912e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	b29b      	uxth	r3, r3
 800913e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009146:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	441a      	add	r2, r3
 8009152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800915c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009164:	b29b      	uxth	r3, r3
 8009166:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	b29b      	uxth	r3, r3
 8009176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800917a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800917e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	441a      	add	r2, r3
 800918a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800918c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800919c:	b29b      	uxth	r3, r3
 800919e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3734      	adds	r7, #52	; 0x34
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b0c2      	sub	sp, #264	; 0x108
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091bc:	6018      	str	r0, [r3, #0]
 80091be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	785b      	ldrb	r3, [r3, #1]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	f040 86b7 	bne.w	8009f48 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80091da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	699a      	ldr	r2, [r3, #24]
 80091e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d908      	bls.n	8009208 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80091f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009206:	e007      	b.n	8009218 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800920c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	7b1b      	ldrb	r3, [r3, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d13a      	bne.n	800929e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6959      	ldr	r1, [r3, #20]
 8009234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	88da      	ldrh	r2, [r3, #6]
 8009240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009244:	b29b      	uxth	r3, r3
 8009246:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800924a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800924e:	6800      	ldr	r0, [r0, #0]
 8009250:	f001 fcb9 	bl	800abc6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	613b      	str	r3, [r7, #16]
 8009260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800926e:	b29b      	uxth	r3, r3
 8009270:	461a      	mov	r2, r3
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	4413      	add	r3, r2
 8009276:	613b      	str	r3, [r7, #16]
 8009278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	00da      	lsls	r2, r3, #3
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	4413      	add	r3, r2
 800928a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009294:	b29a      	uxth	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	801a      	strh	r2, [r3, #0]
 800929a:	f000 be1f 	b.w	8009edc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800929e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	78db      	ldrb	r3, [r3, #3]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	f040 8462 	bne.w	8009b74 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80092b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6a1a      	ldr	r2, [r3, #32]
 80092bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	f240 83df 	bls.w	8009a8c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80092ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80092f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	441a      	add	r2, r3
 8009312:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800931a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800931e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009326:	b29b      	uxth	r3, r3
 8009328:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800932a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800932e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6a1a      	ldr	r2, [r3, #32]
 8009336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800933a:	1ad2      	subs	r2, r2, r3
 800933c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	b29b      	uxth	r3, r3
 8009366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 81c7 	beq.w	80096fe <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009374:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	633b      	str	r3, [r7, #48]	; 0x30
 800937c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	785b      	ldrb	r3, [r3, #1]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d177      	bne.n	800947c <USB_EPStartXfer+0x2ce>
 800938c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009390:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	62bb      	str	r3, [r7, #40]	; 0x28
 8009398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800939c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	461a      	mov	r2, r3
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	4413      	add	r3, r2
 80093ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80093b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	00da      	lsls	r2, r3, #3
 80093be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c0:	4413      	add	r3, r2
 80093c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	801a      	strh	r2, [r3, #0]
 80093d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093dc:	2b3e      	cmp	r3, #62	; 0x3e
 80093de:	d921      	bls.n	8009424 <USB_EPStartXfer+0x276>
 80093e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093e4:	095b      	lsrs	r3, r3, #5
 80093e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80093ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ee:	f003 031f 	and.w	r3, r3, #31
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d104      	bne.n	8009400 <USB_EPStartXfer+0x252>
 80093f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80093fa:	3b01      	subs	r3, #1
 80093fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	b29a      	uxth	r2, r3
 8009406:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800940a:	b29b      	uxth	r3, r3
 800940c:	029b      	lsls	r3, r3, #10
 800940e:	b29b      	uxth	r3, r3
 8009410:	4313      	orrs	r3, r2
 8009412:	b29b      	uxth	r3, r3
 8009414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800941c:	b29a      	uxth	r2, r3
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009420:	801a      	strh	r2, [r3, #0]
 8009422:	e050      	b.n	80094c6 <USB_EPStartXfer+0x318>
 8009424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10a      	bne.n	8009442 <USB_EPStartXfer+0x294>
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	881b      	ldrh	r3, [r3, #0]
 8009430:	b29b      	uxth	r3, r3
 8009432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800943a:	b29a      	uxth	r2, r3
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	801a      	strh	r2, [r3, #0]
 8009440:	e041      	b.n	80094c6 <USB_EPStartXfer+0x318>
 8009442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009446:	085b      	lsrs	r3, r3, #1
 8009448:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800944c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b00      	cmp	r3, #0
 8009456:	d004      	beq.n	8009462 <USB_EPStartXfer+0x2b4>
 8009458:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800945c:	3301      	adds	r3, #1
 800945e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	b29a      	uxth	r2, r3
 8009468:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800946c:	b29b      	uxth	r3, r3
 800946e:	029b      	lsls	r3, r3, #10
 8009470:	b29b      	uxth	r3, r3
 8009472:	4313      	orrs	r3, r2
 8009474:	b29a      	uxth	r2, r3
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	801a      	strh	r2, [r3, #0]
 800947a:	e024      	b.n	80094c6 <USB_EPStartXfer+0x318>
 800947c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	785b      	ldrb	r3, [r3, #1]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d11c      	bne.n	80094c6 <USB_EPStartXfer+0x318>
 800948c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800949a:	b29b      	uxth	r3, r3
 800949c:	461a      	mov	r2, r3
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	4413      	add	r3, r2
 80094a2:	633b      	str	r3, [r7, #48]	; 0x30
 80094a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	00da      	lsls	r2, r3, #3
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	4413      	add	r3, r2
 80094b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80094c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	895b      	ldrh	r3, [r3, #10]
 80094d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6959      	ldr	r1, [r3, #20]
 80094e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80094ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80094f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80094f4:	6800      	ldr	r0, [r0, #0]
 80094f6:	f001 fb66 	bl	800abc6 <USB_WritePMA>
            ep->xfer_buff += len;
 80094fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	695a      	ldr	r2, [r3, #20]
 8009506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800950a:	441a      	add	r2, r3
 800950c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800951c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	6a1a      	ldr	r2, [r3, #32]
 8009524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	429a      	cmp	r2, r3
 8009532:	d90f      	bls.n	8009554 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6a1a      	ldr	r2, [r3, #32]
 8009540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009544:	1ad2      	subs	r2, r2, r3
 8009546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	621a      	str	r2, [r3, #32]
 8009552:	e00e      	b.n	8009572 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6a1b      	ldr	r3, [r3, #32]
 8009560:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2200      	movs	r2, #0
 8009570:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	785b      	ldrb	r3, [r3, #1]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d177      	bne.n	8009672 <USB_EPStartXfer+0x4c4>
 8009582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	61bb      	str	r3, [r7, #24]
 800958e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800959c:	b29b      	uxth	r3, r3
 800959e:	461a      	mov	r2, r3
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	4413      	add	r3, r2
 80095a4:	61bb      	str	r3, [r7, #24]
 80095a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	00da      	lsls	r2, r3, #3
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	4413      	add	r3, r2
 80095b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	801a      	strh	r2, [r3, #0]
 80095ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d2:	2b3e      	cmp	r3, #62	; 0x3e
 80095d4:	d921      	bls.n	800961a <USB_EPStartXfer+0x46c>
 80095d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095da:	095b      	lsrs	r3, r3, #5
 80095dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80095e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e4:	f003 031f 	and.w	r3, r3, #31
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d104      	bne.n	80095f6 <USB_EPStartXfer+0x448>
 80095ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095f0:	3b01      	subs	r3, #1
 80095f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009600:	b29b      	uxth	r3, r3
 8009602:	029b      	lsls	r3, r3, #10
 8009604:	b29b      	uxth	r3, r3
 8009606:	4313      	orrs	r3, r2
 8009608:	b29b      	uxth	r3, r3
 800960a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800960e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009612:	b29a      	uxth	r2, r3
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	801a      	strh	r2, [r3, #0]
 8009618:	e056      	b.n	80096c8 <USB_EPStartXfer+0x51a>
 800961a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10a      	bne.n	8009638 <USB_EPStartXfer+0x48a>
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	b29b      	uxth	r3, r3
 8009628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800962c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009630:	b29a      	uxth	r2, r3
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	801a      	strh	r2, [r3, #0]
 8009636:	e047      	b.n	80096c8 <USB_EPStartXfer+0x51a>
 8009638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800963c:	085b      	lsrs	r3, r3, #1
 800963e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b00      	cmp	r3, #0
 800964c:	d004      	beq.n	8009658 <USB_EPStartXfer+0x4aa>
 800964e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009652:	3301      	adds	r3, #1
 8009654:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	b29a      	uxth	r2, r3
 800965e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009662:	b29b      	uxth	r3, r3
 8009664:	029b      	lsls	r3, r3, #10
 8009666:	b29b      	uxth	r3, r3
 8009668:	4313      	orrs	r3, r2
 800966a:	b29a      	uxth	r2, r3
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	801a      	strh	r2, [r3, #0]
 8009670:	e02a      	b.n	80096c8 <USB_EPStartXfer+0x51a>
 8009672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d122      	bne.n	80096c8 <USB_EPStartXfer+0x51a>
 8009682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	623b      	str	r3, [r7, #32]
 800968e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009692:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800969c:	b29b      	uxth	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	4413      	add	r3, r2
 80096a4:	623b      	str	r3, [r7, #32]
 80096a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	00da      	lsls	r2, r3, #3
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	4413      	add	r3, r2
 80096b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096bc:	61fb      	str	r3, [r7, #28]
 80096be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80096c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	891b      	ldrh	r3, [r3, #8]
 80096d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6959      	ldr	r1, [r3, #20]
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80096f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80096f6:	6800      	ldr	r0, [r0, #0]
 80096f8:	f001 fa65 	bl	800abc6 <USB_WritePMA>
 80096fc:	e3ee      	b.n	8009edc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80096fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d177      	bne.n	80097fe <USB_EPStartXfer+0x650>
 800970e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	64bb      	str	r3, [r7, #72]	; 0x48
 800971a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800971e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009728:	b29b      	uxth	r3, r3
 800972a:	461a      	mov	r2, r3
 800972c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800972e:	4413      	add	r3, r2
 8009730:	64bb      	str	r3, [r7, #72]	; 0x48
 8009732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	00da      	lsls	r2, r3, #3
 8009740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009742:	4413      	add	r3, r2
 8009744:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009748:	647b      	str	r3, [r7, #68]	; 0x44
 800974a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	b29b      	uxth	r3, r3
 8009750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009754:	b29a      	uxth	r2, r3
 8009756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009758:	801a      	strh	r2, [r3, #0]
 800975a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800975e:	2b3e      	cmp	r3, #62	; 0x3e
 8009760:	d921      	bls.n	80097a6 <USB_EPStartXfer+0x5f8>
 8009762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009766:	095b      	lsrs	r3, r3, #5
 8009768:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800976c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009770:	f003 031f 	and.w	r3, r3, #31
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <USB_EPStartXfer+0x5d4>
 8009778:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800977c:	3b01      	subs	r3, #1
 800977e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009784:	881b      	ldrh	r3, [r3, #0]
 8009786:	b29a      	uxth	r2, r3
 8009788:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800978c:	b29b      	uxth	r3, r3
 800978e:	029b      	lsls	r3, r3, #10
 8009790:	b29b      	uxth	r3, r3
 8009792:	4313      	orrs	r3, r2
 8009794:	b29b      	uxth	r3, r3
 8009796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800979a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800979e:	b29a      	uxth	r2, r3
 80097a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a2:	801a      	strh	r2, [r3, #0]
 80097a4:	e056      	b.n	8009854 <USB_EPStartXfer+0x6a6>
 80097a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <USB_EPStartXfer+0x616>
 80097ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097bc:	b29a      	uxth	r2, r3
 80097be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c0:	801a      	strh	r2, [r3, #0]
 80097c2:	e047      	b.n	8009854 <USB_EPStartXfer+0x6a6>
 80097c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c8:	085b      	lsrs	r3, r3, #1
 80097ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d004      	beq.n	80097e4 <USB_EPStartXfer+0x636>
 80097da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097de:	3301      	adds	r3, #1
 80097e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e6:	881b      	ldrh	r3, [r3, #0]
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	029b      	lsls	r3, r3, #10
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	4313      	orrs	r3, r2
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097fa:	801a      	strh	r2, [r3, #0]
 80097fc:	e02a      	b.n	8009854 <USB_EPStartXfer+0x6a6>
 80097fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	785b      	ldrb	r3, [r3, #1]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d122      	bne.n	8009854 <USB_EPStartXfer+0x6a6>
 800980e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	653b      	str	r3, [r7, #80]	; 0x50
 800981a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800981e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009828:	b29b      	uxth	r3, r3
 800982a:	461a      	mov	r2, r3
 800982c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800982e:	4413      	add	r3, r2
 8009830:	653b      	str	r3, [r7, #80]	; 0x50
 8009832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	00da      	lsls	r2, r3, #3
 8009840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009842:	4413      	add	r3, r2
 8009844:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800984a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800984e:	b29a      	uxth	r2, r3
 8009850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009852:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	891b      	ldrh	r3, [r3, #8]
 8009860:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6959      	ldr	r1, [r3, #20]
 8009870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009874:	b29b      	uxth	r3, r3
 8009876:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800987a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800987e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009882:	6800      	ldr	r0, [r0, #0]
 8009884:	f001 f99f 	bl	800abc6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800988c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	695a      	ldr	r2, [r3, #20]
 8009894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009898:	441a      	add	r2, r3
 800989a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80098a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6a1a      	ldr	r2, [r3, #32]
 80098b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d90f      	bls.n	80098e2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80098c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6a1a      	ldr	r2, [r3, #32]
 80098ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098d2:	1ad2      	subs	r2, r2, r3
 80098d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	621a      	str	r2, [r3, #32]
 80098e0:	e00e      	b.n	8009900 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80098e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80098f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2200      	movs	r2, #0
 80098fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	643b      	str	r3, [r7, #64]	; 0x40
 800990c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	785b      	ldrb	r3, [r3, #1]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d177      	bne.n	8009a0c <USB_EPStartXfer+0x85e>
 800991c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	63bb      	str	r3, [r7, #56]	; 0x38
 8009928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009936:	b29b      	uxth	r3, r3
 8009938:	461a      	mov	r2, r3
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	4413      	add	r3, r2
 800993e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	00da      	lsls	r2, r3, #3
 800994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009950:	4413      	add	r3, r2
 8009952:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009956:	637b      	str	r3, [r7, #52]	; 0x34
 8009958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	b29b      	uxth	r3, r3
 800995e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009962:	b29a      	uxth	r2, r3
 8009964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009966:	801a      	strh	r2, [r3, #0]
 8009968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800996c:	2b3e      	cmp	r3, #62	; 0x3e
 800996e:	d921      	bls.n	80099b4 <USB_EPStartXfer+0x806>
 8009970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009974:	095b      	lsrs	r3, r3, #5
 8009976:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800997a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800997e:	f003 031f 	and.w	r3, r3, #31
 8009982:	2b00      	cmp	r3, #0
 8009984:	d104      	bne.n	8009990 <USB_EPStartXfer+0x7e2>
 8009986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998a:	3b01      	subs	r3, #1
 800998c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	b29a      	uxth	r2, r3
 8009996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800999a:	b29b      	uxth	r3, r3
 800999c:	029b      	lsls	r3, r3, #10
 800999e:	b29b      	uxth	r3, r3
 80099a0:	4313      	orrs	r3, r2
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b0:	801a      	strh	r2, [r3, #0]
 80099b2:	e050      	b.n	8009a56 <USB_EPStartXfer+0x8a8>
 80099b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10a      	bne.n	80099d2 <USB_EPStartXfer+0x824>
 80099bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ce:	801a      	strh	r2, [r3, #0]
 80099d0:	e041      	b.n	8009a56 <USB_EPStartXfer+0x8a8>
 80099d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099d6:	085b      	lsrs	r3, r3, #1
 80099d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80099dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <USB_EPStartXfer+0x844>
 80099e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ec:	3301      	adds	r3, #1
 80099ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80099f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f4:	881b      	ldrh	r3, [r3, #0]
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	029b      	lsls	r3, r3, #10
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	4313      	orrs	r3, r2
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a08:	801a      	strh	r2, [r3, #0]
 8009a0a:	e024      	b.n	8009a56 <USB_EPStartXfer+0x8a8>
 8009a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	785b      	ldrb	r3, [r3, #1]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d11c      	bne.n	8009a56 <USB_EPStartXfer+0x8a8>
 8009a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a30:	4413      	add	r3, r2
 8009a32:	643b      	str	r3, [r7, #64]	; 0x40
 8009a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	00da      	lsls	r2, r3, #3
 8009a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a44:	4413      	add	r3, r2
 8009a46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	895b      	ldrh	r3, [r3, #10]
 8009a62:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6959      	ldr	r1, [r3, #20]
 8009a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009a7c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009a80:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009a84:	6800      	ldr	r0, [r0, #0]
 8009a86:	f001 f89e 	bl	800abc6 <USB_WritePMA>
 8009a8a:	e227      	b.n	8009edc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	881b      	ldrh	r3, [r3, #0]
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	441a      	add	r2, r3
 8009ae0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009afc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	461a      	mov	r2, r3
 8009b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b18:	4413      	add	r3, r2
 8009b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	00da      	lsls	r2, r3, #3
 8009b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b32:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	891b      	ldrh	r3, [r3, #8]
 8009b4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6959      	ldr	r1, [r3, #20]
 8009b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009b64:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009b68:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009b6c:	6800      	ldr	r0, [r0, #0]
 8009b6e:	f001 f82a 	bl	800abc6 <USB_WritePMA>
 8009b72:	e1b3      	b.n	8009edc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6a1a      	ldr	r2, [r3, #32]
 8009b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b84:	1ad2      	subs	r2, r2, r3
 8009b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	881b      	ldrh	r3, [r3, #0]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 80c6 	beq.w	8009d46 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	673b      	str	r3, [r7, #112]	; 0x70
 8009bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	785b      	ldrb	r3, [r3, #1]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d177      	bne.n	8009cc6 <USB_EPStartXfer+0xb18>
 8009bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bf6:	4413      	add	r3, r2
 8009bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	00da      	lsls	r2, r3, #3
 8009c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c10:	667b      	str	r3, [r7, #100]	; 0x64
 8009c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c20:	801a      	strh	r2, [r3, #0]
 8009c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c26:	2b3e      	cmp	r3, #62	; 0x3e
 8009c28:	d921      	bls.n	8009c6e <USB_EPStartXfer+0xac0>
 8009c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c2e:	095b      	lsrs	r3, r3, #5
 8009c30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c38:	f003 031f 	and.w	r3, r3, #31
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d104      	bne.n	8009c4a <USB_EPStartXfer+0xa9c>
 8009c40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009c44:	3b01      	subs	r3, #1
 8009c46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	029b      	lsls	r3, r3, #10
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c6a:	801a      	strh	r2, [r3, #0]
 8009c6c:	e050      	b.n	8009d10 <USB_EPStartXfer+0xb62>
 8009c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10a      	bne.n	8009c8c <USB_EPStartXfer+0xade>
 8009c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c88:	801a      	strh	r2, [r3, #0]
 8009c8a:	e041      	b.n	8009d10 <USB_EPStartXfer+0xb62>
 8009c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c90:	085b      	lsrs	r3, r3, #1
 8009c92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d004      	beq.n	8009cac <USB_EPStartXfer+0xafe>
 8009ca2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	029b      	lsls	r3, r3, #10
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cc2:	801a      	strh	r2, [r3, #0]
 8009cc4:	e024      	b.n	8009d10 <USB_EPStartXfer+0xb62>
 8009cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	785b      	ldrb	r3, [r3, #1]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d11c      	bne.n	8009d10 <USB_EPStartXfer+0xb62>
 8009cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cea:	4413      	add	r3, r2
 8009cec:	673b      	str	r3, [r7, #112]	; 0x70
 8009cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	00da      	lsls	r2, r3, #3
 8009cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cfe:	4413      	add	r3, r2
 8009d00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	895b      	ldrh	r3, [r3, #10]
 8009d1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6959      	ldr	r1, [r3, #20]
 8009d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009d3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009d3e:	6800      	ldr	r0, [r0, #0]
 8009d40:	f000 ff41 	bl	800abc6 <USB_WritePMA>
 8009d44:	e0ca      	b.n	8009edc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	785b      	ldrb	r3, [r3, #1]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d177      	bne.n	8009e46 <USB_EPStartXfer+0xc98>
 8009d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	461a      	mov	r2, r3
 8009d74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d76:	4413      	add	r3, r2
 8009d78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	00da      	lsls	r2, r3, #3
 8009d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d90:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d94:	881b      	ldrh	r3, [r3, #0]
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009da0:	801a      	strh	r2, [r3, #0]
 8009da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da6:	2b3e      	cmp	r3, #62	; 0x3e
 8009da8:	d921      	bls.n	8009dee <USB_EPStartXfer+0xc40>
 8009daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dae:	095b      	lsrs	r3, r3, #5
 8009db0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db8:	f003 031f 	and.w	r3, r3, #31
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d104      	bne.n	8009dca <USB_EPStartXfer+0xc1c>
 8009dc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	029b      	lsls	r3, r3, #10
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dea:	801a      	strh	r2, [r3, #0]
 8009dec:	e05c      	b.n	8009ea8 <USB_EPStartXfer+0xcfa>
 8009dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <USB_EPStartXfer+0xc5e>
 8009df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e08:	801a      	strh	r2, [r3, #0]
 8009e0a:	e04d      	b.n	8009ea8 <USB_EPStartXfer+0xcfa>
 8009e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e10:	085b      	lsrs	r3, r3, #1
 8009e12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d004      	beq.n	8009e2c <USB_EPStartXfer+0xc7e>
 8009e22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009e26:	3301      	adds	r3, #1
 8009e28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	029b      	lsls	r3, r3, #10
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e42:	801a      	strh	r2, [r3, #0]
 8009e44:	e030      	b.n	8009ea8 <USB_EPStartXfer+0xcfa>
 8009e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	785b      	ldrb	r3, [r3, #1]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d128      	bne.n	8009ea8 <USB_EPStartXfer+0xcfa>
 8009e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	461a      	mov	r2, r3
 8009e76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	00da      	lsls	r2, r3, #3
 8009e8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e92:	4413      	add	r3, r2
 8009e94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ea6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	891b      	ldrh	r3, [r3, #8]
 8009eb4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6959      	ldr	r1, [r3, #20]
 8009ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ece:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ed2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009ed6:	6800      	ldr	r0, [r0, #0]
 8009ed8:	f000 fe75 	bl	800abc6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f02:	817b      	strh	r3, [r7, #10]
 8009f04:	897b      	ldrh	r3, [r7, #10]
 8009f06:	f083 0310 	eor.w	r3, r3, #16
 8009f0a:	817b      	strh	r3, [r7, #10]
 8009f0c:	897b      	ldrh	r3, [r7, #10]
 8009f0e:	f083 0320 	eor.w	r3, r3, #32
 8009f12:	817b      	strh	r3, [r7, #10]
 8009f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	441a      	add	r2, r3
 8009f2e:	897b      	ldrh	r3, [r7, #10]
 8009f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	8013      	strh	r3, [r2, #0]
 8009f44:	f000 bcde 	b.w	800a904 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	7b1b      	ldrb	r3, [r3, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f040 80bb 	bne.w	800a0d0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	699a      	ldr	r2, [r3, #24]
 8009f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d917      	bls.n	8009fa6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	699a      	ldr	r2, [r3, #24]
 8009f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f96:	1ad2      	subs	r2, r2, r3
 8009f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	619a      	str	r2, [r3, #24]
 8009fa4:	e00e      	b.n	8009fc4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fe8:	4413      	add	r3, r2
 8009fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	00da      	lsls	r2, r3, #3
 8009ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a000:	4413      	add	r3, r2
 800a002:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a00a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a00e:	881b      	ldrh	r3, [r3, #0]
 800a010:	b29b      	uxth	r3, r3
 800a012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a016:	b29a      	uxth	r2, r3
 800a018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a01c:	801a      	strh	r2, [r3, #0]
 800a01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a022:	2b3e      	cmp	r3, #62	; 0x3e
 800a024:	d924      	bls.n	800a070 <USB_EPStartXfer+0xec2>
 800a026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a02a:	095b      	lsrs	r3, r3, #5
 800a02c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a034:	f003 031f 	and.w	r3, r3, #31
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d104      	bne.n	800a046 <USB_EPStartXfer+0xe98>
 800a03c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a040:	3b01      	subs	r3, #1
 800a042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a052:	b29b      	uxth	r3, r3
 800a054:	029b      	lsls	r3, r3, #10
 800a056:	b29b      	uxth	r3, r3
 800a058:	4313      	orrs	r3, r2
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a064:	b29a      	uxth	r2, r3
 800a066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a06a:	801a      	strh	r2, [r3, #0]
 800a06c:	f000 bc10 	b.w	800a890 <USB_EPStartXfer+0x16e2>
 800a070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10c      	bne.n	800a092 <USB_EPStartXfer+0xee4>
 800a078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a088:	b29a      	uxth	r2, r3
 800a08a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a08e:	801a      	strh	r2, [r3, #0]
 800a090:	e3fe      	b.n	800a890 <USB_EPStartXfer+0x16e2>
 800a092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a096:	085b      	lsrs	r3, r3, #1
 800a098:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0a0:	f003 0301 	and.w	r3, r3, #1
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d004      	beq.n	800a0b2 <USB_EPStartXfer+0xf04>
 800a0a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0b6:	881b      	ldrh	r3, [r3, #0]
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	029b      	lsls	r3, r3, #10
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0cc:	801a      	strh	r2, [r3, #0]
 800a0ce:	e3df      	b.n	800a890 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	78db      	ldrb	r3, [r3, #3]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	f040 8218 	bne.w	800a512 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	785b      	ldrb	r3, [r3, #1]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f040 809d 	bne.w	800a22e <USB_EPStartXfer+0x1080>
 800a0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a110:	b29b      	uxth	r3, r3
 800a112:	461a      	mov	r2, r3
 800a114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a118:	4413      	add	r3, r2
 800a11a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a11e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	00da      	lsls	r2, r3, #3
 800a12c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a130:	4413      	add	r3, r2
 800a132:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a136:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a13a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a13e:	881b      	ldrh	r3, [r3, #0]
 800a140:	b29b      	uxth	r3, r3
 800a142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a146:	b29a      	uxth	r2, r3
 800a148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a14c:	801a      	strh	r2, [r3, #0]
 800a14e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	2b3e      	cmp	r3, #62	; 0x3e
 800a15c:	d92b      	bls.n	800a1b6 <USB_EPStartXfer+0x1008>
 800a15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	095b      	lsrs	r3, r3, #5
 800a16c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	f003 031f 	and.w	r3, r3, #31
 800a180:	2b00      	cmp	r3, #0
 800a182:	d104      	bne.n	800a18e <USB_EPStartXfer+0xfe0>
 800a184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a188:	3b01      	subs	r3, #1
 800a18a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a18e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	b29a      	uxth	r2, r3
 800a196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	029b      	lsls	r3, r3, #10
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a1b2:	801a      	strh	r2, [r3, #0]
 800a1b4:	e070      	b.n	800a298 <USB_EPStartXfer+0x10ea>
 800a1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10c      	bne.n	800a1e0 <USB_EPStartXfer+0x1032>
 800a1c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a1ca:	881b      	ldrh	r3, [r3, #0]
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a1dc:	801a      	strh	r2, [r3, #0]
 800a1de:	e05b      	b.n	800a298 <USB_EPStartXfer+0x10ea>
 800a1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	085b      	lsrs	r3, r3, #1
 800a1ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	d004      	beq.n	800a210 <USB_EPStartXfer+0x1062>
 800a206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a20a:	3301      	adds	r3, #1
 800a20c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	b29a      	uxth	r2, r3
 800a218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	029b      	lsls	r3, r3, #10
 800a220:	b29b      	uxth	r3, r3
 800a222:	4313      	orrs	r3, r2
 800a224:	b29a      	uxth	r2, r3
 800a226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a22a:	801a      	strh	r2, [r3, #0]
 800a22c:	e034      	b.n	800a298 <USB_EPStartXfer+0x10ea>
 800a22e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	785b      	ldrb	r3, [r3, #1]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d12c      	bne.n	800a298 <USB_EPStartXfer+0x10ea>
 800a23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a24c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	461a      	mov	r2, r3
 800a25e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a262:	4413      	add	r3, r2
 800a264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a26c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	00da      	lsls	r2, r3, #3
 800a276:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a27a:	4413      	add	r3, r2
 800a27c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	b29a      	uxth	r2, r3
 800a292:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a296:	801a      	strh	r2, [r3, #0]
 800a298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a2a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f040 809d 	bne.w	800a3f2 <USB_EPStartXfer+0x1244>
 800a2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2dc:	4413      	add	r3, r2
 800a2de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	00da      	lsls	r2, r3, #3
 800a2f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a2fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	b29b      	uxth	r3, r3
 800a306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a310:	801a      	strh	r2, [r3, #0]
 800a312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	2b3e      	cmp	r3, #62	; 0x3e
 800a320:	d92b      	bls.n	800a37a <USB_EPStartXfer+0x11cc>
 800a322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	095b      	lsrs	r3, r3, #5
 800a330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	f003 031f 	and.w	r3, r3, #31
 800a344:	2b00      	cmp	r3, #0
 800a346:	d104      	bne.n	800a352 <USB_EPStartXfer+0x11a4>
 800a348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a34c:	3b01      	subs	r3, #1
 800a34e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a352:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	b29a      	uxth	r2, r3
 800a35a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a35e:	b29b      	uxth	r3, r3
 800a360:	029b      	lsls	r3, r3, #10
 800a362:	b29b      	uxth	r3, r3
 800a364:	4313      	orrs	r3, r2
 800a366:	b29b      	uxth	r3, r3
 800a368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a36c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a370:	b29a      	uxth	r2, r3
 800a372:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a376:	801a      	strh	r2, [r3, #0]
 800a378:	e069      	b.n	800a44e <USB_EPStartXfer+0x12a0>
 800a37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10c      	bne.n	800a3a4 <USB_EPStartXfer+0x11f6>
 800a38a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	b29b      	uxth	r3, r3
 800a392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3a0:	801a      	strh	r2, [r3, #0]
 800a3a2:	e054      	b.n	800a44e <USB_EPStartXfer+0x12a0>
 800a3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	085b      	lsrs	r3, r3, #1
 800a3b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d004      	beq.n	800a3d4 <USB_EPStartXfer+0x1226>
 800a3ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3d8:	881b      	ldrh	r3, [r3, #0]
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	029b      	lsls	r3, r3, #10
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3ee:	801a      	strh	r2, [r3, #0]
 800a3f0:	e02d      	b.n	800a44e <USB_EPStartXfer+0x12a0>
 800a3f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	785b      	ldrb	r3, [r3, #1]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d125      	bne.n	800a44e <USB_EPStartXfer+0x12a0>
 800a402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a410:	b29b      	uxth	r3, r3
 800a412:	461a      	mov	r2, r3
 800a414:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a418:	4413      	add	r3, r2
 800a41a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	00da      	lsls	r2, r3, #3
 800a42c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a430:	4413      	add	r3, r2
 800a432:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a43e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	b29a      	uxth	r2, r3
 800a448:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a44c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 8218 	beq.w	800a890 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a46e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	881b      	ldrh	r3, [r3, #0]
 800a47c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a480:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d005      	beq.n	800a498 <USB_EPStartXfer+0x12ea>
 800a48c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10d      	bne.n	800a4b4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a498:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a49c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f040 81f5 	bne.w	800a890 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a4a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f040 81ee 	bne.w	800a890 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4da:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a4de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	441a      	add	r2, r3
 800a4f8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a4fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a508:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	8013      	strh	r3, [r2, #0]
 800a510:	e1be      	b.n	800a890 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	78db      	ldrb	r3, [r3, #3]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	f040 81b4 	bne.w	800a88c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	699a      	ldr	r2, [r3, #24]
 800a530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d917      	bls.n	800a570 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	699a      	ldr	r2, [r3, #24]
 800a55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a560:	1ad2      	subs	r2, r2, r3
 800a562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	619a      	str	r2, [r3, #24]
 800a56e:	e00e      	b.n	800a58e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2200      	movs	r2, #0
 800a58c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	785b      	ldrb	r3, [r3, #1]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f040 8085 	bne.w	800a6aa <USB_EPStartXfer+0x14fc>
 800a5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a5c4:	4413      	add	r3, r2
 800a5c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a5ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	00da      	lsls	r2, r3, #3
 800a5d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a5dc:	4413      	add	r3, r2
 800a5de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5f8:	801a      	strh	r2, [r3, #0]
 800a5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5fe:	2b3e      	cmp	r3, #62	; 0x3e
 800a600:	d923      	bls.n	800a64a <USB_EPStartXfer+0x149c>
 800a602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a606:	095b      	lsrs	r3, r3, #5
 800a608:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a610:	f003 031f 	and.w	r3, r3, #31
 800a614:	2b00      	cmp	r3, #0
 800a616:	d104      	bne.n	800a622 <USB_EPStartXfer+0x1474>
 800a618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a61c:	3b01      	subs	r3, #1
 800a61e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a622:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	b29a      	uxth	r2, r3
 800a62a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a62e:	b29b      	uxth	r3, r3
 800a630:	029b      	lsls	r3, r3, #10
 800a632:	b29b      	uxth	r3, r3
 800a634:	4313      	orrs	r3, r2
 800a636:	b29b      	uxth	r3, r3
 800a638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a63c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a640:	b29a      	uxth	r2, r3
 800a642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a646:	801a      	strh	r2, [r3, #0]
 800a648:	e060      	b.n	800a70c <USB_EPStartXfer+0x155e>
 800a64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10c      	bne.n	800a66c <USB_EPStartXfer+0x14be>
 800a652:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a65e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a662:	b29a      	uxth	r2, r3
 800a664:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a668:	801a      	strh	r2, [r3, #0]
 800a66a:	e04f      	b.n	800a70c <USB_EPStartXfer+0x155e>
 800a66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a670:	085b      	lsrs	r3, r3, #1
 800a672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d004      	beq.n	800a68c <USB_EPStartXfer+0x14de>
 800a682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a686:	3301      	adds	r3, #1
 800a688:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a68c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	b29a      	uxth	r2, r3
 800a694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a698:	b29b      	uxth	r3, r3
 800a69a:	029b      	lsls	r3, r3, #10
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6a6:	801a      	strh	r2, [r3, #0]
 800a6a8:	e030      	b.n	800a70c <USB_EPStartXfer+0x155e>
 800a6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	785b      	ldrb	r3, [r3, #1]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d128      	bne.n	800a70c <USB_EPStartXfer+0x155e>
 800a6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a6c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	461a      	mov	r2, r3
 800a6da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6de:	4413      	add	r3, r2
 800a6e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a6e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	00da      	lsls	r2, r3, #3
 800a6f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a704:	b29a      	uxth	r2, r3
 800a706:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a70a:	801a      	strh	r2, [r3, #0]
 800a70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	785b      	ldrb	r3, [r3, #1]
 800a726:	2b00      	cmp	r3, #0
 800a728:	f040 8085 	bne.w	800a836 <USB_EPStartXfer+0x1688>
 800a72c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a73e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a748:	b29b      	uxth	r3, r3
 800a74a:	461a      	mov	r2, r3
 800a74c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a750:	4413      	add	r3, r2
 800a752:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	00da      	lsls	r2, r3, #3
 800a764:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a768:	4413      	add	r3, r2
 800a76a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a76e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a772:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a77e:	b29a      	uxth	r2, r3
 800a780:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a784:	801a      	strh	r2, [r3, #0]
 800a786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78a:	2b3e      	cmp	r3, #62	; 0x3e
 800a78c:	d923      	bls.n	800a7d6 <USB_EPStartXfer+0x1628>
 800a78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a792:	095b      	lsrs	r3, r3, #5
 800a794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a79c:	f003 031f 	and.w	r3, r3, #31
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d104      	bne.n	800a7ae <USB_EPStartXfer+0x1600>
 800a7a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a7ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	029b      	lsls	r3, r3, #10
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7d2:	801a      	strh	r2, [r3, #0]
 800a7d4:	e05c      	b.n	800a890 <USB_EPStartXfer+0x16e2>
 800a7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10c      	bne.n	800a7f8 <USB_EPStartXfer+0x164a>
 800a7de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7f4:	801a      	strh	r2, [r3, #0]
 800a7f6:	e04b      	b.n	800a890 <USB_EPStartXfer+0x16e2>
 800a7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7fc:	085b      	lsrs	r3, r3, #1
 800a7fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d004      	beq.n	800a818 <USB_EPStartXfer+0x166a>
 800a80e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a812:	3301      	adds	r3, #1
 800a814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a818:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a81c:	881b      	ldrh	r3, [r3, #0]
 800a81e:	b29a      	uxth	r2, r3
 800a820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a824:	b29b      	uxth	r3, r3
 800a826:	029b      	lsls	r3, r3, #10
 800a828:	b29b      	uxth	r3, r3
 800a82a:	4313      	orrs	r3, r2
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a832:	801a      	strh	r2, [r3, #0]
 800a834:	e02c      	b.n	800a890 <USB_EPStartXfer+0x16e2>
 800a836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	785b      	ldrb	r3, [r3, #1]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d124      	bne.n	800a890 <USB_EPStartXfer+0x16e2>
 800a846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a854:	b29b      	uxth	r3, r3
 800a856:	461a      	mov	r2, r3
 800a858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a85c:	4413      	add	r3, r2
 800a85e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	00da      	lsls	r2, r3, #3
 800a870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a874:	4413      	add	r3, r2
 800a876:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a87a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a882:	b29a      	uxth	r2, r3
 800a884:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a888:	801a      	strh	r2, [r3, #0]
 800a88a:	e001      	b.n	800a890 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	e03a      	b.n	800a906 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4413      	add	r3, r2
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a8ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a8be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a8c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a8c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a8ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a8ce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	441a      	add	r2, r3
 800a8ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a8f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a900:	b29b      	uxth	r3, r3
 800a902:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	785b      	ldrb	r3, [r3, #1]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d020      	beq.n	800a964 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4413      	add	r3, r2
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	b29b      	uxth	r3, r3
 800a930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a938:	81bb      	strh	r3, [r7, #12]
 800a93a:	89bb      	ldrh	r3, [r7, #12]
 800a93c:	f083 0310 	eor.w	r3, r3, #16
 800a940:	81bb      	strh	r3, [r7, #12]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	441a      	add	r2, r3
 800a94c:	89bb      	ldrh	r3, [r7, #12]
 800a94e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a95e:	b29b      	uxth	r3, r3
 800a960:	8013      	strh	r3, [r2, #0]
 800a962:	e01f      	b.n	800a9a4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	b29b      	uxth	r3, r3
 800a972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a97a:	81fb      	strh	r3, [r7, #14]
 800a97c:	89fb      	ldrh	r3, [r7, #14]
 800a97e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a982:	81fb      	strh	r3, [r7, #14]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	441a      	add	r2, r3
 800a98e:	89fb      	ldrh	r3, [r7, #14]
 800a990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a99c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b087      	sub	sp, #28
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	7b1b      	ldrb	r3, [r3, #12]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f040 809d 	bne.w	800ab00 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	785b      	ldrb	r3, [r3, #1]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d04c      	beq.n	800aa68 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	823b      	strh	r3, [r7, #16]
 800a9dc:	8a3b      	ldrh	r3, [r7, #16]
 800a9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d01b      	beq.n	800aa1e <USB_EPClearStall+0x6c>
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	881b      	ldrh	r3, [r3, #0]
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9fc:	81fb      	strh	r3, [r7, #14]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	441a      	add	r2, r3
 800aa08:	89fb      	ldrh	r3, [r7, #14]
 800aa0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	78db      	ldrb	r3, [r3, #3]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d06c      	beq.n	800ab00 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa3c:	81bb      	strh	r3, [r7, #12]
 800aa3e:	89bb      	ldrh	r3, [r7, #12]
 800aa40:	f083 0320 	eor.w	r3, r3, #32
 800aa44:	81bb      	strh	r3, [r7, #12]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	441a      	add	r2, r3
 800aa50:	89bb      	ldrh	r3, [r7, #12]
 800aa52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	8013      	strh	r3, [r2, #0]
 800aa66:	e04b      	b.n	800ab00 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	4413      	add	r3, r2
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	82fb      	strh	r3, [r7, #22]
 800aa76:	8afb      	ldrh	r3, [r7, #22]
 800aa78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d01b      	beq.n	800aab8 <USB_EPClearStall+0x106>
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa96:	82bb      	strh	r3, [r7, #20]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	441a      	add	r2, r3
 800aaa2:	8abb      	ldrh	r3, [r7, #20]
 800aaa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aaca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aace:	827b      	strh	r3, [r7, #18]
 800aad0:	8a7b      	ldrh	r3, [r7, #18]
 800aad2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aad6:	827b      	strh	r3, [r7, #18]
 800aad8:	8a7b      	ldrh	r3, [r7, #18]
 800aada:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aade:	827b      	strh	r3, [r7, #18]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	441a      	add	r2, r3
 800aaea:	8a7b      	ldrh	r3, [r7, #18]
 800aaec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	371c      	adds	r7, #28
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ab0e:	b480      	push	{r7}
 800ab10:	b083      	sub	sp, #12
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	460b      	mov	r3, r1
 800ab18:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ab1a:	78fb      	ldrb	r3, [r7, #3]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d103      	bne.n	800ab28 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2280      	movs	r2, #128	; 0x80
 800ab24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b083      	sub	sp, #12
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b085      	sub	sp, #20
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aba0:	68fb      	ldr	r3, [r7, #12]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800abae:	b480      	push	{r7}
 800abb0:	b083      	sub	sp, #12
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b08b      	sub	sp, #44	; 0x2c
 800abca:	af00      	add	r7, sp, #0
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	60b9      	str	r1, [r7, #8]
 800abd0:	4611      	mov	r1, r2
 800abd2:	461a      	mov	r2, r3
 800abd4:	460b      	mov	r3, r1
 800abd6:	80fb      	strh	r3, [r7, #6]
 800abd8:	4613      	mov	r3, r2
 800abda:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800abdc:	88bb      	ldrh	r3, [r7, #4]
 800abde:	3301      	adds	r3, #1
 800abe0:	085b      	lsrs	r3, r3, #1
 800abe2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800abec:	88fa      	ldrh	r2, [r7, #6]
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abf6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	627b      	str	r3, [r7, #36]	; 0x24
 800abfc:	e01b      	b.n	800ac36 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	3301      	adds	r3, #1
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	021b      	lsls	r3, r3, #8
 800ac0c:	b21a      	sxth	r2, r3
 800ac0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	b21b      	sxth	r3, r3
 800ac16:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	8a7a      	ldrh	r2, [r7, #18]
 800ac1c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ac1e:	6a3b      	ldr	r3, [r7, #32]
 800ac20:	3302      	adds	r3, #2
 800ac22:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	3301      	adds	r3, #1
 800ac28:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	3b01      	subs	r3, #1
 800ac34:	627b      	str	r3, [r7, #36]	; 0x24
 800ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1e0      	bne.n	800abfe <USB_WritePMA+0x38>
  }
}
 800ac3c:	bf00      	nop
 800ac3e:	bf00      	nop
 800ac40:	372c      	adds	r7, #44	; 0x2c
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b08b      	sub	sp, #44	; 0x2c
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	60f8      	str	r0, [r7, #12]
 800ac52:	60b9      	str	r1, [r7, #8]
 800ac54:	4611      	mov	r1, r2
 800ac56:	461a      	mov	r2, r3
 800ac58:	460b      	mov	r3, r1
 800ac5a:	80fb      	strh	r3, [r7, #6]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ac60:	88bb      	ldrh	r3, [r7, #4]
 800ac62:	085b      	lsrs	r3, r3, #1
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac70:	88fa      	ldrh	r2, [r7, #6]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	4413      	add	r3, r2
 800ac76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac7a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac80:	e018      	b.n	800acb4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	881b      	ldrh	r3, [r3, #0]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	3302      	adds	r3, #2
 800ac8e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	b2da      	uxtb	r2, r3
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	0a1b      	lsrs	r3, r3, #8
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	3301      	adds	r3, #1
 800acac:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	3b01      	subs	r3, #1
 800acb2:	627b      	str	r3, [r7, #36]	; 0x24
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1e3      	bne.n	800ac82 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800acba:	88bb      	ldrh	r3, [r7, #4]
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d007      	beq.n	800acd6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800acc6:	6a3b      	ldr	r3, [r7, #32]
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	b29b      	uxth	r3, r3
 800accc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	701a      	strb	r2, [r3, #0]
  }
}
 800acd6:	bf00      	nop
 800acd8:	372c      	adds	r7, #44	; 0x2c
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
	...

0800ace4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	460b      	mov	r3, r1
 800acee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800acf0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800acf4:	f002 fd24 	bl	800d740 <USBD_static_malloc>
 800acf8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d109      	bne.n	800ad14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	32b0      	adds	r2, #176	; 0xb0
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ad10:	2302      	movs	r3, #2
 800ad12:	e0d4      	b.n	800aebe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ad14:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ad18:	2100      	movs	r1, #0
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f002 fd4e 	bl	800d7bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	32b0      	adds	r2, #176	; 0xb0
 800ad2a:	68f9      	ldr	r1, [r7, #12]
 800ad2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	32b0      	adds	r2, #176	; 0xb0
 800ad3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	7c1b      	ldrb	r3, [r3, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d138      	bne.n	800adbe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad4c:	4b5e      	ldr	r3, [pc, #376]	; (800aec8 <USBD_CDC_Init+0x1e4>)
 800ad4e:	7819      	ldrb	r1, [r3, #0]
 800ad50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad54:	2202      	movs	r2, #2
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f002 faf4 	bl	800d344 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad5c:	4b5a      	ldr	r3, [pc, #360]	; (800aec8 <USBD_CDC_Init+0x1e4>)
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	f003 020f 	and.w	r2, r3, #15
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	4613      	mov	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	440b      	add	r3, r1
 800ad70:	3324      	adds	r3, #36	; 0x24
 800ad72:	2201      	movs	r2, #1
 800ad74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad76:	4b55      	ldr	r3, [pc, #340]	; (800aecc <USBD_CDC_Init+0x1e8>)
 800ad78:	7819      	ldrb	r1, [r3, #0]
 800ad7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad7e:	2202      	movs	r2, #2
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f002 fadf 	bl	800d344 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad86:	4b51      	ldr	r3, [pc, #324]	; (800aecc <USBD_CDC_Init+0x1e8>)
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	f003 020f 	and.w	r2, r3, #15
 800ad8e:	6879      	ldr	r1, [r7, #4]
 800ad90:	4613      	mov	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	440b      	add	r3, r1
 800ad9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad9e:	2201      	movs	r2, #1
 800ada0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ada2:	4b4b      	ldr	r3, [pc, #300]	; (800aed0 <USBD_CDC_Init+0x1ec>)
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	f003 020f 	and.w	r2, r3, #15
 800adaa:	6879      	ldr	r1, [r7, #4]
 800adac:	4613      	mov	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4413      	add	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	440b      	add	r3, r1
 800adb6:	3326      	adds	r3, #38	; 0x26
 800adb8:	2210      	movs	r2, #16
 800adba:	801a      	strh	r2, [r3, #0]
 800adbc:	e035      	b.n	800ae2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800adbe:	4b42      	ldr	r3, [pc, #264]	; (800aec8 <USBD_CDC_Init+0x1e4>)
 800adc0:	7819      	ldrb	r1, [r3, #0]
 800adc2:	2340      	movs	r3, #64	; 0x40
 800adc4:	2202      	movs	r2, #2
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f002 fabc 	bl	800d344 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800adcc:	4b3e      	ldr	r3, [pc, #248]	; (800aec8 <USBD_CDC_Init+0x1e4>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	f003 020f 	and.w	r2, r3, #15
 800add4:	6879      	ldr	r1, [r7, #4]
 800add6:	4613      	mov	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	440b      	add	r3, r1
 800ade0:	3324      	adds	r3, #36	; 0x24
 800ade2:	2201      	movs	r2, #1
 800ade4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ade6:	4b39      	ldr	r3, [pc, #228]	; (800aecc <USBD_CDC_Init+0x1e8>)
 800ade8:	7819      	ldrb	r1, [r3, #0]
 800adea:	2340      	movs	r3, #64	; 0x40
 800adec:	2202      	movs	r2, #2
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f002 faa8 	bl	800d344 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800adf4:	4b35      	ldr	r3, [pc, #212]	; (800aecc <USBD_CDC_Init+0x1e8>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	f003 020f 	and.w	r2, r3, #15
 800adfc:	6879      	ldr	r1, [r7, #4]
 800adfe:	4613      	mov	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	440b      	add	r3, r1
 800ae08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ae10:	4b2f      	ldr	r3, [pc, #188]	; (800aed0 <USBD_CDC_Init+0x1ec>)
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	f003 020f 	and.w	r2, r3, #15
 800ae18:	6879      	ldr	r1, [r7, #4]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4413      	add	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	440b      	add	r3, r1
 800ae24:	3326      	adds	r3, #38	; 0x26
 800ae26:	2210      	movs	r2, #16
 800ae28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae2a:	4b29      	ldr	r3, [pc, #164]	; (800aed0 <USBD_CDC_Init+0x1ec>)
 800ae2c:	7819      	ldrb	r1, [r3, #0]
 800ae2e:	2308      	movs	r3, #8
 800ae30:	2203      	movs	r2, #3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f002 fa86 	bl	800d344 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ae38:	4b25      	ldr	r3, [pc, #148]	; (800aed0 <USBD_CDC_Init+0x1ec>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	f003 020f 	and.w	r2, r3, #15
 800ae40:	6879      	ldr	r1, [r7, #4]
 800ae42:	4613      	mov	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	440b      	add	r3, r1
 800ae4c:	3324      	adds	r3, #36	; 0x24
 800ae4e:	2201      	movs	r2, #1
 800ae50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	33b0      	adds	r3, #176	; 0xb0
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4413      	add	r3, r2
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d101      	bne.n	800ae8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ae88:	2302      	movs	r3, #2
 800ae8a:	e018      	b.n	800aebe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	7c1b      	ldrb	r3, [r3, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10a      	bne.n	800aeaa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae94:	4b0d      	ldr	r3, [pc, #52]	; (800aecc <USBD_CDC_Init+0x1e8>)
 800ae96:	7819      	ldrb	r1, [r3, #0]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f002 fbca 	bl	800d63c <USBD_LL_PrepareReceive>
 800aea8:	e008      	b.n	800aebc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aeaa:	4b08      	ldr	r3, [pc, #32]	; (800aecc <USBD_CDC_Init+0x1e8>)
 800aeac:	7819      	ldrb	r1, [r3, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aeb4:	2340      	movs	r3, #64	; 0x40
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f002 fbc0 	bl	800d63c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	20000097 	.word	0x20000097
 800aecc:	20000098 	.word	0x20000098
 800aed0:	20000099 	.word	0x20000099

0800aed4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aee0:	4b3a      	ldr	r3, [pc, #232]	; (800afcc <USBD_CDC_DeInit+0xf8>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f002 fa6a 	bl	800d3c0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aeec:	4b37      	ldr	r3, [pc, #220]	; (800afcc <USBD_CDC_DeInit+0xf8>)
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	f003 020f 	and.w	r2, r3, #15
 800aef4:	6879      	ldr	r1, [r7, #4]
 800aef6:	4613      	mov	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4413      	add	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	440b      	add	r3, r1
 800af00:	3324      	adds	r3, #36	; 0x24
 800af02:	2200      	movs	r2, #0
 800af04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800af06:	4b32      	ldr	r3, [pc, #200]	; (800afd0 <USBD_CDC_DeInit+0xfc>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	4619      	mov	r1, r3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f002 fa57 	bl	800d3c0 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800af12:	4b2f      	ldr	r3, [pc, #188]	; (800afd0 <USBD_CDC_DeInit+0xfc>)
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	f003 020f 	and.w	r2, r3, #15
 800af1a:	6879      	ldr	r1, [r7, #4]
 800af1c:	4613      	mov	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4413      	add	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	440b      	add	r3, r1
 800af26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af2a:	2200      	movs	r2, #0
 800af2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800af2e:	4b29      	ldr	r3, [pc, #164]	; (800afd4 <USBD_CDC_DeInit+0x100>)
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	4619      	mov	r1, r3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f002 fa43 	bl	800d3c0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800af3a:	4b26      	ldr	r3, [pc, #152]	; (800afd4 <USBD_CDC_DeInit+0x100>)
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	f003 020f 	and.w	r2, r3, #15
 800af42:	6879      	ldr	r1, [r7, #4]
 800af44:	4613      	mov	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	440b      	add	r3, r1
 800af4e:	3324      	adds	r3, #36	; 0x24
 800af50:	2200      	movs	r2, #0
 800af52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800af54:	4b1f      	ldr	r3, [pc, #124]	; (800afd4 <USBD_CDC_DeInit+0x100>)
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	f003 020f 	and.w	r2, r3, #15
 800af5c:	6879      	ldr	r1, [r7, #4]
 800af5e:	4613      	mov	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	440b      	add	r3, r1
 800af68:	3326      	adds	r3, #38	; 0x26
 800af6a:	2200      	movs	r2, #0
 800af6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	32b0      	adds	r2, #176	; 0xb0
 800af78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d01f      	beq.n	800afc0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	33b0      	adds	r3, #176	; 0xb0
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4413      	add	r3, r2
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	32b0      	adds	r2, #176	; 0xb0
 800af9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f002 fbda 	bl	800d75c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	32b0      	adds	r2, #176	; 0xb0
 800afb2:	2100      	movs	r1, #0
 800afb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20000097 	.word	0x20000097
 800afd0:	20000098 	.word	0x20000098
 800afd4:	20000099 	.word	0x20000099

0800afd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	32b0      	adds	r2, #176	; 0xb0
 800afec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aff2:	2300      	movs	r3, #0
 800aff4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aff6:	2300      	movs	r3, #0
 800aff8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b004:	2303      	movs	r3, #3
 800b006:	e0bf      	b.n	800b188 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b010:	2b00      	cmp	r3, #0
 800b012:	d050      	beq.n	800b0b6 <USBD_CDC_Setup+0xde>
 800b014:	2b20      	cmp	r3, #32
 800b016:	f040 80af 	bne.w	800b178 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	88db      	ldrh	r3, [r3, #6]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d03a      	beq.n	800b098 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	b25b      	sxtb	r3, r3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	da1b      	bge.n	800b064 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	33b0      	adds	r3, #176	; 0xb0
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b042:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	88d2      	ldrh	r2, [r2, #6]
 800b048:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	88db      	ldrh	r3, [r3, #6]
 800b04e:	2b07      	cmp	r3, #7
 800b050:	bf28      	it	cs
 800b052:	2307      	movcs	r3, #7
 800b054:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	89fa      	ldrh	r2, [r7, #14]
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f001 fd21 	bl	800caa4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b062:	e090      	b.n	800b186 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	785a      	ldrb	r2, [r3, #1]
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	88db      	ldrh	r3, [r3, #6]
 800b072:	2b3f      	cmp	r3, #63	; 0x3f
 800b074:	d803      	bhi.n	800b07e <USBD_CDC_Setup+0xa6>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	88db      	ldrh	r3, [r3, #6]
 800b07a:	b2da      	uxtb	r2, r3
 800b07c:	e000      	b.n	800b080 <USBD_CDC_Setup+0xa8>
 800b07e:	2240      	movs	r2, #64	; 0x40
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b086:	6939      	ldr	r1, [r7, #16]
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b08e:	461a      	mov	r2, r3
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f001 fd33 	bl	800cafc <USBD_CtlPrepareRx>
      break;
 800b096:	e076      	b.n	800b186 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	33b0      	adds	r3, #176	; 0xb0
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	7850      	ldrb	r0, [r2, #1]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	4798      	blx	r3
      break;
 800b0b4:	e067      	b.n	800b186 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	785b      	ldrb	r3, [r3, #1]
 800b0ba:	2b0b      	cmp	r3, #11
 800b0bc:	d851      	bhi.n	800b162 <USBD_CDC_Setup+0x18a>
 800b0be:	a201      	add	r2, pc, #4	; (adr r2, 800b0c4 <USBD_CDC_Setup+0xec>)
 800b0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c4:	0800b0f5 	.word	0x0800b0f5
 800b0c8:	0800b171 	.word	0x0800b171
 800b0cc:	0800b163 	.word	0x0800b163
 800b0d0:	0800b163 	.word	0x0800b163
 800b0d4:	0800b163 	.word	0x0800b163
 800b0d8:	0800b163 	.word	0x0800b163
 800b0dc:	0800b163 	.word	0x0800b163
 800b0e0:	0800b163 	.word	0x0800b163
 800b0e4:	0800b163 	.word	0x0800b163
 800b0e8:	0800b163 	.word	0x0800b163
 800b0ec:	0800b11f 	.word	0x0800b11f
 800b0f0:	0800b149 	.word	0x0800b149
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d107      	bne.n	800b110 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b100:	f107 030a 	add.w	r3, r7, #10
 800b104:	2202      	movs	r2, #2
 800b106:	4619      	mov	r1, r3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f001 fccb 	bl	800caa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b10e:	e032      	b.n	800b176 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f001 fc55 	bl	800c9c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b118:	2303      	movs	r3, #3
 800b11a:	75fb      	strb	r3, [r7, #23]
          break;
 800b11c:	e02b      	b.n	800b176 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b03      	cmp	r3, #3
 800b128:	d107      	bne.n	800b13a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b12a:	f107 030d 	add.w	r3, r7, #13
 800b12e:	2201      	movs	r2, #1
 800b130:	4619      	mov	r1, r3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f001 fcb6 	bl	800caa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b138:	e01d      	b.n	800b176 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f001 fc40 	bl	800c9c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b142:	2303      	movs	r3, #3
 800b144:	75fb      	strb	r3, [r7, #23]
          break;
 800b146:	e016      	b.n	800b176 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	2b03      	cmp	r3, #3
 800b152:	d00f      	beq.n	800b174 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f001 fc33 	bl	800c9c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b15c:	2303      	movs	r3, #3
 800b15e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b160:	e008      	b.n	800b174 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f001 fc2c 	bl	800c9c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b16a:	2303      	movs	r3, #3
 800b16c:	75fb      	strb	r3, [r7, #23]
          break;
 800b16e:	e002      	b.n	800b176 <USBD_CDC_Setup+0x19e>
          break;
 800b170:	bf00      	nop
 800b172:	e008      	b.n	800b186 <USBD_CDC_Setup+0x1ae>
          break;
 800b174:	bf00      	nop
      }
      break;
 800b176:	e006      	b.n	800b186 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b178:	6839      	ldr	r1, [r7, #0]
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f001 fc21 	bl	800c9c2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b180:	2303      	movs	r3, #3
 800b182:	75fb      	strb	r3, [r7, #23]
      break;
 800b184:	bf00      	nop
  }

  return (uint8_t)ret;
 800b186:	7dfb      	ldrb	r3, [r7, #23]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3718      	adds	r7, #24
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	460b      	mov	r3, r1
 800b19a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	32b0      	adds	r2, #176	; 0xb0
 800b1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d101      	bne.n	800b1ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e065      	b.n	800b286 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	32b0      	adds	r2, #176	; 0xb0
 800b1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b1ca:	78fb      	ldrb	r3, [r7, #3]
 800b1cc:	f003 020f 	and.w	r2, r3, #15
 800b1d0:	6879      	ldr	r1, [r7, #4]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4413      	add	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	440b      	add	r3, r1
 800b1dc:	3318      	adds	r3, #24
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d02f      	beq.n	800b244 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b1e4:	78fb      	ldrb	r3, [r7, #3]
 800b1e6:	f003 020f 	and.w	r2, r3, #15
 800b1ea:	6879      	ldr	r1, [r7, #4]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	440b      	add	r3, r1
 800b1f6:	3318      	adds	r3, #24
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	78fb      	ldrb	r3, [r7, #3]
 800b1fc:	f003 010f 	and.w	r1, r3, #15
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	460b      	mov	r3, r1
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	440b      	add	r3, r1
 800b208:	00db      	lsls	r3, r3, #3
 800b20a:	4403      	add	r3, r0
 800b20c:	3338      	adds	r3, #56	; 0x38
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	fbb2 f1f3 	udiv	r1, r2, r3
 800b214:	fb01 f303 	mul.w	r3, r1, r3
 800b218:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d112      	bne.n	800b244 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b21e:	78fb      	ldrb	r3, [r7, #3]
 800b220:	f003 020f 	and.w	r2, r3, #15
 800b224:	6879      	ldr	r1, [r7, #4]
 800b226:	4613      	mov	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4413      	add	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	440b      	add	r3, r1
 800b230:	3318      	adds	r3, #24
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b236:	78f9      	ldrb	r1, [r7, #3]
 800b238:	2300      	movs	r3, #0
 800b23a:	2200      	movs	r2, #0
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f002 f9c5 	bl	800d5cc <USBD_LL_Transmit>
 800b242:	e01f      	b.n	800b284 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	2200      	movs	r2, #0
 800b248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	33b0      	adds	r3, #176	; 0xb0
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d010      	beq.n	800b284 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	33b0      	adds	r3, #176	; 0xb0
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	4413      	add	r3, r2
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b280:	78fa      	ldrb	r2, [r7, #3]
 800b282:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b084      	sub	sp, #16
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	460b      	mov	r3, r1
 800b298:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	32b0      	adds	r2, #176	; 0xb0
 800b2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	32b0      	adds	r2, #176	; 0xb0
 800b2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e01a      	b.n	800b2f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b2c0:	78fb      	ldrb	r3, [r7, #3]
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f002 f9f1 	bl	800d6ac <USBD_LL_GetRxDataSize>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	33b0      	adds	r3, #176	; 0xb0
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	4413      	add	r3, r2
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	32b0      	adds	r2, #176	; 0xb0
 800b310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b314:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d101      	bne.n	800b320 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e025      	b.n	800b36c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	33b0      	adds	r3, #176	; 0xb0
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d01a      	beq.n	800b36a <USBD_CDC_EP0_RxReady+0x6c>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b33a:	2bff      	cmp	r3, #255	; 0xff
 800b33c:	d015      	beq.n	800b36a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	33b0      	adds	r3, #176	; 0xb0
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4413      	add	r3, r2
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b356:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b35e:	b292      	uxth	r2, r2
 800b360:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	22ff      	movs	r2, #255	; 0xff
 800b366:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b37c:	2182      	movs	r1, #130	; 0x82
 800b37e:	4818      	ldr	r0, [pc, #96]	; (800b3e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b380:	f000 fcbd 	bl	800bcfe <USBD_GetEpDesc>
 800b384:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b386:	2101      	movs	r1, #1
 800b388:	4815      	ldr	r0, [pc, #84]	; (800b3e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b38a:	f000 fcb8 	bl	800bcfe <USBD_GetEpDesc>
 800b38e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b390:	2181      	movs	r1, #129	; 0x81
 800b392:	4813      	ldr	r0, [pc, #76]	; (800b3e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b394:	f000 fcb3 	bl	800bcfe <USBD_GetEpDesc>
 800b398:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	2210      	movs	r2, #16
 800b3a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d006      	beq.n	800b3ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3b4:	711a      	strb	r2, [r3, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d006      	beq.n	800b3ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3c8:	711a      	strb	r2, [r3, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2243      	movs	r2, #67	; 0x43
 800b3d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3d4:	4b02      	ldr	r3, [pc, #8]	; (800b3e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3718      	adds	r7, #24
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	20000054 	.word	0x20000054

0800b3e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3ec:	2182      	movs	r1, #130	; 0x82
 800b3ee:	4818      	ldr	r0, [pc, #96]	; (800b450 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3f0:	f000 fc85 	bl	800bcfe <USBD_GetEpDesc>
 800b3f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3f6:	2101      	movs	r1, #1
 800b3f8:	4815      	ldr	r0, [pc, #84]	; (800b450 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3fa:	f000 fc80 	bl	800bcfe <USBD_GetEpDesc>
 800b3fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b400:	2181      	movs	r1, #129	; 0x81
 800b402:	4813      	ldr	r0, [pc, #76]	; (800b450 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b404:	f000 fc7b 	bl	800bcfe <USBD_GetEpDesc>
 800b408:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d002      	beq.n	800b416 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2210      	movs	r2, #16
 800b414:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d006      	beq.n	800b42a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	2200      	movs	r2, #0
 800b420:	711a      	strb	r2, [r3, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	f042 0202 	orr.w	r2, r2, #2
 800b428:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d006      	beq.n	800b43e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	711a      	strb	r2, [r3, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	f042 0202 	orr.w	r2, r2, #2
 800b43c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2243      	movs	r2, #67	; 0x43
 800b442:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b444:	4b02      	ldr	r3, [pc, #8]	; (800b450 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b446:	4618      	mov	r0, r3
 800b448:	3718      	adds	r7, #24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	20000054 	.word	0x20000054

0800b454 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b45c:	2182      	movs	r1, #130	; 0x82
 800b45e:	4818      	ldr	r0, [pc, #96]	; (800b4c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b460:	f000 fc4d 	bl	800bcfe <USBD_GetEpDesc>
 800b464:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b466:	2101      	movs	r1, #1
 800b468:	4815      	ldr	r0, [pc, #84]	; (800b4c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b46a:	f000 fc48 	bl	800bcfe <USBD_GetEpDesc>
 800b46e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b470:	2181      	movs	r1, #129	; 0x81
 800b472:	4813      	ldr	r0, [pc, #76]	; (800b4c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b474:	f000 fc43 	bl	800bcfe <USBD_GetEpDesc>
 800b478:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2210      	movs	r2, #16
 800b484:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d006      	beq.n	800b49a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	2200      	movs	r2, #0
 800b490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b494:	711a      	strb	r2, [r3, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d006      	beq.n	800b4ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4a8:	711a      	strb	r2, [r3, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2243      	movs	r2, #67	; 0x43
 800b4b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b4b4:	4b02      	ldr	r3, [pc, #8]	; (800b4c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3718      	adds	r7, #24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	20000054 	.word	0x20000054

0800b4c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	220a      	movs	r2, #10
 800b4d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b4d2:	4b03      	ldr	r3, [pc, #12]	; (800b4e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	20000010 	.word	0x20000010

0800b4e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d101      	bne.n	800b4f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	e009      	b.n	800b50c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	33b0      	adds	r3, #176	; 0xb0
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	4413      	add	r3, r2
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b518:	b480      	push	{r7}
 800b51a:	b087      	sub	sp, #28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	32b0      	adds	r2, #176	; 0xb0
 800b52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b532:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b53a:	2303      	movs	r3, #3
 800b53c:	e008      	b.n	800b550 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	371c      	adds	r7, #28
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	32b0      	adds	r2, #176	; 0xb0
 800b570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b574:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b57c:	2303      	movs	r3, #3
 800b57e:	e004      	b.n	800b58a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
	...

0800b598 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	32b0      	adds	r2, #176	; 0xb0
 800b5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d101      	bne.n	800b5be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	e025      	b.n	800b60a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d11f      	bne.n	800b608 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b5d0:	4b10      	ldr	r3, [pc, #64]	; (800b614 <USBD_CDC_TransmitPacket+0x7c>)
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	f003 020f 	and.w	r2, r3, #15
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4413      	add	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4403      	add	r3, r0
 800b5ea:	3318      	adds	r3, #24
 800b5ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b5ee:	4b09      	ldr	r3, [pc, #36]	; (800b614 <USBD_CDC_TransmitPacket+0x7c>)
 800b5f0:	7819      	ldrb	r1, [r3, #0]
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f001 ffe4 	bl	800d5cc <USBD_LL_Transmit>

    ret = USBD_OK;
 800b604:	2300      	movs	r3, #0
 800b606:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b608:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	20000097 	.word	0x20000097

0800b618 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	32b0      	adds	r2, #176	; 0xb0
 800b62a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b62e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	32b0      	adds	r2, #176	; 0xb0
 800b63a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d101      	bne.n	800b646 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b642:	2303      	movs	r3, #3
 800b644:	e018      	b.n	800b678 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	7c1b      	ldrb	r3, [r3, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10a      	bne.n	800b664 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b64e:	4b0c      	ldr	r3, [pc, #48]	; (800b680 <USBD_CDC_ReceivePacket+0x68>)
 800b650:	7819      	ldrb	r1, [r3, #0]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f001 ffed 	bl	800d63c <USBD_LL_PrepareReceive>
 800b662:	e008      	b.n	800b676 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b664:	4b06      	ldr	r3, [pc, #24]	; (800b680 <USBD_CDC_ReceivePacket+0x68>)
 800b666:	7819      	ldrb	r1, [r3, #0]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b66e:	2340      	movs	r3, #64	; 0x40
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f001 ffe3 	bl	800d63c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	20000098 	.word	0x20000098

0800b684 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	4613      	mov	r3, r2
 800b690:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d101      	bne.n	800b69c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b698:	2303      	movs	r3, #3
 800b69a:	e01f      	b.n	800b6dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d003      	beq.n	800b6c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	79fa      	ldrb	r2, [r7, #7]
 800b6ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f001 fda3 	bl	800d21c <USBD_LL_Init>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3718      	adds	r7, #24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d101      	bne.n	800b6fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	e025      	b.n	800b748 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	683a      	ldr	r2, [r7, #0]
 800b700:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	32ae      	adds	r2, #174	; 0xae
 800b70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00f      	beq.n	800b738 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	32ae      	adds	r2, #174	; 0xae
 800b722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b728:	f107 020e 	add.w	r2, r7, #14
 800b72c:	4610      	mov	r0, r2
 800b72e:	4798      	blx	r3
 800b730:	4602      	mov	r2, r0
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b73e:	1c5a      	adds	r2, r3, #1
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b746:	2300      	movs	r3, #0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f001 fdc1 	bl	800d2e0 <USBD_LL_Start>
 800b75e:	4603      	mov	r3, r0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b770:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b772:	4618      	mov	r0, r3
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	460b      	mov	r3, r1
 800b788:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b794:	2b00      	cmp	r3, #0
 800b796:	d009      	beq.n	800b7ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	78fa      	ldrb	r2, [r7, #3]
 800b7a2:	4611      	mov	r1, r2
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	4798      	blx	r3
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b084      	sub	sp, #16
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
 800b7be:	460b      	mov	r3, r1
 800b7c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	78fa      	ldrb	r2, [r7, #3]
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	4798      	blx	r3
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7fa:	6839      	ldr	r1, [r7, #0]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f001 f8a6 	bl	800c94e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b810:	461a      	mov	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b81e:	f003 031f 	and.w	r3, r3, #31
 800b822:	2b02      	cmp	r3, #2
 800b824:	d01a      	beq.n	800b85c <USBD_LL_SetupStage+0x72>
 800b826:	2b02      	cmp	r3, #2
 800b828:	d822      	bhi.n	800b870 <USBD_LL_SetupStage+0x86>
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d002      	beq.n	800b834 <USBD_LL_SetupStage+0x4a>
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d00a      	beq.n	800b848 <USBD_LL_SetupStage+0x5e>
 800b832:	e01d      	b.n	800b870 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b83a:	4619      	mov	r1, r3
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fad3 	bl	800bde8 <USBD_StdDevReq>
 800b842:	4603      	mov	r3, r0
 800b844:	73fb      	strb	r3, [r7, #15]
      break;
 800b846:	e020      	b.n	800b88a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fb3b 	bl	800becc <USBD_StdItfReq>
 800b856:	4603      	mov	r3, r0
 800b858:	73fb      	strb	r3, [r7, #15]
      break;
 800b85a:	e016      	b.n	800b88a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b862:	4619      	mov	r1, r3
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fb9d 	bl	800bfa4 <USBD_StdEPReq>
 800b86a:	4603      	mov	r3, r0
 800b86c:	73fb      	strb	r3, [r7, #15]
      break;
 800b86e:	e00c      	b.n	800b88a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b876:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	4619      	mov	r1, r3
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f001 fdd4 	bl	800d42c <USBD_LL_StallEP>
 800b884:	4603      	mov	r3, r0
 800b886:	73fb      	strb	r3, [r7, #15]
      break;
 800b888:	bf00      	nop
  }

  return ret;
 800b88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	460b      	mov	r3, r1
 800b89e:	607a      	str	r2, [r7, #4]
 800b8a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b8a6:	7afb      	ldrb	r3, [r7, #11]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d16e      	bne.n	800b98a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b8b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8ba:	2b03      	cmp	r3, #3
 800b8bc:	f040 8098 	bne.w	800b9f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d913      	bls.n	800b8f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	689a      	ldr	r2, [r3, #8]
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	1ad2      	subs	r2, r2, r3
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	68da      	ldr	r2, [r3, #12]
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	bf28      	it	cs
 800b8e6:	4613      	movcs	r3, r2
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	6879      	ldr	r1, [r7, #4]
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f001 f922 	bl	800cb36 <USBD_CtlContinueRx>
 800b8f2:	e07d      	b.n	800b9f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8fa:	f003 031f 	and.w	r3, r3, #31
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d014      	beq.n	800b92c <USBD_LL_DataOutStage+0x98>
 800b902:	2b02      	cmp	r3, #2
 800b904:	d81d      	bhi.n	800b942 <USBD_LL_DataOutStage+0xae>
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <USBD_LL_DataOutStage+0x7c>
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d003      	beq.n	800b916 <USBD_LL_DataOutStage+0x82>
 800b90e:	e018      	b.n	800b942 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b910:	2300      	movs	r3, #0
 800b912:	75bb      	strb	r3, [r7, #22]
            break;
 800b914:	e018      	b.n	800b948 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	4619      	mov	r1, r3
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f000 f9d2 	bl	800bcca <USBD_CoreFindIF>
 800b926:	4603      	mov	r3, r0
 800b928:	75bb      	strb	r3, [r7, #22]
            break;
 800b92a:	e00d      	b.n	800b948 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b932:	b2db      	uxtb	r3, r3
 800b934:	4619      	mov	r1, r3
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f000 f9d4 	bl	800bce4 <USBD_CoreFindEP>
 800b93c:	4603      	mov	r3, r0
 800b93e:	75bb      	strb	r3, [r7, #22]
            break;
 800b940:	e002      	b.n	800b948 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b942:	2300      	movs	r3, #0
 800b944:	75bb      	strb	r3, [r7, #22]
            break;
 800b946:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b948:	7dbb      	ldrb	r3, [r7, #22]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d119      	bne.n	800b982 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b03      	cmp	r3, #3
 800b958:	d113      	bne.n	800b982 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b95a:	7dba      	ldrb	r2, [r7, #22]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	32ae      	adds	r2, #174	; 0xae
 800b960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00b      	beq.n	800b982 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b96a:	7dba      	ldrb	r2, [r7, #22]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b972:	7dba      	ldrb	r2, [r7, #22]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	32ae      	adds	r2, #174	; 0xae
 800b978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f001 f8e8 	bl	800cb58 <USBD_CtlSendStatus>
 800b988:	e032      	b.n	800b9f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b98a:	7afb      	ldrb	r3, [r7, #11]
 800b98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b990:	b2db      	uxtb	r3, r3
 800b992:	4619      	mov	r1, r3
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f000 f9a5 	bl	800bce4 <USBD_CoreFindEP>
 800b99a:	4603      	mov	r3, r0
 800b99c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b99e:	7dbb      	ldrb	r3, [r7, #22]
 800b9a0:	2bff      	cmp	r3, #255	; 0xff
 800b9a2:	d025      	beq.n	800b9f0 <USBD_LL_DataOutStage+0x15c>
 800b9a4:	7dbb      	ldrb	r3, [r7, #22]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d122      	bne.n	800b9f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b03      	cmp	r3, #3
 800b9b4:	d117      	bne.n	800b9e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b9b6:	7dba      	ldrb	r2, [r7, #22]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	32ae      	adds	r2, #174	; 0xae
 800b9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00f      	beq.n	800b9e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b9c6:	7dba      	ldrb	r2, [r7, #22]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b9ce:	7dba      	ldrb	r2, [r7, #22]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	32ae      	adds	r2, #174	; 0xae
 800b9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	7afa      	ldrb	r2, [r7, #11]
 800b9dc:	4611      	mov	r1, r2
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	4798      	blx	r3
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b9e6:	7dfb      	ldrb	r3, [r7, #23]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	e000      	b.n	800b9f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3718      	adds	r7, #24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b086      	sub	sp, #24
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	460b      	mov	r3, r1
 800ba04:	607a      	str	r2, [r7, #4]
 800ba06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ba08:	7afb      	ldrb	r3, [r7, #11]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d16f      	bne.n	800baee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	3314      	adds	r3, #20
 800ba12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d15a      	bne.n	800bad4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	689a      	ldr	r2, [r3, #8]
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d914      	bls.n	800ba54 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	689a      	ldr	r2, [r3, #8]
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	1ad2      	subs	r2, r2, r3
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	6879      	ldr	r1, [r7, #4]
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f001 f84a 	bl	800cada <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba46:	2300      	movs	r3, #0
 800ba48:	2200      	movs	r2, #0
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f001 fdf5 	bl	800d63c <USBD_LL_PrepareReceive>
 800ba52:	e03f      	b.n	800bad4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	68da      	ldr	r2, [r3, #12]
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d11c      	bne.n	800ba9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	685a      	ldr	r2, [r3, #4]
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d316      	bcc.n	800ba9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	685a      	ldr	r2, [r3, #4]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d20f      	bcs.n	800ba9a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f001 f82b 	bl	800cada <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2100      	movs	r1, #0
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f001 fdd2 	bl	800d63c <USBD_LL_PrepareReceive>
 800ba98:	e01c      	b.n	800bad4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b03      	cmp	r3, #3
 800baa4:	d10f      	bne.n	800bac6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d009      	beq.n	800bac6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bac6:	2180      	movs	r1, #128	; 0x80
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f001 fcaf 	bl	800d42c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f001 f855 	bl	800cb7e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d03a      	beq.n	800bb54 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f7ff fe42 	bl	800b768 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800baec:	e032      	b.n	800bb54 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800baee:	7afb      	ldrb	r3, [r7, #11]
 800baf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	4619      	mov	r1, r3
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f000 f8f3 	bl	800bce4 <USBD_CoreFindEP>
 800bafe:	4603      	mov	r3, r0
 800bb00:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb02:	7dfb      	ldrb	r3, [r7, #23]
 800bb04:	2bff      	cmp	r3, #255	; 0xff
 800bb06:	d025      	beq.n	800bb54 <USBD_LL_DataInStage+0x15a>
 800bb08:	7dfb      	ldrb	r3, [r7, #23]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d122      	bne.n	800bb54 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	d11c      	bne.n	800bb54 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bb1a:	7dfa      	ldrb	r2, [r7, #23]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	32ae      	adds	r2, #174	; 0xae
 800bb20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d014      	beq.n	800bb54 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bb2a:	7dfa      	ldrb	r2, [r7, #23]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bb32:	7dfa      	ldrb	r2, [r7, #23]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	32ae      	adds	r2, #174	; 0xae
 800bb38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	7afa      	ldrb	r2, [r7, #11]
 800bb40:	4611      	mov	r1, r2
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	4798      	blx	r3
 800bb46:	4603      	mov	r3, r0
 800bb48:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bb4a:	7dbb      	ldrb	r3, [r7, #22]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bb50:	7dbb      	ldrb	r3, [r7, #22]
 800bb52:	e000      	b.n	800bb56 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3718      	adds	r7, #24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b084      	sub	sp, #16
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb66:	2300      	movs	r3, #0
 800bb68:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d014      	beq.n	800bbc4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00e      	beq.n	800bbc4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	6852      	ldr	r2, [r2, #4]
 800bbb2:	b2d2      	uxtb	r2, r2
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	4798      	blx	r3
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d001      	beq.n	800bbc4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbc4:	2340      	movs	r3, #64	; 0x40
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	2100      	movs	r1, #0
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f001 fbba 	bl	800d344 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2240      	movs	r2, #64	; 0x40
 800bbdc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbe0:	2340      	movs	r3, #64	; 0x40
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2180      	movs	r1, #128	; 0x80
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f001 fbac 	bl	800d344 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2240      	movs	r2, #64	; 0x40
 800bbf6:	621a      	str	r2, [r3, #32]

  return ret;
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc02:	b480      	push	{r7}
 800bc04:	b083      	sub	sp, #12
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	78fa      	ldrb	r2, [r7, #3]
 800bc12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc22:	b480      	push	{r7}
 800bc24:	b083      	sub	sp, #12
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b04      	cmp	r3, #4
 800bc34:	d006      	beq.n	800bc44 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2204      	movs	r2, #4
 800bc48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	2b04      	cmp	r3, #4
 800bc6c:	d106      	bne.n	800bc7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bc74:	b2da      	uxtb	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b082      	sub	sp, #8
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	2b03      	cmp	r3, #3
 800bc9c:	d110      	bne.n	800bcc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00b      	beq.n	800bcc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcae:	69db      	ldr	r3, [r3, #28]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d005      	beq.n	800bcc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcba:	69db      	ldr	r3, [r3, #28]
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcf0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	370c      	adds	r7, #12
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr

0800bcfe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b086      	sub	sp, #24
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	460b      	mov	r3, r1
 800bd08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd12:	2300      	movs	r3, #0
 800bd14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	885b      	ldrh	r3, [r3, #2]
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d920      	bls.n	800bd68 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd2e:	e013      	b.n	800bd58 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd30:	f107 030a 	add.w	r3, r7, #10
 800bd34:	4619      	mov	r1, r3
 800bd36:	6978      	ldr	r0, [r7, #20]
 800bd38:	f000 f81b 	bl	800bd72 <USBD_GetNextDesc>
 800bd3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	785b      	ldrb	r3, [r3, #1]
 800bd42:	2b05      	cmp	r3, #5
 800bd44:	d108      	bne.n	800bd58 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	789b      	ldrb	r3, [r3, #2]
 800bd4e:	78fa      	ldrb	r2, [r7, #3]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d008      	beq.n	800bd66 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	885b      	ldrh	r3, [r3, #2]
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	897b      	ldrh	r3, [r7, #10]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d8e5      	bhi.n	800bd30 <USBD_GetEpDesc+0x32>
 800bd64:	e000      	b.n	800bd68 <USBD_GetEpDesc+0x6a>
          break;
 800bd66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd68:	693b      	ldr	r3, [r7, #16]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b085      	sub	sp, #20
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	881a      	ldrh	r2, [r3, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	4413      	add	r3, r2
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	461a      	mov	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3714      	adds	r7, #20
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b087      	sub	sp, #28
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdca:	8a3b      	ldrh	r3, [r7, #16]
 800bdcc:	021b      	lsls	r3, r3, #8
 800bdce:	b21a      	sxth	r2, r3
 800bdd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	b21b      	sxth	r3, r3
 800bdd8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdda:	89fb      	ldrh	r3, [r7, #14]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	371c      	adds	r7, #28
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bdfe:	2b40      	cmp	r3, #64	; 0x40
 800be00:	d005      	beq.n	800be0e <USBD_StdDevReq+0x26>
 800be02:	2b40      	cmp	r3, #64	; 0x40
 800be04:	d857      	bhi.n	800beb6 <USBD_StdDevReq+0xce>
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00f      	beq.n	800be2a <USBD_StdDevReq+0x42>
 800be0a:	2b20      	cmp	r3, #32
 800be0c:	d153      	bne.n	800beb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	32ae      	adds	r2, #174	; 0xae
 800be18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	4798      	blx	r3
 800be24:	4603      	mov	r3, r0
 800be26:	73fb      	strb	r3, [r7, #15]
      break;
 800be28:	e04a      	b.n	800bec0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	785b      	ldrb	r3, [r3, #1]
 800be2e:	2b09      	cmp	r3, #9
 800be30:	d83b      	bhi.n	800beaa <USBD_StdDevReq+0xc2>
 800be32:	a201      	add	r2, pc, #4	; (adr r2, 800be38 <USBD_StdDevReq+0x50>)
 800be34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be38:	0800be8d 	.word	0x0800be8d
 800be3c:	0800bea1 	.word	0x0800bea1
 800be40:	0800beab 	.word	0x0800beab
 800be44:	0800be97 	.word	0x0800be97
 800be48:	0800beab 	.word	0x0800beab
 800be4c:	0800be6b 	.word	0x0800be6b
 800be50:	0800be61 	.word	0x0800be61
 800be54:	0800beab 	.word	0x0800beab
 800be58:	0800be83 	.word	0x0800be83
 800be5c:	0800be75 	.word	0x0800be75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fa3c 	bl	800c2e0 <USBD_GetDescriptor>
          break;
 800be68:	e024      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fbcb 	bl	800c608 <USBD_SetAddress>
          break;
 800be72:	e01f      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fc0a 	bl	800c690 <USBD_SetConfig>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73fb      	strb	r3, [r7, #15]
          break;
 800be80:	e018      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be82:	6839      	ldr	r1, [r7, #0]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fcad 	bl	800c7e4 <USBD_GetConfig>
          break;
 800be8a:	e013      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fcde 	bl	800c850 <USBD_GetStatus>
          break;
 800be94:	e00e      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fd0d 	bl	800c8b8 <USBD_SetFeature>
          break;
 800be9e:	e009      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bea0:	6839      	ldr	r1, [r7, #0]
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fd31 	bl	800c90a <USBD_ClrFeature>
          break;
 800bea8:	e004      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fd88 	bl	800c9c2 <USBD_CtlError>
          break;
 800beb2:	bf00      	nop
      }
      break;
 800beb4:	e004      	b.n	800bec0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fd82 	bl	800c9c2 <USBD_CtlError>
      break;
 800bebe:	bf00      	nop
  }

  return ret;
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop

0800becc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bee2:	2b40      	cmp	r3, #64	; 0x40
 800bee4:	d005      	beq.n	800bef2 <USBD_StdItfReq+0x26>
 800bee6:	2b40      	cmp	r3, #64	; 0x40
 800bee8:	d852      	bhi.n	800bf90 <USBD_StdItfReq+0xc4>
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <USBD_StdItfReq+0x26>
 800beee:	2b20      	cmp	r3, #32
 800bef0:	d14e      	bne.n	800bf90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	3b01      	subs	r3, #1
 800befc:	2b02      	cmp	r3, #2
 800befe:	d840      	bhi.n	800bf82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	889b      	ldrh	r3, [r3, #4]
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d836      	bhi.n	800bf78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	889b      	ldrh	r3, [r3, #4]
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	4619      	mov	r1, r3
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff fed9 	bl	800bcca <USBD_CoreFindIF>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf1c:	7bbb      	ldrb	r3, [r7, #14]
 800bf1e:	2bff      	cmp	r3, #255	; 0xff
 800bf20:	d01d      	beq.n	800bf5e <USBD_StdItfReq+0x92>
 800bf22:	7bbb      	ldrb	r3, [r7, #14]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d11a      	bne.n	800bf5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf28:	7bba      	ldrb	r2, [r7, #14]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	32ae      	adds	r2, #174	; 0xae
 800bf2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00f      	beq.n	800bf58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf38:	7bba      	ldrb	r2, [r7, #14]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf40:	7bba      	ldrb	r2, [r7, #14]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	32ae      	adds	r2, #174	; 0xae
 800bf46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	4798      	blx	r3
 800bf52:	4603      	mov	r3, r0
 800bf54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf56:	e004      	b.n	800bf62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf5c:	e001      	b.n	800bf62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	88db      	ldrh	r3, [r3, #6]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d110      	bne.n	800bf8c <USBD_StdItfReq+0xc0>
 800bf6a:	7bfb      	ldrb	r3, [r7, #15]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10d      	bne.n	800bf8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fdf1 	bl	800cb58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf76:	e009      	b.n	800bf8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fd21 	bl	800c9c2 <USBD_CtlError>
          break;
 800bf80:	e004      	b.n	800bf8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 fd1c 	bl	800c9c2 <USBD_CtlError>
          break;
 800bf8a:	e000      	b.n	800bf8e <USBD_StdItfReq+0xc2>
          break;
 800bf8c:	bf00      	nop
      }
      break;
 800bf8e:	e004      	b.n	800bf9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf90:	6839      	ldr	r1, [r7, #0]
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 fd15 	bl	800c9c2 <USBD_CtlError>
      break;
 800bf98:	bf00      	nop
  }

  return ret;
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	889b      	ldrh	r3, [r3, #4]
 800bfb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfc0:	2b40      	cmp	r3, #64	; 0x40
 800bfc2:	d007      	beq.n	800bfd4 <USBD_StdEPReq+0x30>
 800bfc4:	2b40      	cmp	r3, #64	; 0x40
 800bfc6:	f200 817f 	bhi.w	800c2c8 <USBD_StdEPReq+0x324>
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d02a      	beq.n	800c024 <USBD_StdEPReq+0x80>
 800bfce:	2b20      	cmp	r3, #32
 800bfd0:	f040 817a 	bne.w	800c2c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f7ff fe83 	bl	800bce4 <USBD_CoreFindEP>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfe2:	7b7b      	ldrb	r3, [r7, #13]
 800bfe4:	2bff      	cmp	r3, #255	; 0xff
 800bfe6:	f000 8174 	beq.w	800c2d2 <USBD_StdEPReq+0x32e>
 800bfea:	7b7b      	ldrb	r3, [r7, #13]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f040 8170 	bne.w	800c2d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bff2:	7b7a      	ldrb	r2, [r7, #13]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bffa:	7b7a      	ldrb	r2, [r7, #13]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	32ae      	adds	r2, #174	; 0xae
 800c000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 8163 	beq.w	800c2d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c00c:	7b7a      	ldrb	r2, [r7, #13]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	32ae      	adds	r2, #174	; 0xae
 800c012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	4798      	blx	r3
 800c01e:	4603      	mov	r3, r0
 800c020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c022:	e156      	b.n	800c2d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	785b      	ldrb	r3, [r3, #1]
 800c028:	2b03      	cmp	r3, #3
 800c02a:	d008      	beq.n	800c03e <USBD_StdEPReq+0x9a>
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	f300 8145 	bgt.w	800c2bc <USBD_StdEPReq+0x318>
 800c032:	2b00      	cmp	r3, #0
 800c034:	f000 809b 	beq.w	800c16e <USBD_StdEPReq+0x1ca>
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d03c      	beq.n	800c0b6 <USBD_StdEPReq+0x112>
 800c03c:	e13e      	b.n	800c2bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c044:	b2db      	uxtb	r3, r3
 800c046:	2b02      	cmp	r3, #2
 800c048:	d002      	beq.n	800c050 <USBD_StdEPReq+0xac>
 800c04a:	2b03      	cmp	r3, #3
 800c04c:	d016      	beq.n	800c07c <USBD_StdEPReq+0xd8>
 800c04e:	e02c      	b.n	800c0aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c050:	7bbb      	ldrb	r3, [r7, #14]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00d      	beq.n	800c072 <USBD_StdEPReq+0xce>
 800c056:	7bbb      	ldrb	r3, [r7, #14]
 800c058:	2b80      	cmp	r3, #128	; 0x80
 800c05a:	d00a      	beq.n	800c072 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	4619      	mov	r1, r3
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f001 f9e3 	bl	800d42c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c066:	2180      	movs	r1, #128	; 0x80
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f001 f9df 	bl	800d42c <USBD_LL_StallEP>
 800c06e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c070:	e020      	b.n	800c0b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fca4 	bl	800c9c2 <USBD_CtlError>
              break;
 800c07a:	e01b      	b.n	800c0b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	885b      	ldrh	r3, [r3, #2]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d10e      	bne.n	800c0a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c084:	7bbb      	ldrb	r3, [r7, #14]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00b      	beq.n	800c0a2 <USBD_StdEPReq+0xfe>
 800c08a:	7bbb      	ldrb	r3, [r7, #14]
 800c08c:	2b80      	cmp	r3, #128	; 0x80
 800c08e:	d008      	beq.n	800c0a2 <USBD_StdEPReq+0xfe>
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	88db      	ldrh	r3, [r3, #6]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d104      	bne.n	800c0a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c098:	7bbb      	ldrb	r3, [r7, #14]
 800c09a:	4619      	mov	r1, r3
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f001 f9c5 	bl	800d42c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fd58 	bl	800cb58 <USBD_CtlSendStatus>

              break;
 800c0a8:	e004      	b.n	800c0b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fc88 	bl	800c9c2 <USBD_CtlError>
              break;
 800c0b2:	bf00      	nop
          }
          break;
 800c0b4:	e107      	b.n	800c2c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d002      	beq.n	800c0c8 <USBD_StdEPReq+0x124>
 800c0c2:	2b03      	cmp	r3, #3
 800c0c4:	d016      	beq.n	800c0f4 <USBD_StdEPReq+0x150>
 800c0c6:	e04b      	b.n	800c160 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00d      	beq.n	800c0ea <USBD_StdEPReq+0x146>
 800c0ce:	7bbb      	ldrb	r3, [r7, #14]
 800c0d0:	2b80      	cmp	r3, #128	; 0x80
 800c0d2:	d00a      	beq.n	800c0ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f001 f9a7 	bl	800d42c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0de:	2180      	movs	r1, #128	; 0x80
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f001 f9a3 	bl	800d42c <USBD_LL_StallEP>
 800c0e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0e8:	e040      	b.n	800c16c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 fc68 	bl	800c9c2 <USBD_CtlError>
              break;
 800c0f2:	e03b      	b.n	800c16c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	885b      	ldrh	r3, [r3, #2]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d136      	bne.n	800c16a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c102:	2b00      	cmp	r3, #0
 800c104:	d004      	beq.n	800c110 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c106:	7bbb      	ldrb	r3, [r7, #14]
 800c108:	4619      	mov	r1, r3
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f001 f9c4 	bl	800d498 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 fd21 	bl	800cb58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c116:	7bbb      	ldrb	r3, [r7, #14]
 800c118:	4619      	mov	r1, r3
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7ff fde2 	bl	800bce4 <USBD_CoreFindEP>
 800c120:	4603      	mov	r3, r0
 800c122:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c124:	7b7b      	ldrb	r3, [r7, #13]
 800c126:	2bff      	cmp	r3, #255	; 0xff
 800c128:	d01f      	beq.n	800c16a <USBD_StdEPReq+0x1c6>
 800c12a:	7b7b      	ldrb	r3, [r7, #13]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d11c      	bne.n	800c16a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c130:	7b7a      	ldrb	r2, [r7, #13]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c138:	7b7a      	ldrb	r2, [r7, #13]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	32ae      	adds	r2, #174	; 0xae
 800c13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d010      	beq.n	800c16a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c148:	7b7a      	ldrb	r2, [r7, #13]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	32ae      	adds	r2, #174	; 0xae
 800c14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	4798      	blx	r3
 800c15a:	4603      	mov	r3, r0
 800c15c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c15e:	e004      	b.n	800c16a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c160:	6839      	ldr	r1, [r7, #0]
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fc2d 	bl	800c9c2 <USBD_CtlError>
              break;
 800c168:	e000      	b.n	800c16c <USBD_StdEPReq+0x1c8>
              break;
 800c16a:	bf00      	nop
          }
          break;
 800c16c:	e0ab      	b.n	800c2c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b02      	cmp	r3, #2
 800c178:	d002      	beq.n	800c180 <USBD_StdEPReq+0x1dc>
 800c17a:	2b03      	cmp	r3, #3
 800c17c:	d032      	beq.n	800c1e4 <USBD_StdEPReq+0x240>
 800c17e:	e097      	b.n	800c2b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d007      	beq.n	800c196 <USBD_StdEPReq+0x1f2>
 800c186:	7bbb      	ldrb	r3, [r7, #14]
 800c188:	2b80      	cmp	r3, #128	; 0x80
 800c18a:	d004      	beq.n	800c196 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fc17 	bl	800c9c2 <USBD_CtlError>
                break;
 800c194:	e091      	b.n	800c2ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	da0b      	bge.n	800c1b6 <USBD_StdEPReq+0x212>
 800c19e:	7bbb      	ldrb	r3, [r7, #14]
 800c1a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	4413      	add	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	3310      	adds	r3, #16
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	e00b      	b.n	800c1ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1b6:	7bbb      	ldrb	r3, [r7, #14]
 800c1b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1bc:	4613      	mov	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4413      	add	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2202      	movs	r2, #2
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fc61 	bl	800caa4 <USBD_CtlSendData>
              break;
 800c1e2:	e06a      	b.n	800c2ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	da11      	bge.n	800c210 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
 800c1ee:	f003 020f 	and.w	r2, r3, #15
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	440b      	add	r3, r1
 800c1fe:	3324      	adds	r3, #36	; 0x24
 800c200:	881b      	ldrh	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d117      	bne.n	800c236 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 fbda 	bl	800c9c2 <USBD_CtlError>
                  break;
 800c20e:	e054      	b.n	800c2ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c210:	7bbb      	ldrb	r3, [r7, #14]
 800c212:	f003 020f 	and.w	r2, r3, #15
 800c216:	6879      	ldr	r1, [r7, #4]
 800c218:	4613      	mov	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	440b      	add	r3, r1
 800c222:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c226:	881b      	ldrh	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d104      	bne.n	800c236 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fbc7 	bl	800c9c2 <USBD_CtlError>
                  break;
 800c234:	e041      	b.n	800c2ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c236:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	da0b      	bge.n	800c256 <USBD_StdEPReq+0x2b2>
 800c23e:	7bbb      	ldrb	r3, [r7, #14]
 800c240:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c244:	4613      	mov	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	3310      	adds	r3, #16
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	4413      	add	r3, r2
 800c252:	3304      	adds	r3, #4
 800c254:	e00b      	b.n	800c26e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c256:	7bbb      	ldrb	r3, [r7, #14]
 800c258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c25c:	4613      	mov	r3, r2
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	4413      	add	r3, r2
 800c26c:	3304      	adds	r3, #4
 800c26e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c270:	7bbb      	ldrb	r3, [r7, #14]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d002      	beq.n	800c27c <USBD_StdEPReq+0x2d8>
 800c276:	7bbb      	ldrb	r3, [r7, #14]
 800c278:	2b80      	cmp	r3, #128	; 0x80
 800c27a:	d103      	bne.n	800c284 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	2200      	movs	r2, #0
 800c280:	601a      	str	r2, [r3, #0]
 800c282:	e00e      	b.n	800c2a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c284:	7bbb      	ldrb	r3, [r7, #14]
 800c286:	4619      	mov	r1, r3
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f001 f93b 	bl	800d504 <USBD_LL_IsStallEP>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d003      	beq.n	800c29c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	2201      	movs	r2, #1
 800c298:	601a      	str	r2, [r3, #0]
 800c29a:	e002      	b.n	800c2a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2202      	movs	r2, #2
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 fbfb 	bl	800caa4 <USBD_CtlSendData>
              break;
 800c2ae:	e004      	b.n	800c2ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fb85 	bl	800c9c2 <USBD_CtlError>
              break;
 800c2b8:	bf00      	nop
          }
          break;
 800c2ba:	e004      	b.n	800c2c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fb7f 	bl	800c9c2 <USBD_CtlError>
          break;
 800c2c4:	bf00      	nop
      }
      break;
 800c2c6:	e005      	b.n	800c2d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2c8:	6839      	ldr	r1, [r7, #0]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 fb79 	bl	800c9c2 <USBD_CtlError>
      break;
 800c2d0:	e000      	b.n	800c2d4 <USBD_StdEPReq+0x330>
      break;
 800c2d2:	bf00      	nop
  }

  return ret;
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
	...

0800c2e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	885b      	ldrh	r3, [r3, #2]
 800c2fa:	0a1b      	lsrs	r3, r3, #8
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	3b01      	subs	r3, #1
 800c300:	2b0e      	cmp	r3, #14
 800c302:	f200 8152 	bhi.w	800c5aa <USBD_GetDescriptor+0x2ca>
 800c306:	a201      	add	r2, pc, #4	; (adr r2, 800c30c <USBD_GetDescriptor+0x2c>)
 800c308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30c:	0800c37d 	.word	0x0800c37d
 800c310:	0800c395 	.word	0x0800c395
 800c314:	0800c3d5 	.word	0x0800c3d5
 800c318:	0800c5ab 	.word	0x0800c5ab
 800c31c:	0800c5ab 	.word	0x0800c5ab
 800c320:	0800c54b 	.word	0x0800c54b
 800c324:	0800c577 	.word	0x0800c577
 800c328:	0800c5ab 	.word	0x0800c5ab
 800c32c:	0800c5ab 	.word	0x0800c5ab
 800c330:	0800c5ab 	.word	0x0800c5ab
 800c334:	0800c5ab 	.word	0x0800c5ab
 800c338:	0800c5ab 	.word	0x0800c5ab
 800c33c:	0800c5ab 	.word	0x0800c5ab
 800c340:	0800c5ab 	.word	0x0800c5ab
 800c344:	0800c349 	.word	0x0800c349
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c34e:	69db      	ldr	r3, [r3, #28]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00b      	beq.n	800c36c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c35a:	69db      	ldr	r3, [r3, #28]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	7c12      	ldrb	r2, [r2, #16]
 800c360:	f107 0108 	add.w	r1, r7, #8
 800c364:	4610      	mov	r0, r2
 800c366:	4798      	blx	r3
 800c368:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c36a:	e126      	b.n	800c5ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fb27 	bl	800c9c2 <USBD_CtlError>
        err++;
 800c374:	7afb      	ldrb	r3, [r7, #11]
 800c376:	3301      	adds	r3, #1
 800c378:	72fb      	strb	r3, [r7, #11]
      break;
 800c37a:	e11e      	b.n	800c5ba <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	7c12      	ldrb	r2, [r2, #16]
 800c388:	f107 0108 	add.w	r1, r7, #8
 800c38c:	4610      	mov	r0, r2
 800c38e:	4798      	blx	r3
 800c390:	60f8      	str	r0, [r7, #12]
      break;
 800c392:	e112      	b.n	800c5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	7c1b      	ldrb	r3, [r3, #16]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10d      	bne.n	800c3b8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a4:	f107 0208 	add.w	r2, r7, #8
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	4798      	blx	r3
 800c3ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3b6:	e100      	b.n	800c5ba <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c0:	f107 0208 	add.w	r2, r7, #8
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	4798      	blx	r3
 800c3c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	2202      	movs	r2, #2
 800c3d0:	701a      	strb	r2, [r3, #0]
      break;
 800c3d2:	e0f2      	b.n	800c5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	885b      	ldrh	r3, [r3, #2]
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b05      	cmp	r3, #5
 800c3dc:	f200 80ac 	bhi.w	800c538 <USBD_GetDescriptor+0x258>
 800c3e0:	a201      	add	r2, pc, #4	; (adr r2, 800c3e8 <USBD_GetDescriptor+0x108>)
 800c3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e6:	bf00      	nop
 800c3e8:	0800c401 	.word	0x0800c401
 800c3ec:	0800c435 	.word	0x0800c435
 800c3f0:	0800c469 	.word	0x0800c469
 800c3f4:	0800c49d 	.word	0x0800c49d
 800c3f8:	0800c4d1 	.word	0x0800c4d1
 800c3fc:	0800c505 	.word	0x0800c505
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00b      	beq.n	800c424 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	7c12      	ldrb	r2, [r2, #16]
 800c418:	f107 0108 	add.w	r1, r7, #8
 800c41c:	4610      	mov	r0, r2
 800c41e:	4798      	blx	r3
 800c420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c422:	e091      	b.n	800c548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 facb 	bl	800c9c2 <USBD_CtlError>
            err++;
 800c42c:	7afb      	ldrb	r3, [r7, #11]
 800c42e:	3301      	adds	r3, #1
 800c430:	72fb      	strb	r3, [r7, #11]
          break;
 800c432:	e089      	b.n	800c548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00b      	beq.n	800c458 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	7c12      	ldrb	r2, [r2, #16]
 800c44c:	f107 0108 	add.w	r1, r7, #8
 800c450:	4610      	mov	r0, r2
 800c452:	4798      	blx	r3
 800c454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c456:	e077      	b.n	800c548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fab1 	bl	800c9c2 <USBD_CtlError>
            err++;
 800c460:	7afb      	ldrb	r3, [r7, #11]
 800c462:	3301      	adds	r3, #1
 800c464:	72fb      	strb	r3, [r7, #11]
          break;
 800c466:	e06f      	b.n	800c548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00b      	beq.n	800c48c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	7c12      	ldrb	r2, [r2, #16]
 800c480:	f107 0108 	add.w	r1, r7, #8
 800c484:	4610      	mov	r0, r2
 800c486:	4798      	blx	r3
 800c488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c48a:	e05d      	b.n	800c548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c48c:	6839      	ldr	r1, [r7, #0]
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 fa97 	bl	800c9c2 <USBD_CtlError>
            err++;
 800c494:	7afb      	ldrb	r3, [r7, #11]
 800c496:	3301      	adds	r3, #1
 800c498:	72fb      	strb	r3, [r7, #11]
          break;
 800c49a:	e055      	b.n	800c548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00b      	beq.n	800c4c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	7c12      	ldrb	r2, [r2, #16]
 800c4b4:	f107 0108 	add.w	r1, r7, #8
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	4798      	blx	r3
 800c4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4be:	e043      	b.n	800c548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fa7d 	bl	800c9c2 <USBD_CtlError>
            err++;
 800c4c8:	7afb      	ldrb	r3, [r7, #11]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ce:	e03b      	b.n	800c548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4d6:	695b      	ldr	r3, [r3, #20]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00b      	beq.n	800c4f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	7c12      	ldrb	r2, [r2, #16]
 800c4e8:	f107 0108 	add.w	r1, r7, #8
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	4798      	blx	r3
 800c4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4f2:	e029      	b.n	800c548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 fa63 	bl	800c9c2 <USBD_CtlError>
            err++;
 800c4fc:	7afb      	ldrb	r3, [r7, #11]
 800c4fe:	3301      	adds	r3, #1
 800c500:	72fb      	strb	r3, [r7, #11]
          break;
 800c502:	e021      	b.n	800c548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00b      	beq.n	800c528 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	7c12      	ldrb	r2, [r2, #16]
 800c51c:	f107 0108 	add.w	r1, r7, #8
 800c520:	4610      	mov	r0, r2
 800c522:	4798      	blx	r3
 800c524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c526:	e00f      	b.n	800c548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c528:	6839      	ldr	r1, [r7, #0]
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 fa49 	bl	800c9c2 <USBD_CtlError>
            err++;
 800c530:	7afb      	ldrb	r3, [r7, #11]
 800c532:	3301      	adds	r3, #1
 800c534:	72fb      	strb	r3, [r7, #11]
          break;
 800c536:	e007      	b.n	800c548 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fa41 	bl	800c9c2 <USBD_CtlError>
          err++;
 800c540:	7afb      	ldrb	r3, [r7, #11]
 800c542:	3301      	adds	r3, #1
 800c544:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c546:	bf00      	nop
      }
      break;
 800c548:	e037      	b.n	800c5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	7c1b      	ldrb	r3, [r3, #16]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d109      	bne.n	800c566 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c55a:	f107 0208 	add.w	r2, r7, #8
 800c55e:	4610      	mov	r0, r2
 800c560:	4798      	blx	r3
 800c562:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c564:	e029      	b.n	800c5ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fa2a 	bl	800c9c2 <USBD_CtlError>
        err++;
 800c56e:	7afb      	ldrb	r3, [r7, #11]
 800c570:	3301      	adds	r3, #1
 800c572:	72fb      	strb	r3, [r7, #11]
      break;
 800c574:	e021      	b.n	800c5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	7c1b      	ldrb	r3, [r3, #16]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10d      	bne.n	800c59a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c586:	f107 0208 	add.w	r2, r7, #8
 800c58a:	4610      	mov	r0, r2
 800c58c:	4798      	blx	r3
 800c58e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3301      	adds	r3, #1
 800c594:	2207      	movs	r2, #7
 800c596:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c598:	e00f      	b.n	800c5ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fa10 	bl	800c9c2 <USBD_CtlError>
        err++;
 800c5a2:	7afb      	ldrb	r3, [r7, #11]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	72fb      	strb	r3, [r7, #11]
      break;
 800c5a8:	e007      	b.n	800c5ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c5aa:	6839      	ldr	r1, [r7, #0]
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 fa08 	bl	800c9c2 <USBD_CtlError>
      err++;
 800c5b2:	7afb      	ldrb	r3, [r7, #11]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c5b8:	bf00      	nop
  }

  if (err != 0U)
 800c5ba:	7afb      	ldrb	r3, [r7, #11]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d11e      	bne.n	800c5fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	88db      	ldrh	r3, [r3, #6]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d016      	beq.n	800c5f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c5c8:	893b      	ldrh	r3, [r7, #8]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00e      	beq.n	800c5ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	88da      	ldrh	r2, [r3, #6]
 800c5d2:	893b      	ldrh	r3, [r7, #8]
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	bf28      	it	cs
 800c5d8:	4613      	movcs	r3, r2
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5de:	893b      	ldrh	r3, [r7, #8]
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	68f9      	ldr	r1, [r7, #12]
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fa5d 	bl	800caa4 <USBD_CtlSendData>
 800c5ea:	e009      	b.n	800c600 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f9e7 	bl	800c9c2 <USBD_CtlError>
 800c5f4:	e004      	b.n	800c600 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 faae 	bl	800cb58 <USBD_CtlSendStatus>
 800c5fc:	e000      	b.n	800c600 <USBD_GetDescriptor+0x320>
    return;
 800c5fe:	bf00      	nop
  }
}
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop

0800c608 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	889b      	ldrh	r3, [r3, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d131      	bne.n	800c67e <USBD_SetAddress+0x76>
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	88db      	ldrh	r3, [r3, #6]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d12d      	bne.n	800c67e <USBD_SetAddress+0x76>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	885b      	ldrh	r3, [r3, #2]
 800c626:	2b7f      	cmp	r3, #127	; 0x7f
 800c628:	d829      	bhi.n	800c67e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	885b      	ldrh	r3, [r3, #2]
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c634:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b03      	cmp	r3, #3
 800c640:	d104      	bne.n	800c64c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c642:	6839      	ldr	r1, [r7, #0]
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 f9bc 	bl	800c9c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c64a:	e01d      	b.n	800c688 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	7bfa      	ldrb	r2, [r7, #15]
 800c650:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c654:	7bfb      	ldrb	r3, [r7, #15]
 800c656:	4619      	mov	r1, r3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 ff81 	bl	800d560 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 fa7a 	bl	800cb58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c664:	7bfb      	ldrb	r3, [r7, #15]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d004      	beq.n	800c674 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2202      	movs	r2, #2
 800c66e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c672:	e009      	b.n	800c688 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c67c:	e004      	b.n	800c688 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c67e:	6839      	ldr	r1, [r7, #0]
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f99e 	bl	800c9c2 <USBD_CtlError>
  }
}
 800c686:	bf00      	nop
 800c688:	bf00      	nop
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c69a:	2300      	movs	r3, #0
 800c69c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	885b      	ldrh	r3, [r3, #2]
 800c6a2:	b2da      	uxtb	r2, r3
 800c6a4:	4b4e      	ldr	r3, [pc, #312]	; (800c7e0 <USBD_SetConfig+0x150>)
 800c6a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c6a8:	4b4d      	ldr	r3, [pc, #308]	; (800c7e0 <USBD_SetConfig+0x150>)
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d905      	bls.n	800c6bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 f985 	bl	800c9c2 <USBD_CtlError>
    return USBD_FAIL;
 800c6b8:	2303      	movs	r3, #3
 800c6ba:	e08c      	b.n	800c7d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d002      	beq.n	800c6ce <USBD_SetConfig+0x3e>
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	d029      	beq.n	800c720 <USBD_SetConfig+0x90>
 800c6cc:	e075      	b.n	800c7ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6ce:	4b44      	ldr	r3, [pc, #272]	; (800c7e0 <USBD_SetConfig+0x150>)
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d020      	beq.n	800c718 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6d6:	4b42      	ldr	r3, [pc, #264]	; (800c7e0 <USBD_SetConfig+0x150>)
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	461a      	mov	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6e0:	4b3f      	ldr	r3, [pc, #252]	; (800c7e0 <USBD_SetConfig+0x150>)
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f7ff f849 	bl	800b77e <USBD_SetClassConfig>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d008      	beq.n	800c708 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6f6:	6839      	ldr	r1, [r7, #0]
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 f962 	bl	800c9c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2202      	movs	r2, #2
 800c702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c706:	e065      	b.n	800c7d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 fa25 	bl	800cb58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2203      	movs	r2, #3
 800c712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c716:	e05d      	b.n	800c7d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fa1d 	bl	800cb58 <USBD_CtlSendStatus>
      break;
 800c71e:	e059      	b.n	800c7d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c720:	4b2f      	ldr	r3, [pc, #188]	; (800c7e0 <USBD_SetConfig+0x150>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d112      	bne.n	800c74e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2202      	movs	r2, #2
 800c72c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c730:	4b2b      	ldr	r3, [pc, #172]	; (800c7e0 <USBD_SetConfig+0x150>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	461a      	mov	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c73a:	4b29      	ldr	r3, [pc, #164]	; (800c7e0 <USBD_SetConfig+0x150>)
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	4619      	mov	r1, r3
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7ff f838 	bl	800b7b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fa06 	bl	800cb58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c74c:	e042      	b.n	800c7d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c74e:	4b24      	ldr	r3, [pc, #144]	; (800c7e0 <USBD_SetConfig+0x150>)
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	461a      	mov	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d02a      	beq.n	800c7b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	b2db      	uxtb	r3, r3
 800c762:	4619      	mov	r1, r3
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7ff f826 	bl	800b7b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c76a:	4b1d      	ldr	r3, [pc, #116]	; (800c7e0 <USBD_SetConfig+0x150>)
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	461a      	mov	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c774:	4b1a      	ldr	r3, [pc, #104]	; (800c7e0 <USBD_SetConfig+0x150>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7fe ffff 	bl	800b77e <USBD_SetClassConfig>
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00f      	beq.n	800c7aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c78a:	6839      	ldr	r1, [r7, #0]
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 f918 	bl	800c9c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	b2db      	uxtb	r3, r3
 800c798:	4619      	mov	r1, r3
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7ff f80b 	bl	800b7b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2202      	movs	r2, #2
 800c7a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c7a8:	e014      	b.n	800c7d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f9d4 	bl	800cb58 <USBD_CtlSendStatus>
      break;
 800c7b0:	e010      	b.n	800c7d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f9d0 	bl	800cb58 <USBD_CtlSendStatus>
      break;
 800c7b8:	e00c      	b.n	800c7d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f900 	bl	800c9c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7c2:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <USBD_SetConfig+0x150>)
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7fe fff4 	bl	800b7b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7d2:	bf00      	nop
  }

  return ret;
 800c7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	20000730 	.word	0x20000730

0800c7e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	88db      	ldrh	r3, [r3, #6]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d004      	beq.n	800c800 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f8e2 	bl	800c9c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7fe:	e023      	b.n	800c848 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c806:	b2db      	uxtb	r3, r3
 800c808:	2b02      	cmp	r3, #2
 800c80a:	dc02      	bgt.n	800c812 <USBD_GetConfig+0x2e>
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	dc03      	bgt.n	800c818 <USBD_GetConfig+0x34>
 800c810:	e015      	b.n	800c83e <USBD_GetConfig+0x5a>
 800c812:	2b03      	cmp	r3, #3
 800c814:	d00b      	beq.n	800c82e <USBD_GetConfig+0x4a>
 800c816:	e012      	b.n	800c83e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3308      	adds	r3, #8
 800c822:	2201      	movs	r2, #1
 800c824:	4619      	mov	r1, r3
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f93c 	bl	800caa4 <USBD_CtlSendData>
        break;
 800c82c:	e00c      	b.n	800c848 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	3304      	adds	r3, #4
 800c832:	2201      	movs	r2, #1
 800c834:	4619      	mov	r1, r3
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f934 	bl	800caa4 <USBD_CtlSendData>
        break;
 800c83c:	e004      	b.n	800c848 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 f8be 	bl	800c9c2 <USBD_CtlError>
        break;
 800c846:	bf00      	nop
}
 800c848:	bf00      	nop
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c860:	b2db      	uxtb	r3, r3
 800c862:	3b01      	subs	r3, #1
 800c864:	2b02      	cmp	r3, #2
 800c866:	d81e      	bhi.n	800c8a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	88db      	ldrh	r3, [r3, #6]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d004      	beq.n	800c87a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c870:	6839      	ldr	r1, [r7, #0]
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f8a5 	bl	800c9c2 <USBD_CtlError>
        break;
 800c878:	e01a      	b.n	800c8b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c886:	2b00      	cmp	r3, #0
 800c888:	d005      	beq.n	800c896 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	68db      	ldr	r3, [r3, #12]
 800c88e:	f043 0202 	orr.w	r2, r3, #2
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	330c      	adds	r3, #12
 800c89a:	2202      	movs	r2, #2
 800c89c:	4619      	mov	r1, r3
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f900 	bl	800caa4 <USBD_CtlSendData>
      break;
 800c8a4:	e004      	b.n	800c8b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c8a6:	6839      	ldr	r1, [r7, #0]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f88a 	bl	800c9c2 <USBD_CtlError>
      break;
 800c8ae:	bf00      	nop
  }
}
 800c8b0:	bf00      	nop
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	885b      	ldrh	r3, [r3, #2]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d107      	bne.n	800c8da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f940 	bl	800cb58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8d8:	e013      	b.n	800c902 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	885b      	ldrh	r3, [r3, #2]
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d10b      	bne.n	800c8fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	889b      	ldrh	r3, [r3, #4]
 800c8e6:	0a1b      	lsrs	r3, r3, #8
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f930 	bl	800cb58 <USBD_CtlSendStatus>
}
 800c8f8:	e003      	b.n	800c902 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f860 	bl	800c9c2 <USBD_CtlError>
}
 800c902:	bf00      	nop
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	3b01      	subs	r3, #1
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d80b      	bhi.n	800c93a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	885b      	ldrh	r3, [r3, #2]
 800c926:	2b01      	cmp	r3, #1
 800c928:	d10c      	bne.n	800c944 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f910 	bl	800cb58 <USBD_CtlSendStatus>
      }
      break;
 800c938:	e004      	b.n	800c944 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f840 	bl	800c9c2 <USBD_CtlError>
      break;
 800c942:	e000      	b.n	800c946 <USBD_ClrFeature+0x3c>
      break;
 800c944:	bf00      	nop
  }
}
 800c946:	bf00      	nop
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	781a      	ldrb	r2, [r3, #0]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	3301      	adds	r3, #1
 800c968:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	781a      	ldrb	r2, [r3, #0]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	3301      	adds	r3, #1
 800c976:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f7ff fa17 	bl	800bdac <SWAPBYTE>
 800c97e:	4603      	mov	r3, r0
 800c980:	461a      	mov	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3301      	adds	r3, #1
 800c98a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	3301      	adds	r3, #1
 800c990:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f7ff fa0a 	bl	800bdac <SWAPBYTE>
 800c998:	4603      	mov	r3, r0
 800c99a:	461a      	mov	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f7ff f9fd 	bl	800bdac <SWAPBYTE>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	80da      	strh	r2, [r3, #6]
}
 800c9ba:	bf00      	nop
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9cc:	2180      	movs	r1, #128	; 0x80
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fd2c 	bl	800d42c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 fd28 	bl	800d42c <USBD_LL_StallEP>
}
 800c9dc:	bf00      	nop
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d036      	beq.n	800ca68 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9fe:	6938      	ldr	r0, [r7, #16]
 800ca00:	f000 f836 	bl	800ca70 <USBD_GetLen>
 800ca04:	4603      	mov	r3, r0
 800ca06:	3301      	adds	r3, #1
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	005b      	lsls	r3, r3, #1
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	4413      	add	r3, r2
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	7812      	ldrb	r2, [r2, #0]
 800ca1c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
 800ca20:	3301      	adds	r3, #1
 800ca22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca24:	7dfb      	ldrb	r3, [r7, #23]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	4413      	add	r3, r2
 800ca2a:	2203      	movs	r2, #3
 800ca2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	3301      	adds	r3, #1
 800ca32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca34:	e013      	b.n	800ca5e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	7812      	ldrb	r2, [r2, #0]
 800ca40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	3301      	adds	r3, #1
 800ca46:	613b      	str	r3, [r7, #16]
    idx++;
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca4e:	7dfb      	ldrb	r3, [r7, #23]
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	4413      	add	r3, r2
 800ca54:	2200      	movs	r2, #0
 800ca56:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca58:	7dfb      	ldrb	r3, [r7, #23]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e7      	bne.n	800ca36 <USBD_GetString+0x52>
 800ca66:	e000      	b.n	800ca6a <USBD_GetString+0x86>
    return;
 800ca68:	bf00      	nop
  }
}
 800ca6a:	3718      	adds	r7, #24
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca80:	e005      	b.n	800ca8e <USBD_GetLen+0x1e>
  {
    len++;
 800ca82:	7bfb      	ldrb	r3, [r7, #15]
 800ca84:	3301      	adds	r3, #1
 800ca86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1f5      	bne.n	800ca82 <USBD_GetLen+0x12>
  }

  return len;
 800ca96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3714      	adds	r7, #20
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2202      	movs	r2, #2
 800cab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	2100      	movs	r1, #0
 800caca:	68f8      	ldr	r0, [r7, #12]
 800cacc:	f000 fd7e 	bl	800d5cc <USBD_LL_Transmit>

  return USBD_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b084      	sub	sp, #16
 800cade:	af00      	add	r7, sp, #0
 800cae0:	60f8      	str	r0, [r7, #12]
 800cae2:	60b9      	str	r1, [r7, #8]
 800cae4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	2100      	movs	r1, #0
 800caec:	68f8      	ldr	r0, [r7, #12]
 800caee:	f000 fd6d 	bl	800d5cc <USBD_LL_Transmit>

  return USBD_OK;
 800caf2:	2300      	movs	r3, #0
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2203      	movs	r2, #3
 800cb0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	2100      	movs	r1, #0
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f000 fd88 	bl	800d63c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b084      	sub	sp, #16
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	60b9      	str	r1, [r7, #8]
 800cb40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	2100      	movs	r1, #0
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f000 fd77 	bl	800d63c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2204      	movs	r2, #4
 800cb64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb68:	2300      	movs	r3, #0
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fd2c 	bl	800d5cc <USBD_LL_Transmit>

  return USBD_OK;
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b082      	sub	sp, #8
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2205      	movs	r2, #5
 800cb8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb8e:	2300      	movs	r3, #0
 800cb90:	2200      	movs	r2, #0
 800cb92:	2100      	movs	r1, #0
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fd51 	bl	800d63c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	4912      	ldr	r1, [pc, #72]	; (800cbf4 <MX_USB_DEVICE_Init+0x50>)
 800cbac:	4812      	ldr	r0, [pc, #72]	; (800cbf8 <MX_USB_DEVICE_Init+0x54>)
 800cbae:	f7fe fd69 	bl	800b684 <USBD_Init>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cbb8:	f7f5 f948 	bl	8001e4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cbbc:	490f      	ldr	r1, [pc, #60]	; (800cbfc <MX_USB_DEVICE_Init+0x58>)
 800cbbe:	480e      	ldr	r0, [pc, #56]	; (800cbf8 <MX_USB_DEVICE_Init+0x54>)
 800cbc0:	f7fe fd90 	bl	800b6e4 <USBD_RegisterClass>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d001      	beq.n	800cbce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cbca:	f7f5 f93f 	bl	8001e4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cbce:	490c      	ldr	r1, [pc, #48]	; (800cc00 <MX_USB_DEVICE_Init+0x5c>)
 800cbd0:	4809      	ldr	r0, [pc, #36]	; (800cbf8 <MX_USB_DEVICE_Init+0x54>)
 800cbd2:	f7fe fc87 	bl	800b4e4 <USBD_CDC_RegisterInterface>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d001      	beq.n	800cbe0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cbdc:	f7f5 f936 	bl	8001e4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cbe0:	4805      	ldr	r0, [pc, #20]	; (800cbf8 <MX_USB_DEVICE_Init+0x54>)
 800cbe2:	f7fe fdb5 	bl	800b750 <USBD_Start>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbec:	f7f5 f92e 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cbf0:	bf00      	nop
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	200000b0 	.word	0x200000b0
 800cbf8:	20000734 	.word	0x20000734
 800cbfc:	2000001c 	.word	0x2000001c
 800cc00:	2000009c 	.word	0x2000009c

0800cc04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc08:	2200      	movs	r2, #0
 800cc0a:	4905      	ldr	r1, [pc, #20]	; (800cc20 <CDC_Init_FS+0x1c>)
 800cc0c:	4805      	ldr	r0, [pc, #20]	; (800cc24 <CDC_Init_FS+0x20>)
 800cc0e:	f7fe fc83 	bl	800b518 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc12:	4905      	ldr	r1, [pc, #20]	; (800cc28 <CDC_Init_FS+0x24>)
 800cc14:	4803      	ldr	r0, [pc, #12]	; (800cc24 <CDC_Init_FS+0x20>)
 800cc16:	f7fe fca1 	bl	800b55c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	20000e14 	.word	0x20000e14
 800cc24:	20000734 	.word	0x20000734
 800cc28:	20000a14 	.word	0x20000a14

0800cc2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	6039      	str	r1, [r7, #0]
 800cc46:	71fb      	strb	r3, [r7, #7]
 800cc48:	4613      	mov	r3, r2
 800cc4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc4c:	79fb      	ldrb	r3, [r7, #7]
 800cc4e:	2b23      	cmp	r3, #35	; 0x23
 800cc50:	d85a      	bhi.n	800cd08 <CDC_Control_FS+0xcc>
 800cc52:	a201      	add	r2, pc, #4	; (adr r2, 800cc58 <CDC_Control_FS+0x1c>)
 800cc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc58:	0800cd09 	.word	0x0800cd09
 800cc5c:	0800cd09 	.word	0x0800cd09
 800cc60:	0800cd09 	.word	0x0800cd09
 800cc64:	0800cd09 	.word	0x0800cd09
 800cc68:	0800cd09 	.word	0x0800cd09
 800cc6c:	0800cd09 	.word	0x0800cd09
 800cc70:	0800cd09 	.word	0x0800cd09
 800cc74:	0800cd09 	.word	0x0800cd09
 800cc78:	0800cd09 	.word	0x0800cd09
 800cc7c:	0800cd09 	.word	0x0800cd09
 800cc80:	0800cd09 	.word	0x0800cd09
 800cc84:	0800cd09 	.word	0x0800cd09
 800cc88:	0800cd09 	.word	0x0800cd09
 800cc8c:	0800cd09 	.word	0x0800cd09
 800cc90:	0800cd09 	.word	0x0800cd09
 800cc94:	0800cd09 	.word	0x0800cd09
 800cc98:	0800cd09 	.word	0x0800cd09
 800cc9c:	0800cd09 	.word	0x0800cd09
 800cca0:	0800cd09 	.word	0x0800cd09
 800cca4:	0800cd09 	.word	0x0800cd09
 800cca8:	0800cd09 	.word	0x0800cd09
 800ccac:	0800cd09 	.word	0x0800cd09
 800ccb0:	0800cd09 	.word	0x0800cd09
 800ccb4:	0800cd09 	.word	0x0800cd09
 800ccb8:	0800cd09 	.word	0x0800cd09
 800ccbc:	0800cd09 	.word	0x0800cd09
 800ccc0:	0800cd09 	.word	0x0800cd09
 800ccc4:	0800cd09 	.word	0x0800cd09
 800ccc8:	0800cd09 	.word	0x0800cd09
 800cccc:	0800cd09 	.word	0x0800cd09
 800ccd0:	0800cd09 	.word	0x0800cd09
 800ccd4:	0800cd09 	.word	0x0800cd09
 800ccd8:	0800cd09 	.word	0x0800cd09
 800ccdc:	0800cd09 	.word	0x0800cd09
 800cce0:	0800cce9 	.word	0x0800cce9
 800cce4:	0800cd09 	.word	0x0800cd09
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
    	USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	60fb      	str	r3, [r7, #12]
    	if ((req->wValue & 0x0001) != 0){
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	885b      	ldrh	r3, [r3, #2]
 800ccf0:	f003 0301 	and.w	r3, r3, #1
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d003      	beq.n	800cd00 <CDC_Control_FS+0xc4>
    		USB_COM_Port_open = 1;
 800ccf8:	4b07      	ldr	r3, [pc, #28]	; (800cd18 <CDC_Control_FS+0xdc>)
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	701a      	strb	r2, [r3, #0]
    	}
    	else {
    		USB_COM_Port_open = 0;
    	}
    break;
 800ccfe:	e004      	b.n	800cd0a <CDC_Control_FS+0xce>
    		USB_COM_Port_open = 0;
 800cd00:	4b05      	ldr	r3, [pc, #20]	; (800cd18 <CDC_Control_FS+0xdc>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	701a      	strb	r2, [r3, #0]
    break;
 800cd06:	e000      	b.n	800cd0a <CDC_Control_FS+0xce>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd08:	bf00      	nop
  }

  return (USBD_OK);
 800cd0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3714      	adds	r7, #20
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr
 800cd18:	20000a10 	.word	0x20000a10

0800cd1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	4808      	ldr	r0, [pc, #32]	; (800cd4c <CDC_Receive_FS+0x30>)
 800cd2a:	f7fe fc17 	bl	800b55c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd2e:	4807      	ldr	r0, [pc, #28]	; (800cd4c <CDC_Receive_FS+0x30>)
 800cd30:	f7fe fc72 	bl	800b618 <USBD_CDC_ReceivePacket>
  CDC_FS_RxDataReady_Callback(Buf, *Len); // User implemented callback
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7f3 ff39 	bl	8000bb4 <CDC_FS_RxDataReady_Callback>
  return (USBD_OK);
 800cd42:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	20000734 	.word	0x20000734

0800cd50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	460b      	mov	r3, r1
 800cd5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd60:	4b0d      	ldr	r3, [pc, #52]	; (800cd98 <CDC_Transmit_FS+0x48>)
 800cd62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d001      	beq.n	800cd76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cd72:	2301      	movs	r3, #1
 800cd74:	e00b      	b.n	800cd8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd76:	887b      	ldrh	r3, [r7, #2]
 800cd78:	461a      	mov	r2, r3
 800cd7a:	6879      	ldr	r1, [r7, #4]
 800cd7c:	4806      	ldr	r0, [pc, #24]	; (800cd98 <CDC_Transmit_FS+0x48>)
 800cd7e:	f7fe fbcb 	bl	800b518 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd82:	4805      	ldr	r0, [pc, #20]	; (800cd98 <CDC_Transmit_FS+0x48>)
 800cd84:	f7fe fc08 	bl	800b598 <USBD_CDC_TransmitPacket>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	20000734 	.word	0x20000734

0800cd9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b087      	sub	sp, #28
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	4613      	mov	r3, r2
 800cda8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cdae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	371c      	adds	r7, #28
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
	...

0800cdc0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	6039      	str	r1, [r7, #0]
 800cdca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	2212      	movs	r2, #18
 800cdd0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cdd2:	4b03      	ldr	r3, [pc, #12]	; (800cde0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr
 800cde0:	200000d0 	.word	0x200000d0

0800cde4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	4603      	mov	r3, r0
 800cdec:	6039      	str	r1, [r7, #0]
 800cdee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	2204      	movs	r2, #4
 800cdf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdf6:	4b03      	ldr	r3, [pc, #12]	; (800ce04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	370c      	adds	r7, #12
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr
 800ce04:	200000f0 	.word	0x200000f0

0800ce08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	4603      	mov	r3, r0
 800ce10:	6039      	str	r1, [r7, #0]
 800ce12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce14:	79fb      	ldrb	r3, [r7, #7]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d105      	bne.n	800ce26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce1a:	683a      	ldr	r2, [r7, #0]
 800ce1c:	4907      	ldr	r1, [pc, #28]	; (800ce3c <USBD_FS_ProductStrDescriptor+0x34>)
 800ce1e:	4808      	ldr	r0, [pc, #32]	; (800ce40 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce20:	f7ff fde0 	bl	800c9e4 <USBD_GetString>
 800ce24:	e004      	b.n	800ce30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce26:	683a      	ldr	r2, [r7, #0]
 800ce28:	4904      	ldr	r1, [pc, #16]	; (800ce3c <USBD_FS_ProductStrDescriptor+0x34>)
 800ce2a:	4805      	ldr	r0, [pc, #20]	; (800ce40 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce2c:	f7ff fdda 	bl	800c9e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce30:	4b02      	ldr	r3, [pc, #8]	; (800ce3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	20001214 	.word	0x20001214
 800ce40:	0800eb2c 	.word	0x0800eb2c

0800ce44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	6039      	str	r1, [r7, #0]
 800ce4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce50:	683a      	ldr	r2, [r7, #0]
 800ce52:	4904      	ldr	r1, [pc, #16]	; (800ce64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce54:	4804      	ldr	r0, [pc, #16]	; (800ce68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce56:	f7ff fdc5 	bl	800c9e4 <USBD_GetString>
  return USBD_StrDesc;
 800ce5a:	4b02      	ldr	r3, [pc, #8]	; (800ce64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	20001214 	.word	0x20001214
 800ce68:	0800eb44 	.word	0x0800eb44

0800ce6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	4603      	mov	r3, r0
 800ce74:	6039      	str	r1, [r7, #0]
 800ce76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	221a      	movs	r2, #26
 800ce7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce7e:	f000 f855 	bl	800cf2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce82:	4b02      	ldr	r3, [pc, #8]	; (800ce8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3708      	adds	r7, #8
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	200000f4 	.word	0x200000f4

0800ce90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	6039      	str	r1, [r7, #0]
 800ce9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce9c:	79fb      	ldrb	r3, [r7, #7]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d105      	bne.n	800ceae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cea2:	683a      	ldr	r2, [r7, #0]
 800cea4:	4907      	ldr	r1, [pc, #28]	; (800cec4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cea6:	4808      	ldr	r0, [pc, #32]	; (800cec8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cea8:	f7ff fd9c 	bl	800c9e4 <USBD_GetString>
 800ceac:	e004      	b.n	800ceb8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	4904      	ldr	r1, [pc, #16]	; (800cec4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ceb2:	4805      	ldr	r0, [pc, #20]	; (800cec8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ceb4:	f7ff fd96 	bl	800c9e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ceb8:	4b02      	ldr	r3, [pc, #8]	; (800cec4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3708      	adds	r7, #8
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	20001214 	.word	0x20001214
 800cec8:	0800eb58 	.word	0x0800eb58

0800cecc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	4603      	mov	r3, r0
 800ced4:	6039      	str	r1, [r7, #0]
 800ced6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ced8:	79fb      	ldrb	r3, [r7, #7]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d105      	bne.n	800ceea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	4907      	ldr	r1, [pc, #28]	; (800cf00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cee2:	4808      	ldr	r0, [pc, #32]	; (800cf04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cee4:	f7ff fd7e 	bl	800c9e4 <USBD_GetString>
 800cee8:	e004      	b.n	800cef4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	4904      	ldr	r1, [pc, #16]	; (800cf00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ceee:	4805      	ldr	r0, [pc, #20]	; (800cf04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cef0:	f7ff fd78 	bl	800c9e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cef4:	4b02      	ldr	r3, [pc, #8]	; (800cf00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	20001214 	.word	0x20001214
 800cf04:	0800eb64 	.word	0x0800eb64

0800cf08 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	6039      	str	r1, [r7, #0]
 800cf12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	220c      	movs	r2, #12
 800cf18:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cf1a:	4b03      	ldr	r3, [pc, #12]	; (800cf28 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	370c      	adds	r7, #12
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr
 800cf28:	200000e4 	.word	0x200000e4

0800cf2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf32:	4b0f      	ldr	r3, [pc, #60]	; (800cf70 <Get_SerialNum+0x44>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf38:	4b0e      	ldr	r3, [pc, #56]	; (800cf74 <Get_SerialNum+0x48>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf3e:	4b0e      	ldr	r3, [pc, #56]	; (800cf78 <Get_SerialNum+0x4c>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4413      	add	r3, r2
 800cf4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d009      	beq.n	800cf66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf52:	2208      	movs	r2, #8
 800cf54:	4909      	ldr	r1, [pc, #36]	; (800cf7c <Get_SerialNum+0x50>)
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f000 f814 	bl	800cf84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf5c:	2204      	movs	r2, #4
 800cf5e:	4908      	ldr	r1, [pc, #32]	; (800cf80 <Get_SerialNum+0x54>)
 800cf60:	68b8      	ldr	r0, [r7, #8]
 800cf62:	f000 f80f 	bl	800cf84 <IntToUnicode>
  }
}
 800cf66:	bf00      	nop
 800cf68:	3710      	adds	r7, #16
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	1fff7590 	.word	0x1fff7590
 800cf74:	1fff7594 	.word	0x1fff7594
 800cf78:	1fff7598 	.word	0x1fff7598
 800cf7c:	200000f6 	.word	0x200000f6
 800cf80:	20000106 	.word	0x20000106

0800cf84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b087      	sub	sp, #28
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf92:	2300      	movs	r3, #0
 800cf94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf96:	2300      	movs	r3, #0
 800cf98:	75fb      	strb	r3, [r7, #23]
 800cf9a:	e027      	b.n	800cfec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	0f1b      	lsrs	r3, r3, #28
 800cfa0:	2b09      	cmp	r3, #9
 800cfa2:	d80b      	bhi.n	800cfbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	0f1b      	lsrs	r3, r3, #28
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	7dfb      	ldrb	r3, [r7, #23]
 800cfac:	005b      	lsls	r3, r3, #1
 800cfae:	4619      	mov	r1, r3
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	440b      	add	r3, r1
 800cfb4:	3230      	adds	r2, #48	; 0x30
 800cfb6:	b2d2      	uxtb	r2, r2
 800cfb8:	701a      	strb	r2, [r3, #0]
 800cfba:	e00a      	b.n	800cfd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	0f1b      	lsrs	r3, r3, #28
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	7dfb      	ldrb	r3, [r7, #23]
 800cfc4:	005b      	lsls	r3, r3, #1
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	440b      	add	r3, r1
 800cfcc:	3237      	adds	r2, #55	; 0x37
 800cfce:	b2d2      	uxtb	r2, r2
 800cfd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	011b      	lsls	r3, r3, #4
 800cfd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cfd8:	7dfb      	ldrb	r3, [r7, #23]
 800cfda:	005b      	lsls	r3, r3, #1
 800cfdc:	3301      	adds	r3, #1
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cfe6:	7dfb      	ldrb	r3, [r7, #23]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	75fb      	strb	r3, [r7, #23]
 800cfec:	7dfa      	ldrb	r2, [r7, #23]
 800cfee:	79fb      	ldrb	r3, [r7, #7]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d3d3      	bcc.n	800cf9c <IntToUnicode+0x18>
  }
}
 800cff4:	bf00      	nop
 800cff6:	bf00      	nop
 800cff8:	371c      	adds	r7, #28
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr
	...

0800d004 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b096      	sub	sp, #88	; 0x58
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d00c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d010:	2200      	movs	r2, #0
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	605a      	str	r2, [r3, #4]
 800d016:	609a      	str	r2, [r3, #8]
 800d018:	60da      	str	r2, [r3, #12]
 800d01a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d01c:	f107 0310 	add.w	r3, r7, #16
 800d020:	2234      	movs	r2, #52	; 0x34
 800d022:	2100      	movs	r1, #0
 800d024:	4618      	mov	r0, r3
 800d026:	f000 fbc9 	bl	800d7bc <memset>
  if(pcdHandle->Instance==USB)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4a24      	ldr	r2, [pc, #144]	; (800d0c0 <HAL_PCD_MspInit+0xbc>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d141      	bne.n	800d0b8 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d038:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800d03a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800d03e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d040:	f107 0310 	add.w	r3, r7, #16
 800d044:	4618      	mov	r0, r3
 800d046:	f7f9 fe95 	bl	8006d74 <HAL_RCCEx_PeriphCLKConfig>
 800d04a:	4603      	mov	r3, r0
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d001      	beq.n	800d054 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d050:	f7f4 fefc 	bl	8001e4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d054:	4b1b      	ldr	r3, [pc, #108]	; (800d0c4 <HAL_PCD_MspInit+0xc0>)
 800d056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d058:	4a1a      	ldr	r2, [pc, #104]	; (800d0c4 <HAL_PCD_MspInit+0xc0>)
 800d05a:	f043 0301 	orr.w	r3, r3, #1
 800d05e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d060:	4b18      	ldr	r3, [pc, #96]	; (800d0c4 <HAL_PCD_MspInit+0xc0>)
 800d062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d064:	f003 0301 	and.w	r3, r3, #1
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d06c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d070:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d072:	2302      	movs	r3, #2
 800d074:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d076:	2300      	movs	r3, #0
 800d078:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d07a:	2303      	movs	r3, #3
 800d07c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800d07e:	230a      	movs	r3, #10
 800d080:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d082:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d086:	4619      	mov	r1, r3
 800d088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d08c:	f7f7 f870 	bl	8004170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d090:	4b0c      	ldr	r3, [pc, #48]	; (800d0c4 <HAL_PCD_MspInit+0xc0>)
 800d092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d094:	4a0b      	ldr	r2, [pc, #44]	; (800d0c4 <HAL_PCD_MspInit+0xc0>)
 800d096:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d09a:	6593      	str	r3, [r2, #88]	; 0x58
 800d09c:	4b09      	ldr	r3, [pc, #36]	; (800d0c4 <HAL_PCD_MspInit+0xc0>)
 800d09e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d0a4:	60bb      	str	r3, [r7, #8]
 800d0a6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	2043      	movs	r0, #67	; 0x43
 800d0ae:	f7f6 fdf2 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d0b2:	2043      	movs	r0, #67	; 0x43
 800d0b4:	f7f6 fe0b 	bl	8003cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d0b8:	bf00      	nop
 800d0ba:	3758      	adds	r7, #88	; 0x58
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	40006800 	.word	0x40006800
 800d0c4:	40021000 	.word	0x40021000

0800d0c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d0dc:	4619      	mov	r1, r3
 800d0de:	4610      	mov	r0, r2
 800d0e0:	f7fe fb83 	bl	800b7ea <USBD_LL_SetupStage>
}
 800d0e4:	bf00      	nop
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800d0fe:	78fa      	ldrb	r2, [r7, #3]
 800d100:	6879      	ldr	r1, [r7, #4]
 800d102:	4613      	mov	r3, r2
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	4413      	add	r3, r2
 800d108:	00db      	lsls	r3, r3, #3
 800d10a:	440b      	add	r3, r1
 800d10c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	78fb      	ldrb	r3, [r7, #3]
 800d114:	4619      	mov	r1, r3
 800d116:	f7fe fbbd 	bl	800b894 <USBD_LL_DataOutStage>
}
 800d11a:	bf00      	nop
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b082      	sub	sp, #8
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
 800d12a:	460b      	mov	r3, r1
 800d12c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800d134:	78fa      	ldrb	r2, [r7, #3]
 800d136:	6879      	ldr	r1, [r7, #4]
 800d138:	4613      	mov	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	4413      	add	r3, r2
 800d13e:	00db      	lsls	r3, r3, #3
 800d140:	440b      	add	r3, r1
 800d142:	333c      	adds	r3, #60	; 0x3c
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	78fb      	ldrb	r3, [r7, #3]
 800d148:	4619      	mov	r1, r3
 800d14a:	f7fe fc56 	bl	800b9fa <USBD_LL_DataInStage>
}
 800d14e:	bf00      	nop
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b082      	sub	sp, #8
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d164:	4618      	mov	r0, r3
 800d166:	f7fe fd90 	bl	800bc8a <USBD_LL_SOF>
}
 800d16a:	bf00      	nop
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b084      	sub	sp, #16
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d17a:	2301      	movs	r3, #1
 800d17c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	2b02      	cmp	r3, #2
 800d184:	d001      	beq.n	800d18a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d186:	f7f4 fe61 	bl	8001e4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d190:	7bfa      	ldrb	r2, [r7, #15]
 800d192:	4611      	mov	r1, r2
 800d194:	4618      	mov	r0, r3
 800d196:	f7fe fd34 	bl	800bc02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fe fcdc 	bl	800bb5e <USBD_LL_Reset>
}
 800d1a6:	bf00      	nop
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fe fd2f 	bl	800bc22 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	699b      	ldr	r3, [r3, #24]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d005      	beq.n	800d1d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1cc:	4b04      	ldr	r3, [pc, #16]	; (800d1e0 <HAL_PCD_SuspendCallback+0x30>)
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	4a03      	ldr	r2, [pc, #12]	; (800d1e0 <HAL_PCD_SuspendCallback+0x30>)
 800d1d2:	f043 0306 	orr.w	r3, r3, #6
 800d1d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	e000ed00 	.word	0xe000ed00

0800d1e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	699b      	ldr	r3, [r3, #24]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d007      	beq.n	800d204 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1f4:	4b08      	ldr	r3, [pc, #32]	; (800d218 <HAL_PCD_ResumeCallback+0x34>)
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	4a07      	ldr	r2, [pc, #28]	; (800d218 <HAL_PCD_ResumeCallback+0x34>)
 800d1fa:	f023 0306 	bic.w	r3, r3, #6
 800d1fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d200:	f000 fab6 	bl	800d770 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fe fd25 	bl	800bc5a <USBD_LL_Resume>
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}
 800d218:	e000ed00 	.word	0xe000ed00

0800d21c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d224:	f7f8 ff10 	bl	8006048 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d228:	4a2b      	ldr	r2, [pc, #172]	; (800d2d8 <USBD_LL_Init+0xbc>)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4a29      	ldr	r2, [pc, #164]	; (800d2d8 <USBD_LL_Init+0xbc>)
 800d234:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800d238:	4b27      	ldr	r3, [pc, #156]	; (800d2d8 <USBD_LL_Init+0xbc>)
 800d23a:	4a28      	ldr	r2, [pc, #160]	; (800d2dc <USBD_LL_Init+0xc0>)
 800d23c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d23e:	4b26      	ldr	r3, [pc, #152]	; (800d2d8 <USBD_LL_Init+0xbc>)
 800d240:	2208      	movs	r2, #8
 800d242:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d244:	4b24      	ldr	r3, [pc, #144]	; (800d2d8 <USBD_LL_Init+0xbc>)
 800d246:	2202      	movs	r2, #2
 800d248:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d24a:	4b23      	ldr	r3, [pc, #140]	; (800d2d8 <USBD_LL_Init+0xbc>)
 800d24c:	2202      	movs	r2, #2
 800d24e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d250:	4b21      	ldr	r3, [pc, #132]	; (800d2d8 <USBD_LL_Init+0xbc>)
 800d252:	2200      	movs	r2, #0
 800d254:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d256:	4b20      	ldr	r3, [pc, #128]	; (800d2d8 <USBD_LL_Init+0xbc>)
 800d258:	2200      	movs	r2, #0
 800d25a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d25c:	4b1e      	ldr	r3, [pc, #120]	; (800d2d8 <USBD_LL_Init+0xbc>)
 800d25e:	2200      	movs	r2, #0
 800d260:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d262:	4b1d      	ldr	r3, [pc, #116]	; (800d2d8 <USBD_LL_Init+0xbc>)
 800d264:	2200      	movs	r2, #0
 800d266:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d268:	481b      	ldr	r0, [pc, #108]	; (800d2d8 <USBD_LL_Init+0xbc>)
 800d26a:	f7f7 f90b 	bl	8004484 <HAL_PCD_Init>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d001      	beq.n	800d278 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d274:	f7f4 fdea 	bl	8001e4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d27e:	2318      	movs	r3, #24
 800d280:	2200      	movs	r2, #0
 800d282:	2100      	movs	r1, #0
 800d284:	f7f8 fe0f 	bl	8005ea6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d28e:	2358      	movs	r3, #88	; 0x58
 800d290:	2200      	movs	r2, #0
 800d292:	2180      	movs	r1, #128	; 0x80
 800d294:	f7f8 fe07 	bl	8005ea6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d29e:	23c0      	movs	r3, #192	; 0xc0
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	2181      	movs	r1, #129	; 0x81
 800d2a4:	f7f8 fdff 	bl	8005ea6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d2ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	2101      	movs	r1, #1
 800d2b6:	f7f8 fdf6 	bl	8005ea6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d2c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	2182      	movs	r1, #130	; 0x82
 800d2c8:	f7f8 fded 	bl	8005ea6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d2cc:	2300      	movs	r3, #0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3708      	adds	r7, #8
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	20001414 	.word	0x20001414
 800d2dc:	40006800 	.word	0x40006800

0800d2e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7f7 f9ca 	bl	8004690 <HAL_PCD_Start>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d300:	7bbb      	ldrb	r3, [r7, #14]
 800d302:	2b03      	cmp	r3, #3
 800d304:	d816      	bhi.n	800d334 <USBD_LL_Start+0x54>
 800d306:	a201      	add	r2, pc, #4	; (adr r2, 800d30c <USBD_LL_Start+0x2c>)
 800d308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30c:	0800d31d 	.word	0x0800d31d
 800d310:	0800d323 	.word	0x0800d323
 800d314:	0800d329 	.word	0x0800d329
 800d318:	0800d32f 	.word	0x0800d32f
    case HAL_OK :
      usb_status = USBD_OK;
 800d31c:	2300      	movs	r3, #0
 800d31e:	73fb      	strb	r3, [r7, #15]
    break;
 800d320:	e00b      	b.n	800d33a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d322:	2303      	movs	r3, #3
 800d324:	73fb      	strb	r3, [r7, #15]
    break;
 800d326:	e008      	b.n	800d33a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d328:	2301      	movs	r3, #1
 800d32a:	73fb      	strb	r3, [r7, #15]
    break;
 800d32c:	e005      	b.n	800d33a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d32e:	2303      	movs	r3, #3
 800d330:	73fb      	strb	r3, [r7, #15]
    break;
 800d332:	e002      	b.n	800d33a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d334:	2303      	movs	r3, #3
 800d336:	73fb      	strb	r3, [r7, #15]
    break;
 800d338:	bf00      	nop
  }
  return usb_status;
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	4608      	mov	r0, r1
 800d34e:	4611      	mov	r1, r2
 800d350:	461a      	mov	r2, r3
 800d352:	4603      	mov	r3, r0
 800d354:	70fb      	strb	r3, [r7, #3]
 800d356:	460b      	mov	r3, r1
 800d358:	70bb      	strb	r3, [r7, #2]
 800d35a:	4613      	mov	r3, r2
 800d35c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d35e:	2300      	movs	r3, #0
 800d360:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d36c:	78bb      	ldrb	r3, [r7, #2]
 800d36e:	883a      	ldrh	r2, [r7, #0]
 800d370:	78f9      	ldrb	r1, [r7, #3]
 800d372:	f7f7 fafb 	bl	800496c <HAL_PCD_EP_Open>
 800d376:	4603      	mov	r3, r0
 800d378:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d37a:	7bbb      	ldrb	r3, [r7, #14]
 800d37c:	2b03      	cmp	r3, #3
 800d37e:	d817      	bhi.n	800d3b0 <USBD_LL_OpenEP+0x6c>
 800d380:	a201      	add	r2, pc, #4	; (adr r2, 800d388 <USBD_LL_OpenEP+0x44>)
 800d382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d386:	bf00      	nop
 800d388:	0800d399 	.word	0x0800d399
 800d38c:	0800d39f 	.word	0x0800d39f
 800d390:	0800d3a5 	.word	0x0800d3a5
 800d394:	0800d3ab 	.word	0x0800d3ab
    case HAL_OK :
      usb_status = USBD_OK;
 800d398:	2300      	movs	r3, #0
 800d39a:	73fb      	strb	r3, [r7, #15]
    break;
 800d39c:	e00b      	b.n	800d3b6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d39e:	2303      	movs	r3, #3
 800d3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a2:	e008      	b.n	800d3b6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a8:	e005      	b.n	800d3b6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ae:	e002      	b.n	800d3b6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d3b0:	2303      	movs	r3, #3
 800d3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3b4:	bf00      	nop
  }
  return usb_status;
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3da:	78fa      	ldrb	r2, [r7, #3]
 800d3dc:	4611      	mov	r1, r2
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7f7 fb21 	bl	8004a26 <HAL_PCD_EP_Close>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d3e8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ea:	2b03      	cmp	r3, #3
 800d3ec:	d816      	bhi.n	800d41c <USBD_LL_CloseEP+0x5c>
 800d3ee:	a201      	add	r2, pc, #4	; (adr r2, 800d3f4 <USBD_LL_CloseEP+0x34>)
 800d3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f4:	0800d405 	.word	0x0800d405
 800d3f8:	0800d40b 	.word	0x0800d40b
 800d3fc:	0800d411 	.word	0x0800d411
 800d400:	0800d417 	.word	0x0800d417
    case HAL_OK :
      usb_status = USBD_OK;
 800d404:	2300      	movs	r3, #0
 800d406:	73fb      	strb	r3, [r7, #15]
    break;
 800d408:	e00b      	b.n	800d422 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d40a:	2303      	movs	r3, #3
 800d40c:	73fb      	strb	r3, [r7, #15]
    break;
 800d40e:	e008      	b.n	800d422 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d410:	2301      	movs	r3, #1
 800d412:	73fb      	strb	r3, [r7, #15]
    break;
 800d414:	e005      	b.n	800d422 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d416:	2303      	movs	r3, #3
 800d418:	73fb      	strb	r3, [r7, #15]
    break;
 800d41a:	e002      	b.n	800d422 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d41c:	2303      	movs	r3, #3
 800d41e:	73fb      	strb	r3, [r7, #15]
    break;
 800d420:	bf00      	nop
  }
  return usb_status;
 800d422:	7bfb      	ldrb	r3, [r7, #15]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	460b      	mov	r3, r1
 800d436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d446:	78fa      	ldrb	r2, [r7, #3]
 800d448:	4611      	mov	r1, r2
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7f7 fbb3 	bl	8004bb6 <HAL_PCD_EP_SetStall>
 800d450:	4603      	mov	r3, r0
 800d452:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	2b03      	cmp	r3, #3
 800d458:	d816      	bhi.n	800d488 <USBD_LL_StallEP+0x5c>
 800d45a:	a201      	add	r2, pc, #4	; (adr r2, 800d460 <USBD_LL_StallEP+0x34>)
 800d45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d460:	0800d471 	.word	0x0800d471
 800d464:	0800d477 	.word	0x0800d477
 800d468:	0800d47d 	.word	0x0800d47d
 800d46c:	0800d483 	.word	0x0800d483
    case HAL_OK :
      usb_status = USBD_OK;
 800d470:	2300      	movs	r3, #0
 800d472:	73fb      	strb	r3, [r7, #15]
    break;
 800d474:	e00b      	b.n	800d48e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d476:	2303      	movs	r3, #3
 800d478:	73fb      	strb	r3, [r7, #15]
    break;
 800d47a:	e008      	b.n	800d48e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d47c:	2301      	movs	r3, #1
 800d47e:	73fb      	strb	r3, [r7, #15]
    break;
 800d480:	e005      	b.n	800d48e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d482:	2303      	movs	r3, #3
 800d484:	73fb      	strb	r3, [r7, #15]
    break;
 800d486:	e002      	b.n	800d48e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d488:	2303      	movs	r3, #3
 800d48a:	73fb      	strb	r3, [r7, #15]
    break;
 800d48c:	bf00      	nop
  }
  return usb_status;
 800d48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4b2:	78fa      	ldrb	r2, [r7, #3]
 800d4b4:	4611      	mov	r1, r2
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7f7 fbdd 	bl	8004c76 <HAL_PCD_EP_ClrStall>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d4c0:	7bbb      	ldrb	r3, [r7, #14]
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	d816      	bhi.n	800d4f4 <USBD_LL_ClearStallEP+0x5c>
 800d4c6:	a201      	add	r2, pc, #4	; (adr r2, 800d4cc <USBD_LL_ClearStallEP+0x34>)
 800d4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4cc:	0800d4dd 	.word	0x0800d4dd
 800d4d0:	0800d4e3 	.word	0x0800d4e3
 800d4d4:	0800d4e9 	.word	0x0800d4e9
 800d4d8:	0800d4ef 	.word	0x0800d4ef
    case HAL_OK :
      usb_status = USBD_OK;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e0:	e00b      	b.n	800d4fa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4e2:	2303      	movs	r3, #3
 800d4e4:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e6:	e008      	b.n	800d4fa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ec:	e005      	b.n	800d4fa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4ee:	2303      	movs	r3, #3
 800d4f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f2:	e002      	b.n	800d4fa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d4f4:	2303      	movs	r3, #3
 800d4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f8:	bf00      	nop
  }
  return usb_status;
 800d4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3710      	adds	r7, #16
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d516:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	da0c      	bge.n	800d53a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d520:	78fb      	ldrb	r3, [r7, #3]
 800d522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d526:	68f9      	ldr	r1, [r7, #12]
 800d528:	1c5a      	adds	r2, r3, #1
 800d52a:	4613      	mov	r3, r2
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	4413      	add	r3, r2
 800d530:	00db      	lsls	r3, r3, #3
 800d532:	440b      	add	r3, r1
 800d534:	3302      	adds	r3, #2
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	e00b      	b.n	800d552 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d53a:	78fb      	ldrb	r3, [r7, #3]
 800d53c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d540:	68f9      	ldr	r1, [r7, #12]
 800d542:	4613      	mov	r3, r2
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	4413      	add	r3, r2
 800d548:	00db      	lsls	r3, r3, #3
 800d54a:	440b      	add	r3, r1
 800d54c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d550:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d552:	4618      	mov	r0, r3
 800d554:	3714      	adds	r7, #20
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr
	...

0800d560 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	460b      	mov	r3, r1
 800d56a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d56c:	2300      	movs	r3, #0
 800d56e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d570:	2300      	movs	r3, #0
 800d572:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d57a:	78fa      	ldrb	r2, [r7, #3]
 800d57c:	4611      	mov	r1, r2
 800d57e:	4618      	mov	r0, r3
 800d580:	f7f7 f9cf 	bl	8004922 <HAL_PCD_SetAddress>
 800d584:	4603      	mov	r3, r0
 800d586:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d588:	7bbb      	ldrb	r3, [r7, #14]
 800d58a:	2b03      	cmp	r3, #3
 800d58c:	d816      	bhi.n	800d5bc <USBD_LL_SetUSBAddress+0x5c>
 800d58e:	a201      	add	r2, pc, #4	; (adr r2, 800d594 <USBD_LL_SetUSBAddress+0x34>)
 800d590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d594:	0800d5a5 	.word	0x0800d5a5
 800d598:	0800d5ab 	.word	0x0800d5ab
 800d59c:	0800d5b1 	.word	0x0800d5b1
 800d5a0:	0800d5b7 	.word	0x0800d5b7
    case HAL_OK :
      usb_status = USBD_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d5a8:	e00b      	b.n	800d5c2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5aa:	2303      	movs	r3, #3
 800d5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ae:	e008      	b.n	800d5c2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5b4:	e005      	b.n	800d5c2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ba:	e002      	b.n	800d5c2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d5bc:	2303      	movs	r3, #3
 800d5be:	73fb      	strb	r3, [r7, #15]
    break;
 800d5c0:	bf00      	nop
  }
  return usb_status;
 800d5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	607a      	str	r2, [r7, #4]
 800d5d6:	603b      	str	r3, [r7, #0]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d5ea:	7af9      	ldrb	r1, [r7, #11]
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	f7f7 faaa 	bl	8004b48 <HAL_PCD_EP_Transmit>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d5f8:	7dbb      	ldrb	r3, [r7, #22]
 800d5fa:	2b03      	cmp	r3, #3
 800d5fc:	d816      	bhi.n	800d62c <USBD_LL_Transmit+0x60>
 800d5fe:	a201      	add	r2, pc, #4	; (adr r2, 800d604 <USBD_LL_Transmit+0x38>)
 800d600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d604:	0800d615 	.word	0x0800d615
 800d608:	0800d61b 	.word	0x0800d61b
 800d60c:	0800d621 	.word	0x0800d621
 800d610:	0800d627 	.word	0x0800d627
    case HAL_OK :
      usb_status = USBD_OK;
 800d614:	2300      	movs	r3, #0
 800d616:	75fb      	strb	r3, [r7, #23]
    break;
 800d618:	e00b      	b.n	800d632 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d61a:	2303      	movs	r3, #3
 800d61c:	75fb      	strb	r3, [r7, #23]
    break;
 800d61e:	e008      	b.n	800d632 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d620:	2301      	movs	r3, #1
 800d622:	75fb      	strb	r3, [r7, #23]
    break;
 800d624:	e005      	b.n	800d632 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d626:	2303      	movs	r3, #3
 800d628:	75fb      	strb	r3, [r7, #23]
    break;
 800d62a:	e002      	b.n	800d632 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d62c:	2303      	movs	r3, #3
 800d62e:	75fb      	strb	r3, [r7, #23]
    break;
 800d630:	bf00      	nop
  }
  return usb_status;
 800d632:	7dfb      	ldrb	r3, [r7, #23]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3718      	adds	r7, #24
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b086      	sub	sp, #24
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	607a      	str	r2, [r7, #4]
 800d646:	603b      	str	r3, [r7, #0]
 800d648:	460b      	mov	r3, r1
 800d64a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d64c:	2300      	movs	r3, #0
 800d64e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d650:	2300      	movs	r3, #0
 800d652:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d65a:	7af9      	ldrb	r1, [r7, #11]
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	f7f7 fa29 	bl	8004ab6 <HAL_PCD_EP_Receive>
 800d664:	4603      	mov	r3, r0
 800d666:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d668:	7dbb      	ldrb	r3, [r7, #22]
 800d66a:	2b03      	cmp	r3, #3
 800d66c:	d816      	bhi.n	800d69c <USBD_LL_PrepareReceive+0x60>
 800d66e:	a201      	add	r2, pc, #4	; (adr r2, 800d674 <USBD_LL_PrepareReceive+0x38>)
 800d670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d674:	0800d685 	.word	0x0800d685
 800d678:	0800d68b 	.word	0x0800d68b
 800d67c:	0800d691 	.word	0x0800d691
 800d680:	0800d697 	.word	0x0800d697
    case HAL_OK :
      usb_status = USBD_OK;
 800d684:	2300      	movs	r3, #0
 800d686:	75fb      	strb	r3, [r7, #23]
    break;
 800d688:	e00b      	b.n	800d6a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d68a:	2303      	movs	r3, #3
 800d68c:	75fb      	strb	r3, [r7, #23]
    break;
 800d68e:	e008      	b.n	800d6a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d690:	2301      	movs	r3, #1
 800d692:	75fb      	strb	r3, [r7, #23]
    break;
 800d694:	e005      	b.n	800d6a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d696:	2303      	movs	r3, #3
 800d698:	75fb      	strb	r3, [r7, #23]
    break;
 800d69a:	e002      	b.n	800d6a2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d69c:	2303      	movs	r3, #3
 800d69e:	75fb      	strb	r3, [r7, #23]
    break;
 800d6a0:	bf00      	nop
  }
  return usb_status;
 800d6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3718      	adds	r7, #24
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d6be:	78fa      	ldrb	r2, [r7, #3]
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7f7 fa28 	bl	8004b18 <HAL_PCD_EP_GetRxCount>
 800d6c8:	4603      	mov	r3, r0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
	...

0800d6d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	460b      	mov	r3, r1
 800d6de:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d6e0:	78fb      	ldrb	r3, [r7, #3]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d002      	beq.n	800d6ec <HAL_PCDEx_LPM_Callback+0x18>
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d013      	beq.n	800d712 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d6ea:	e023      	b.n	800d734 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	699b      	ldr	r3, [r3, #24]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d007      	beq.n	800d704 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d6f4:	f000 f83c 	bl	800d770 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6f8:	4b10      	ldr	r3, [pc, #64]	; (800d73c <HAL_PCDEx_LPM_Callback+0x68>)
 800d6fa:	691b      	ldr	r3, [r3, #16]
 800d6fc:	4a0f      	ldr	r2, [pc, #60]	; (800d73c <HAL_PCDEx_LPM_Callback+0x68>)
 800d6fe:	f023 0306 	bic.w	r3, r3, #6
 800d702:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fe faa5 	bl	800bc5a <USBD_LL_Resume>
    break;
 800d710:	e010      	b.n	800d734 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d718:	4618      	mov	r0, r3
 800d71a:	f7fe fa82 	bl	800bc22 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	699b      	ldr	r3, [r3, #24]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d005      	beq.n	800d732 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d726:	4b05      	ldr	r3, [pc, #20]	; (800d73c <HAL_PCDEx_LPM_Callback+0x68>)
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	4a04      	ldr	r2, [pc, #16]	; (800d73c <HAL_PCDEx_LPM_Callback+0x68>)
 800d72c:	f043 0306 	orr.w	r3, r3, #6
 800d730:	6113      	str	r3, [r2, #16]
    break;
 800d732:	bf00      	nop
}
 800d734:	bf00      	nop
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	e000ed00 	.word	0xe000ed00

0800d740 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d748:	4b03      	ldr	r3, [pc, #12]	; (800d758 <USBD_static_malloc+0x18>)
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	370c      	adds	r7, #12
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	2000170c 	.word	0x2000170c

0800d75c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]

}
 800d764:	bf00      	nop
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d774:	f7f4 f95a 	bl	8001a2c <SystemClock_Config>
}
 800d778:	bf00      	nop
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <siprintf>:
 800d77c:	b40e      	push	{r1, r2, r3}
 800d77e:	b500      	push	{lr}
 800d780:	b09c      	sub	sp, #112	; 0x70
 800d782:	ab1d      	add	r3, sp, #116	; 0x74
 800d784:	9002      	str	r0, [sp, #8]
 800d786:	9006      	str	r0, [sp, #24]
 800d788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d78c:	4809      	ldr	r0, [pc, #36]	; (800d7b4 <siprintf+0x38>)
 800d78e:	9107      	str	r1, [sp, #28]
 800d790:	9104      	str	r1, [sp, #16]
 800d792:	4909      	ldr	r1, [pc, #36]	; (800d7b8 <siprintf+0x3c>)
 800d794:	f853 2b04 	ldr.w	r2, [r3], #4
 800d798:	9105      	str	r1, [sp, #20]
 800d79a:	6800      	ldr	r0, [r0, #0]
 800d79c:	9301      	str	r3, [sp, #4]
 800d79e:	a902      	add	r1, sp, #8
 800d7a0:	f000 f9c6 	bl	800db30 <_svfiprintf_r>
 800d7a4:	9b02      	ldr	r3, [sp, #8]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	701a      	strb	r2, [r3, #0]
 800d7aa:	b01c      	add	sp, #112	; 0x70
 800d7ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7b0:	b003      	add	sp, #12
 800d7b2:	4770      	bx	lr
 800d7b4:	2000015c 	.word	0x2000015c
 800d7b8:	ffff0208 	.word	0xffff0208

0800d7bc <memset>:
 800d7bc:	4402      	add	r2, r0
 800d7be:	4603      	mov	r3, r0
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d100      	bne.n	800d7c6 <memset+0xa>
 800d7c4:	4770      	bx	lr
 800d7c6:	f803 1b01 	strb.w	r1, [r3], #1
 800d7ca:	e7f9      	b.n	800d7c0 <memset+0x4>

0800d7cc <strncmp>:
 800d7cc:	b510      	push	{r4, lr}
 800d7ce:	b16a      	cbz	r2, 800d7ec <strncmp+0x20>
 800d7d0:	3901      	subs	r1, #1
 800d7d2:	1884      	adds	r4, r0, r2
 800d7d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d103      	bne.n	800d7e8 <strncmp+0x1c>
 800d7e0:	42a0      	cmp	r0, r4
 800d7e2:	d001      	beq.n	800d7e8 <strncmp+0x1c>
 800d7e4:	2a00      	cmp	r2, #0
 800d7e6:	d1f5      	bne.n	800d7d4 <strncmp+0x8>
 800d7e8:	1ad0      	subs	r0, r2, r3
 800d7ea:	bd10      	pop	{r4, pc}
 800d7ec:	4610      	mov	r0, r2
 800d7ee:	e7fc      	b.n	800d7ea <strncmp+0x1e>

0800d7f0 <strncpy>:
 800d7f0:	b510      	push	{r4, lr}
 800d7f2:	3901      	subs	r1, #1
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	b132      	cbz	r2, 800d806 <strncpy+0x16>
 800d7f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d7fc:	f803 4b01 	strb.w	r4, [r3], #1
 800d800:	3a01      	subs	r2, #1
 800d802:	2c00      	cmp	r4, #0
 800d804:	d1f7      	bne.n	800d7f6 <strncpy+0x6>
 800d806:	441a      	add	r2, r3
 800d808:	2100      	movs	r1, #0
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d100      	bne.n	800d810 <strncpy+0x20>
 800d80e:	bd10      	pop	{r4, pc}
 800d810:	f803 1b01 	strb.w	r1, [r3], #1
 800d814:	e7f9      	b.n	800d80a <strncpy+0x1a>
	...

0800d818 <__errno>:
 800d818:	4b01      	ldr	r3, [pc, #4]	; (800d820 <__errno+0x8>)
 800d81a:	6818      	ldr	r0, [r3, #0]
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop
 800d820:	2000015c 	.word	0x2000015c

0800d824 <__libc_init_array>:
 800d824:	b570      	push	{r4, r5, r6, lr}
 800d826:	4d0d      	ldr	r5, [pc, #52]	; (800d85c <__libc_init_array+0x38>)
 800d828:	4c0d      	ldr	r4, [pc, #52]	; (800d860 <__libc_init_array+0x3c>)
 800d82a:	1b64      	subs	r4, r4, r5
 800d82c:	10a4      	asrs	r4, r4, #2
 800d82e:	2600      	movs	r6, #0
 800d830:	42a6      	cmp	r6, r4
 800d832:	d109      	bne.n	800d848 <__libc_init_array+0x24>
 800d834:	4d0b      	ldr	r5, [pc, #44]	; (800d864 <__libc_init_array+0x40>)
 800d836:	4c0c      	ldr	r4, [pc, #48]	; (800d868 <__libc_init_array+0x44>)
 800d838:	f000 fc6a 	bl	800e110 <_init>
 800d83c:	1b64      	subs	r4, r4, r5
 800d83e:	10a4      	asrs	r4, r4, #2
 800d840:	2600      	movs	r6, #0
 800d842:	42a6      	cmp	r6, r4
 800d844:	d105      	bne.n	800d852 <__libc_init_array+0x2e>
 800d846:	bd70      	pop	{r4, r5, r6, pc}
 800d848:	f855 3b04 	ldr.w	r3, [r5], #4
 800d84c:	4798      	blx	r3
 800d84e:	3601      	adds	r6, #1
 800d850:	e7ee      	b.n	800d830 <__libc_init_array+0xc>
 800d852:	f855 3b04 	ldr.w	r3, [r5], #4
 800d856:	4798      	blx	r3
 800d858:	3601      	adds	r6, #1
 800d85a:	e7f2      	b.n	800d842 <__libc_init_array+0x1e>
 800d85c:	0800ebf8 	.word	0x0800ebf8
 800d860:	0800ebf8 	.word	0x0800ebf8
 800d864:	0800ebf8 	.word	0x0800ebf8
 800d868:	0800ebfc 	.word	0x0800ebfc

0800d86c <__retarget_lock_acquire_recursive>:
 800d86c:	4770      	bx	lr

0800d86e <__retarget_lock_release_recursive>:
 800d86e:	4770      	bx	lr

0800d870 <memcpy>:
 800d870:	440a      	add	r2, r1
 800d872:	4291      	cmp	r1, r2
 800d874:	f100 33ff 	add.w	r3, r0, #4294967295
 800d878:	d100      	bne.n	800d87c <memcpy+0xc>
 800d87a:	4770      	bx	lr
 800d87c:	b510      	push	{r4, lr}
 800d87e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d882:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d886:	4291      	cmp	r1, r2
 800d888:	d1f9      	bne.n	800d87e <memcpy+0xe>
 800d88a:	bd10      	pop	{r4, pc}

0800d88c <_free_r>:
 800d88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d88e:	2900      	cmp	r1, #0
 800d890:	d044      	beq.n	800d91c <_free_r+0x90>
 800d892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d896:	9001      	str	r0, [sp, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f1a1 0404 	sub.w	r4, r1, #4
 800d89e:	bfb8      	it	lt
 800d8a0:	18e4      	addlt	r4, r4, r3
 800d8a2:	f000 f8df 	bl	800da64 <__malloc_lock>
 800d8a6:	4a1e      	ldr	r2, [pc, #120]	; (800d920 <_free_r+0x94>)
 800d8a8:	9801      	ldr	r0, [sp, #4]
 800d8aa:	6813      	ldr	r3, [r2, #0]
 800d8ac:	b933      	cbnz	r3, 800d8bc <_free_r+0x30>
 800d8ae:	6063      	str	r3, [r4, #4]
 800d8b0:	6014      	str	r4, [r2, #0]
 800d8b2:	b003      	add	sp, #12
 800d8b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8b8:	f000 b8da 	b.w	800da70 <__malloc_unlock>
 800d8bc:	42a3      	cmp	r3, r4
 800d8be:	d908      	bls.n	800d8d2 <_free_r+0x46>
 800d8c0:	6825      	ldr	r5, [r4, #0]
 800d8c2:	1961      	adds	r1, r4, r5
 800d8c4:	428b      	cmp	r3, r1
 800d8c6:	bf01      	itttt	eq
 800d8c8:	6819      	ldreq	r1, [r3, #0]
 800d8ca:	685b      	ldreq	r3, [r3, #4]
 800d8cc:	1949      	addeq	r1, r1, r5
 800d8ce:	6021      	streq	r1, [r4, #0]
 800d8d0:	e7ed      	b.n	800d8ae <_free_r+0x22>
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	b10b      	cbz	r3, 800d8dc <_free_r+0x50>
 800d8d8:	42a3      	cmp	r3, r4
 800d8da:	d9fa      	bls.n	800d8d2 <_free_r+0x46>
 800d8dc:	6811      	ldr	r1, [r2, #0]
 800d8de:	1855      	adds	r5, r2, r1
 800d8e0:	42a5      	cmp	r5, r4
 800d8e2:	d10b      	bne.n	800d8fc <_free_r+0x70>
 800d8e4:	6824      	ldr	r4, [r4, #0]
 800d8e6:	4421      	add	r1, r4
 800d8e8:	1854      	adds	r4, r2, r1
 800d8ea:	42a3      	cmp	r3, r4
 800d8ec:	6011      	str	r1, [r2, #0]
 800d8ee:	d1e0      	bne.n	800d8b2 <_free_r+0x26>
 800d8f0:	681c      	ldr	r4, [r3, #0]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	6053      	str	r3, [r2, #4]
 800d8f6:	440c      	add	r4, r1
 800d8f8:	6014      	str	r4, [r2, #0]
 800d8fa:	e7da      	b.n	800d8b2 <_free_r+0x26>
 800d8fc:	d902      	bls.n	800d904 <_free_r+0x78>
 800d8fe:	230c      	movs	r3, #12
 800d900:	6003      	str	r3, [r0, #0]
 800d902:	e7d6      	b.n	800d8b2 <_free_r+0x26>
 800d904:	6825      	ldr	r5, [r4, #0]
 800d906:	1961      	adds	r1, r4, r5
 800d908:	428b      	cmp	r3, r1
 800d90a:	bf04      	itt	eq
 800d90c:	6819      	ldreq	r1, [r3, #0]
 800d90e:	685b      	ldreq	r3, [r3, #4]
 800d910:	6063      	str	r3, [r4, #4]
 800d912:	bf04      	itt	eq
 800d914:	1949      	addeq	r1, r1, r5
 800d916:	6021      	streq	r1, [r4, #0]
 800d918:	6054      	str	r4, [r2, #4]
 800d91a:	e7ca      	b.n	800d8b2 <_free_r+0x26>
 800d91c:	b003      	add	sp, #12
 800d91e:	bd30      	pop	{r4, r5, pc}
 800d920:	20001a6c 	.word	0x20001a6c

0800d924 <sbrk_aligned>:
 800d924:	b570      	push	{r4, r5, r6, lr}
 800d926:	4e0e      	ldr	r6, [pc, #56]	; (800d960 <sbrk_aligned+0x3c>)
 800d928:	460c      	mov	r4, r1
 800d92a:	6831      	ldr	r1, [r6, #0]
 800d92c:	4605      	mov	r5, r0
 800d92e:	b911      	cbnz	r1, 800d936 <sbrk_aligned+0x12>
 800d930:	f000 fba6 	bl	800e080 <_sbrk_r>
 800d934:	6030      	str	r0, [r6, #0]
 800d936:	4621      	mov	r1, r4
 800d938:	4628      	mov	r0, r5
 800d93a:	f000 fba1 	bl	800e080 <_sbrk_r>
 800d93e:	1c43      	adds	r3, r0, #1
 800d940:	d00a      	beq.n	800d958 <sbrk_aligned+0x34>
 800d942:	1cc4      	adds	r4, r0, #3
 800d944:	f024 0403 	bic.w	r4, r4, #3
 800d948:	42a0      	cmp	r0, r4
 800d94a:	d007      	beq.n	800d95c <sbrk_aligned+0x38>
 800d94c:	1a21      	subs	r1, r4, r0
 800d94e:	4628      	mov	r0, r5
 800d950:	f000 fb96 	bl	800e080 <_sbrk_r>
 800d954:	3001      	adds	r0, #1
 800d956:	d101      	bne.n	800d95c <sbrk_aligned+0x38>
 800d958:	f04f 34ff 	mov.w	r4, #4294967295
 800d95c:	4620      	mov	r0, r4
 800d95e:	bd70      	pop	{r4, r5, r6, pc}
 800d960:	20001a70 	.word	0x20001a70

0800d964 <_malloc_r>:
 800d964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d968:	1ccd      	adds	r5, r1, #3
 800d96a:	f025 0503 	bic.w	r5, r5, #3
 800d96e:	3508      	adds	r5, #8
 800d970:	2d0c      	cmp	r5, #12
 800d972:	bf38      	it	cc
 800d974:	250c      	movcc	r5, #12
 800d976:	2d00      	cmp	r5, #0
 800d978:	4607      	mov	r7, r0
 800d97a:	db01      	blt.n	800d980 <_malloc_r+0x1c>
 800d97c:	42a9      	cmp	r1, r5
 800d97e:	d905      	bls.n	800d98c <_malloc_r+0x28>
 800d980:	230c      	movs	r3, #12
 800d982:	603b      	str	r3, [r7, #0]
 800d984:	2600      	movs	r6, #0
 800d986:	4630      	mov	r0, r6
 800d988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d98c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800da60 <_malloc_r+0xfc>
 800d990:	f000 f868 	bl	800da64 <__malloc_lock>
 800d994:	f8d8 3000 	ldr.w	r3, [r8]
 800d998:	461c      	mov	r4, r3
 800d99a:	bb5c      	cbnz	r4, 800d9f4 <_malloc_r+0x90>
 800d99c:	4629      	mov	r1, r5
 800d99e:	4638      	mov	r0, r7
 800d9a0:	f7ff ffc0 	bl	800d924 <sbrk_aligned>
 800d9a4:	1c43      	adds	r3, r0, #1
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	d155      	bne.n	800da56 <_malloc_r+0xf2>
 800d9aa:	f8d8 4000 	ldr.w	r4, [r8]
 800d9ae:	4626      	mov	r6, r4
 800d9b0:	2e00      	cmp	r6, #0
 800d9b2:	d145      	bne.n	800da40 <_malloc_r+0xdc>
 800d9b4:	2c00      	cmp	r4, #0
 800d9b6:	d048      	beq.n	800da4a <_malloc_r+0xe6>
 800d9b8:	6823      	ldr	r3, [r4, #0]
 800d9ba:	4631      	mov	r1, r6
 800d9bc:	4638      	mov	r0, r7
 800d9be:	eb04 0903 	add.w	r9, r4, r3
 800d9c2:	f000 fb5d 	bl	800e080 <_sbrk_r>
 800d9c6:	4581      	cmp	r9, r0
 800d9c8:	d13f      	bne.n	800da4a <_malloc_r+0xe6>
 800d9ca:	6821      	ldr	r1, [r4, #0]
 800d9cc:	1a6d      	subs	r5, r5, r1
 800d9ce:	4629      	mov	r1, r5
 800d9d0:	4638      	mov	r0, r7
 800d9d2:	f7ff ffa7 	bl	800d924 <sbrk_aligned>
 800d9d6:	3001      	adds	r0, #1
 800d9d8:	d037      	beq.n	800da4a <_malloc_r+0xe6>
 800d9da:	6823      	ldr	r3, [r4, #0]
 800d9dc:	442b      	add	r3, r5
 800d9de:	6023      	str	r3, [r4, #0]
 800d9e0:	f8d8 3000 	ldr.w	r3, [r8]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d038      	beq.n	800da5a <_malloc_r+0xf6>
 800d9e8:	685a      	ldr	r2, [r3, #4]
 800d9ea:	42a2      	cmp	r2, r4
 800d9ec:	d12b      	bne.n	800da46 <_malloc_r+0xe2>
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	605a      	str	r2, [r3, #4]
 800d9f2:	e00f      	b.n	800da14 <_malloc_r+0xb0>
 800d9f4:	6822      	ldr	r2, [r4, #0]
 800d9f6:	1b52      	subs	r2, r2, r5
 800d9f8:	d41f      	bmi.n	800da3a <_malloc_r+0xd6>
 800d9fa:	2a0b      	cmp	r2, #11
 800d9fc:	d917      	bls.n	800da2e <_malloc_r+0xca>
 800d9fe:	1961      	adds	r1, r4, r5
 800da00:	42a3      	cmp	r3, r4
 800da02:	6025      	str	r5, [r4, #0]
 800da04:	bf18      	it	ne
 800da06:	6059      	strne	r1, [r3, #4]
 800da08:	6863      	ldr	r3, [r4, #4]
 800da0a:	bf08      	it	eq
 800da0c:	f8c8 1000 	streq.w	r1, [r8]
 800da10:	5162      	str	r2, [r4, r5]
 800da12:	604b      	str	r3, [r1, #4]
 800da14:	4638      	mov	r0, r7
 800da16:	f104 060b 	add.w	r6, r4, #11
 800da1a:	f000 f829 	bl	800da70 <__malloc_unlock>
 800da1e:	f026 0607 	bic.w	r6, r6, #7
 800da22:	1d23      	adds	r3, r4, #4
 800da24:	1af2      	subs	r2, r6, r3
 800da26:	d0ae      	beq.n	800d986 <_malloc_r+0x22>
 800da28:	1b9b      	subs	r3, r3, r6
 800da2a:	50a3      	str	r3, [r4, r2]
 800da2c:	e7ab      	b.n	800d986 <_malloc_r+0x22>
 800da2e:	42a3      	cmp	r3, r4
 800da30:	6862      	ldr	r2, [r4, #4]
 800da32:	d1dd      	bne.n	800d9f0 <_malloc_r+0x8c>
 800da34:	f8c8 2000 	str.w	r2, [r8]
 800da38:	e7ec      	b.n	800da14 <_malloc_r+0xb0>
 800da3a:	4623      	mov	r3, r4
 800da3c:	6864      	ldr	r4, [r4, #4]
 800da3e:	e7ac      	b.n	800d99a <_malloc_r+0x36>
 800da40:	4634      	mov	r4, r6
 800da42:	6876      	ldr	r6, [r6, #4]
 800da44:	e7b4      	b.n	800d9b0 <_malloc_r+0x4c>
 800da46:	4613      	mov	r3, r2
 800da48:	e7cc      	b.n	800d9e4 <_malloc_r+0x80>
 800da4a:	230c      	movs	r3, #12
 800da4c:	603b      	str	r3, [r7, #0]
 800da4e:	4638      	mov	r0, r7
 800da50:	f000 f80e 	bl	800da70 <__malloc_unlock>
 800da54:	e797      	b.n	800d986 <_malloc_r+0x22>
 800da56:	6025      	str	r5, [r4, #0]
 800da58:	e7dc      	b.n	800da14 <_malloc_r+0xb0>
 800da5a:	605b      	str	r3, [r3, #4]
 800da5c:	deff      	udf	#255	; 0xff
 800da5e:	bf00      	nop
 800da60:	20001a6c 	.word	0x20001a6c

0800da64 <__malloc_lock>:
 800da64:	4801      	ldr	r0, [pc, #4]	; (800da6c <__malloc_lock+0x8>)
 800da66:	f7ff bf01 	b.w	800d86c <__retarget_lock_acquire_recursive>
 800da6a:	bf00      	nop
 800da6c:	20001a68 	.word	0x20001a68

0800da70 <__malloc_unlock>:
 800da70:	4801      	ldr	r0, [pc, #4]	; (800da78 <__malloc_unlock+0x8>)
 800da72:	f7ff befc 	b.w	800d86e <__retarget_lock_release_recursive>
 800da76:	bf00      	nop
 800da78:	20001a68 	.word	0x20001a68

0800da7c <__ssputs_r>:
 800da7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da80:	688e      	ldr	r6, [r1, #8]
 800da82:	461f      	mov	r7, r3
 800da84:	42be      	cmp	r6, r7
 800da86:	680b      	ldr	r3, [r1, #0]
 800da88:	4682      	mov	sl, r0
 800da8a:	460c      	mov	r4, r1
 800da8c:	4690      	mov	r8, r2
 800da8e:	d82c      	bhi.n	800daea <__ssputs_r+0x6e>
 800da90:	898a      	ldrh	r2, [r1, #12]
 800da92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da96:	d026      	beq.n	800dae6 <__ssputs_r+0x6a>
 800da98:	6965      	ldr	r5, [r4, #20]
 800da9a:	6909      	ldr	r1, [r1, #16]
 800da9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800daa0:	eba3 0901 	sub.w	r9, r3, r1
 800daa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800daa8:	1c7b      	adds	r3, r7, #1
 800daaa:	444b      	add	r3, r9
 800daac:	106d      	asrs	r5, r5, #1
 800daae:	429d      	cmp	r5, r3
 800dab0:	bf38      	it	cc
 800dab2:	461d      	movcc	r5, r3
 800dab4:	0553      	lsls	r3, r2, #21
 800dab6:	d527      	bpl.n	800db08 <__ssputs_r+0x8c>
 800dab8:	4629      	mov	r1, r5
 800daba:	f7ff ff53 	bl	800d964 <_malloc_r>
 800dabe:	4606      	mov	r6, r0
 800dac0:	b360      	cbz	r0, 800db1c <__ssputs_r+0xa0>
 800dac2:	6921      	ldr	r1, [r4, #16]
 800dac4:	464a      	mov	r2, r9
 800dac6:	f7ff fed3 	bl	800d870 <memcpy>
 800daca:	89a3      	ldrh	r3, [r4, #12]
 800dacc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dad4:	81a3      	strh	r3, [r4, #12]
 800dad6:	6126      	str	r6, [r4, #16]
 800dad8:	6165      	str	r5, [r4, #20]
 800dada:	444e      	add	r6, r9
 800dadc:	eba5 0509 	sub.w	r5, r5, r9
 800dae0:	6026      	str	r6, [r4, #0]
 800dae2:	60a5      	str	r5, [r4, #8]
 800dae4:	463e      	mov	r6, r7
 800dae6:	42be      	cmp	r6, r7
 800dae8:	d900      	bls.n	800daec <__ssputs_r+0x70>
 800daea:	463e      	mov	r6, r7
 800daec:	6820      	ldr	r0, [r4, #0]
 800daee:	4632      	mov	r2, r6
 800daf0:	4641      	mov	r1, r8
 800daf2:	f000 faab 	bl	800e04c <memmove>
 800daf6:	68a3      	ldr	r3, [r4, #8]
 800daf8:	1b9b      	subs	r3, r3, r6
 800dafa:	60a3      	str	r3, [r4, #8]
 800dafc:	6823      	ldr	r3, [r4, #0]
 800dafe:	4433      	add	r3, r6
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	2000      	movs	r0, #0
 800db04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db08:	462a      	mov	r2, r5
 800db0a:	f000 fac9 	bl	800e0a0 <_realloc_r>
 800db0e:	4606      	mov	r6, r0
 800db10:	2800      	cmp	r0, #0
 800db12:	d1e0      	bne.n	800dad6 <__ssputs_r+0x5a>
 800db14:	6921      	ldr	r1, [r4, #16]
 800db16:	4650      	mov	r0, sl
 800db18:	f7ff feb8 	bl	800d88c <_free_r>
 800db1c:	230c      	movs	r3, #12
 800db1e:	f8ca 3000 	str.w	r3, [sl]
 800db22:	89a3      	ldrh	r3, [r4, #12]
 800db24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db28:	81a3      	strh	r3, [r4, #12]
 800db2a:	f04f 30ff 	mov.w	r0, #4294967295
 800db2e:	e7e9      	b.n	800db04 <__ssputs_r+0x88>

0800db30 <_svfiprintf_r>:
 800db30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db34:	4698      	mov	r8, r3
 800db36:	898b      	ldrh	r3, [r1, #12]
 800db38:	061b      	lsls	r3, r3, #24
 800db3a:	b09d      	sub	sp, #116	; 0x74
 800db3c:	4607      	mov	r7, r0
 800db3e:	460d      	mov	r5, r1
 800db40:	4614      	mov	r4, r2
 800db42:	d50e      	bpl.n	800db62 <_svfiprintf_r+0x32>
 800db44:	690b      	ldr	r3, [r1, #16]
 800db46:	b963      	cbnz	r3, 800db62 <_svfiprintf_r+0x32>
 800db48:	2140      	movs	r1, #64	; 0x40
 800db4a:	f7ff ff0b 	bl	800d964 <_malloc_r>
 800db4e:	6028      	str	r0, [r5, #0]
 800db50:	6128      	str	r0, [r5, #16]
 800db52:	b920      	cbnz	r0, 800db5e <_svfiprintf_r+0x2e>
 800db54:	230c      	movs	r3, #12
 800db56:	603b      	str	r3, [r7, #0]
 800db58:	f04f 30ff 	mov.w	r0, #4294967295
 800db5c:	e0d0      	b.n	800dd00 <_svfiprintf_r+0x1d0>
 800db5e:	2340      	movs	r3, #64	; 0x40
 800db60:	616b      	str	r3, [r5, #20]
 800db62:	2300      	movs	r3, #0
 800db64:	9309      	str	r3, [sp, #36]	; 0x24
 800db66:	2320      	movs	r3, #32
 800db68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800db70:	2330      	movs	r3, #48	; 0x30
 800db72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dd18 <_svfiprintf_r+0x1e8>
 800db76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db7a:	f04f 0901 	mov.w	r9, #1
 800db7e:	4623      	mov	r3, r4
 800db80:	469a      	mov	sl, r3
 800db82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db86:	b10a      	cbz	r2, 800db8c <_svfiprintf_r+0x5c>
 800db88:	2a25      	cmp	r2, #37	; 0x25
 800db8a:	d1f9      	bne.n	800db80 <_svfiprintf_r+0x50>
 800db8c:	ebba 0b04 	subs.w	fp, sl, r4
 800db90:	d00b      	beq.n	800dbaa <_svfiprintf_r+0x7a>
 800db92:	465b      	mov	r3, fp
 800db94:	4622      	mov	r2, r4
 800db96:	4629      	mov	r1, r5
 800db98:	4638      	mov	r0, r7
 800db9a:	f7ff ff6f 	bl	800da7c <__ssputs_r>
 800db9e:	3001      	adds	r0, #1
 800dba0:	f000 80a9 	beq.w	800dcf6 <_svfiprintf_r+0x1c6>
 800dba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dba6:	445a      	add	r2, fp
 800dba8:	9209      	str	r2, [sp, #36]	; 0x24
 800dbaa:	f89a 3000 	ldrb.w	r3, [sl]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f000 80a1 	beq.w	800dcf6 <_svfiprintf_r+0x1c6>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbbe:	f10a 0a01 	add.w	sl, sl, #1
 800dbc2:	9304      	str	r3, [sp, #16]
 800dbc4:	9307      	str	r3, [sp, #28]
 800dbc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbca:	931a      	str	r3, [sp, #104]	; 0x68
 800dbcc:	4654      	mov	r4, sl
 800dbce:	2205      	movs	r2, #5
 800dbd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd4:	4850      	ldr	r0, [pc, #320]	; (800dd18 <_svfiprintf_r+0x1e8>)
 800dbd6:	f7f2 fb03 	bl	80001e0 <memchr>
 800dbda:	9a04      	ldr	r2, [sp, #16]
 800dbdc:	b9d8      	cbnz	r0, 800dc16 <_svfiprintf_r+0xe6>
 800dbde:	06d0      	lsls	r0, r2, #27
 800dbe0:	bf44      	itt	mi
 800dbe2:	2320      	movmi	r3, #32
 800dbe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbe8:	0711      	lsls	r1, r2, #28
 800dbea:	bf44      	itt	mi
 800dbec:	232b      	movmi	r3, #43	; 0x2b
 800dbee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbf2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbf6:	2b2a      	cmp	r3, #42	; 0x2a
 800dbf8:	d015      	beq.n	800dc26 <_svfiprintf_r+0xf6>
 800dbfa:	9a07      	ldr	r2, [sp, #28]
 800dbfc:	4654      	mov	r4, sl
 800dbfe:	2000      	movs	r0, #0
 800dc00:	f04f 0c0a 	mov.w	ip, #10
 800dc04:	4621      	mov	r1, r4
 800dc06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc0a:	3b30      	subs	r3, #48	; 0x30
 800dc0c:	2b09      	cmp	r3, #9
 800dc0e:	d94d      	bls.n	800dcac <_svfiprintf_r+0x17c>
 800dc10:	b1b0      	cbz	r0, 800dc40 <_svfiprintf_r+0x110>
 800dc12:	9207      	str	r2, [sp, #28]
 800dc14:	e014      	b.n	800dc40 <_svfiprintf_r+0x110>
 800dc16:	eba0 0308 	sub.w	r3, r0, r8
 800dc1a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	9304      	str	r3, [sp, #16]
 800dc22:	46a2      	mov	sl, r4
 800dc24:	e7d2      	b.n	800dbcc <_svfiprintf_r+0x9c>
 800dc26:	9b03      	ldr	r3, [sp, #12]
 800dc28:	1d19      	adds	r1, r3, #4
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	9103      	str	r1, [sp, #12]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	bfbb      	ittet	lt
 800dc32:	425b      	neglt	r3, r3
 800dc34:	f042 0202 	orrlt.w	r2, r2, #2
 800dc38:	9307      	strge	r3, [sp, #28]
 800dc3a:	9307      	strlt	r3, [sp, #28]
 800dc3c:	bfb8      	it	lt
 800dc3e:	9204      	strlt	r2, [sp, #16]
 800dc40:	7823      	ldrb	r3, [r4, #0]
 800dc42:	2b2e      	cmp	r3, #46	; 0x2e
 800dc44:	d10c      	bne.n	800dc60 <_svfiprintf_r+0x130>
 800dc46:	7863      	ldrb	r3, [r4, #1]
 800dc48:	2b2a      	cmp	r3, #42	; 0x2a
 800dc4a:	d134      	bne.n	800dcb6 <_svfiprintf_r+0x186>
 800dc4c:	9b03      	ldr	r3, [sp, #12]
 800dc4e:	1d1a      	adds	r2, r3, #4
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	9203      	str	r2, [sp, #12]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	bfb8      	it	lt
 800dc58:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc5c:	3402      	adds	r4, #2
 800dc5e:	9305      	str	r3, [sp, #20]
 800dc60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dd28 <_svfiprintf_r+0x1f8>
 800dc64:	7821      	ldrb	r1, [r4, #0]
 800dc66:	2203      	movs	r2, #3
 800dc68:	4650      	mov	r0, sl
 800dc6a:	f7f2 fab9 	bl	80001e0 <memchr>
 800dc6e:	b138      	cbz	r0, 800dc80 <_svfiprintf_r+0x150>
 800dc70:	9b04      	ldr	r3, [sp, #16]
 800dc72:	eba0 000a 	sub.w	r0, r0, sl
 800dc76:	2240      	movs	r2, #64	; 0x40
 800dc78:	4082      	lsls	r2, r0
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	3401      	adds	r4, #1
 800dc7e:	9304      	str	r3, [sp, #16]
 800dc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc84:	4825      	ldr	r0, [pc, #148]	; (800dd1c <_svfiprintf_r+0x1ec>)
 800dc86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc8a:	2206      	movs	r2, #6
 800dc8c:	f7f2 faa8 	bl	80001e0 <memchr>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d038      	beq.n	800dd06 <_svfiprintf_r+0x1d6>
 800dc94:	4b22      	ldr	r3, [pc, #136]	; (800dd20 <_svfiprintf_r+0x1f0>)
 800dc96:	bb1b      	cbnz	r3, 800dce0 <_svfiprintf_r+0x1b0>
 800dc98:	9b03      	ldr	r3, [sp, #12]
 800dc9a:	3307      	adds	r3, #7
 800dc9c:	f023 0307 	bic.w	r3, r3, #7
 800dca0:	3308      	adds	r3, #8
 800dca2:	9303      	str	r3, [sp, #12]
 800dca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dca6:	4433      	add	r3, r6
 800dca8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcaa:	e768      	b.n	800db7e <_svfiprintf_r+0x4e>
 800dcac:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	2001      	movs	r0, #1
 800dcb4:	e7a6      	b.n	800dc04 <_svfiprintf_r+0xd4>
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	3401      	adds	r4, #1
 800dcba:	9305      	str	r3, [sp, #20]
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	f04f 0c0a 	mov.w	ip, #10
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcc8:	3a30      	subs	r2, #48	; 0x30
 800dcca:	2a09      	cmp	r2, #9
 800dccc:	d903      	bls.n	800dcd6 <_svfiprintf_r+0x1a6>
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d0c6      	beq.n	800dc60 <_svfiprintf_r+0x130>
 800dcd2:	9105      	str	r1, [sp, #20]
 800dcd4:	e7c4      	b.n	800dc60 <_svfiprintf_r+0x130>
 800dcd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcda:	4604      	mov	r4, r0
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e7f0      	b.n	800dcc2 <_svfiprintf_r+0x192>
 800dce0:	ab03      	add	r3, sp, #12
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	462a      	mov	r2, r5
 800dce6:	4b0f      	ldr	r3, [pc, #60]	; (800dd24 <_svfiprintf_r+0x1f4>)
 800dce8:	a904      	add	r1, sp, #16
 800dcea:	4638      	mov	r0, r7
 800dcec:	f3af 8000 	nop.w
 800dcf0:	1c42      	adds	r2, r0, #1
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	d1d6      	bne.n	800dca4 <_svfiprintf_r+0x174>
 800dcf6:	89ab      	ldrh	r3, [r5, #12]
 800dcf8:	065b      	lsls	r3, r3, #25
 800dcfa:	f53f af2d 	bmi.w	800db58 <_svfiprintf_r+0x28>
 800dcfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd00:	b01d      	add	sp, #116	; 0x74
 800dd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd06:	ab03      	add	r3, sp, #12
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	462a      	mov	r2, r5
 800dd0c:	4b05      	ldr	r3, [pc, #20]	; (800dd24 <_svfiprintf_r+0x1f4>)
 800dd0e:	a904      	add	r1, sp, #16
 800dd10:	4638      	mov	r0, r7
 800dd12:	f000 f879 	bl	800de08 <_printf_i>
 800dd16:	e7eb      	b.n	800dcf0 <_svfiprintf_r+0x1c0>
 800dd18:	0800ebbc 	.word	0x0800ebbc
 800dd1c:	0800ebc6 	.word	0x0800ebc6
 800dd20:	00000000 	.word	0x00000000
 800dd24:	0800da7d 	.word	0x0800da7d
 800dd28:	0800ebc2 	.word	0x0800ebc2

0800dd2c <_printf_common>:
 800dd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd30:	4616      	mov	r6, r2
 800dd32:	4699      	mov	r9, r3
 800dd34:	688a      	ldr	r2, [r1, #8]
 800dd36:	690b      	ldr	r3, [r1, #16]
 800dd38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	bfb8      	it	lt
 800dd40:	4613      	movlt	r3, r2
 800dd42:	6033      	str	r3, [r6, #0]
 800dd44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd48:	4607      	mov	r7, r0
 800dd4a:	460c      	mov	r4, r1
 800dd4c:	b10a      	cbz	r2, 800dd52 <_printf_common+0x26>
 800dd4e:	3301      	adds	r3, #1
 800dd50:	6033      	str	r3, [r6, #0]
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	0699      	lsls	r1, r3, #26
 800dd56:	bf42      	ittt	mi
 800dd58:	6833      	ldrmi	r3, [r6, #0]
 800dd5a:	3302      	addmi	r3, #2
 800dd5c:	6033      	strmi	r3, [r6, #0]
 800dd5e:	6825      	ldr	r5, [r4, #0]
 800dd60:	f015 0506 	ands.w	r5, r5, #6
 800dd64:	d106      	bne.n	800dd74 <_printf_common+0x48>
 800dd66:	f104 0a19 	add.w	sl, r4, #25
 800dd6a:	68e3      	ldr	r3, [r4, #12]
 800dd6c:	6832      	ldr	r2, [r6, #0]
 800dd6e:	1a9b      	subs	r3, r3, r2
 800dd70:	42ab      	cmp	r3, r5
 800dd72:	dc26      	bgt.n	800ddc2 <_printf_common+0x96>
 800dd74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd78:	1e13      	subs	r3, r2, #0
 800dd7a:	6822      	ldr	r2, [r4, #0]
 800dd7c:	bf18      	it	ne
 800dd7e:	2301      	movne	r3, #1
 800dd80:	0692      	lsls	r2, r2, #26
 800dd82:	d42b      	bmi.n	800dddc <_printf_common+0xb0>
 800dd84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd88:	4649      	mov	r1, r9
 800dd8a:	4638      	mov	r0, r7
 800dd8c:	47c0      	blx	r8
 800dd8e:	3001      	adds	r0, #1
 800dd90:	d01e      	beq.n	800ddd0 <_printf_common+0xa4>
 800dd92:	6823      	ldr	r3, [r4, #0]
 800dd94:	6922      	ldr	r2, [r4, #16]
 800dd96:	f003 0306 	and.w	r3, r3, #6
 800dd9a:	2b04      	cmp	r3, #4
 800dd9c:	bf02      	ittt	eq
 800dd9e:	68e5      	ldreq	r5, [r4, #12]
 800dda0:	6833      	ldreq	r3, [r6, #0]
 800dda2:	1aed      	subeq	r5, r5, r3
 800dda4:	68a3      	ldr	r3, [r4, #8]
 800dda6:	bf0c      	ite	eq
 800dda8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ddac:	2500      	movne	r5, #0
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	bfc4      	itt	gt
 800ddb2:	1a9b      	subgt	r3, r3, r2
 800ddb4:	18ed      	addgt	r5, r5, r3
 800ddb6:	2600      	movs	r6, #0
 800ddb8:	341a      	adds	r4, #26
 800ddba:	42b5      	cmp	r5, r6
 800ddbc:	d11a      	bne.n	800ddf4 <_printf_common+0xc8>
 800ddbe:	2000      	movs	r0, #0
 800ddc0:	e008      	b.n	800ddd4 <_printf_common+0xa8>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	4652      	mov	r2, sl
 800ddc6:	4649      	mov	r1, r9
 800ddc8:	4638      	mov	r0, r7
 800ddca:	47c0      	blx	r8
 800ddcc:	3001      	adds	r0, #1
 800ddce:	d103      	bne.n	800ddd8 <_printf_common+0xac>
 800ddd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd8:	3501      	adds	r5, #1
 800ddda:	e7c6      	b.n	800dd6a <_printf_common+0x3e>
 800dddc:	18e1      	adds	r1, r4, r3
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	2030      	movs	r0, #48	; 0x30
 800dde2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dde6:	4422      	add	r2, r4
 800dde8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddf0:	3302      	adds	r3, #2
 800ddf2:	e7c7      	b.n	800dd84 <_printf_common+0x58>
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	4622      	mov	r2, r4
 800ddf8:	4649      	mov	r1, r9
 800ddfa:	4638      	mov	r0, r7
 800ddfc:	47c0      	blx	r8
 800ddfe:	3001      	adds	r0, #1
 800de00:	d0e6      	beq.n	800ddd0 <_printf_common+0xa4>
 800de02:	3601      	adds	r6, #1
 800de04:	e7d9      	b.n	800ddba <_printf_common+0x8e>
	...

0800de08 <_printf_i>:
 800de08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de0c:	7e0f      	ldrb	r7, [r1, #24]
 800de0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800de10:	2f78      	cmp	r7, #120	; 0x78
 800de12:	4691      	mov	r9, r2
 800de14:	4680      	mov	r8, r0
 800de16:	460c      	mov	r4, r1
 800de18:	469a      	mov	sl, r3
 800de1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800de1e:	d807      	bhi.n	800de30 <_printf_i+0x28>
 800de20:	2f62      	cmp	r7, #98	; 0x62
 800de22:	d80a      	bhi.n	800de3a <_printf_i+0x32>
 800de24:	2f00      	cmp	r7, #0
 800de26:	f000 80d4 	beq.w	800dfd2 <_printf_i+0x1ca>
 800de2a:	2f58      	cmp	r7, #88	; 0x58
 800de2c:	f000 80c0 	beq.w	800dfb0 <_printf_i+0x1a8>
 800de30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de38:	e03a      	b.n	800deb0 <_printf_i+0xa8>
 800de3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de3e:	2b15      	cmp	r3, #21
 800de40:	d8f6      	bhi.n	800de30 <_printf_i+0x28>
 800de42:	a101      	add	r1, pc, #4	; (adr r1, 800de48 <_printf_i+0x40>)
 800de44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de48:	0800dea1 	.word	0x0800dea1
 800de4c:	0800deb5 	.word	0x0800deb5
 800de50:	0800de31 	.word	0x0800de31
 800de54:	0800de31 	.word	0x0800de31
 800de58:	0800de31 	.word	0x0800de31
 800de5c:	0800de31 	.word	0x0800de31
 800de60:	0800deb5 	.word	0x0800deb5
 800de64:	0800de31 	.word	0x0800de31
 800de68:	0800de31 	.word	0x0800de31
 800de6c:	0800de31 	.word	0x0800de31
 800de70:	0800de31 	.word	0x0800de31
 800de74:	0800dfb9 	.word	0x0800dfb9
 800de78:	0800dee1 	.word	0x0800dee1
 800de7c:	0800df73 	.word	0x0800df73
 800de80:	0800de31 	.word	0x0800de31
 800de84:	0800de31 	.word	0x0800de31
 800de88:	0800dfdb 	.word	0x0800dfdb
 800de8c:	0800de31 	.word	0x0800de31
 800de90:	0800dee1 	.word	0x0800dee1
 800de94:	0800de31 	.word	0x0800de31
 800de98:	0800de31 	.word	0x0800de31
 800de9c:	0800df7b 	.word	0x0800df7b
 800dea0:	682b      	ldr	r3, [r5, #0]
 800dea2:	1d1a      	adds	r2, r3, #4
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	602a      	str	r2, [r5, #0]
 800dea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800deac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800deb0:	2301      	movs	r3, #1
 800deb2:	e09f      	b.n	800dff4 <_printf_i+0x1ec>
 800deb4:	6820      	ldr	r0, [r4, #0]
 800deb6:	682b      	ldr	r3, [r5, #0]
 800deb8:	0607      	lsls	r7, r0, #24
 800deba:	f103 0104 	add.w	r1, r3, #4
 800debe:	6029      	str	r1, [r5, #0]
 800dec0:	d501      	bpl.n	800dec6 <_printf_i+0xbe>
 800dec2:	681e      	ldr	r6, [r3, #0]
 800dec4:	e003      	b.n	800dece <_printf_i+0xc6>
 800dec6:	0646      	lsls	r6, r0, #25
 800dec8:	d5fb      	bpl.n	800dec2 <_printf_i+0xba>
 800deca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dece:	2e00      	cmp	r6, #0
 800ded0:	da03      	bge.n	800deda <_printf_i+0xd2>
 800ded2:	232d      	movs	r3, #45	; 0x2d
 800ded4:	4276      	negs	r6, r6
 800ded6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800deda:	485a      	ldr	r0, [pc, #360]	; (800e044 <_printf_i+0x23c>)
 800dedc:	230a      	movs	r3, #10
 800dede:	e012      	b.n	800df06 <_printf_i+0xfe>
 800dee0:	682b      	ldr	r3, [r5, #0]
 800dee2:	6820      	ldr	r0, [r4, #0]
 800dee4:	1d19      	adds	r1, r3, #4
 800dee6:	6029      	str	r1, [r5, #0]
 800dee8:	0605      	lsls	r5, r0, #24
 800deea:	d501      	bpl.n	800def0 <_printf_i+0xe8>
 800deec:	681e      	ldr	r6, [r3, #0]
 800deee:	e002      	b.n	800def6 <_printf_i+0xee>
 800def0:	0641      	lsls	r1, r0, #25
 800def2:	d5fb      	bpl.n	800deec <_printf_i+0xe4>
 800def4:	881e      	ldrh	r6, [r3, #0]
 800def6:	4853      	ldr	r0, [pc, #332]	; (800e044 <_printf_i+0x23c>)
 800def8:	2f6f      	cmp	r7, #111	; 0x6f
 800defa:	bf0c      	ite	eq
 800defc:	2308      	moveq	r3, #8
 800defe:	230a      	movne	r3, #10
 800df00:	2100      	movs	r1, #0
 800df02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df06:	6865      	ldr	r5, [r4, #4]
 800df08:	60a5      	str	r5, [r4, #8]
 800df0a:	2d00      	cmp	r5, #0
 800df0c:	bfa2      	ittt	ge
 800df0e:	6821      	ldrge	r1, [r4, #0]
 800df10:	f021 0104 	bicge.w	r1, r1, #4
 800df14:	6021      	strge	r1, [r4, #0]
 800df16:	b90e      	cbnz	r6, 800df1c <_printf_i+0x114>
 800df18:	2d00      	cmp	r5, #0
 800df1a:	d04b      	beq.n	800dfb4 <_printf_i+0x1ac>
 800df1c:	4615      	mov	r5, r2
 800df1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800df22:	fb03 6711 	mls	r7, r3, r1, r6
 800df26:	5dc7      	ldrb	r7, [r0, r7]
 800df28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800df2c:	4637      	mov	r7, r6
 800df2e:	42bb      	cmp	r3, r7
 800df30:	460e      	mov	r6, r1
 800df32:	d9f4      	bls.n	800df1e <_printf_i+0x116>
 800df34:	2b08      	cmp	r3, #8
 800df36:	d10b      	bne.n	800df50 <_printf_i+0x148>
 800df38:	6823      	ldr	r3, [r4, #0]
 800df3a:	07de      	lsls	r6, r3, #31
 800df3c:	d508      	bpl.n	800df50 <_printf_i+0x148>
 800df3e:	6923      	ldr	r3, [r4, #16]
 800df40:	6861      	ldr	r1, [r4, #4]
 800df42:	4299      	cmp	r1, r3
 800df44:	bfde      	ittt	le
 800df46:	2330      	movle	r3, #48	; 0x30
 800df48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df50:	1b52      	subs	r2, r2, r5
 800df52:	6122      	str	r2, [r4, #16]
 800df54:	f8cd a000 	str.w	sl, [sp]
 800df58:	464b      	mov	r3, r9
 800df5a:	aa03      	add	r2, sp, #12
 800df5c:	4621      	mov	r1, r4
 800df5e:	4640      	mov	r0, r8
 800df60:	f7ff fee4 	bl	800dd2c <_printf_common>
 800df64:	3001      	adds	r0, #1
 800df66:	d14a      	bne.n	800dffe <_printf_i+0x1f6>
 800df68:	f04f 30ff 	mov.w	r0, #4294967295
 800df6c:	b004      	add	sp, #16
 800df6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df72:	6823      	ldr	r3, [r4, #0]
 800df74:	f043 0320 	orr.w	r3, r3, #32
 800df78:	6023      	str	r3, [r4, #0]
 800df7a:	4833      	ldr	r0, [pc, #204]	; (800e048 <_printf_i+0x240>)
 800df7c:	2778      	movs	r7, #120	; 0x78
 800df7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800df82:	6823      	ldr	r3, [r4, #0]
 800df84:	6829      	ldr	r1, [r5, #0]
 800df86:	061f      	lsls	r7, r3, #24
 800df88:	f851 6b04 	ldr.w	r6, [r1], #4
 800df8c:	d402      	bmi.n	800df94 <_printf_i+0x18c>
 800df8e:	065f      	lsls	r7, r3, #25
 800df90:	bf48      	it	mi
 800df92:	b2b6      	uxthmi	r6, r6
 800df94:	07df      	lsls	r7, r3, #31
 800df96:	bf48      	it	mi
 800df98:	f043 0320 	orrmi.w	r3, r3, #32
 800df9c:	6029      	str	r1, [r5, #0]
 800df9e:	bf48      	it	mi
 800dfa0:	6023      	strmi	r3, [r4, #0]
 800dfa2:	b91e      	cbnz	r6, 800dfac <_printf_i+0x1a4>
 800dfa4:	6823      	ldr	r3, [r4, #0]
 800dfa6:	f023 0320 	bic.w	r3, r3, #32
 800dfaa:	6023      	str	r3, [r4, #0]
 800dfac:	2310      	movs	r3, #16
 800dfae:	e7a7      	b.n	800df00 <_printf_i+0xf8>
 800dfb0:	4824      	ldr	r0, [pc, #144]	; (800e044 <_printf_i+0x23c>)
 800dfb2:	e7e4      	b.n	800df7e <_printf_i+0x176>
 800dfb4:	4615      	mov	r5, r2
 800dfb6:	e7bd      	b.n	800df34 <_printf_i+0x12c>
 800dfb8:	682b      	ldr	r3, [r5, #0]
 800dfba:	6826      	ldr	r6, [r4, #0]
 800dfbc:	6961      	ldr	r1, [r4, #20]
 800dfbe:	1d18      	adds	r0, r3, #4
 800dfc0:	6028      	str	r0, [r5, #0]
 800dfc2:	0635      	lsls	r5, r6, #24
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	d501      	bpl.n	800dfcc <_printf_i+0x1c4>
 800dfc8:	6019      	str	r1, [r3, #0]
 800dfca:	e002      	b.n	800dfd2 <_printf_i+0x1ca>
 800dfcc:	0670      	lsls	r0, r6, #25
 800dfce:	d5fb      	bpl.n	800dfc8 <_printf_i+0x1c0>
 800dfd0:	8019      	strh	r1, [r3, #0]
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	6123      	str	r3, [r4, #16]
 800dfd6:	4615      	mov	r5, r2
 800dfd8:	e7bc      	b.n	800df54 <_printf_i+0x14c>
 800dfda:	682b      	ldr	r3, [r5, #0]
 800dfdc:	1d1a      	adds	r2, r3, #4
 800dfde:	602a      	str	r2, [r5, #0]
 800dfe0:	681d      	ldr	r5, [r3, #0]
 800dfe2:	6862      	ldr	r2, [r4, #4]
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	f7f2 f8fa 	bl	80001e0 <memchr>
 800dfec:	b108      	cbz	r0, 800dff2 <_printf_i+0x1ea>
 800dfee:	1b40      	subs	r0, r0, r5
 800dff0:	6060      	str	r0, [r4, #4]
 800dff2:	6863      	ldr	r3, [r4, #4]
 800dff4:	6123      	str	r3, [r4, #16]
 800dff6:	2300      	movs	r3, #0
 800dff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dffc:	e7aa      	b.n	800df54 <_printf_i+0x14c>
 800dffe:	6923      	ldr	r3, [r4, #16]
 800e000:	462a      	mov	r2, r5
 800e002:	4649      	mov	r1, r9
 800e004:	4640      	mov	r0, r8
 800e006:	47d0      	blx	sl
 800e008:	3001      	adds	r0, #1
 800e00a:	d0ad      	beq.n	800df68 <_printf_i+0x160>
 800e00c:	6823      	ldr	r3, [r4, #0]
 800e00e:	079b      	lsls	r3, r3, #30
 800e010:	d413      	bmi.n	800e03a <_printf_i+0x232>
 800e012:	68e0      	ldr	r0, [r4, #12]
 800e014:	9b03      	ldr	r3, [sp, #12]
 800e016:	4298      	cmp	r0, r3
 800e018:	bfb8      	it	lt
 800e01a:	4618      	movlt	r0, r3
 800e01c:	e7a6      	b.n	800df6c <_printf_i+0x164>
 800e01e:	2301      	movs	r3, #1
 800e020:	4632      	mov	r2, r6
 800e022:	4649      	mov	r1, r9
 800e024:	4640      	mov	r0, r8
 800e026:	47d0      	blx	sl
 800e028:	3001      	adds	r0, #1
 800e02a:	d09d      	beq.n	800df68 <_printf_i+0x160>
 800e02c:	3501      	adds	r5, #1
 800e02e:	68e3      	ldr	r3, [r4, #12]
 800e030:	9903      	ldr	r1, [sp, #12]
 800e032:	1a5b      	subs	r3, r3, r1
 800e034:	42ab      	cmp	r3, r5
 800e036:	dcf2      	bgt.n	800e01e <_printf_i+0x216>
 800e038:	e7eb      	b.n	800e012 <_printf_i+0x20a>
 800e03a:	2500      	movs	r5, #0
 800e03c:	f104 0619 	add.w	r6, r4, #25
 800e040:	e7f5      	b.n	800e02e <_printf_i+0x226>
 800e042:	bf00      	nop
 800e044:	0800ebcd 	.word	0x0800ebcd
 800e048:	0800ebde 	.word	0x0800ebde

0800e04c <memmove>:
 800e04c:	4288      	cmp	r0, r1
 800e04e:	b510      	push	{r4, lr}
 800e050:	eb01 0402 	add.w	r4, r1, r2
 800e054:	d902      	bls.n	800e05c <memmove+0x10>
 800e056:	4284      	cmp	r4, r0
 800e058:	4623      	mov	r3, r4
 800e05a:	d807      	bhi.n	800e06c <memmove+0x20>
 800e05c:	1e43      	subs	r3, r0, #1
 800e05e:	42a1      	cmp	r1, r4
 800e060:	d008      	beq.n	800e074 <memmove+0x28>
 800e062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e06a:	e7f8      	b.n	800e05e <memmove+0x12>
 800e06c:	4402      	add	r2, r0
 800e06e:	4601      	mov	r1, r0
 800e070:	428a      	cmp	r2, r1
 800e072:	d100      	bne.n	800e076 <memmove+0x2a>
 800e074:	bd10      	pop	{r4, pc}
 800e076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e07a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e07e:	e7f7      	b.n	800e070 <memmove+0x24>

0800e080 <_sbrk_r>:
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	4d06      	ldr	r5, [pc, #24]	; (800e09c <_sbrk_r+0x1c>)
 800e084:	2300      	movs	r3, #0
 800e086:	4604      	mov	r4, r0
 800e088:	4608      	mov	r0, r1
 800e08a:	602b      	str	r3, [r5, #0]
 800e08c:	f7f4 f86e 	bl	800216c <_sbrk>
 800e090:	1c43      	adds	r3, r0, #1
 800e092:	d102      	bne.n	800e09a <_sbrk_r+0x1a>
 800e094:	682b      	ldr	r3, [r5, #0]
 800e096:	b103      	cbz	r3, 800e09a <_sbrk_r+0x1a>
 800e098:	6023      	str	r3, [r4, #0]
 800e09a:	bd38      	pop	{r3, r4, r5, pc}
 800e09c:	20001a64 	.word	0x20001a64

0800e0a0 <_realloc_r>:
 800e0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a4:	4680      	mov	r8, r0
 800e0a6:	4614      	mov	r4, r2
 800e0a8:	460e      	mov	r6, r1
 800e0aa:	b921      	cbnz	r1, 800e0b6 <_realloc_r+0x16>
 800e0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b0:	4611      	mov	r1, r2
 800e0b2:	f7ff bc57 	b.w	800d964 <_malloc_r>
 800e0b6:	b92a      	cbnz	r2, 800e0c4 <_realloc_r+0x24>
 800e0b8:	f7ff fbe8 	bl	800d88c <_free_r>
 800e0bc:	4625      	mov	r5, r4
 800e0be:	4628      	mov	r0, r5
 800e0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c4:	f000 f81b 	bl	800e0fe <_malloc_usable_size_r>
 800e0c8:	4284      	cmp	r4, r0
 800e0ca:	4607      	mov	r7, r0
 800e0cc:	d802      	bhi.n	800e0d4 <_realloc_r+0x34>
 800e0ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0d2:	d812      	bhi.n	800e0fa <_realloc_r+0x5a>
 800e0d4:	4621      	mov	r1, r4
 800e0d6:	4640      	mov	r0, r8
 800e0d8:	f7ff fc44 	bl	800d964 <_malloc_r>
 800e0dc:	4605      	mov	r5, r0
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d0ed      	beq.n	800e0be <_realloc_r+0x1e>
 800e0e2:	42bc      	cmp	r4, r7
 800e0e4:	4622      	mov	r2, r4
 800e0e6:	4631      	mov	r1, r6
 800e0e8:	bf28      	it	cs
 800e0ea:	463a      	movcs	r2, r7
 800e0ec:	f7ff fbc0 	bl	800d870 <memcpy>
 800e0f0:	4631      	mov	r1, r6
 800e0f2:	4640      	mov	r0, r8
 800e0f4:	f7ff fbca 	bl	800d88c <_free_r>
 800e0f8:	e7e1      	b.n	800e0be <_realloc_r+0x1e>
 800e0fa:	4635      	mov	r5, r6
 800e0fc:	e7df      	b.n	800e0be <_realloc_r+0x1e>

0800e0fe <_malloc_usable_size_r>:
 800e0fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e102:	1f18      	subs	r0, r3, #4
 800e104:	2b00      	cmp	r3, #0
 800e106:	bfbc      	itt	lt
 800e108:	580b      	ldrlt	r3, [r1, r0]
 800e10a:	18c0      	addlt	r0, r0, r3
 800e10c:	4770      	bx	lr
	...

0800e110 <_init>:
 800e110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e112:	bf00      	nop
 800e114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e116:	bc08      	pop	{r3}
 800e118:	469e      	mov	lr, r3
 800e11a:	4770      	bx	lr

0800e11c <_fini>:
 800e11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11e:	bf00      	nop
 800e120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e122:	bc08      	pop	{r3}
 800e124:	469e      	mov	lr, r3
 800e126:	4770      	bx	lr
