
PQ9_raadioside_moodul_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3b0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ac  0800c53c  0800c53c  0001c53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cee8  0800cee8  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800cee8  0800cee8  0001cee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cef0  0800cef0  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cef0  0800cef0  0001cef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cef4  0800cef4  0001cef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800cef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001778  20000110  0800d008  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001888  0800d008  00021888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b1a5  00000000  00000000  00020183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d86  00000000  00000000  0003b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  0003f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109d  00000000  00000000  00040680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ea98  00000000  00000000  0004171d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b4e1  00000000  00000000  000601b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9e06  00000000  00000000  0007b696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bd8  00000000  00000000  0013549c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013b074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000110 	.word	0x20000110
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800c524 	.word	0x0800c524

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000114 	.word	0x20000114
 80001c8:	0800c524 	.word	0x0800c524

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004cc:	f3bf 8f4f 	dsb	sy
}
 80004d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <__NVIC_SystemReset+0x24>)
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80004da:	4904      	ldr	r1, [pc, #16]	; (80004ec <__NVIC_SystemReset+0x24>)
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <__NVIC_SystemReset+0x28>)
 80004de:	4313      	orrs	r3, r2
 80004e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004e2:	f3bf 8f4f 	dsb	sy
}
 80004e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <__NVIC_SystemReset+0x20>
 80004ec:	e000ed00 	.word	0xe000ed00
 80004f0:	05fa0004 	.word	0x05fa0004

080004f4 <CDC_FS_RxDataReady_Callback>:
/* USER CODE BEGIN 0 */

/* A callback function for USB received data handling.
 * NB! Must be kept short because it is triggered by an interrupt.
 */
void CDC_FS_RxDataReady_Callback(uint8_t * RxBuf, uint8_t Length){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
	if (Length == 1){
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d15e      	bne.n	80005c4 <CDC_FS_RxDataReady_Callback+0xd0>
		switch (*RxBuf){
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b7f      	cmp	r3, #127	; 0x7f
 800050c:	d022      	beq.n	8000554 <CDC_FS_RxDataReady_Callback+0x60>
 800050e:	2b7f      	cmp	r3, #127	; 0x7f
 8000510:	dc2b      	bgt.n	800056a <CDC_FS_RxDataReady_Callback+0x76>
 8000512:	2b0d      	cmp	r3, #13
 8000514:	d006      	beq.n	8000524 <CDC_FS_RxDataReady_Callback+0x30>
 8000516:	2b0d      	cmp	r3, #13
 8000518:	dc27      	bgt.n	800056a <CDC_FS_RxDataReady_Callback+0x76>
 800051a:	2b08      	cmp	r3, #8
 800051c:	d00a      	beq.n	8000534 <CDC_FS_RxDataReady_Callback+0x40>
 800051e:	2b0c      	cmp	r3, #12
 8000520:	d013      	beq.n	800054a <CDC_FS_RxDataReady_Callback+0x56>
 8000522:	e022      	b.n	800056a <CDC_FS_RxDataReady_Callback+0x76>
		case '\r': // Marks the end of buffer
			CDC_Transmit_FS((uint8_t *) "\r\n", 2);
 8000524:	2102      	movs	r1, #2
 8000526:	4832      	ldr	r0, [pc, #200]	; (80005f0 <CDC_FS_RxDataReady_Callback+0xfc>)
 8000528:	f00b fa86 	bl	800ba38 <CDC_Transmit_FS>
			USB_RxDataReadyFlag = 1; // The contents of the buffer are ready to be parsed
 800052c:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <CDC_FS_RxDataReady_Callback+0x100>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
			break;
 8000532:	e058      	b.n	80005e6 <CDC_FS_RxDataReady_Callback+0xf2>
		case '\b': // BACKSPACE key (backspace for Minicom)
			if (USB_RxBufIndex > 0){
 8000534:	4b30      	ldr	r3, [pc, #192]	; (80005f8 <CDC_FS_RxDataReady_Callback+0x104>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d051      	beq.n	80005e0 <CDC_FS_RxDataReady_Callback+0xec>
				USB_RxBufIndex--; // Take a step back in the buffer
 800053c:	4b2e      	ldr	r3, [pc, #184]	; (80005f8 <CDC_FS_RxDataReady_Callback+0x104>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	3b01      	subs	r3, #1
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <CDC_FS_RxDataReady_Callback+0x104>)
 8000546:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000548:	e04a      	b.n	80005e0 <CDC_FS_RxDataReady_Callback+0xec>
		case 0x0C:
			CDC_Transmit_FS((uint8_t *) "\e[2J\e[0;0HEnter a command: ", 27);
 800054a:	211b      	movs	r1, #27
 800054c:	482b      	ldr	r0, [pc, #172]	; (80005fc <CDC_FS_RxDataReady_Callback+0x108>)
 800054e:	f00b fa73 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000552:	e048      	b.n	80005e6 <CDC_FS_RxDataReady_Callback+0xf2>
		case 0x7F: // DEL key (backspace for Picocom and Tio)
			if (USB_RxBufIndex > 0){
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <CDC_FS_RxDataReady_Callback+0x104>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d043      	beq.n	80005e4 <CDC_FS_RxDataReady_Callback+0xf0>
				USB_RxBufIndex--; // Take a step back in the buffer
 800055c:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <CDC_FS_RxDataReady_Callback+0x104>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	3b01      	subs	r3, #1
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <CDC_FS_RxDataReady_Callback+0x104>)
 8000566:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000568:	e03c      	b.n	80005e4 <CDC_FS_RxDataReady_Callback+0xf0>
		default:
			if (USB_RxBufIndex < (USB_RxBufLen - 1)){
 800056a:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <CDC_FS_RxDataReady_Callback+0x104>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	461a      	mov	r2, r3
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <CDC_FS_RxDataReady_Callback+0x10c>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	3b01      	subs	r3, #1
 8000576:	429a      	cmp	r2, r3
 8000578:	da0d      	bge.n	8000596 <CDC_FS_RxDataReady_Callback+0xa2>
				USB_RxBuf[USB_RxBufIndex] = *RxBuf;
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <CDC_FS_RxDataReady_Callback+0x104>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	461a      	mov	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7819      	ldrb	r1, [r3, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <CDC_FS_RxDataReady_Callback+0x110>)
 8000586:	5499      	strb	r1, [r3, r2]
				USB_RxBufIndex++;
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <CDC_FS_RxDataReady_Callback+0x104>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <CDC_FS_RxDataReady_Callback+0x104>)
 8000592:	701a      	strb	r2, [r3, #0]
		// Copy the contents of the main USB buffer to a secondary buffer for parsing
		strncpy((char *) USB_RxBuf, (char *) RxBuf, Length);
		USB_RxBufLen = Length;
		USB_RxDataReadyFlag = 1;
	}
}
 8000594:	e027      	b.n	80005e6 <CDC_FS_RxDataReady_Callback+0xf2>
			else if (USB_RxBufIndex == USB_RxBufLen - 1){
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <CDC_FS_RxDataReady_Callback+0x104>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <CDC_FS_RxDataReady_Callback+0x10c>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d10a      	bne.n	80005bc <CDC_FS_RxDataReady_Callback+0xc8>
				USB_RxBuf[USB_RxBufIndex] = *RxBuf;
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <CDC_FS_RxDataReady_Callback+0x104>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	461a      	mov	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7819      	ldrb	r1, [r3, #0]
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <CDC_FS_RxDataReady_Callback+0x110>)
 80005b2:	5499      	strb	r1, [r3, r2]
				USB_RxBufFull = 1;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <CDC_FS_RxDataReady_Callback+0x114>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
}
 80005ba:	e014      	b.n	80005e6 <CDC_FS_RxDataReady_Callback+0xf2>
				USB_RxBufOverflow = 1;
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <CDC_FS_RxDataReady_Callback+0x118>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
}
 80005c2:	e010      	b.n	80005e6 <CDC_FS_RxDataReady_Callback+0xf2>
		strncpy((char *) USB_RxBuf, (char *) RxBuf, Length);
 80005c4:	78fb      	ldrb	r3, [r7, #3]
 80005c6:	461a      	mov	r2, r3
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	480e      	ldr	r0, [pc, #56]	; (8000604 <CDC_FS_RxDataReady_Callback+0x110>)
 80005cc:	f00b ff64 	bl	800c498 <strncpy>
		USB_RxBufLen = Length;
 80005d0:	78fb      	ldrb	r3, [r7, #3]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <CDC_FS_RxDataReady_Callback+0x10c>)
 80005d6:	801a      	strh	r2, [r3, #0]
		USB_RxDataReadyFlag = 1;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <CDC_FS_RxDataReady_Callback+0x100>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
}
 80005de:	e002      	b.n	80005e6 <CDC_FS_RxDataReady_Callback+0xf2>
			break;
 80005e0:	bf00      	nop
 80005e2:	e000      	b.n	80005e6 <CDC_FS_RxDataReady_Callback+0xf2>
			break;
 80005e4:	bf00      	nop
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	0800c53c 	.word	0x0800c53c
 80005f4:	20000685 	.word	0x20000685
 80005f8:	20000680 	.word	0x20000680
 80005fc:	0800c540 	.word	0x0800c540
 8000600:	20000002 	.word	0x20000002
 8000604:	20000280 	.word	0x20000280
 8000608:	20000681 	.word	0x20000681
 800060c:	20000682 	.word	0x20000682

08000610 <USB_Rx_Parser>:

void USB_Rx_Parser(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0
	if (USB_RxDataReadyFlag){
 8000616:	4bc6      	ldr	r3, [pc, #792]	; (8000930 <USB_Rx_Parser+0x320>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	f000 822c 	beq.w	8000a78 <USB_Rx_Parser+0x468>
		if (Reset){
 8000620:	4bc4      	ldr	r3, [pc, #784]	; (8000934 <USB_Rx_Parser+0x324>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d039      	beq.n	800069c <USB_Rx_Parser+0x8c>
			if (USB_RxBufIndex == 1){
 8000628:	4bc3      	ldr	r3, [pc, #780]	; (8000938 <USB_Rx_Parser+0x328>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d12d      	bne.n	800068c <USB_Rx_Parser+0x7c>
				switch (*USB_RxBuf){
 8000630:	4bc2      	ldr	r3, [pc, #776]	; (800093c <USB_Rx_Parser+0x32c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b6e      	cmp	r3, #110	; 0x6e
 8000636:	d019      	beq.n	800066c <USB_Rx_Parser+0x5c>
 8000638:	2b79      	cmp	r3, #121	; 0x79
 800063a:	d11f      	bne.n	800067c <USB_Rx_Parser+0x6c>
					case 'y':
						if (ANSI_ColorsOn){
 800063c:	4bc0      	ldr	r3, [pc, #768]	; (8000940 <USB_Rx_Parser+0x330>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d007      	beq.n	8000654 <USB_Rx_Parser+0x44>
							HAL_Delay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f001 f991 	bl	800196c <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "\e[1m\e[31mRESTARTING!\r\n\e[37m\e[0m", 31);
 800064a:	211f      	movs	r1, #31
 800064c:	48bd      	ldr	r0, [pc, #756]	; (8000944 <USB_Rx_Parser+0x334>)
 800064e:	f00b f9f3 	bl	800ba38 <CDC_Transmit_FS>
 8000652:	e006      	b.n	8000662 <USB_Rx_Parser+0x52>
						}
						else{
							HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f001 f989 	bl	800196c <HAL_Delay>
							CDC_Transmit_FS((uint8_t *) "RESTARTING!\r\n", 13);
 800065a:	210d      	movs	r1, #13
 800065c:	48ba      	ldr	r0, [pc, #744]	; (8000948 <USB_Rx_Parser+0x338>)
 800065e:	f00b f9eb 	bl	800ba38 <CDC_Transmit_FS>
						}
						HAL_Delay(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f001 f982 	bl	800196c <HAL_Delay>
						NVIC_SystemReset(); // Reset the device
 8000668:	f7ff ff2e 	bl	80004c8 <__NVIC_SystemReset>
					case 'n':
						Reset = 0;
 800066c:	4bb1      	ldr	r3, [pc, #708]	; (8000934 <USB_Rx_Parser+0x324>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
						USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_ENTER_CMD);
 8000672:	2102      	movs	r1, #2
 8000674:	2000      	movs	r0, #0
 8000676:	f000 fa17 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
						break;
 800067a:	e1f7      	b.n	8000a6c <USB_Rx_Parser+0x45c>
					default:
						HAL_Delay(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f001 f975 	bl	800196c <HAL_Delay>
						CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 8000682:	2119      	movs	r1, #25
 8000684:	48b1      	ldr	r0, [pc, #708]	; (800094c <USB_Rx_Parser+0x33c>)
 8000686:	f00b f9d7 	bl	800ba38 <CDC_Transmit_FS>
 800068a:	e1ef      	b.n	8000a6c <USB_Rx_Parser+0x45c>
				}
			}
			else{
				HAL_Delay(1);
 800068c:	2001      	movs	r0, #1
 800068e:	f001 f96d 	bl	800196c <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 8000692:	2119      	movs	r1, #25
 8000694:	48ad      	ldr	r0, [pc, #692]	; (800094c <USB_Rx_Parser+0x33c>)
 8000696:	f00b f9cf 	bl	800ba38 <CDC_Transmit_FS>
 800069a:	e1e7      	b.n	8000a6c <USB_Rx_Parser+0x45c>
			}
		}
		else if (USB_RxBufIndex == 1){
 800069c:	4ba6      	ldr	r3, [pc, #664]	; (8000938 <USB_Rx_Parser+0x328>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	f040 81bb 	bne.w	8000a1c <USB_Rx_Parser+0x40c>
			switch (*USB_RxBuf){
 80006a6:	4ba5      	ldr	r3, [pc, #660]	; (800093c <USB_Rx_Parser+0x32c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	3b52      	subs	r3, #82	; 0x52
 80006ac:	2b22      	cmp	r3, #34	; 0x22
 80006ae:	f200 81a7 	bhi.w	8000a00 <USB_Rx_Parser+0x3f0>
 80006b2:	a201      	add	r2, pc, #4	; (adr r2, 80006b8 <USB_Rx_Parser+0xa8>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	08000827 	.word	0x08000827
 80006bc:	08000a01 	.word	0x08000a01
 80006c0:	08000a01 	.word	0x08000a01
 80006c4:	08000a01 	.word	0x08000a01
 80006c8:	08000a01 	.word	0x08000a01
 80006cc:	08000a01 	.word	0x08000a01
 80006d0:	08000a01 	.word	0x08000a01
 80006d4:	08000a01 	.word	0x08000a01
 80006d8:	08000a01 	.word	0x08000a01
 80006dc:	08000a01 	.word	0x08000a01
 80006e0:	08000a01 	.word	0x08000a01
 80006e4:	08000a01 	.word	0x08000a01
 80006e8:	08000a01 	.word	0x08000a01
 80006ec:	08000a01 	.word	0x08000a01
 80006f0:	08000a01 	.word	0x08000a01
 80006f4:	08000a01 	.word	0x08000a01
 80006f8:	08000a01 	.word	0x08000a01
 80006fc:	080007f5 	.word	0x080007f5
 8000700:	08000a01 	.word	0x08000a01
 8000704:	08000a01 	.word	0x08000a01
 8000708:	08000a01 	.word	0x08000a01
 800070c:	08000a01 	.word	0x08000a01
 8000710:	08000a01 	.word	0x08000a01
 8000714:	080008cd 	.word	0x080008cd
 8000718:	08000a01 	.word	0x08000a01
 800071c:	08000a01 	.word	0x08000a01
 8000720:	08000745 	.word	0x08000745
 8000724:	08000769 	.word	0x08000769
 8000728:	08000a01 	.word	0x08000a01
 800072c:	08000a01 	.word	0x08000a01
 8000730:	080008f5 	.word	0x080008f5
 8000734:	08000a01 	.word	0x08000a01
 8000738:	0800083d 	.word	0x0800083d
 800073c:	08000a01 	.word	0x08000a01
 8000740:	08000885 	.word	0x08000885
			case 'l':
				if (ANSI_ColorsOn){
 8000744:	4b7e      	ldr	r3, [pc, #504]	; (8000940 <USB_Rx_Parser+0x330>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d004      	beq.n	8000756 <USB_Rx_Parser+0x146>
					USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_CMD_LIST);
 800074c:	2101      	movs	r1, #1
 800074e:	2001      	movs	r0, #1
 8000750:	f000 f9aa 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
 8000754:	e003      	b.n	800075e <USB_Rx_Parser+0x14e>
				}
				else{
					USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_CMD_LIST);
 8000756:	2101      	movs	r1, #1
 8000758:	2000      	movs	r0, #0
 800075a:	f000 f9a5 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
				}
				USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_ENTER_CMD);
 800075e:	2102      	movs	r1, #2
 8000760:	2000      	movs	r0, #0
 8000762:	f000 f9a1 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
				break;
 8000766:	e181      	b.n	8000a6c <USB_Rx_Parser+0x45c>
			case 'm':
				uint8_t MsgTxBuf[32];
				if (ANSI_ColorsOn){
 8000768:	4b75      	ldr	r3, [pc, #468]	; (8000940 <USB_Rx_Parser+0x330>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d02a      	beq.n	80007c6 <USB_Rx_Parser+0x1b6>
					HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f001 f8fb 	bl	800196c <HAL_Delay>
					MsgTxBuf[0] = '\e';
 8000776:	231b      	movs	r3, #27
 8000778:	703b      	strb	r3, [r7, #0]
					MsgTxBuf[1] = '[';
 800077a:	235b      	movs	r3, #91	; 0x5b
 800077c:	707b      	strb	r3, [r7, #1]
					MsgTxBuf[2] = '3';
 800077e:	2333      	movs	r3, #51	; 0x33
 8000780:	70bb      	strb	r3, [r7, #2]
					MsgTxBuf[3] = '2';
 8000782:	2332      	movs	r3, #50	; 0x32
 8000784:	70fb      	strb	r3, [r7, #3]
					MsgTxBuf[4] = 'm';
 8000786:	236d      	movs	r3, #109	; 0x6d
 8000788:	713b      	strb	r3, [r7, #4]

					MsgTxBuf[5] = (uint8_t) ADC_Raw_Results[0];
 800078a:	4b71      	ldr	r3, [pc, #452]	; (8000950 <USB_Rx_Parser+0x340>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	717b      	strb	r3, [r7, #5]
					MsgTxBuf[6] = (uint8_t) (ADC_Raw_Results[0] >> 8);
 8000792:	4b6f      	ldr	r3, [pc, #444]	; (8000950 <USB_Rx_Parser+0x340>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	0a1b      	lsrs	r3, r3, #8
 8000798:	b29b      	uxth	r3, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	71bb      	strb	r3, [r7, #6]

					MsgTxBuf[7] = '\e';
 800079e:	231b      	movs	r3, #27
 80007a0:	71fb      	strb	r3, [r7, #7]
					MsgTxBuf[8] = '[';
 80007a2:	235b      	movs	r3, #91	; 0x5b
 80007a4:	723b      	strb	r3, [r7, #8]
					MsgTxBuf[9] = '3';
 80007a6:	2333      	movs	r3, #51	; 0x33
 80007a8:	727b      	strb	r3, [r7, #9]
					MsgTxBuf[10] = '7';
 80007aa:	2337      	movs	r3, #55	; 0x37
 80007ac:	72bb      	strb	r3, [r7, #10]
					MsgTxBuf[11] = 'm';
 80007ae:	236d      	movs	r3, #109	; 0x6d
 80007b0:	72fb      	strb	r3, [r7, #11]
					MsgTxBuf[12] = '\r';
 80007b2:	230d      	movs	r3, #13
 80007b4:	733b      	strb	r3, [r7, #12]
					MsgTxBuf[13] = '\n';
 80007b6:	230a      	movs	r3, #10
 80007b8:	737b      	strb	r3, [r7, #13]
					CDC_Transmit_FS((uint8_t *) MsgTxBuf, 14);
 80007ba:	463b      	mov	r3, r7
 80007bc:	210e      	movs	r1, #14
 80007be:	4618      	mov	r0, r3
 80007c0:	f00b f93a 	bl	800ba38 <CDC_Transmit_FS>

					MsgTxBuf[2] = '\r';
					MsgTxBuf[3] = '\n';
					CDC_Transmit_FS((uint8_t *) MsgTxBuf, 4);
				}
				break;
 80007c4:	e152      	b.n	8000a6c <USB_Rx_Parser+0x45c>
					HAL_Delay(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f001 f8d0 	bl	800196c <HAL_Delay>
					MsgTxBuf[0] = (uint8_t) ADC_Raw_Results[1];
 80007cc:	4b60      	ldr	r3, [pc, #384]	; (8000950 <USB_Rx_Parser+0x340>)
 80007ce:	885b      	ldrh	r3, [r3, #2]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	703b      	strb	r3, [r7, #0]
					MsgTxBuf[1] = (uint8_t) (ADC_Raw_Results[1] >> 8);
 80007d4:	4b5e      	ldr	r3, [pc, #376]	; (8000950 <USB_Rx_Parser+0x340>)
 80007d6:	885b      	ldrh	r3, [r3, #2]
 80007d8:	0a1b      	lsrs	r3, r3, #8
 80007da:	b29b      	uxth	r3, r3
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	707b      	strb	r3, [r7, #1]
					MsgTxBuf[2] = '\r';
 80007e0:	230d      	movs	r3, #13
 80007e2:	70bb      	strb	r3, [r7, #2]
					MsgTxBuf[3] = '\n';
 80007e4:	230a      	movs	r3, #10
 80007e6:	70fb      	strb	r3, [r7, #3]
					CDC_Transmit_FS((uint8_t *) MsgTxBuf, 4);
 80007e8:	463b      	mov	r3, r7
 80007ea:	2104      	movs	r1, #4
 80007ec:	4618      	mov	r0, r3
 80007ee:	f00b f923 	bl	800ba38 <CDC_Transmit_FS>
				break;
 80007f2:	e13b      	b.n	8000a6c <USB_Rx_Parser+0x45c>
			case 'c':
				ANSI_ColorsOn ^= 0x01; // Toggle the terminal color mode
 80007f4:	4b52      	ldr	r3, [pc, #328]	; (8000940 <USB_Rx_Parser+0x330>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	f083 0301 	eor.w	r3, r3, #1
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b50      	ldr	r3, [pc, #320]	; (8000940 <USB_Rx_Parser+0x330>)
 8000800:	701a      	strb	r2, [r3, #0]
				if (ANSI_ColorsOn){
 8000802:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <USB_Rx_Parser+0x330>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d004      	beq.n	8000814 <USB_Rx_Parser+0x204>
					USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_COLORS_ACTIVE);
 800080a:	2104      	movs	r1, #4
 800080c:	2001      	movs	r0, #1
 800080e:	f000 f94b 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
 8000812:	e003      	b.n	800081c <USB_Rx_Parser+0x20c>
				}
				else{
					USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_COLORS_INACTIVE);
 8000814:	2105      	movs	r1, #5
 8000816:	2001      	movs	r0, #1
 8000818:	f000 f946 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
				}
				USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_ENTER_CMD);
 800081c:	2102      	movs	r1, #2
 800081e:	2001      	movs	r0, #1
 8000820:	f000 f942 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
				break;
 8000824:	e122      	b.n	8000a6c <USB_Rx_Parser+0x45c>
			case 'R':
				HAL_Delay(1);
 8000826:	2001      	movs	r0, #1
 8000828:	f001 f8a0 	bl	800196c <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 800082c:	2119      	movs	r1, #25
 800082e:	4847      	ldr	r0, [pc, #284]	; (800094c <USB_Rx_Parser+0x33c>)
 8000830:	f00b f902 	bl	800ba38 <CDC_Transmit_FS>
				Reset = 1;
 8000834:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <USB_Rx_Parser+0x324>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
				break;
 800083a:	e117      	b.n	8000a6c <USB_Rx_Parser+0x45c>
			case 'r':
				uint8_t Si4468_CmdTxBuf[2], Si4468_CmdRxBuf[2];
				Si4468_CmdTxBuf[0] = Si4468_CHANGE_STATE;
 800083c:	2334      	movs	r3, #52	; 0x34
 800083e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				Si4468_CmdTxBuf[1] = Si4468_RX_STATE; // RX
 8000842:	2308      	movs	r3, #8
 8000844:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 8000848:	f107 0120 	add.w	r1, r7, #32
 800084c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000850:	2202      	movs	r2, #2
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f9dc 	bl	8000c10 <Si4468_CmdTransmitReceive>
				Si4468_WaitForCTS();
 8000858:	f000 fa78 	bl	8000d4c <Si4468_WaitForCTS>

				if (ANSI_ColorsOn){
 800085c:	4b38      	ldr	r3, [pc, #224]	; (8000940 <USB_Rx_Parser+0x330>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d007      	beq.n	8000874 <USB_Rx_Parser+0x264>
					HAL_Delay(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f001 f881 	bl	800196c <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[32mReceive mode active!\e[37m\r\n", 32);
 800086a:	2120      	movs	r1, #32
 800086c:	4839      	ldr	r0, [pc, #228]	; (8000954 <USB_Rx_Parser+0x344>)
 800086e:	f00b f8e3 	bl	800ba38 <CDC_Transmit_FS>
				}
				else{
					HAL_Delay(1);
					CDC_Transmit_FS((uint8_t *) "Receive mode active!\r\n", 22);
				}
				break;
 8000872:	e0fb      	b.n	8000a6c <USB_Rx_Parser+0x45c>
					HAL_Delay(1);
 8000874:	2001      	movs	r0, #1
 8000876:	f001 f879 	bl	800196c <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "Receive mode active!\r\n", 22);
 800087a:	2116      	movs	r1, #22
 800087c:	4836      	ldr	r0, [pc, #216]	; (8000958 <USB_Rx_Parser+0x348>)
 800087e:	f00b f8db 	bl	800ba38 <CDC_Transmit_FS>
				break;
 8000882:	e0f3      	b.n	8000a6c <USB_Rx_Parser+0x45c>
			case 't':
				Si4468_CmdTxBuf[0] = Si4468_CHANGE_STATE;
 8000884:	2334      	movs	r3, #52	; 0x34
 8000886:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				Si4468_CmdTxBuf[1] = Si4468_TX_STATE; // TX
 800088a:	2307      	movs	r3, #7
 800088c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 8000890:	f107 0120 	add.w	r1, r7, #32
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	2202      	movs	r2, #2
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f9b8 	bl	8000c10 <Si4468_CmdTransmitReceive>
				Si4468_WaitForCTS();
 80008a0:	f000 fa54 	bl	8000d4c <Si4468_WaitForCTS>

				if (ANSI_ColorsOn){
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <USB_Rx_Parser+0x330>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d007      	beq.n	80008bc <USB_Rx_Parser+0x2ac>
					HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f001 f85d 	bl	800196c <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[32mTransmit mode active!\e[37m\r\n", 33);
 80008b2:	2121      	movs	r1, #33	; 0x21
 80008b4:	4829      	ldr	r0, [pc, #164]	; (800095c <USB_Rx_Parser+0x34c>)
 80008b6:	f00b f8bf 	bl	800ba38 <CDC_Transmit_FS>
				}
				else{
					HAL_Delay(1);
					CDC_Transmit_FS((uint8_t *) "Transmit mode active!\r\n", 23);
				}
				break;
 80008ba:	e0d7      	b.n	8000a6c <USB_Rx_Parser+0x45c>
					HAL_Delay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f001 f855 	bl	800196c <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "Transmit mode active!\r\n", 23);
 80008c2:	2117      	movs	r1, #23
 80008c4:	4826      	ldr	r0, [pc, #152]	; (8000960 <USB_Rx_Parser+0x350>)
 80008c6:	f00b f8b7 	bl	800ba38 <CDC_Transmit_FS>
				break;
 80008ca:	e0cf      	b.n	8000a6c <USB_Rx_Parser+0x45c>
			case 'i':
				if (ANSI_ColorsOn){
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <USB_Rx_Parser+0x330>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d007      	beq.n	80008e4 <USB_Rx_Parser+0x2d4>
					HAL_Delay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f001 f849 	bl	800196c <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "\e[32m\r\nDevice info mode!\e[37m\r\n", 31);
 80008da:	211f      	movs	r1, #31
 80008dc:	4821      	ldr	r0, [pc, #132]	; (8000964 <USB_Rx_Parser+0x354>)
 80008de:	f00b f8ab 	bl	800ba38 <CDC_Transmit_FS>
				}
				else{
					HAL_Delay(1);
					CDC_Transmit_FS((uint8_t *) "Device info mode!\r\n", 19);
				}
				break;
 80008e2:	e0c3      	b.n	8000a6c <USB_Rx_Parser+0x45c>
					HAL_Delay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f001 f841 	bl	800196c <HAL_Delay>
					CDC_Transmit_FS((uint8_t *) "Device info mode!\r\n", 19);
 80008ea:	2113      	movs	r1, #19
 80008ec:	481e      	ldr	r0, [pc, #120]	; (8000968 <USB_Rx_Parser+0x358>)
 80008ee:	f00b f8a3 	bl	800ba38 <CDC_Transmit_FS>
				break;
 80008f2:	e0bb      	b.n	8000a6c <USB_Rx_Parser+0x45c>
			case 'p':
				if (RF_AmpSupplyOnWarning){
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <USB_Rx_Parser+0x35c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d039      	beq.n	8000970 <USB_Rx_Parser+0x360>
					if (ANSI_ColorsOn){
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <USB_Rx_Parser+0x330>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d008      	beq.n	8000916 <USB_Rx_Parser+0x306>
						USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_RF_AMP_WARNING);
 8000904:	2106      	movs	r1, #6
 8000906:	2001      	movs	r0, #1
 8000908:	f000 f8ce 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
						USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_ENTER_CMD);
 800090c:	2102      	movs	r1, #2
 800090e:	2001      	movs	r0, #1
 8000910:	f000 f8ca 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
 8000914:	e007      	b.n	8000926 <USB_Rx_Parser+0x316>
					}
					else{
						USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_RF_AMP_WARNING);
 8000916:	2106      	movs	r1, #6
 8000918:	2000      	movs	r0, #0
 800091a:	f000 f8c5 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
						USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_ENTER_CMD);
 800091e:	2102      	movs	r1, #2
 8000920:	2000      	movs	r0, #0
 8000922:	f000 f8c1 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
					}
					RF_AmpSupplyOnWarning = 0;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <USB_Rx_Parser+0x35c>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the RF amplifier stage 1 OFF
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn the RF amplifier stage 2 OFF
						RF_AmpSupplyOnWarning = 1; // Reset the warning flag for next turn-on event
					}
				}
				break;
 800092c:	e09e      	b.n	8000a6c <USB_Rx_Parser+0x45c>
 800092e:	bf00      	nop
 8000930:	20000685 	.word	0x20000685
 8000934:	20000686 	.word	0x20000686
 8000938:	20000680 	.word	0x20000680
 800093c:	20000280 	.word	0x20000280
 8000940:	20000683 	.word	0x20000683
 8000944:	0800c55c 	.word	0x0800c55c
 8000948:	0800c57c 	.word	0x0800c57c
 800094c:	0800c58c 	.word	0x0800c58c
 8000950:	2000027c 	.word	0x2000027c
 8000954:	0800c5a8 	.word	0x0800c5a8
 8000958:	0800c5cc 	.word	0x0800c5cc
 800095c:	0800c5e4 	.word	0x0800c5e4
 8000960:	0800c608 	.word	0x0800c608
 8000964:	0800c620 	.word	0x0800c620
 8000968:	0800c640 	.word	0x0800c640
 800096c:	20000000 	.word	0x20000000
					RF_AmpSupplyOn ^= 0x01; // Toggle the RF amp flag
 8000970:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <USB_Rx_Parser+0x470>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	f083 0301 	eor.w	r3, r3, #1
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <USB_Rx_Parser+0x470>)
 800097c:	701a      	strb	r2, [r3, #0]
					if (RF_AmpSupplyOn){
 800097e:	4b40      	ldr	r3, [pc, #256]	; (8000a80 <USB_Rx_Parser+0x470>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d01c      	beq.n	80009c0 <USB_Rx_Parser+0x3b0>
						if (ANSI_ColorsOn){
 8000986:	4b3f      	ldr	r3, [pc, #252]	; (8000a84 <USB_Rx_Parser+0x474>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d004      	beq.n	8000998 <USB_Rx_Parser+0x388>
							USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_RF_AMP_ON);
 800098e:	2107      	movs	r1, #7
 8000990:	2001      	movs	r0, #1
 8000992:	f000 f889 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
 8000996:	e003      	b.n	80009a0 <USB_Rx_Parser+0x390>
							USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_RF_AMP_ON);
 8000998:	2107      	movs	r1, #7
 800099a:	2000      	movs	r0, #0
 800099c:	f000 f884 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
						HAL_Delay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f000 ffe3 	bl	800196c <HAL_Delay>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); // Turn the RF amplifier stage 1 ON
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ac:	4836      	ldr	r0, [pc, #216]	; (8000a88 <USB_Rx_Parser+0x478>)
 80009ae:	f002 fa35 	bl	8002e1c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); // Turn the RF amplifier stage 2 ON
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b8:	4833      	ldr	r0, [pc, #204]	; (8000a88 <USB_Rx_Parser+0x478>)
 80009ba:	f002 fa2f 	bl	8002e1c <HAL_GPIO_WritePin>
				break;
 80009be:	e055      	b.n	8000a6c <USB_Rx_Parser+0x45c>
						if (ANSI_ColorsOn){
 80009c0:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <USB_Rx_Parser+0x474>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d004      	beq.n	80009d2 <USB_Rx_Parser+0x3c2>
							USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_RF_AMP_OFF);
 80009c8:	2108      	movs	r1, #8
 80009ca:	2001      	movs	r0, #1
 80009cc:	f000 f86c 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
 80009d0:	e003      	b.n	80009da <USB_Rx_Parser+0x3ca>
							USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_RF_AMP_OFF);
 80009d2:	2108      	movs	r1, #8
 80009d4:	2000      	movs	r0, #0
 80009d6:	f000 f867 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
						HAL_Delay(1);
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 ffc6 	bl	800196c <HAL_Delay>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the RF amplifier stage 1 OFF
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e6:	4828      	ldr	r0, [pc, #160]	; (8000a88 <USB_Rx_Parser+0x478>)
 80009e8:	f002 fa18 	bl	8002e1c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn the RF amplifier stage 2 OFF
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f2:	4825      	ldr	r0, [pc, #148]	; (8000a88 <USB_Rx_Parser+0x478>)
 80009f4:	f002 fa12 	bl	8002e1c <HAL_GPIO_WritePin>
						RF_AmpSupplyOnWarning = 1; // Reset the warning flag for next turn-on event
 80009f8:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <USB_Rx_Parser+0x47c>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
				break;
 80009fe:	e035      	b.n	8000a6c <USB_Rx_Parser+0x45c>
			default:
				if (ANSI_ColorsOn){
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <USB_Rx_Parser+0x474>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d004      	beq.n	8000a12 <USB_Rx_Parser+0x402>
					USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_CMD_NOT_FOUND);
 8000a08:	2103      	movs	r1, #3
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f000 f84c 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
 8000a10:	e02c      	b.n	8000a6c <USB_Rx_Parser+0x45c>
				}
				else{
					USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_CMD_NOT_FOUND);
 8000a12:	2103      	movs	r1, #3
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 f847 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
 8000a1a:	e027      	b.n	8000a6c <USB_Rx_Parser+0x45c>
				}
			}
		}
		else if((strncmp((char *)USB_RxBuf, "test", 4) == 0) && (USB_RxBufIndex == 4)){
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	491c      	ldr	r1, [pc, #112]	; (8000a90 <USB_Rx_Parser+0x480>)
 8000a20:	481c      	ldr	r0, [pc, #112]	; (8000a94 <USB_Rx_Parser+0x484>)
 8000a22:	f00b fd27 	bl	800c474 <strncmp>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d112      	bne.n	8000a52 <USB_Rx_Parser+0x442>
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <USB_Rx_Parser+0x488>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d10e      	bne.n	8000a52 <USB_Rx_Parser+0x442>
			HAL_Delay(1);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f000 ff99 	bl	800196c <HAL_Delay>
			CDC_Transmit_FS((uint8_t *) "\r\nTested!\r\n", 11);
 8000a3a:	210b      	movs	r1, #11
 8000a3c:	4817      	ldr	r0, [pc, #92]	; (8000a9c <USB_Rx_Parser+0x48c>)
 8000a3e:	f00a fffb 	bl	800ba38 <CDC_Transmit_FS>
			HAL_Delay(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f000 ff92 	bl	800196c <HAL_Delay>
			CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 8000a48:	2111      	movs	r1, #17
 8000a4a:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <USB_Rx_Parser+0x490>)
 8000a4c:	f00a fff4 	bl	800ba38 <CDC_Transmit_FS>
 8000a50:	e00c      	b.n	8000a6c <USB_Rx_Parser+0x45c>
		}
		else{
			if (ANSI_ColorsOn){
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <USB_Rx_Parser+0x474>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d004      	beq.n	8000a64 <USB_Rx_Parser+0x454>
				USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_ON, MSG_CMD_NOT_FOUND);
 8000a5a:	2103      	movs	r1, #3
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 f823 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
 8000a62:	e003      	b.n	8000a6c <USB_Rx_Parser+0x45c>
			}
			else{
				USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_CMD_NOT_FOUND);
 8000a64:	2103      	movs	r1, #3
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 f81e 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>
			}
		}
		USB_RxDataReadyFlag = 0; // Clear the flag
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <USB_Rx_Parser+0x494>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
		USB_RxBufIndex = 0; // Reset the index
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <USB_Rx_Parser+0x488>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
	}
}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000684 	.word	0x20000684
 8000a84:	20000683 	.word	0x20000683
 8000a88:	48000800 	.word	0x48000800
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	0800c654 	.word	0x0800c654
 8000a94:	20000280 	.word	0x20000280
 8000a98:	20000680 	.word	0x20000680
 8000a9c:	0800c65c 	.word	0x0800c65c
 8000aa0:	0800c668 	.word	0x0800c668
 8000aa4:	20000685 	.word	0x20000685

08000aa8 <USB_CDC_TransmitPredefinedMessage>:

void USB_CDC_TransmitPredefinedMessage(uint8_t ANSI_Color_State, uint8_t Select_Message){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 ff57 	bl	800196c <HAL_Delay>
	switch(ANSI_Color_State){
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d002      	beq.n	8000aca <USB_CDC_TransmitPredefinedMessage+0x22>
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d03e      	beq.n	8000b46 <USB_CDC_TransmitPredefinedMessage+0x9e>
								"Enter a command: ", 63);
			break;
		}
		break;
	}
}
 8000ac8:	e081      	b.n	8000bce <USB_CDC_TransmitPredefinedMessage+0x126>
		switch(Select_Message){
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	2b08      	cmp	r3, #8
 8000ace:	d87b      	bhi.n	8000bc8 <USB_CDC_TransmitPredefinedMessage+0x120>
 8000ad0:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <USB_CDC_TransmitPredefinedMessage+0x30>)
 8000ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad6:	bf00      	nop
 8000ad8:	08000afd 	.word	0x08000afd
 8000adc:	08000b07 	.word	0x08000b07
 8000ae0:	08000b13 	.word	0x08000b13
 8000ae4:	08000b27 	.word	0x08000b27
 8000ae8:	08000bc9 	.word	0x08000bc9
 8000aec:	08000bc9 	.word	0x08000bc9
 8000af0:	08000b1d 	.word	0x08000b1d
 8000af4:	08000b31 	.word	0x08000b31
 8000af8:	08000b3b 	.word	0x08000b3b
			CDC_Transmit_FS((uint8_t *) "\e[2J\e[0;0HPQ9 COM module V2.0 by 213415IACB\r\n"
 8000afc:	2192      	movs	r1, #146	; 0x92
 8000afe:	4836      	ldr	r0, [pc, #216]	; (8000bd8 <USB_CDC_TransmitPredefinedMessage+0x130>)
 8000b00:	f00a ff9a 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000b04:	e01e      	b.n	8000b44 <USB_CDC_TransmitPredefinedMessage+0x9c>
			CDC_Transmit_FS((uint8_t *) "\r\nLIST OF COMMANDS:\r\n"
 8000b06:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8000b0a:	4834      	ldr	r0, [pc, #208]	; (8000bdc <USB_CDC_TransmitPredefinedMessage+0x134>)
 8000b0c:	f00a ff94 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000b10:	e018      	b.n	8000b44 <USB_CDC_TransmitPredefinedMessage+0x9c>
			CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 8000b12:	2111      	movs	r1, #17
 8000b14:	4832      	ldr	r0, [pc, #200]	; (8000be0 <USB_CDC_TransmitPredefinedMessage+0x138>)
 8000b16:	f00a ff8f 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000b1a:	e013      	b.n	8000b44 <USB_CDC_TransmitPredefinedMessage+0x9c>
			CDC_Transmit_FS((uint8_t *) "WARNING! When the amplifier is turned on, the current\r\n"
 8000b1c:	21af      	movs	r1, #175	; 0xaf
 8000b1e:	4831      	ldr	r0, [pc, #196]	; (8000be4 <USB_CDC_TransmitPredefinedMessage+0x13c>)
 8000b20:	f00a ff8a 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000b24:	e00e      	b.n	8000b44 <USB_CDC_TransmitPredefinedMessage+0x9c>
			CDC_Transmit_FS((uint8_t *) "COMMAND NOT FOUND!\r\n"
 8000b26:	214c      	movs	r1, #76	; 0x4c
 8000b28:	482f      	ldr	r0, [pc, #188]	; (8000be8 <USB_CDC_TransmitPredefinedMessage+0x140>)
 8000b2a:	f00a ff85 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000b2e:	e009      	b.n	8000b44 <USB_CDC_TransmitPredefinedMessage+0x9c>
			CDC_Transmit_FS((uint8_t *) "# RF AMPLIFIER SUPPLY ON!\r\n"
 8000b30:	212c      	movs	r1, #44	; 0x2c
 8000b32:	482e      	ldr	r0, [pc, #184]	; (8000bec <USB_CDC_TransmitPredefinedMessage+0x144>)
 8000b34:	f00a ff80 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000b38:	e004      	b.n	8000b44 <USB_CDC_TransmitPredefinedMessage+0x9c>
			CDC_Transmit_FS((uint8_t *) "# RF AMPLIFIER SUPPLY OFF!\r\n"
 8000b3a:	212d      	movs	r1, #45	; 0x2d
 8000b3c:	482c      	ldr	r0, [pc, #176]	; (8000bf0 <USB_CDC_TransmitPredefinedMessage+0x148>)
 8000b3e:	f00a ff7b 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000b42:	bf00      	nop
		break;
 8000b44:	e040      	b.n	8000bc8 <USB_CDC_TransmitPredefinedMessage+0x120>
		switch(Select_Message){
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	2b07      	cmp	r3, #7
 8000b4c:	d83e      	bhi.n	8000bcc <USB_CDC_TransmitPredefinedMessage+0x124>
 8000b4e:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <USB_CDC_TransmitPredefinedMessage+0xac>)
 8000b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b54:	08000b75 	.word	0x08000b75
 8000b58:	08000b81 	.word	0x08000b81
 8000b5c:	08000ba9 	.word	0x08000ba9
 8000b60:	08000b8b 	.word	0x08000b8b
 8000b64:	08000b95 	.word	0x08000b95
 8000b68:	08000b9f 	.word	0x08000b9f
 8000b6c:	08000bb3 	.word	0x08000bb3
 8000b70:	08000bbd 	.word	0x08000bbd
			CDC_Transmit_FS((uint8_t *) "\e[36m\r\nLIST OF COMMANDS:\r\n\e[37m"
 8000b74:	f44f 719a 	mov.w	r1, #308	; 0x134
 8000b78:	481e      	ldr	r0, [pc, #120]	; (8000bf4 <USB_CDC_TransmitPredefinedMessage+0x14c>)
 8000b7a:	f00a ff5d 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000b7e:	e022      	b.n	8000bc6 <USB_CDC_TransmitPredefinedMessage+0x11e>
			CDC_Transmit_FS((uint8_t *) "Enter a command: ", 17);
 8000b80:	2111      	movs	r1, #17
 8000b82:	4817      	ldr	r0, [pc, #92]	; (8000be0 <USB_CDC_TransmitPredefinedMessage+0x138>)
 8000b84:	f00a ff58 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000b88:	e01d      	b.n	8000bc6 <USB_CDC_TransmitPredefinedMessage+0x11e>
			CDC_Transmit_FS((uint8_t *) "\e[32mANSI COLORS ACTIVATED!\e[37m\r\n", 36);
 8000b8a:	2124      	movs	r1, #36	; 0x24
 8000b8c:	481a      	ldr	r0, [pc, #104]	; (8000bf8 <USB_CDC_TransmitPredefinedMessage+0x150>)
 8000b8e:	f00a ff53 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000b92:	e018      	b.n	8000bc6 <USB_CDC_TransmitPredefinedMessage+0x11e>
			CDC_Transmit_FS((uint8_t *) "\e[31mANSI COLORS DEACTIVATED!\e[37m\r\n", 36);
 8000b94:	2124      	movs	r1, #36	; 0x24
 8000b96:	4819      	ldr	r0, [pc, #100]	; (8000bfc <USB_CDC_TransmitPredefinedMessage+0x154>)
 8000b98:	f00a ff4e 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000b9c:	e013      	b.n	8000bc6 <USB_CDC_TransmitPredefinedMessage+0x11e>
			CDC_Transmit_FS((uint8_t *) "\e[31m\e[1mWARNING!\e[0m\e[31m When the amplifier is turned on, the current\r\n"
 8000b9e:	21c6      	movs	r1, #198	; 0xc6
 8000ba0:	4817      	ldr	r0, [pc, #92]	; (8000c00 <USB_CDC_TransmitPredefinedMessage+0x158>)
 8000ba2:	f00a ff49 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000ba6:	e00e      	b.n	8000bc6 <USB_CDC_TransmitPredefinedMessage+0x11e>
			CDC_Transmit_FS((uint8_t *) "\e[1m\e[31mCOMMAND NOT FOUND!\e[37m\e[0m\r\n"
 8000ba8:	215e      	movs	r1, #94	; 0x5e
 8000baa:	4816      	ldr	r0, [pc, #88]	; (8000c04 <USB_CDC_TransmitPredefinedMessage+0x15c>)
 8000bac:	f00a ff44 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000bb0:	e009      	b.n	8000bc6 <USB_CDC_TransmitPredefinedMessage+0x11e>
			CDC_Transmit_FS((uint8_t *) "\e[1m\e[32m# RF AMPLIFIER SUPPLY ON!\e[37m\r\n\e[0m"
 8000bb2:	213e      	movs	r1, #62	; 0x3e
 8000bb4:	4814      	ldr	r0, [pc, #80]	; (8000c08 <USB_CDC_TransmitPredefinedMessage+0x160>)
 8000bb6:	f00a ff3f 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000bba:	e004      	b.n	8000bc6 <USB_CDC_TransmitPredefinedMessage+0x11e>
			CDC_Transmit_FS((uint8_t *) "\e[1m\e[31m# RF AMPLIFIER SUPPLY OFF!\e[37m\r\n\e[0m"
 8000bbc:	213f      	movs	r1, #63	; 0x3f
 8000bbe:	4813      	ldr	r0, [pc, #76]	; (8000c0c <USB_CDC_TransmitPredefinedMessage+0x164>)
 8000bc0:	f00a ff3a 	bl	800ba38 <CDC_Transmit_FS>
			break;
 8000bc4:	bf00      	nop
		break;
 8000bc6:	e001      	b.n	8000bcc <USB_CDC_TransmitPredefinedMessage+0x124>
		break;
 8000bc8:	bf00      	nop
 8000bca:	e000      	b.n	8000bce <USB_CDC_TransmitPredefinedMessage+0x126>
		break;
 8000bcc:	bf00      	nop
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	0800c67c 	.word	0x0800c67c
 8000bdc:	0800c710 	.word	0x0800c710
 8000be0:	0800c668 	.word	0x0800c668
 8000be4:	0800c83c 	.word	0x0800c83c
 8000be8:	0800c8ec 	.word	0x0800c8ec
 8000bec:	0800c93c 	.word	0x0800c93c
 8000bf0:	0800c96c 	.word	0x0800c96c
 8000bf4:	0800c99c 	.word	0x0800c99c
 8000bf8:	0800cad4 	.word	0x0800cad4
 8000bfc:	0800caf8 	.word	0x0800caf8
 8000c00:	0800cb20 	.word	0x0800cb20
 8000c04:	0800cbe8 	.word	0x0800cbe8
 8000c08:	0800cc48 	.word	0x0800cc48
 8000c0c:	0800cc88 	.word	0x0800cc88

08000c10 <Si4468_CmdTransmitReceive>:

uint8_t Si4468_CmdTransmitReceive(uint8_t * TxBuf, uint8_t * RxBuf, uint8_t Length){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af02      	add	r7, sp, #8
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c28:	f002 f8f8 	bl	8002e1c <HAL_GPIO_WritePin>
	uint8_t result = HAL_SPI_TransmitReceive(&hspi1, TxBuf, RxBuf, Length, HAL_MAX_DELAY);
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	9200      	str	r2, [sp, #0]
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	68f9      	ldr	r1, [r7, #12]
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <Si4468_CmdTransmitReceive+0x58>)
 8000c3c:	f005 fa53 	bl	80060e6 <HAL_SPI_TransmitReceive>
 8000c40:	4603      	mov	r3, r0
 8000c42:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f002 f8e5 	bl	8002e1c <HAL_GPIO_WritePin>
	if (result != HAL_OK) return 1;
 8000c52:	7dfb      	ldrb	r3, [r7, #23]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <Si4468_CmdTransmitReceive+0x4c>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e000      	b.n	8000c5e <Si4468_CmdTransmitReceive+0x4e>
	return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000218 	.word	0x20000218

08000c6c <Si4468_CmdTransmit>:

uint8_t Si4468_CmdTransmit(uint8_t * RxBuf, uint8_t Length){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c82:	f002 f8cb 	bl	8002e1c <HAL_GPIO_WritePin>
	uint8_t result = HAL_SPI_Transmit(&hspi1, RxBuf, Length, HAL_MAX_DELAY);
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <Si4468_CmdTransmit+0x50>)
 8000c92:	f004 ff7c 	bl	8005b8e <HAL_SPI_Transmit>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f002 f8ba 	bl	8002e1c <HAL_GPIO_WritePin>
	if (result != HAL_OK) return 1;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <Si4468_CmdTransmit+0x46>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <Si4468_CmdTransmit+0x48>
	return 0;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000218 	.word	0x20000218

08000cc0 <Si4468_CmdReadCmdReplyWhenReady>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
	if (result != HAL_OK) return 1;
	return 0;
}

uint8_t Si4468_CmdReadCmdReplyWhenReady(uint8_t * RxBuf, uint8_t Length){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
	uint8_t CmdTxBuf[2] = {Si4468_READ_CMD_BUFF, 0};
 8000ccc:	2344      	movs	r3, #68	; 0x44
 8000cce:	81bb      	strh	r3, [r7, #12]
	uint8_t CmdRxBuf[2] = {0, 0};
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	813b      	strh	r3, [r7, #8]
	uint8_t result;
	while(1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f002 f89d 	bl	8002e1c <HAL_GPIO_WritePin>
		result = HAL_SPI_TransmitReceive(&hspi1, CmdTxBuf, CmdRxBuf, 2, HAL_MAX_DELAY);
 8000ce2:	f107 0208 	add.w	r2, r7, #8
 8000ce6:	f107 010c 	add.w	r1, r7, #12
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	4815      	ldr	r0, [pc, #84]	; (8000d48 <Si4468_CmdReadCmdReplyWhenReady+0x88>)
 8000cf4:	f005 f9f7 	bl	80060e6 <HAL_SPI_TransmitReceive>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73fb      	strb	r3, [r7, #15]
		if (CmdRxBuf[1] == 0xFF) break;
 8000cfc:	7a7b      	ldrb	r3, [r7, #9]
 8000cfe:	2bff      	cmp	r3, #255	; 0xff
 8000d00:	d00a      	beq.n	8000d18 <Si4468_CmdReadCmdReplyWhenReady+0x58>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f002 f886 	bl	8002e1c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f000 fe2b 	bl	800196c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000d16:	e7dd      	b.n	8000cd4 <Si4468_CmdReadCmdReplyWhenReady+0x14>
		if (CmdRxBuf[1] == 0xFF) break;
 8000d18:	bf00      	nop
	}
	result += HAL_SPI_Receive(&hspi1, RxBuf, Length, HAL_MAX_DELAY);
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4808      	ldr	r0, [pc, #32]	; (8000d48 <Si4468_CmdReadCmdReplyWhenReady+0x88>)
 8000d26:	f005 f8a7 	bl	8005e78 <HAL_SPI_Receive>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	4413      	add	r3, r2
 8000d32:	73fb      	strb	r3, [r7, #15]
	if (result != HAL_OK) return 1;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <Si4468_CmdReadCmdReplyWhenReady+0x7e>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <Si4468_CmdReadCmdReplyWhenReady+0x80>
	return 0;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000218 	.word	0x20000218

08000d4c <Si4468_WaitForCTS>:

void Si4468_WaitForCTS(void){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	uint8_t Si4468_CmdTxBuf[2], Si4468_CmdRxBuf[2];
	Si4468_CmdTxBuf[0] = Si4468_READ_CMD_BUFF;
 8000d52:	2344      	movs	r3, #68	; 0x44
 8000d54:	713b      	strb	r3, [r7, #4]
	Si4468_CmdRxBuf[1] = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	707b      	strb	r3, [r7, #1]
	while(Si4468_CmdRxBuf[1] != 0xFF){
 8000d5a:	e005      	b.n	8000d68 <Si4468_WaitForCTS+0x1c>
		Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 8000d5c:	4639      	mov	r1, r7
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2202      	movs	r2, #2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff54 	bl	8000c10 <Si4468_CmdTransmitReceive>
	while(Si4468_CmdRxBuf[1] != 0xFF){
 8000d68:	787b      	ldrb	r3, [r7, #1]
 8000d6a:	2bff      	cmp	r3, #255	; 0xff
 8000d6c:	d1f6      	bne.n	8000d5c <Si4468_WaitForCTS+0x10>
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t Si4468_ConfigArray[] = RADIO_CONFIGURATION_DATA_ARRAY;
 8000d80:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000d84:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000d88:	4a2e      	ldr	r2, [pc, #184]	; (8000e44 <main+0xcc>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d92:	461a      	mov	r2, r3
 8000d94:	f00b fbb8 	bl	800c508 <memcpy>
	uint8_t Si4468_TxBuf[64] = {0}; // For writing to Si4468 FIFO registers
 8000d98:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000d9c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	3304      	adds	r3, #4
 8000da6:	223c      	movs	r2, #60	; 0x3c
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f00b fb5a 	bl	800c464 <memset>
	uint8_t Si4468_RxBuf[64] = {0}; // For reading from Si4468 FIFO registers
 8000db0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000db4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	223c      	movs	r2, #60	; 0x3c
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00b fb4e 	bl	800c464 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc8:	f000 fd5b 	bl	8001882 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dcc:	f000 f9e6 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd0:	f000 fb20 	bl	8001414 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dd4:	f000 fa38 	bl	8001248 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000dd8:	f000 faac 	bl	8001334 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000ddc:	f000 fadc 	bl	8001398 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000de0:	f00a fd54 	bl	800b88c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Set SPI NSS high
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f002 f815 	bl	8002e1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Turn the RF amplifier stage 2 OFF
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df8:	4813      	ldr	r0, [pc, #76]	; (8000e48 <main+0xd0>)
 8000dfa:	f002 f80f 	bl	8002e1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the RF amplifier stage 1 OFF
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e04:	4810      	ldr	r0, [pc, #64]	; (8000e48 <main+0xd0>)
 8000e06:	f002 f809 	bl	8002e1c <HAL_GPIO_WritePin>

  // ### Si4468 TRANSCEIVER STARTUP
  // Perform a POR (Power on reset)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f002 f802 	bl	8002e1c <HAL_GPIO_WritePin>
  HAL_Delay(1); // A minimum of 10 us is required
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f000 fda7 	bl	800196c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f001 fff8 	bl	8002e1c <HAL_GPIO_WritePin>
  HAL_Delay(10); // POR should not take more than 6 ms, but let's be safe...
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f000 fd9d 	bl	800196c <HAL_Delay>

  // Configure the Si4468 transceiver based on the settings in the header file
  uint8_t i = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
  uint16_t Si4468_ConfigArrayLength = sizeof(Si4468_ConfigArray)/sizeof(Si4468_ConfigArray[0]);
 8000e38:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000e3c:	f8a7 3314 	strh.w	r3, [r7, #788]	; 0x314
  while (Si4468_ConfigArray[i] != 0x00){
 8000e40:	e024      	b.n	8000e8c <main+0x114>
 8000e42:	bf00      	nop
 8000e44:	0800ccc8 	.word	0x0800ccc8
 8000e48:	48000800 	.word	0x48000800
	  Si4468_CmdTransmit(&Si4468_ConfigArray[i + 1], Si4468_ConfigArray[i]);
 8000e4c:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 8000e50:	3301      	adds	r3, #1
 8000e52:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8000e56:	18d0      	adds	r0, r2, r3
 8000e58:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 8000e5c:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8000e60:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	4619      	mov	r1, r3
 8000e68:	f7ff ff00 	bl	8000c6c <Si4468_CmdTransmit>
	  Si4468_WaitForCTS();
 8000e6c:	f7ff ff6e 	bl	8000d4c <Si4468_WaitForCTS>
	  i += (Si4468_ConfigArray[i] + 1);
 8000e70:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 8000e74:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8000e78:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8000e7c:	5cd2      	ldrb	r2, [r2, r3]
 8000e7e:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 8000e82:	4413      	add	r3, r2
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	3301      	adds	r3, #1
 8000e88:	f887 3317 	strb.w	r3, [r7, #791]	; 0x317
  while (Si4468_ConfigArray[i] != 0x00){
 8000e8c:	f897 3317 	ldrb.w	r3, [r7, #791]	; 0x317
 8000e90:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8000e94:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8000e98:	5cd3      	ldrb	r3, [r2, r3]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1d6      	bne.n	8000e4c <main+0xd4>
  }
  // Send a POWER_UP command to Si4468
  Si4468_CmdTxBuf[0] = Si4468_POWER_UP;
 8000e9e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000ea2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x01;
 8000eaa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000eae:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x01; // Using an external drive (TCXO) as clock source
 8000eb6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000eba:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	709a      	strb	r2, [r3, #2]
  /* TCXO frequency is 30 MHz (30'000'000 Hz; in hex: 0x01C9C380).
   * NB! The byte order of the following hex value is reversed due to Endianness!
   * Si4468 expects most significant byte first, but STM32L412 seems to
   * be Little-Endian.
   */
  *((uint32_t *) &Si4468_CmdTxBuf[3]) = 0x80C3C901;
 8000ec2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ec6:	3303      	adds	r3, #3
 8000ec8:	4ab2      	ldr	r2, [pc, #712]	; (8001194 <main+0x41c>)
 8000eca:	601a      	str	r2, [r3, #0]
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 7);
 8000ecc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff feca 	bl	8000c6c <Si4468_CmdTransmit>

  /* Wait until Si4468 has finished the power-up sequence.
   * The transceiver will be ready when the returned value of
   * CTS (clear to send) byte will be equal to 0xFF
   */
  Si4468_WaitForCTS();
 8000ed8:	f7ff ff38 	bl	8000d4c <Si4468_WaitForCTS>

  /* Set the XTAL capacitor bank to 0 when using a TCXO
   *
   */
  Si4468_CmdTxBuf[0] = Si4468_SET_PROPERTY;
 8000edc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000ee0:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000ee4:	2211      	movs	r2, #17
 8000ee6:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x00; // Group
 8000ee8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000eec:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x01; // Number of properties
 8000ef4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000ef8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000efc:	2201      	movs	r2, #1
 8000efe:	709a      	strb	r2, [r3, #2]
  Si4468_CmdTxBuf[3] = 0x00; // Index of the first property to be set
 8000f00:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000f04:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000f08:	2200      	movs	r2, #0
 8000f0a:	70da      	strb	r2, [r3, #3]
  Si4468_CmdTxBuf[4] = 0x00; // Data
 8000f0c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000f10:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000f14:	2200      	movs	r2, #0
 8000f16:	711a      	strb	r2, [r3, #4]
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 5);
 8000f18:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f1c:	2105      	movs	r1, #5
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fea4 	bl	8000c6c <Si4468_CmdTransmit>
  Si4468_WaitForCTS();
 8000f24:	f7ff ff12 	bl	8000d4c <Si4468_WaitForCTS>

  /* For testing purposes, put the Si4468 into Continuous Wave (CW) transmission mode
   *
   */
  Si4468_CmdTxBuf[0] = Si4468_SET_PROPERTY;
 8000f28:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000f2c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000f30:	2211      	movs	r2, #17
 8000f32:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x20; // Group
 8000f34:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000f38:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x01; // Number of properties
 8000f40:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000f44:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000f48:	2201      	movs	r2, #1
 8000f4a:	709a      	strb	r2, [r3, #2]
  Si4468_CmdTxBuf[3] = 0x00; // Index of the first property to be set
 8000f4c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000f50:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000f54:	2200      	movs	r2, #0
 8000f56:	70da      	strb	r2, [r3, #3]
  Si4468_CmdTxBuf[4] = 0x00; // Data
 8000f58:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000f5c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000f60:	2200      	movs	r2, #0
 8000f62:	711a      	strb	r2, [r3, #4]
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 5);
 8000f64:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f68:	2105      	movs	r1, #5
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fe7e 	bl	8000c6c <Si4468_CmdTransmit>
  Si4468_WaitForCTS();
 8000f70:	f7ff feec 	bl	8000d4c <Si4468_WaitForCTS>

  /* Set the TX base frequency at 435 MHz
   *
   */
  Si4468_CmdTxBuf[0] = Si4468_SET_PROPERTY;
 8000f74:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000f78:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000f7c:	2211      	movs	r2, #17
 8000f7e:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x40; // Group
 8000f80:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000f84:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000f88:	2240      	movs	r2, #64	; 0x40
 8000f8a:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x08; // Number of properties
 8000f8c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000f90:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000f94:	2208      	movs	r2, #8
 8000f96:	709a      	strb	r2, [r3, #2]
  Si4468_CmdTxBuf[3] = 0x00; // Index of the first property to be set
 8000f98:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000f9c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	70da      	strb	r2, [r3, #3]
  Si4468_CmdTxBuf[4] = 0x39; // PLL division integer 0x39
 8000fa4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000fa8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000fac:	2239      	movs	r2, #57	; 0x39
 8000fae:	711a      	strb	r2, [r3, #4]
  Si4468_CmdTxBuf[5] = 0x08; // PLL division fraction
 8000fb0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000fb4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000fb8:	2208      	movs	r2, #8
 8000fba:	715a      	strb	r2, [r3, #5]
  Si4468_CmdTxBuf[6] = 0x00; // -,,-
 8000fbc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000fc0:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	719a      	strb	r2, [r3, #6]
  Si4468_CmdTxBuf[7] = 0x00; // -,,-
 8000fc8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000fcc:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	71da      	strb	r2, [r3, #7]
  Si4468_CmdTxBuf[8] = 0x05; //
 8000fd4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000fd8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000fdc:	2205      	movs	r2, #5
 8000fde:	721a      	strb	r2, [r3, #8]
  Si4468_CmdTxBuf[9] = 0x3E; //
 8000fe0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000fe4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000fe8:	223e      	movs	r2, #62	; 0x3e
 8000fea:	725a      	strb	r2, [r3, #9]
  Si4468_CmdTxBuf[10] = 0x20; //
 8000fec:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000ff0:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	729a      	strb	r2, [r3, #10]
  Si4468_CmdTxBuf[11] = 0xFE; //
 8000ff8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000ffc:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001000:	22fe      	movs	r2, #254	; 0xfe
 8001002:	72da      	strb	r2, [r3, #11]
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 12);
 8001004:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001008:	210c      	movs	r1, #12
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fe2e 	bl	8000c6c <Si4468_CmdTransmit>
  Si4468_WaitForCTS();
 8001010:	f7ff fe9c 	bl	8000d4c <Si4468_WaitForCTS>

  /* Set the frequency deviation
   *
   */
  Si4468_CmdTxBuf[0] = Si4468_SET_PROPERTY;
 8001014:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001018:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800101c:	2211      	movs	r2, #17
 800101e:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x20; // Group
 8001020:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001024:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001028:	2220      	movs	r2, #32
 800102a:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x01; // Number of properties
 800102c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001030:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001034:	2201      	movs	r2, #1
 8001036:	709a      	strb	r2, [r3, #2]
  Si4468_CmdTxBuf[3] = 0x0C; // Index of the first property to be set
 8001038:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800103c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001040:	220c      	movs	r2, #12
 8001042:	70da      	strb	r2, [r3, #3]
  Si4468_CmdTxBuf[4] = 0x50;
 8001044:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001048:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800104c:	2250      	movs	r2, #80	; 0x50
 800104e:	711a      	strb	r2, [r3, #4]
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 5);
 8001050:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001054:	2105      	movs	r1, #5
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fe08 	bl	8000c6c <Si4468_CmdTransmit>
  Si4468_WaitForCTS();
 800105c:	f7ff fe76 	bl	8000d4c <Si4468_WaitForCTS>

  /* Set the output power
   *
   */
  Si4468_CmdTxBuf[0] = Si4468_SET_PROPERTY;
 8001060:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001064:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001068:	2211      	movs	r2, #17
 800106a:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x22; // Group
 800106c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001070:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001074:	2222      	movs	r2, #34	; 0x22
 8001076:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x04; // Number of properties
 8001078:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800107c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001080:	2204      	movs	r2, #4
 8001082:	709a      	strb	r2, [r3, #2]
  Si4468_CmdTxBuf[3] = 0x00; // Index of the first property to be set
 8001084:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001088:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800108c:	2200      	movs	r2, #0
 800108e:	70da      	strb	r2, [r3, #3]
  Si4468_CmdTxBuf[4] = 0x08;
 8001090:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001094:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001098:	2208      	movs	r2, #8
 800109a:	711a      	strb	r2, [r3, #4]
  Si4468_CmdTxBuf[5] = 0x7F; // Power level [0x00 ; 0x7F]
 800109c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80010a0:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80010a4:	227f      	movs	r2, #127	; 0x7f
 80010a6:	715a      	strb	r2, [r3, #5]
  Si4468_CmdTxBuf[6] = 0x00;
 80010a8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80010ac:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80010b0:	2200      	movs	r2, #0
 80010b2:	719a      	strb	r2, [r3, #6]
  Si4468_CmdTxBuf[7] = 0x1D;
 80010b4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80010b8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80010bc:	221d      	movs	r2, #29
 80010be:	71da      	strb	r2, [r3, #7]
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 8);
 80010c0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010c4:	2108      	movs	r1, #8
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fdd0 	bl	8000c6c <Si4468_CmdTransmit>
  Si4468_WaitForCTS();
 80010cc:	f7ff fe3e 	bl	8000d4c <Si4468_WaitForCTS>

  /* Read the "part info" of the device to make sure the initialization worked
   * and we have a good SPI communication going...
   */
  Si4468_CmdTxBuf[0] = Si4468_PART_INFO;
 80010d0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80010d4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
  Si4468_CmdRxBuf[1] = 0;
 80010dc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80010e0:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80010e4:	2200      	movs	r2, #0
 80010e6:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 80010e8:	1d39      	adds	r1, r7, #4
 80010ea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010ee:	2202      	movs	r2, #2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fd8d 	bl	8000c10 <Si4468_CmdTransmitReceive>
  Si4468_CmdReadCmdReplyWhenReady(Si4468_CmdRxBuf, 8);
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2108      	movs	r1, #8
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fde0 	bl	8000cc0 <Si4468_CmdReadCmdReplyWhenReady>

  /* Configure the GPIO pins of the Si4468
   *
   */
  Si4468_CmdTxBuf[0] = Si4468_GPIO_PIN_CFG;
 8001100:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001104:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001108:	2213      	movs	r2, #19
 800110a:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x01;
 800110c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001110:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001114:	2201      	movs	r2, #1
 8001116:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x01;
 8001118:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800111c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001120:	2201      	movs	r2, #1
 8001122:	709a      	strb	r2, [r3, #2]
  Si4468_CmdTxBuf[3] = 0x20;
 8001124:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001128:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800112c:	2220      	movs	r2, #32
 800112e:	70da      	strb	r2, [r3, #3]
  Si4468_CmdTxBuf[4] = 0x21;
 8001130:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001134:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001138:	2221      	movs	r2, #33	; 0x21
 800113a:	711a      	strb	r2, [r3, #4]
  Si4468_CmdTxBuf[5] = 0x27;
 800113c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001140:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001144:	2227      	movs	r2, #39	; 0x27
 8001146:	715a      	strb	r2, [r3, #5]
  Si4468_CmdTxBuf[6] = 0x0B;
 8001148:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800114c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001150:	220b      	movs	r2, #11
 8001152:	719a      	strb	r2, [r3, #6]
  Si4468_CmdTxBuf[7] = 0x00;
 8001154:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001158:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800115c:	2200      	movs	r2, #0
 800115e:	71da      	strb	r2, [r3, #7]
  Si4468_WaitForCTS();
 8001160:	f7ff fdf4 	bl	8000d4c <Si4468_WaitForCTS>
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 8);
 8001164:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001168:	2108      	movs	r1, #8
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fd7e 	bl	8000c6c <Si4468_CmdTransmit>
  Si4468_WaitForCTS();
 8001170:	f7ff fdec 	bl	8000d4c <Si4468_WaitForCTS>

  // Wait for the COM port to open:
  while(!USB_COM_Port_open){
 8001174:	bf00      	nop
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <main+0x420>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0fb      	beq.n	8001176 <main+0x3fe>
	  //
  };
  HAL_Delay(1000);
 800117e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001182:	f000 fbf3 	bl	800196c <HAL_Delay>
  // Send the welcome message:
  USB_CDC_TransmitPredefinedMessage(ANSI_COLORS_OFF, MSG_WELCOME);
 8001186:	2100      	movs	r1, #0
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fc8d 	bl	8000aa8 <USB_CDC_TransmitPredefinedMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  USB_Rx_Parser();
 800118e:	f7ff fa3f 	bl	8000610 <USB_Rx_Parser>
 8001192:	e7fc      	b.n	800118e <main+0x416>
 8001194:	80c3c901 	.word	0x80c3c901
 8001198:	2000096c 	.word	0x2000096c

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b096      	sub	sp, #88	; 0x58
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2244      	movs	r2, #68	; 0x44
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00b f95a 	bl	800c464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011c2:	f003 fbcf 	bl	8004964 <HAL_PWREx_ControlVoltageScaling>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011cc:	f000 f9c8 	bl	8001560 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80011d0:	2312      	movs	r3, #18
 80011d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011da:	2340      	movs	r3, #64	; 0x40
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011de:	2301      	movs	r3, #1
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80011e6:	23b0      	movs	r3, #176	; 0xb0
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ea:	2302      	movs	r3, #2
 80011ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ee:	2302      	movs	r3, #2
 80011f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011f6:	230a      	movs	r3, #10
 80011f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011fe:	2302      	movs	r3, #2
 8001200:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4618      	mov	r0, r3
 8001208:	f003 fc12 	bl	8004a30 <HAL_RCC_OscConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001212:	f000 f9a5 	bl	8001560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001216:	230f      	movs	r3, #15
 8001218:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121a:	2303      	movs	r3, #3
 800121c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	2104      	movs	r1, #4
 800122e:	4618      	mov	r0, r3
 8001230:	f004 f860 	bl	80052f4 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800123a:	f000 f991 	bl	8001560 <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3758      	adds	r7, #88	; 0x58
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800126a:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <MX_ADC1_Init+0xe0>)
 800126c:	4a2f      	ldr	r2, [pc, #188]	; (800132c <MX_ADC1_Init+0xe4>)
 800126e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <MX_ADC1_Init+0xe0>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001276:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <MX_ADC1_Init+0xe0>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <MX_ADC1_Init+0xe0>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001282:	4b29      	ldr	r3, [pc, #164]	; (8001328 <MX_ADC1_Init+0xe0>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <MX_ADC1_Init+0xe0>)
 800128a:	2204      	movs	r2, #4
 800128c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <MX_ADC1_Init+0xe0>)
 8001290:	2200      	movs	r2, #0
 8001292:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <MX_ADC1_Init+0xe0>)
 8001296:	2200      	movs	r2, #0
 8001298:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <MX_ADC1_Init+0xe0>)
 800129c:	2201      	movs	r2, #1
 800129e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_ADC1_Init+0xe0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_ADC1_Init+0xe0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_ADC1_Init+0xe0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_ADC1_Init+0xe0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_ADC1_Init+0xe0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <MX_ADC1_Init+0xe0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ca:	4817      	ldr	r0, [pc, #92]	; (8001328 <MX_ADC1_Init+0xe0>)
 80012cc:	f000 fd12 	bl	8001cf4 <HAL_ADC_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012d6:	f000 f943 	bl	8001560 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4810      	ldr	r0, [pc, #64]	; (8001328 <MX_ADC1_Init+0xe0>)
 80012e6:	f001 fa71 	bl	80027cc <HAL_ADCEx_MultiModeConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012f0:	f000 f936 	bl	8001560 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_ADC1_Init+0xe8>)
 80012f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f8:	2306      	movs	r3, #6
 80012fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001300:	237f      	movs	r3, #127	; 0x7f
 8001302:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001304:	2304      	movs	r3, #4
 8001306:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_ADC1_Init+0xe0>)
 8001312:	f000 fe39 	bl	8001f88 <HAL_ADC_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800131c:	f000 f920 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000012c 	.word	0x2000012c
 800132c:	50040000 	.word	0x50040000
 8001330:	2e300800 	.word	0x2e300800

08001334 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_LPUART1_UART_Init+0x58>)
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <MX_LPUART1_UART_Init+0x5c>)
 800133c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_LPUART1_UART_Init+0x58>)
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <MX_LPUART1_UART_Init+0x60>)
 8001342:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_LPUART1_UART_Init+0x58>)
 8001346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800134a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_LPUART1_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_LPUART1_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_LPUART1_UART_Init+0x58>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_LPUART1_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_LPUART1_UART_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_LPUART1_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001370:	2300      	movs	r3, #0
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_LPUART1_UART_Init+0x58>)
 8001378:	f005 ff03 	bl	8007182 <HAL_RS485Ex_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001382:	f000 f8ed 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000190 	.word	0x20000190
 8001390:	40008000 	.word	0x40008000
 8001394:	00033324 	.word	0x00033324

08001398 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_SPI1_Init+0x74>)
 800139e:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <MX_SPI1_Init+0x78>)
 80013a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_SPI1_Init+0x74>)
 80013a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_SPI1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_SPI1_Init+0x74>)
 80013b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_SPI1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_SPI1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_SPI1_Init+0x74>)
 80013c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_SPI1_Init+0x74>)
 80013ce:	2210      	movs	r2, #16
 80013d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_SPI1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_SPI1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_SPI1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_SPI1_Init+0x74>)
 80013e6:	2207      	movs	r2, #7
 80013e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_SPI1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_SPI1_Init+0x74>)
 80013f2:	2208      	movs	r2, #8
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_SPI1_Init+0x74>)
 80013f8:	f004 fb26 	bl	8005a48 <HAL_SPI_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001402:	f000 f8ad 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000218 	.word	0x20000218
 8001410:	40013000 	.word	0x40013000

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <MX_GPIO_Init+0x140>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	4a49      	ldr	r2, [pc, #292]	; (8001554 <MX_GPIO_Init+0x140>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <MX_GPIO_Init+0x140>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <MX_GPIO_Init+0x140>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	4a43      	ldr	r2, [pc, #268]	; (8001554 <MX_GPIO_Init+0x140>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <MX_GPIO_Init+0x140>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b3e      	ldr	r3, [pc, #248]	; (8001554 <MX_GPIO_Init+0x140>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a3d      	ldr	r2, [pc, #244]	; (8001554 <MX_GPIO_Init+0x140>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <MX_GPIO_Init+0x140>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_AMP_EN1_Pin|RF_AMP_EN2_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001478:	4837      	ldr	r0, [pc, #220]	; (8001558 <MX_GPIO_Init+0x144>)
 800147a:	f001 fccf 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYS_RST_Pin|TRANS_SDN_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	f248 1110 	movw	r1, #33040	; 0x8110
 8001484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001488:	f001 fcc8 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FWD_MEAS_AMP_EN_Pin|REV_MEAS_AMP_EN_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	21c0      	movs	r1, #192	; 0xc0
 8001490:	4832      	ldr	r0, [pc, #200]	; (800155c <MX_GPIO_Init+0x148>)
 8001492:	f001 fcc3 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_AMP_EN1_Pin RF_AMP_EN2_Pin */
  GPIO_InitStruct.Pin = RF_AMP_EN1_Pin|RF_AMP_EN2_Pin;
 8001496:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800149a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4619      	mov	r1, r3
 80014ae:	482a      	ldr	r0, [pc, #168]	; (8001558 <MX_GPIO_Init+0x144>)
 80014b0:	f001 fb42 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRANS_GPIO1_Pin TRANS_GPIO0_Pin LDO_PG_Pin */
  GPIO_InitStruct.Pin = TRANS_GPIO1_Pin|TRANS_GPIO0_Pin|LDO_PG_Pin;
 80014b4:	f240 2303 	movw	r3, #515	; 0x203
 80014b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014cc:	f001 fb34 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYS_RST_Pin TRANS_SDN_Pin */
  GPIO_InitStruct.Pin = SYS_RST_Pin|TRANS_SDN_Pin;
 80014d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80014d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ec:	f001 fb24 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRANS_NIRQ_Pin */
  GPIO_InitStruct.Pin = TRANS_NIRQ_Pin;
 80014f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TRANS_NIRQ_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f001 fb15 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800150e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152a:	f001 fb05 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : FWD_MEAS_AMP_EN_Pin REV_MEAS_AMP_EN_Pin */
  GPIO_InitStruct.Pin = FWD_MEAS_AMP_EN_Pin|REV_MEAS_AMP_EN_Pin;
 800152e:	23c0      	movs	r3, #192	; 0xc0
 8001530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_GPIO_Init+0x148>)
 8001546:	f001 faf7 	bl	8002b38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	48000800 	.word	0x48000800
 800155c:	48000400 	.word	0x48000400

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001568:	e7fe      	b.n	8001568 <Error_Handler+0x8>
	...

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_MspInit+0x44>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_MspInit+0x44>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6613      	str	r3, [r2, #96]	; 0x60
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_MspInit+0x44>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_MspInit+0x44>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <HAL_MspInit+0x44>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	6593      	str	r3, [r2, #88]	; 0x58
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_MspInit+0x44>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a15      	ldr	r2, [pc, #84]	; (8001628 <HAL_ADC_MspInit+0x74>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d124      	bne.n	8001620 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_ADC_MspInit+0x78>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <HAL_ADC_MspInit+0x78>)
 80015dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_ADC_MspInit+0x78>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_ADC_MspInit+0x78>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_ADC_MspInit+0x78>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_ADC_MspInit+0x78>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = FWD_MEAS_ADC_Pin|REV_MEAS_ADC_Pin;
 8001606:	23c0      	movs	r3, #192	; 0xc0
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800160a:	230b      	movs	r3, #11
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f001 fa8c 	bl	8002b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	50040000 	.word	0x50040000
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b098      	sub	sp, #96	; 0x60
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	f107 0318 	add.w	r3, r7, #24
 800164c:	2234      	movs	r2, #52	; 0x34
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f00a ff07 	bl	800c464 <memset>
  if(huart->Instance==LPUART1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a2d      	ldr	r2, [pc, #180]	; (8001710 <HAL_UART_MspInit+0xe0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d152      	bne.n	8001706 <HAL_UART_MspInit+0xd6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001660:	2320      	movs	r3, #32
 8001662:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	4618      	mov	r0, r3
 800166e:	f004 f865 	bl	800573c <HAL_RCCEx_PeriphCLKConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001678:	f7ff ff72 	bl	8001560 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <HAL_UART_MspInit+0xe4>)
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	4a24      	ldr	r2, [pc, #144]	; (8001714 <HAL_UART_MspInit+0xe4>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <HAL_UART_MspInit+0xe4>)
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <HAL_UART_MspInit+0xe4>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_UART_MspInit+0xe4>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_UART_MspInit+0xe4>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_UART_MspInit+0xe4>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a18      	ldr	r2, [pc, #96]	; (8001714 <HAL_UART_MspInit+0xe4>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <HAL_UART_MspInit+0xe4>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016c4:	230c      	movs	r3, #12
 80016c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80016d4:	2308      	movs	r3, #8
 80016d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f001 fa29 	bl	8002b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016e6:	2302      	movs	r3, #2
 80016e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80016f6:	2308      	movs	r3, #8
 80016f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	; (8001718 <HAL_UART_MspInit+0xe8>)
 8001702:	f001 fa19 	bl	8002b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3760      	adds	r7, #96	; 0x60
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40008000 	.word	0x40008000
 8001714:	40021000 	.word	0x40021000
 8001718:	48000400 	.word	0x48000400

0800171c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_SPI_MspInit+0x7c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d127      	bne.n	800178e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_SPI_MspInit+0x80>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	4a16      	ldr	r2, [pc, #88]	; (800179c <HAL_SPI_MspInit+0x80>)
 8001744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001748:	6613      	str	r3, [r2, #96]	; 0x60
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_SPI_MspInit+0x80>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_SPI_MspInit+0x80>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_SPI_MspInit+0x80>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_SPI_MspInit+0x80>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800176e:	2338      	movs	r3, #56	; 0x38
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800177e:	2305      	movs	r3, #5
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <HAL_SPI_MspInit+0x84>)
 800178a:	f001 f9d5 	bl	8002b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	; 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40013000 	.word	0x40013000
 800179c:	40021000 	.word	0x40021000
 80017a0:	48000400 	.word	0x48000400

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a8:	e7fe      	b.n	80017a8 <NMI_Handler+0x4>

080017aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <MemManage_Handler+0x4>

080017b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f0:	f000 f89c 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <USB_IRQHandler+0x10>)
 80017fe:	f001 fc4d 	bl	800309c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20001370 	.word	0x20001370

0800180c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001868 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001834:	f7ff ffea 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001838:	480c      	ldr	r0, [pc, #48]	; (800186c <LoopForever+0x6>)
  ldr r1, =_edata
 800183a:	490d      	ldr	r1, [pc, #52]	; (8001870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <LoopForever+0xe>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001850:	4c0a      	ldr	r4, [pc, #40]	; (800187c <LoopForever+0x16>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185e:	f00a fe2f 	bl	800c4c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001862:	f7ff fa89 	bl	8000d78 <main>

08001866 <LoopForever>:

LoopForever:
    b LoopForever
 8001866:	e7fe      	b.n	8001866 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001868:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001874:	0800cef8 	.word	0x0800cef8
  ldr r2, =_sbss
 8001878:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800187c:	20001888 	.word	0x20001888

08001880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC1_2_IRQHandler>

08001882 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f001 f911 	bl	8002ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001892:	200f      	movs	r0, #15
 8001894:	f000 f80e 	bl	80018b4 <HAL_InitTick>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	71fb      	strb	r3, [r7, #7]
 80018a2:	e001      	b.n	80018a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018a4:	f7ff fe62 	bl	800156c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_InitTick+0x6c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d023      	beq.n	8001910 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_InitTick+0x70>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_InitTick+0x6c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 f91d 	bl	8002b1e <HAL_SYSTICK_Config>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10f      	bne.n	800190a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d809      	bhi.n	8001904 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f001 f8e7 	bl	8002aca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018fc:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_InitTick+0x74>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e007      	b.n	8001914 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	e004      	b.n	8001914 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
 800190e:	e001      	b.n	8001914 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000000c 	.word	0x2000000c
 8001924:	20000004 	.word	0x20000004
 8001928:	20000008 	.word	0x20000008

0800192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x20>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x24>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_IncTick+0x24>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	2000000c 	.word	0x2000000c
 8001950:	20000688 	.word	0x20000688

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000688 	.word	0x20000688

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_Delay+0x44>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffde 	bl	8001954 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000000c 	.word	0x2000000c

080019b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	609a      	str	r2, [r3, #8]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	609a      	str	r2, [r3, #8]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3360      	adds	r3, #96	; 0x60
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <LL_ADC_SetOffset+0x44>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	03fff000 	.word	0x03fff000

08001a64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3360      	adds	r3, #96	; 0x60
 8001a72:	461a      	mov	r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3360      	adds	r3, #96	; 0x60
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001aba:	bf00      	nop
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	615a      	str	r2, [r3, #20]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3330      	adds	r3, #48	; 0x30
 8001afc:	461a      	mov	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	4413      	add	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	211f      	movs	r1, #31
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	0e9b      	lsrs	r3, r3, #26
 8001b24:	f003 011f 	and.w	r1, r3, #31
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	431a      	orrs	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3314      	adds	r3, #20
 8001b54:	461a      	mov	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	0e5b      	lsrs	r3, r3, #25
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	4413      	add	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	0d1b      	lsrs	r3, r3, #20
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	2107      	movs	r1, #7
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	0d1b      	lsrs	r3, r3, #20
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b8e:	bf00      	nop
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0318 	and.w	r3, r3, #24
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bc0:	40d9      	lsrs	r1, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	400b      	ands	r3, r1
 8001bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	0007ffff 	.word	0x0007ffff

08001be4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6093      	str	r3, [r2, #8]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c1c:	d101      	bne.n	8001c22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c6c:	d101      	bne.n	8001c72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <LL_ADC_IsEnabled+0x18>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <LL_ADC_IsEnabled+0x1a>
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d101      	bne.n	8001cbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d101      	bne.n	8001ce4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e12b      	b.n	8001f66 <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fc49 	bl	80015b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff67 	bl	8001c08 <LL_ADC_IsDeepPowerDownEnabled>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff4d 	bl	8001be4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff82 	bl	8001c58 <LL_ADC_IsInternalRegulatorEnabled>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d115      	bne.n	8001d86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff66 	bl	8001c30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d64:	4b82      	ldr	r3, [pc, #520]	; (8001f70 <HAL_ADC_Init+0x27c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	099b      	lsrs	r3, r3, #6
 8001d6a:	4a82      	ldr	r2, [pc, #520]	; (8001f74 <HAL_ADC_Init+0x280>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	3301      	adds	r3, #1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d78:	e002      	b.n	8001d80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f9      	bne.n	8001d7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff64 	bl	8001c58 <LL_ADC_IsInternalRegulatorEnabled>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10d      	bne.n	8001db2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	f043 0210 	orr.w	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ff75 	bl	8001ca6 <LL_ADC_REG_IsConversionOngoing>
 8001dbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 80c4 	bne.w	8001f54 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 80c0 	bne.w	8001f54 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ddc:	f043 0202 	orr.w	r2, r3, #2
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff49 	bl	8001c80 <LL_ADC_IsEnabled>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d110      	bne.n	8001e16 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001df4:	4860      	ldr	r0, [pc, #384]	; (8001f78 <HAL_ADC_Init+0x284>)
 8001df6:	f7ff ff43 	bl	8001c80 <LL_ADC_IsEnabled>
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	485f      	ldr	r0, [pc, #380]	; (8001f7c <HAL_ADC_Init+0x288>)
 8001dfe:	f7ff ff3f 	bl	8001c80 <LL_ADC_IsEnabled>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4323      	orrs	r3, r4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d105      	bne.n	8001e16 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	485b      	ldr	r0, [pc, #364]	; (8001f80 <HAL_ADC_Init+0x28c>)
 8001e12:	f7ff fdcf 	bl	80019b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7e5b      	ldrb	r3, [r3, #25]
 8001e1a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e20:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e26:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e2c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e34:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d106      	bne.n	8001e52 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	045b      	lsls	r3, r3, #17
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d009      	beq.n	8001e6e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_ADC_Init+0x290>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	69b9      	ldr	r1, [r7, #24]
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff20 	bl	8001ccc <LL_ADC_INJ_IsConversionOngoing>
 8001e8c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d13d      	bne.n	8001f10 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d13a      	bne.n	8001f10 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e9e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ea6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eb6:	f023 0302 	bic.w	r3, r3, #2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	69b9      	ldr	r1, [r7, #24]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d118      	bne.n	8001f00 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ed8:	f023 0304 	bic.w	r3, r3, #4
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ee4:	4311      	orrs	r1, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	e007      	b.n	8001f10 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d10c      	bne.n	8001f32 <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f023 010f 	bic.w	r1, r3, #15
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	1e5a      	subs	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f30:	e007      	b.n	8001f42 <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 020f 	bic.w	r2, r2, #15
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	f023 0303 	bic.w	r3, r3, #3
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
 8001f52:	e007      	b.n	8001f64 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f043 0210 	orr.w	r2, r3, #16
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f64:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd90      	pop	{r4, r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000004 	.word	0x20000004
 8001f74:	053e2d63 	.word	0x053e2d63
 8001f78:	50040000 	.word	0x50040000
 8001f7c:	50040100 	.word	0x50040100
 8001f80:	50040300 	.word	0x50040300
 8001f84:	fff0c007 	.word	0xfff0c007

08001f88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b0b6      	sub	sp, #216	; 0xd8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x22>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e3d5      	b.n	8002756 <HAL_ADC_ConfigChannel+0x7ce>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fe75 	bl	8001ca6 <LL_ADC_REG_IsConversionOngoing>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 83ba 	bne.w	8002738 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d824      	bhi.n	800201e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	3b02      	subs	r3, #2
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d81b      	bhi.n	8002016 <HAL_ADC_ConfigChannel+0x8e>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <HAL_ADC_ConfigChannel+0x5c>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08001ffd 	.word	0x08001ffd
 8001fec:	08002005 	.word	0x08002005
 8001ff0:	0800200d 	.word	0x0800200d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ff4:	230c      	movs	r3, #12
 8001ff6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ffa:	e010      	b.n	800201e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ffc:	2312      	movs	r3, #18
 8001ffe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002002:	e00c      	b.n	800201e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002004:	2318      	movs	r3, #24
 8002006:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800200a:	e008      	b.n	800201e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800200c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002014:	e003      	b.n	800201e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002016:	2306      	movs	r3, #6
 8002018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800201c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800202c:	f7ff fd5e 	bl	8001aec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fe36 	bl	8001ca6 <LL_ADC_REG_IsConversionOngoing>
 800203a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fe42 	bl	8001ccc <LL_ADC_INJ_IsConversionOngoing>
 8002048:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800204c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 81bf 	bne.w	80023d4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002056:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 81ba 	bne.w	80023d4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002068:	d10f      	bne.n	800208a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	4619      	mov	r1, r3
 8002076:	f7ff fd65 	bl	8001b44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fd1f 	bl	8001ac6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002088:	e00e      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6819      	ldr	r1, [r3, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	461a      	mov	r2, r3
 8002098:	f7ff fd54 	bl	8001b44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fd0f 	bl	8001ac6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	08db      	lsrs	r3, r3, #3
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d00a      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6919      	ldr	r1, [r3, #16]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020da:	f7ff fc9f 	bl	8001a1c <LL_ADC_SetOffset>
 80020de:	e179      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fcbc 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10a      	bne.n	800210c <HAL_ADC_ConfigChannel+0x184>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fcb1 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	f003 021f 	and.w	r2, r3, #31
 800210a:	e01e      	b.n	800214a <HAL_ADC_ConfigChannel+0x1c2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fca6 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800212a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800212e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002132:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800213a:	2320      	movs	r3, #32
 800213c:	e004      	b.n	8002148 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800213e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x1da>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	e018      	b.n	8002194 <HAL_ADC_ConfigChannel+0x20c>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800217a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800217e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002186:	2320      	movs	r3, #32
 8002188:	e004      	b.n	8002194 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800218a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002194:	429a      	cmp	r2, r3
 8002196:	d106      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2200      	movs	r2, #0
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fc75 	bl	8001a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2101      	movs	r1, #1
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fc59 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x24a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fc4e 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	0e9b      	lsrs	r3, r3, #26
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	e01e      	b.n	8002210 <HAL_ADC_ConfigChannel+0x288>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2101      	movs	r1, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fc43 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80021f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80021f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002200:	2320      	movs	r3, #32
 8002202:	e004      	b.n	800220e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002204:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x2a0>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	e018      	b.n	800225a <HAL_ADC_ConfigChannel+0x2d2>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800223c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800224c:	2320      	movs	r3, #32
 800224e:	e004      	b.n	800225a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800225a:	429a      	cmp	r2, r3
 800225c:	d106      	bne.n	800226c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	2101      	movs	r1, #1
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fc12 	bl	8001a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2102      	movs	r1, #2
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fbf6 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10a      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x310>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2102      	movs	r1, #2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fbeb 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	f003 021f 	and.w	r2, r3, #31
 8002296:	e01e      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x34e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2102      	movs	r1, #2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fbe0 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80022b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80022be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80022c6:	2320      	movs	r3, #32
 80022c8:	e004      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80022ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d105      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x366>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	0e9b      	lsrs	r3, r3, #26
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	e014      	b.n	8002318 <HAL_ADC_ConfigChannel+0x390>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80022fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002302:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800230a:	2320      	movs	r3, #32
 800230c:	e004      	b.n	8002318 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800230e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002318:	429a      	cmp	r2, r3
 800231a:	d106      	bne.n	800232a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2200      	movs	r2, #0
 8002322:	2102      	movs	r1, #2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fbb3 	bl	8001a90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2103      	movs	r1, #3
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fb97 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x3ce>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2103      	movs	r1, #3
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fb8c 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	0e9b      	lsrs	r3, r3, #26
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	e017      	b.n	8002386 <HAL_ADC_ConfigChannel+0x3fe>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2103      	movs	r1, #3
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fb81 	bl	8001a64 <LL_ADC_GetOffsetChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800236e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002370:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e003      	b.n	8002384 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800237c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_ADC_ConfigChannel+0x416>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0e9b      	lsrs	r3, r3, #26
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	e011      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x43a>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80023ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ae:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80023b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80023b6:	2320      	movs	r3, #32
 80023b8:	e003      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80023ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d106      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2200      	movs	r2, #0
 80023cc:	2103      	movs	r1, #3
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fb5e 	bl	8001a90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fc51 	bl	8001c80 <LL_ADC_IsEnabled>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f040 813f 	bne.w	8002664 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f7ff fbd2 	bl	8001b9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a8e      	ldr	r2, [pc, #568]	; (8002638 <HAL_ADC_ConfigChannel+0x6b0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	f040 8130 	bne.w	8002664 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <HAL_ADC_ConfigChannel+0x4a4>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	3301      	adds	r3, #1
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	2b09      	cmp	r3, #9
 8002422:	bf94      	ite	ls
 8002424:	2301      	movls	r3, #1
 8002426:	2300      	movhi	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e019      	b.n	8002460 <HAL_ADC_ConfigChannel+0x4d8>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800243a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800243e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002444:	2320      	movs	r3, #32
 8002446:	e003      	b.n	8002450 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2b09      	cmp	r3, #9
 8002458:	bf94      	ite	ls
 800245a:	2301      	movls	r3, #1
 800245c:	2300      	movhi	r3, #0
 800245e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002460:	2b00      	cmp	r3, #0
 8002462:	d079      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x4f8>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0e9b      	lsrs	r3, r3, #26
 8002476:	3301      	adds	r3, #1
 8002478:	069b      	lsls	r3, r3, #26
 800247a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800247e:	e015      	b.n	80024ac <HAL_ADC_ConfigChannel+0x524>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800248e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002490:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002498:	2320      	movs	r3, #32
 800249a:	e003      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800249c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	069b      	lsls	r3, r3, #26
 80024a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d109      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x544>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0e9b      	lsrs	r3, r3, #26
 80024be:	3301      	adds	r3, #1
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	2101      	movs	r1, #1
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	e017      	b.n	80024fc <HAL_ADC_ConfigChannel+0x574>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80024de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80024e4:	2320      	movs	r3, #32
 80024e6:	e003      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80024e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2101      	movs	r1, #1
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	ea42 0103 	orr.w	r1, r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x59a>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0e9b      	lsrs	r3, r3, #26
 8002512:	3301      	adds	r3, #1
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	051b      	lsls	r3, r3, #20
 8002520:	e018      	b.n	8002554 <HAL_ADC_ConfigChannel+0x5cc>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800253a:	2320      	movs	r3, #32
 800253c:	e003      	b.n	8002546 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	3301      	adds	r3, #1
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002554:	430b      	orrs	r3, r1
 8002556:	e080      	b.n	800265a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002560:	2b00      	cmp	r3, #0
 8002562:	d107      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x5ec>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0e9b      	lsrs	r3, r3, #26
 800256a:	3301      	adds	r3, #1
 800256c:	069b      	lsls	r3, r3, #26
 800256e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002572:	e015      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x618>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e003      	b.n	8002598 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	3301      	adds	r3, #1
 800259a:	069b      	lsls	r3, r3, #26
 800259c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x638>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0e9b      	lsrs	r3, r3, #26
 80025b2:	3301      	adds	r3, #1
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	e017      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x668>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	61bb      	str	r3, [r7, #24]
  return result;
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e003      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	3301      	adds	r3, #1
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	ea42 0103 	orr.w	r1, r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10d      	bne.n	800261c <HAL_ADC_ConfigChannel+0x694>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0e9b      	lsrs	r3, r3, #26
 8002606:	3301      	adds	r3, #1
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	3b1e      	subs	r3, #30
 8002614:	051b      	lsls	r3, r3, #20
 8002616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800261a:	e01d      	b.n	8002658 <HAL_ADC_ConfigChannel+0x6d0>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	60fb      	str	r3, [r7, #12]
  return result;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d103      	bne.n	800263c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e005      	b.n	8002644 <HAL_ADC_ConfigChannel+0x6bc>
 8002638:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	3301      	adds	r3, #1
 8002646:	f003 021f 	and.w	r2, r3, #31
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	3b1e      	subs	r3, #30
 8002652:	051b      	lsls	r3, r3, #20
 8002654:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002658:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800265e:	4619      	mov	r1, r3
 8002660:	f7ff fa70 	bl	8001b44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <HAL_ADC_ConfigChannel+0x7d8>)
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d06c      	beq.n	800274a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002670:	483c      	ldr	r0, [pc, #240]	; (8002764 <HAL_ADC_ConfigChannel+0x7dc>)
 8002672:	f7ff f9c5 	bl	8001a00 <LL_ADC_GetCommonPathInternalCh>
 8002676:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a3a      	ldr	r2, [pc, #232]	; (8002768 <HAL_ADC_ConfigChannel+0x7e0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d127      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d121      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a35      	ldr	r2, [pc, #212]	; (800276c <HAL_ADC_ConfigChannel+0x7e4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d157      	bne.n	800274a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800269a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800269e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026a2:	4619      	mov	r1, r3
 80026a4:	482f      	ldr	r0, [pc, #188]	; (8002764 <HAL_ADC_ConfigChannel+0x7dc>)
 80026a6:	f7ff f998 	bl	80019da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026aa:	4b31      	ldr	r3, [pc, #196]	; (8002770 <HAL_ADC_ConfigChannel+0x7e8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	099b      	lsrs	r3, r3, #6
 80026b0:	4a30      	ldr	r2, [pc, #192]	; (8002774 <HAL_ADC_ConfigChannel+0x7ec>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	099b      	lsrs	r3, r3, #6
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026c4:	e002      	b.n	80026cc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f9      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026d2:	e03a      	b.n	800274a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <HAL_ADC_ConfigChannel+0x7f0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d113      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10d      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1f      	ldr	r2, [pc, #124]	; (800276c <HAL_ADC_ConfigChannel+0x7e4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d12a      	bne.n	800274a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026fc:	4619      	mov	r1, r3
 80026fe:	4819      	ldr	r0, [pc, #100]	; (8002764 <HAL_ADC_ConfigChannel+0x7dc>)
 8002700:	f7ff f96b 	bl	80019da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002704:	e021      	b.n	800274a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_ADC_ConfigChannel+0x7f4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d11c      	bne.n	800274a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d116      	bne.n	800274a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_ADC_ConfigChannel+0x7e4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d111      	bne.n	800274a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800272a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800272e:	4619      	mov	r1, r3
 8002730:	480c      	ldr	r0, [pc, #48]	; (8002764 <HAL_ADC_ConfigChannel+0x7dc>)
 8002732:	f7ff f952 	bl	80019da <LL_ADC_SetCommonPathInternalCh>
 8002736:	e008      	b.n	800274a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002752:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002756:	4618      	mov	r0, r3
 8002758:	37d8      	adds	r7, #216	; 0xd8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	80080000 	.word	0x80080000
 8002764:	50040300 	.word	0x50040300
 8002768:	c7520000 	.word	0xc7520000
 800276c:	50040000 	.word	0x50040000
 8002770:	20000004 	.word	0x20000004
 8002774:	053e2d63 	.word	0x053e2d63
 8002778:	cb840000 	.word	0xcb840000
 800277c:	80000001 	.word	0x80000001

08002780 <LL_ADC_IsEnabled>:
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <LL_ADC_IsEnabled+0x18>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <LL_ADC_IsEnabled+0x1a>
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d101      	bne.n	80027be <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b09f      	sub	sp, #124	; 0x7c
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e089      	b.n	80028fe <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80027f2:	2300      	movs	r3, #0
 80027f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80027f6:	2300      	movs	r3, #0
 80027f8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a42      	ldr	r2, [pc, #264]	; (8002908 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d102      	bne.n	800280a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002804:	4b41      	ldr	r3, [pc, #260]	; (800290c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	e001      	b.n	800280e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e068      	b.n	80028fe <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ffb9 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002834:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ffb3 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d14a      	bne.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002848:	2b00      	cmp	r3, #0
 800284a:	d147      	bne.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800284c:	4b30      	ldr	r3, [pc, #192]	; (8002910 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800284e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d027      	beq.n	80028a8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800286a:	035b      	lsls	r3, r3, #13
 800286c:	430b      	orrs	r3, r1
 800286e:	431a      	orrs	r2, r3
 8002870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002872:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002874:	4824      	ldr	r0, [pc, #144]	; (8002908 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002876:	f7ff ff83 	bl	8002780 <LL_ADC_IsEnabled>
 800287a:	4604      	mov	r4, r0
 800287c:	4823      	ldr	r0, [pc, #140]	; (800290c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800287e:	f7ff ff7f 	bl	8002780 <LL_ADC_IsEnabled>
 8002882:	4603      	mov	r3, r0
 8002884:	4323      	orrs	r3, r4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d132      	bne.n	80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800288a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002892:	f023 030f 	bic.w	r3, r3, #15
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	6811      	ldr	r1, [r2, #0]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	6892      	ldr	r2, [r2, #8]
 800289e:	430a      	orrs	r2, r1
 80028a0:	431a      	orrs	r2, r3
 80028a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028a6:	e023      	b.n	80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028b4:	4814      	ldr	r0, [pc, #80]	; (8002908 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80028b6:	f7ff ff63 	bl	8002780 <LL_ADC_IsEnabled>
 80028ba:	4604      	mov	r4, r0
 80028bc:	4813      	ldr	r0, [pc, #76]	; (800290c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80028be:	f7ff ff5f 	bl	8002780 <LL_ADC_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4323      	orrs	r3, r4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d112      	bne.n	80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028d2:	f023 030f 	bic.w	r3, r3, #15
 80028d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028da:	e009      	b.n	80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e0:	f043 0220 	orr.w	r2, r3, #32
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80028ee:	e000      	b.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80028fe:	4618      	mov	r0, r3
 8002900:	377c      	adds	r7, #124	; 0x7c
 8002902:	46bd      	mov	sp, r7
 8002904:	bd90      	pop	{r4, r7, pc}
 8002906:	bf00      	nop
 8002908:	50040000 	.word	0x50040000
 800290c:	50040100 	.word	0x50040100
 8002910:	50040300 	.word	0x50040300

08002914 <__NVIC_SetPriorityGrouping>:
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800293c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002946:	4a04      	ldr	r2, [pc, #16]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_GetPriorityGrouping>:
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <__NVIC_GetPriorityGrouping+0x18>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f003 0307 	and.w	r3, r3, #7
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_EnableIRQ>:
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	2b00      	cmp	r3, #0
 8002988:	db0b      	blt.n	80029a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	4907      	ldr	r1, [pc, #28]	; (80029b0 <__NVIC_EnableIRQ+0x38>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2001      	movs	r0, #1
 800299a:	fa00 f202 	lsl.w	r2, r0, r2
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	; (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a80:	d301      	bcc.n	8002a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00f      	b.n	8002aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <SysTick_Config+0x40>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a8e:	210f      	movs	r1, #15
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	f7ff ff8e 	bl	80029b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <SysTick_Config+0x40>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <SysTick_Config+0x40>)
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000e010 	.word	0xe000e010

08002ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff29 	bl	8002914 <__NVIC_SetPriorityGrouping>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002adc:	f7ff ff3e 	bl	800295c <__NVIC_GetPriorityGrouping>
 8002ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	6978      	ldr	r0, [r7, #20]
 8002ae8:	f7ff ff8e 	bl	8002a08 <NVIC_EncodePriority>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff5d 	bl	80029b4 <__NVIC_SetPriority>
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff31 	bl	8002978 <__NVIC_EnableIRQ>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ffa2 	bl	8002a70 <SysTick_Config>
 8002b2c:	4603      	mov	r3, r0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b46:	e14e      	b.n	8002de6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8140 	beq.w	8002de0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d005      	beq.n	8002b78 <HAL_GPIO_Init+0x40>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d130      	bne.n	8002bda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bae:	2201      	movs	r2, #1
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	f003 0201 	and.w	r2, r3, #1
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d017      	beq.n	8002c16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d123      	bne.n	8002c6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	08da      	lsrs	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	220f      	movs	r2, #15
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	08da      	lsrs	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3208      	adds	r2, #8
 8002c64:	6939      	ldr	r1, [r7, #16]
 8002c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	2203      	movs	r2, #3
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0203 	and.w	r2, r3, #3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 809a 	beq.w	8002de0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cac:	4b55      	ldr	r3, [pc, #340]	; (8002e04 <HAL_GPIO_Init+0x2cc>)
 8002cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb0:	4a54      	ldr	r2, [pc, #336]	; (8002e04 <HAL_GPIO_Init+0x2cc>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6613      	str	r3, [r2, #96]	; 0x60
 8002cb8:	4b52      	ldr	r3, [pc, #328]	; (8002e04 <HAL_GPIO_Init+0x2cc>)
 8002cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cc4:	4a50      	ldr	r2, [pc, #320]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	089b      	lsrs	r3, r3, #2
 8002cca:	3302      	adds	r3, #2
 8002ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	220f      	movs	r2, #15
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cee:	d013      	beq.n	8002d18 <HAL_GPIO_Init+0x1e0>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a46      	ldr	r2, [pc, #280]	; (8002e0c <HAL_GPIO_Init+0x2d4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00d      	beq.n	8002d14 <HAL_GPIO_Init+0x1dc>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a45      	ldr	r2, [pc, #276]	; (8002e10 <HAL_GPIO_Init+0x2d8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d007      	beq.n	8002d10 <HAL_GPIO_Init+0x1d8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a44      	ldr	r2, [pc, #272]	; (8002e14 <HAL_GPIO_Init+0x2dc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d101      	bne.n	8002d0c <HAL_GPIO_Init+0x1d4>
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e006      	b.n	8002d1a <HAL_GPIO_Init+0x1e2>
 8002d0c:	2307      	movs	r3, #7
 8002d0e:	e004      	b.n	8002d1a <HAL_GPIO_Init+0x1e2>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e002      	b.n	8002d1a <HAL_GPIO_Init+0x1e2>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_GPIO_Init+0x1e2>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	f002 0203 	and.w	r2, r2, #3
 8002d20:	0092      	lsls	r2, r2, #2
 8002d22:	4093      	lsls	r3, r2
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d2a:	4937      	ldr	r1, [pc, #220]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	3302      	adds	r3, #2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d38:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_GPIO_Init+0x2e0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d5c:	4a2e      	ldr	r2, [pc, #184]	; (8002e18 <HAL_GPIO_Init+0x2e0>)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d62:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_GPIO_Init+0x2e0>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d86:	4a24      	ldr	r2, [pc, #144]	; (8002e18 <HAL_GPIO_Init+0x2e0>)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d8c:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <HAL_GPIO_Init+0x2e0>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002db0:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <HAL_GPIO_Init+0x2e0>)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002db6:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_GPIO_Init+0x2e0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dda:	4a0f      	ldr	r2, [pc, #60]	; (8002e18 <HAL_GPIO_Init+0x2e0>)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	3301      	adds	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f47f aea9 	bne.w	8002b48 <HAL_GPIO_Init+0x10>
  }
}
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	48000400 	.word	0x48000400
 8002e10:	48000800 	.word	0x48000800
 8002e14:	48000c00 	.word	0x48000c00
 8002e18:	40010400 	.word	0x40010400

08002e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e2c:	787b      	ldrb	r3, [r7, #1]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e38:	e002      	b.n	8002e40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4e:	b08b      	sub	sp, #44	; 0x2c
 8002e50:	af06      	add	r7, sp, #24
 8002e52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0f8      	b.n	8003050 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f008 ff3a 	bl	800bcec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f004 fa0b 	bl	80072a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	687e      	ldr	r6, [r7, #4]
 8002e92:	466d      	mov	r5, sp
 8002e94:	f106 0410 	add.w	r4, r6, #16
 8002e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	602b      	str	r3, [r5, #0]
 8002ea0:	1d33      	adds	r3, r6, #4
 8002ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ea4:	6838      	ldr	r0, [r7, #0]
 8002ea6:	f004 f9d3 	bl	8007250 <USB_CoreInit>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0c9      	b.n	8003050 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f004 fa07 	bl	80072d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
 8002ecc:	e040      	b.n	8002f50 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	440b      	add	r3, r1
 8002ede:	3301      	adds	r3, #1
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	440b      	add	r3, r1
 8002f08:	3303      	adds	r3, #3
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3338      	adds	r3, #56	; 0x38
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	440b      	add	r3, r1
 8002f30:	333c      	adds	r3, #60	; 0x3c
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	440b      	add	r3, r1
 8002f44:	3340      	adds	r3, #64	; 0x40
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d3b9      	bcc.n	8002ece <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]
 8002f5e:	e044      	b.n	8002fea <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	440b      	add	r3, r1
 8002f84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	440b      	add	r3, r1
 8002f9a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	440b      	add	r3, r1
 8002fb0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	440b      	add	r3, r1
 8002fc6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	440b      	add	r3, r1
 8002fdc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d3b5      	bcc.n	8002f60 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	687e      	ldr	r6, [r7, #4]
 8002ffc:	466d      	mov	r5, sp
 8002ffe:	f106 0410 	add.w	r4, r6, #16
 8003002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	602b      	str	r3, [r5, #0]
 800300a:	1d33      	adds	r3, r6, #4
 800300c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800300e:	6838      	ldr	r0, [r7, #0]
 8003010:	f004 f96e 	bl	80072f0 <USB_DevInit>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2202      	movs	r2, #2
 800301e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e014      	b.n	8003050 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d102      	bne.n	8003044 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f001 fc58 	bl	80048f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f006 fbff 	bl	800984c <USB_DevDisconnect>

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003058 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_PCD_Start+0x16>
 800306a:	2302      	movs	r3, #2
 800306c:	e012      	b.n	8003094 <HAL_PCD_Start+0x3c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f004 f8f9 	bl	8007272 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f006 fbca 	bl	800981e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f006 fbe4 	bl	8009876 <USB_ReadInterrupts>
 80030ae:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fb13 	bl	80036e6 <PCD_EP_ISR_Handler>

    return;
 80030c0:	e110      	b.n	80032e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d013      	beq.n	80030f4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030de:	b292      	uxth	r2, r2
 80030e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f008 feb8 	bl	800be5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80030ea:	2100      	movs	r1, #0
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8fc 	bl	80032ea <HAL_PCD_SetAddress>

    return;
 80030f2:	e0f7      	b.n	80032e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00c      	beq.n	8003118 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003110:	b292      	uxth	r2, r2
 8003112:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003116:	e0e5      	b.n	80032e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00c      	beq.n	800313c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800312a:	b29a      	uxth	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003134:	b292      	uxth	r2, r2
 8003136:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800313a:	e0d3      	b.n	80032e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d034      	beq.n	80031b0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0204 	bic.w	r2, r2, #4
 8003158:	b292      	uxth	r2, r2
 800315a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0208 	bic.w	r2, r2, #8
 8003170:	b292      	uxth	r2, r2
 8003172:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800317c:	2b01      	cmp	r3, #1
 800317e:	d107      	bne.n	8003190 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003188:	2100      	movs	r1, #0
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f009 f916 	bl	800c3bc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f008 fe9b 	bl	800becc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800319e:	b29a      	uxth	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031a8:	b292      	uxth	r2, r2
 80031aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80031ae:	e099      	b.n	80032e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d027      	beq.n	800320a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0208 	orr.w	r2, r2, #8
 80031cc:	b292      	uxth	r2, r2
 80031ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031da:	b29a      	uxth	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e4:	b292      	uxth	r2, r2
 80031e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0204 	orr.w	r2, r2, #4
 80031fc:	b292      	uxth	r2, r2
 80031fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f008 fe48 	bl	800be98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003208:	e06c      	b.n	80032e4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003210:	2b00      	cmp	r3, #0
 8003212:	d040      	beq.n	8003296 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800321c:	b29a      	uxth	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003226:	b292      	uxth	r2, r2
 8003228:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d12b      	bne.n	800328e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800323e:	b29a      	uxth	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0204 	orr.w	r2, r2, #4
 8003248:	b292      	uxth	r2, r2
 800324a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003256:	b29a      	uxth	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0208 	orr.w	r2, r2, #8
 8003260:	b292      	uxth	r2, r2
 8003262:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003276:	b29b      	uxth	r3, r3
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003284:	2101      	movs	r1, #1
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f009 f898 	bl	800c3bc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800328c:	e02a      	b.n	80032e4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f008 fe02 	bl	800be98 <HAL_PCD_SuspendCallback>
    return;
 8003294:	e026      	b.n	80032e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00f      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032b2:	b292      	uxth	r2, r2
 80032b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f008 fdc0 	bl	800be3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80032be:	e011      	b.n	80032e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032dc:	b292      	uxth	r2, r2
 80032de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80032e2:	bf00      	nop
  }
}
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_PCD_SetAddress+0x1a>
 8003300:	2302      	movs	r3, #2
 8003302:	e013      	b.n	800332c <HAL_PCD_SetAddress+0x42>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f006 fa6a 	bl	80097f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	4608      	mov	r0, r1
 800333e:	4611      	mov	r1, r2
 8003340:	461a      	mov	r2, r3
 8003342:	4603      	mov	r3, r0
 8003344:	70fb      	strb	r3, [r7, #3]
 8003346:	460b      	mov	r3, r1
 8003348:	803b      	strh	r3, [r7, #0]
 800334a:	4613      	mov	r3, r2
 800334c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003356:	2b00      	cmp	r3, #0
 8003358:	da0e      	bge.n	8003378 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	705a      	strb	r2, [r3, #1]
 8003376:	e00e      	b.n	8003396 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f003 0207 	and.w	r2, r3, #7
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	b2da      	uxtb	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033a2:	883a      	ldrh	r2, [r7, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	78ba      	ldrb	r2, [r7, #2]
 80033ac:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033ae:	78bb      	ldrb	r3, [r7, #2]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d102      	bne.n	80033ba <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_PCD_EP_Open+0x94>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e00e      	b.n	80033e6 <HAL_PCD_EP_Open+0xb2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68f9      	ldr	r1, [r7, #12]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f003 ffac 	bl	8007334 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80033e4:	7afb      	ldrb	r3, [r7, #11]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	460b      	mov	r3, r1
 80033f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	da0e      	bge.n	8003420 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	705a      	strb	r2, [r3, #1]
 800341e:	e00e      	b.n	800343e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	f003 0207 	and.w	r2, r3, #7
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_PCD_EP_Close+0x6a>
 8003454:	2302      	movs	r3, #2
 8003456:	e00e      	b.n	8003476 <HAL_PCD_EP_Close+0x88>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68f9      	ldr	r1, [r7, #12]
 8003466:	4618      	mov	r0, r3
 8003468:	f004 fb28 	bl	8007abc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b086      	sub	sp, #24
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	460b      	mov	r3, r1
 800348c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800348e:	7afb      	ldrb	r3, [r7, #11]
 8003490:	f003 0207 	and.w	r2, r3, #7
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2200      	movs	r2, #0
 80034bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034be:	7afb      	ldrb	r3, [r7, #11]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f004 fce0 	bl	8007e96 <USB_EPStartXfer>

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	f003 0207 	and.w	r2, r3, #7
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	460b      	mov	r3, r1
 800351e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003520:	7afb      	ldrb	r3, [r7, #11]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2200      	movs	r2, #0
 8003554:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2201      	movs	r2, #1
 800355a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800355c:	7afb      	ldrb	r3, [r7, #11]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	b2da      	uxtb	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6979      	ldr	r1, [r7, #20]
 800356e:	4618      	mov	r0, r3
 8003570:	f004 fc91 	bl	8007e96 <USB_EPStartXfer>

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	460b      	mov	r3, r1
 8003588:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 0207 	and.w	r2, r3, #7
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	d901      	bls.n	800359c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e04c      	b.n	8003636 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800359c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	da0e      	bge.n	80035c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	705a      	strb	r2, [r3, #1]
 80035c0:	e00c      	b.n	80035dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_PCD_EP_SetStall+0x7e>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e01c      	b.n	8003636 <HAL_PCD_EP_SetStall+0xb8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68f9      	ldr	r1, [r7, #12]
 800360a:	4618      	mov	r0, r3
 800360c:	f005 fff4 	bl	80095f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	2b00      	cmp	r3, #0
 8003618:	d108      	bne.n	800362c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f006 f935 	bl	8009896 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	f003 020f 	and.w	r2, r3, #15
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	429a      	cmp	r2, r3
 8003656:	d901      	bls.n	800365c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e040      	b.n	80036de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800365c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003660:	2b00      	cmp	r3, #0
 8003662:	da0e      	bge.n	8003682 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	705a      	strb	r2, [r3, #1]
 8003680:	e00e      	b.n	80036a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	f003 0207 	and.w	r2, r3, #7
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_PCD_EP_ClrStall+0x82>
 80036bc:	2302      	movs	r3, #2
 80036be:	e00e      	b.n	80036de <HAL_PCD_EP_ClrStall+0xa0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68f9      	ldr	r1, [r7, #12]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f005 ffe3 	bl	800969a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b096      	sub	sp, #88	; 0x58
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036ee:	e3b1      	b.n	8003e54 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80036fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800370a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 8173 	bne.w	80039fa <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003714:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d150      	bne.n	80037c2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	b29b      	uxth	r3, r3
 8003728:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800372c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003730:	81fb      	strh	r3, [r7, #14]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	89fb      	ldrh	r3, [r7, #14]
 8003738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800373c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003740:	b29b      	uxth	r3, r3
 8003742:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3328      	adds	r3, #40	; 0x28
 8003748:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	4413      	add	r3, r2
 8003764:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800376e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003770:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	441a      	add	r2, r3
 800377c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003780:	2100      	movs	r1, #0
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f008 fb41 	bl	800be0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 835f 	beq.w	8003e54 <PCD_EP_ISR_Handler+0x76e>
 8003796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f040 835a 	bne.w	8003e54 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	b292      	uxth	r2, r2
 80037b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037c0:	e348      	b.n	8003e54 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037c8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80037d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d032      	beq.n	8003846 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	4413      	add	r3, r2
 80037fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003806:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003814:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003818:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800381a:	b29b      	uxth	r3, r3
 800381c:	f006 f889 	bl	8009932 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29a      	uxth	r2, r3
 8003828:	f640 738f 	movw	r3, #3983	; 0xf8f
 800382c:	4013      	ands	r3, r2
 800382e:	823b      	strh	r3, [r7, #16]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	8a3a      	ldrh	r2, [r7, #16]
 8003836:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800383a:	b292      	uxth	r2, r2
 800383c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f008 fab6 	bl	800bdb0 <HAL_PCD_SetupStageCallback>
 8003844:	e306      	b.n	8003e54 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003846:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800384a:	2b00      	cmp	r3, #0
 800384c:	f280 8302 	bge.w	8003e54 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	b29a      	uxth	r2, r3
 8003858:	f640 738f 	movw	r3, #3983	; 0xf8f
 800385c:	4013      	ands	r3, r2
 800385e:	83fb      	strh	r3, [r7, #30]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	8bfa      	ldrh	r2, [r7, #30]
 8003866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800386a:	b292      	uxth	r2, r2
 800386c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003876:	b29b      	uxth	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	4413      	add	r3, r2
 8003888:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003894:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d019      	beq.n	80038d2 <PCD_EP_ISR_Handler+0x1ec>
 800389e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d015      	beq.n	80038d2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ac:	6959      	ldr	r1, [r3, #20]
 80038ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80038b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f006 f83b 	bl	8009932 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80038bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	441a      	add	r2, r3
 80038c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80038ca:	2100      	movs	r1, #0
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f008 fa81 	bl	800bdd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80038dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f040 82b5 	bne.w	8003e54 <PCD_EP_ISR_Handler+0x76e>
 80038ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038f6:	f000 82ad 	beq.w	8003e54 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003908:	b29b      	uxth	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	4413      	add	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	b29b      	uxth	r3, r3
 8003920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003924:	b29a      	uxth	r2, r3
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	801a      	strh	r2, [r3, #0]
 800392a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b3e      	cmp	r3, #62	; 0x3e
 8003930:	d91d      	bls.n	800396e <PCD_EP_ISR_Handler+0x288>
 8003932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	647b      	str	r3, [r7, #68]	; 0x44
 800393a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <PCD_EP_ISR_Handler+0x266>
 8003946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003948:	3b01      	subs	r3, #1
 800394a:	647b      	str	r3, [r7, #68]	; 0x44
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	b29a      	uxth	r2, r3
 8003952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003954:	b29b      	uxth	r3, r3
 8003956:	029b      	lsls	r3, r3, #10
 8003958:	b29b      	uxth	r3, r3
 800395a:	4313      	orrs	r3, r2
 800395c:	b29b      	uxth	r3, r3
 800395e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003966:	b29a      	uxth	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	e026      	b.n	80039bc <PCD_EP_ISR_Handler+0x2d6>
 800396e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <PCD_EP_ISR_Handler+0x2a6>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003984:	b29a      	uxth	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	e017      	b.n	80039bc <PCD_EP_ISR_Handler+0x2d6>
 800398c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	647b      	str	r3, [r7, #68]	; 0x44
 8003994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <PCD_EP_ISR_Handler+0x2c0>
 80039a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a2:	3301      	adds	r3, #1
 80039a4:	647b      	str	r3, [r7, #68]	; 0x44
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	029b      	lsls	r3, r3, #10
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039cc:	827b      	strh	r3, [r7, #18]
 80039ce:	8a7b      	ldrh	r3, [r7, #18]
 80039d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80039d4:	827b      	strh	r3, [r7, #18]
 80039d6:	8a7b      	ldrh	r3, [r7, #18]
 80039d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039dc:	827b      	strh	r3, [r7, #18]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	8a7b      	ldrh	r3, [r7, #18]
 80039e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	8013      	strh	r3, [r2, #0]
 80039f8:	e22c      	b.n	8003e54 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a0e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f280 80f6 	bge.w	8003c04 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a2e:	4013      	ands	r3, r2
 8003a30:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a4a:	b292      	uxth	r2, r2
 8003a4c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003a4e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a66:	7b1b      	ldrb	r3, [r3, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d123      	bne.n	8003ab4 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	4413      	add	r3, r2
 8003a86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a90:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003a94:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 808e 	beq.w	8003bba <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa4:	6959      	ldr	r1, [r3, #20]
 8003aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa8:	88da      	ldrh	r2, [r3, #6]
 8003aaa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003aae:	f005 ff40 	bl	8009932 <USB_ReadPMA>
 8003ab2:	e082      	b.n	8003bba <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab6:	78db      	ldrb	r3, [r3, #3]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d10a      	bne.n	8003ad2 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003abc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f9d3 	bl	8003e70 <HAL_PCD_EP_DB_Receive>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003ad0:	e073      	b.n	8003bba <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	441a      	add	r2, r3
 8003afe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d022      	beq.n	8003b76 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b54:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003b58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d02c      	beq.n	8003bba <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b66:	6959      	ldr	r1, [r3, #20]
 8003b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6a:	891a      	ldrh	r2, [r3, #8]
 8003b6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b70:	f005 fedf 	bl	8009932 <USB_ReadPMA>
 8003b74:	e021      	b.n	8003bba <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b9a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003b9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bac:	6959      	ldr	r1, [r3, #20]
 8003bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb0:	895a      	ldrh	r2, [r3, #10]
 8003bb2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003bb6:	f005 febc 	bl	8009932 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bbc:	69da      	ldr	r2, [r3, #28]
 8003bbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003bc2:	441a      	add	r2, r3
 8003bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003bd0:	441a      	add	r2, r3
 8003bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <PCD_EP_ISR_Handler+0x504>
 8003bde:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d206      	bcs.n	8003bf8 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f008 f8ef 	bl	800bdd4 <HAL_PCD_DataOutStageCallback>
 8003bf6:	e005      	b.n	8003c04 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f004 f949 	bl	8007e96 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8121 	beq.w	8003e54 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c12:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c64:	78db      	ldrb	r3, [r3, #3]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	f040 80a2 	bne.w	8003db0 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6e:	2200      	movs	r2, #0
 8003c70:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c74:	7b1b      	ldrb	r3, [r3, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8093 	beq.w	8003da2 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d046      	beq.n	8003d16 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c8a:	785b      	ldrb	r3, [r3, #1]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d126      	bne.n	8003cde <PCD_EP_ISR_Handler+0x5f8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	4413      	add	r3, r2
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	00da      	lsls	r2, r3, #3
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cb6:	623b      	str	r3, [r7, #32]
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	801a      	strh	r2, [r3, #0]
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	801a      	strh	r2, [r3, #0]
 8003cdc:	e061      	b.n	8003da2 <PCD_EP_ISR_Handler+0x6bc>
 8003cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce0:	785b      	ldrb	r3, [r3, #1]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d15d      	bne.n	8003da2 <PCD_EP_ISR_Handler+0x6bc>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	4413      	add	r3, r2
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	00da      	lsls	r2, r3, #3
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	4413      	add	r3, r2
 8003d08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	2200      	movs	r2, #0
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	e045      	b.n	8003da2 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1e:	785b      	ldrb	r3, [r3, #1]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d126      	bne.n	8003d72 <PCD_EP_ISR_Handler+0x68c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d38:	4413      	add	r3, r2
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	00da      	lsls	r2, r3, #3
 8003d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d44:	4413      	add	r3, r2
 8003d46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	801a      	strh	r2, [r3, #0]
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	801a      	strh	r2, [r3, #0]
 8003d70:	e017      	b.n	8003da2 <PCD_EP_ISR_Handler+0x6bc>
 8003d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d74:	785b      	ldrb	r3, [r3, #1]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d113      	bne.n	8003da2 <PCD_EP_ISR_Handler+0x6bc>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d88:	4413      	add	r3, r2
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	00da      	lsls	r2, r3, #3
 8003d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d94:	4413      	add	r3, r2
 8003d96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9e:	2200      	movs	r2, #0
 8003da0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	4619      	mov	r1, r3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f008 f82e 	bl	800be0a <HAL_PCD_DataInStageCallback>
 8003dae:	e051      	b.n	8003e54 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003db0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d144      	bne.n	8003e46 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003de0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d907      	bls.n	8003e00 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8003df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003df8:	1ad2      	subs	r2, r2, r3
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfc:	619a      	str	r2, [r3, #24]
 8003dfe:	e002      	b.n	8003e06 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e02:	2200      	movs	r2, #0
 8003e04:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f007 fff8 	bl	800be0a <HAL_PCD_DataInStageCallback>
 8003e1a:	e01b      	b.n	8003e54 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e24:	441a      	add	r2, r3
 8003e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e28:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e32:	441a      	add	r2, r3
 8003e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e36:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f004 f829 	bl	8007e96 <USB_EPStartXfer>
 8003e44:	e006      	b.n	8003e54 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f917 	bl	8004082 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	b21b      	sxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f6ff ac45 	blt.w	80036f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3758      	adds	r7, #88	; 0x58
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d07c      	beq.n	8003f82 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	8b7b      	ldrh	r3, [r7, #26]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d306      	bcc.n	8003ec6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	699a      	ldr	r2, [r3, #24]
 8003ebc:	8b7b      	ldrh	r3, [r7, #26]
 8003ebe:	1ad2      	subs	r2, r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	619a      	str	r2, [r3, #24]
 8003ec4:	e002      	b.n	8003ecc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d123      	bne.n	8003f1c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	833b      	strh	r3, [r7, #24]
 8003ef0:	8b3b      	ldrh	r3, [r7, #24]
 8003ef2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ef6:	833b      	strh	r3, [r7, #24]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	441a      	add	r2, r3
 8003f06:	8b3b      	ldrh	r3, [r7, #24]
 8003f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d01f      	beq.n	8003f66 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f40:	82fb      	strh	r3, [r7, #22]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	441a      	add	r2, r3
 8003f50:	8afb      	ldrh	r3, [r7, #22]
 8003f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f66:	8b7b      	ldrh	r3, [r7, #26]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8085 	beq.w	8004078 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6959      	ldr	r1, [r3, #20]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	891a      	ldrh	r2, [r3, #8]
 8003f7a:	8b7b      	ldrh	r3, [r7, #26]
 8003f7c:	f005 fcd9 	bl	8009932 <USB_ReadPMA>
 8003f80:	e07a      	b.n	8004078 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fa6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	699a      	ldr	r2, [r3, #24]
 8003fac:	8b7b      	ldrh	r3, [r7, #26]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d306      	bcc.n	8003fc0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	8b7b      	ldrh	r3, [r7, #26]
 8003fb8:	1ad2      	subs	r2, r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	619a      	str	r2, [r3, #24]
 8003fbe:	e002      	b.n	8003fc6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d123      	bne.n	8004016 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe8:	83fb      	strh	r3, [r7, #30]
 8003fea:	8bfb      	ldrh	r3, [r7, #30]
 8003fec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ff0:	83fb      	strh	r3, [r7, #30]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	441a      	add	r2, r3
 8004000:	8bfb      	ldrh	r3, [r7, #30]
 8004002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800400a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004012:	b29b      	uxth	r3, r3
 8004014:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d11f      	bne.n	8004060 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	83bb      	strh	r3, [r7, #28]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	441a      	add	r2, r3
 800404a:	8bbb      	ldrh	r3, [r7, #28]
 800404c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004058:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800405c:	b29b      	uxth	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004060:	8b7b      	ldrh	r3, [r7, #26]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6959      	ldr	r1, [r3, #20]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	895a      	ldrh	r2, [r3, #10]
 8004072:	8b7b      	ldrh	r3, [r7, #26]
 8004074:	f005 fc5d 	bl	8009932 <USB_ReadPMA>
    }
  }

  return count;
 8004078:	8b7b      	ldrh	r3, [r7, #26]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b0a4      	sub	sp, #144	; 0x90
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	4613      	mov	r3, r2
 800408e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 81db 	beq.w	8004452 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	4413      	add	r3, r2
 80040b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040c0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d907      	bls.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	699a      	ldr	r2, [r3, #24]
 80040d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040d8:	1ad2      	subs	r2, r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	619a      	str	r2, [r3, #24]
 80040de:	e002      	b.n	80040e6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2200      	movs	r2, #0
 80040e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f040 80b9 	bne.w	8004262 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	785b      	ldrb	r3, [r3, #1]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d126      	bne.n	8004146 <HAL_PCD_EP_DB_Transmit+0xc4>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004106:	b29b      	uxth	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	4413      	add	r3, r2
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	00da      	lsls	r2, r3, #3
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	4413      	add	r3, r2
 800411a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	b29b      	uxth	r3, r3
 8004126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800412a:	b29a      	uxth	r2, r3
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	801a      	strh	r2, [r3, #0]
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29b      	uxth	r3, r3
 8004136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800413a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800413e:	b29a      	uxth	r2, r3
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	801a      	strh	r2, [r3, #0]
 8004144:	e01a      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0xfa>
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d116      	bne.n	800417c <HAL_PCD_EP_DB_Transmit+0xfa>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415c:	b29b      	uxth	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004162:	4413      	add	r3, r2
 8004164:	637b      	str	r3, [r7, #52]	; 0x34
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	00da      	lsls	r2, r3, #3
 800416c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416e:	4413      	add	r3, r2
 8004170:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004174:	633b      	str	r3, [r7, #48]	; 0x30
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	2200      	movs	r2, #0
 800417a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	785b      	ldrb	r3, [r3, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d126      	bne.n	80041d8 <HAL_PCD_EP_DB_Transmit+0x156>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004198:	b29b      	uxth	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	00da      	lsls	r2, r3, #3
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	4413      	add	r3, r2
 80041ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041bc:	b29a      	uxth	r2, r3
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	801a      	strh	r2, [r3, #0]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	e017      	b.n	8004208 <HAL_PCD_EP_DB_Transmit+0x186>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d113      	bne.n	8004208 <HAL_PCD_EP_DB_Transmit+0x186>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	4413      	add	r3, r2
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	00da      	lsls	r2, r3, #3
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	4413      	add	r3, r2
 80041fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004200:	623b      	str	r3, [r7, #32]
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	2200      	movs	r2, #0
 8004206:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	4619      	mov	r1, r3
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f007 fdfb 	bl	800be0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 82fa 	beq.w	8004814 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423a:	82fb      	strh	r3, [r7, #22]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	8afb      	ldrh	r3, [r7, #22]
 800424c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425c:	b29b      	uxth	r3, r3
 800425e:	8013      	strh	r3, [r2, #0]
 8004260:	e2d8      	b.n	8004814 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d021      	beq.n	80042b0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004286:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	441a      	add	r2, r3
 8004298:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800429c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	f040 82ac 	bne.w	8004814 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042c4:	441a      	add	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	69da      	ldr	r2, [r3, #28]
 80042ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042d2:	441a      	add	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d30b      	bcc.n	80042fc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6a1a      	ldr	r2, [r3, #32]
 80042f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042f4:	1ad2      	subs	r2, r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	621a      	str	r2, [r3, #32]
 80042fa:	e017      	b.n	800432c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d108      	bne.n	8004316 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004304:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004308:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004314:	e00a      	b.n	800432c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2200      	movs	r2, #0
 800432a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	785b      	ldrb	r3, [r3, #1]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d165      	bne.n	8004400 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004342:	b29b      	uxth	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004348:	4413      	add	r3, r2
 800434a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	00da      	lsls	r2, r3, #3
 8004352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004354:	4413      	add	r3, r2
 8004356:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800435a:	63bb      	str	r3, [r7, #56]	; 0x38
 800435c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004366:	b29a      	uxth	r2, r3
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004370:	2b3e      	cmp	r3, #62	; 0x3e
 8004372:	d91d      	bls.n	80043b0 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	64bb      	str	r3, [r7, #72]	; 0x48
 800437c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <HAL_PCD_EP_DB_Transmit+0x30c>
 8004388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800438a:	3b01      	subs	r3, #1
 800438c:	64bb      	str	r3, [r7, #72]	; 0x48
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b29a      	uxth	r2, r3
 8004394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004396:	b29b      	uxth	r3, r3
 8004398:	029b      	lsls	r3, r3, #10
 800439a:	b29b      	uxth	r3, r3
 800439c:	4313      	orrs	r3, r2
 800439e:	b29b      	uxth	r3, r3
 80043a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	e044      	b.n	800443a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80043b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <HAL_PCD_EP_DB_Transmit+0x34c>
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	e035      	b.n	800443a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80043ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043d2:	085b      	lsrs	r3, r3, #1
 80043d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80043d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_PCD_EP_DB_Transmit+0x366>
 80043e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e4:	3301      	adds	r3, #1
 80043e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	029b      	lsls	r3, r3, #10
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	4313      	orrs	r3, r2
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	801a      	strh	r2, [r3, #0]
 80043fe:	e01c      	b.n	800443a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d118      	bne.n	800443a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	647b      	str	r3, [r7, #68]	; 0x44
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004416:	b29b      	uxth	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441c:	4413      	add	r3, r2
 800441e:	647b      	str	r3, [r7, #68]	; 0x44
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	00da      	lsls	r2, r3, #3
 8004426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004428:	4413      	add	r3, r2
 800442a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800442e:	643b      	str	r3, [r7, #64]	; 0x40
 8004430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004434:	b29a      	uxth	r2, r3
 8004436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004438:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	6959      	ldr	r1, [r3, #20]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	891a      	ldrh	r2, [r3, #8]
 8004446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800444a:	b29b      	uxth	r3, r3
 800444c:	f005 fa2f 	bl	80098ae <USB_WritePMA>
 8004450:	e1e0      	b.n	8004814 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800445a:	b29b      	uxth	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	4413      	add	r3, r2
 800446c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004476:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004482:	429a      	cmp	r2, r3
 8004484:	d307      	bcc.n	8004496 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800448e:	1ad2      	subs	r2, r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	619a      	str	r2, [r3, #24]
 8004494:	e002      	b.n	800449c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2200      	movs	r2, #0
 800449a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f040 80c0 	bne.w	8004626 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	785b      	ldrb	r3, [r3, #1]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d126      	bne.n	80044fc <HAL_PCD_EP_DB_Transmit+0x47a>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044bc:	b29b      	uxth	r3, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044c2:	4413      	add	r3, r2
 80044c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	00da      	lsls	r2, r3, #3
 80044cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044ce:	4413      	add	r3, r2
 80044d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80044d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044e4:	801a      	strh	r2, [r3, #0]
 80044e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	e01a      	b.n	8004532 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	785b      	ldrb	r3, [r3, #1]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d116      	bne.n	8004532 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	667b      	str	r3, [r7, #100]	; 0x64
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004512:	b29b      	uxth	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004518:	4413      	add	r3, r2
 800451a:	667b      	str	r3, [r7, #100]	; 0x64
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	00da      	lsls	r2, r3, #3
 8004522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004524:	4413      	add	r3, r2
 8004526:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800452a:	663b      	str	r3, [r7, #96]	; 0x60
 800452c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800452e:	2200      	movs	r2, #0
 8004530:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	677b      	str	r3, [r7, #116]	; 0x74
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	785b      	ldrb	r3, [r3, #1]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d12b      	bne.n	8004598 <HAL_PCD_EP_DB_Transmit+0x516>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454e:	b29b      	uxth	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004554:	4413      	add	r3, r2
 8004556:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	00da      	lsls	r2, r3, #3
 800455e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004560:	4413      	add	r3, r2
 8004562:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004566:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800456a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004576:	b29a      	uxth	r2, r3
 8004578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800457c:	801a      	strh	r2, [r3, #0]
 800457e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800458a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800458e:	b29a      	uxth	r2, r3
 8004590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004594:	801a      	strh	r2, [r3, #0]
 8004596:	e017      	b.n	80045c8 <HAL_PCD_EP_DB_Transmit+0x546>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d113      	bne.n	80045c8 <HAL_PCD_EP_DB_Transmit+0x546>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ae:	4413      	add	r3, r2
 80045b0:	677b      	str	r3, [r7, #116]	; 0x74
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	00da      	lsls	r2, r3, #3
 80045b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ba:	4413      	add	r3, r2
 80045bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045c0:	673b      	str	r3, [r7, #112]	; 0x70
 80045c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045c4:	2200      	movs	r2, #0
 80045c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	4619      	mov	r1, r3
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f007 fc1b 	bl	800be0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f040 811a 	bne.w	8004814 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004620:	b29b      	uxth	r3, r3
 8004622:	8013      	strh	r3, [r2, #0]
 8004624:	e0f6      	b.n	8004814 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d121      	bne.n	8004674 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800466c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004670:	b29b      	uxth	r3, r3
 8004672:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800467a:	2b01      	cmp	r3, #1
 800467c:	f040 80ca 	bne.w	8004814 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	695a      	ldr	r2, [r3, #20]
 8004684:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004688:	441a      	add	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004696:	441a      	add	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	6a1a      	ldr	r2, [r3, #32]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d30b      	bcc.n	80046c0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046b8:	1ad2      	subs	r2, r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	621a      	str	r2, [r3, #32]
 80046be:	e017      	b.n	80046f0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d108      	bne.n	80046da <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80046c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80046d8:	e00a      	b.n	80046f0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2200      	movs	r2, #0
 80046e6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	657b      	str	r3, [r7, #84]	; 0x54
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d165      	bne.n	80047ca <HAL_PCD_EP_DB_Transmit+0x748>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470c:	b29b      	uxth	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004712:	4413      	add	r3, r2
 8004714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	00da      	lsls	r2, r3, #3
 800471c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471e:	4413      	add	r3, r2
 8004720:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004724:	65bb      	str	r3, [r7, #88]	; 0x58
 8004726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004730:	b29a      	uxth	r2, r3
 8004732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800473a:	2b3e      	cmp	r3, #62	; 0x3e
 800473c:	d91d      	bls.n	800477a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800473e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	66bb      	str	r3, [r7, #104]	; 0x68
 8004746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800474a:	f003 031f 	and.w	r3, r3, #31
 800474e:	2b00      	cmp	r3, #0
 8004750:	d102      	bne.n	8004758 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004754:	3b01      	subs	r3, #1
 8004756:	66bb      	str	r3, [r7, #104]	; 0x68
 8004758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29a      	uxth	r2, r3
 800475e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004760:	b29b      	uxth	r3, r3
 8004762:	029b      	lsls	r3, r3, #10
 8004764:	b29b      	uxth	r3, r3
 8004766:	4313      	orrs	r3, r2
 8004768:	b29b      	uxth	r3, r3
 800476a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004772:	b29a      	uxth	r2, r3
 8004774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004776:	801a      	strh	r2, [r3, #0]
 8004778:	e041      	b.n	80047fe <HAL_PCD_EP_DB_Transmit+0x77c>
 800477a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <HAL_PCD_EP_DB_Transmit+0x716>
 8004782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	b29b      	uxth	r3, r3
 8004788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800478c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004790:	b29a      	uxth	r2, r3
 8004792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004794:	801a      	strh	r2, [r3, #0]
 8004796:	e032      	b.n	80047fe <HAL_PCD_EP_DB_Transmit+0x77c>
 8004798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_PCD_EP_DB_Transmit+0x730>
 80047ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ae:	3301      	adds	r3, #1
 80047b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	029b      	lsls	r3, r3, #10
 80047be:	b29b      	uxth	r3, r3
 80047c0:	4313      	orrs	r3, r2
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047c6:	801a      	strh	r2, [r3, #0]
 80047c8:	e019      	b.n	80047fe <HAL_PCD_EP_DB_Transmit+0x77c>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d115      	bne.n	80047fe <HAL_PCD_EP_DB_Transmit+0x77c>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047da:	b29b      	uxth	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e0:	4413      	add	r3, r2
 80047e2:	657b      	str	r3, [r7, #84]	; 0x54
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	00da      	lsls	r2, r3, #3
 80047ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ec:	4413      	add	r3, r2
 80047ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047f2:	653b      	str	r3, [r7, #80]	; 0x50
 80047f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047fc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	6959      	ldr	r1, [r3, #20]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	895a      	ldrh	r2, [r3, #10]
 800480a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800480e:	b29b      	uxth	r3, r3
 8004810:	f005 f84d 	bl	80098ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800482e:	82bb      	strh	r3, [r7, #20]
 8004830:	8abb      	ldrh	r3, [r7, #20]
 8004832:	f083 0310 	eor.w	r3, r3, #16
 8004836:	82bb      	strh	r3, [r7, #20]
 8004838:	8abb      	ldrh	r3, [r7, #20]
 800483a:	f083 0320 	eor.w	r3, r3, #32
 800483e:	82bb      	strh	r3, [r7, #20]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	441a      	add	r2, r3
 800484e:	8abb      	ldrh	r3, [r7, #20]
 8004850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004860:	b29b      	uxth	r3, r3
 8004862:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3790      	adds	r7, #144	; 0x90
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800486e:	b480      	push	{r7}
 8004870:	b087      	sub	sp, #28
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	607b      	str	r3, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	817b      	strh	r3, [r7, #10]
 800487c:	4613      	mov	r3, r2
 800487e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004880:	897b      	ldrh	r3, [r7, #10]
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00b      	beq.n	80048a4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800488c:	897b      	ldrh	r3, [r7, #10]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e009      	b.n	80048b8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048a4:	897a      	ldrh	r2, [r7, #10]
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80048b8:	893b      	ldrh	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2200      	movs	r2, #0
 80048c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	80da      	strh	r2, [r3, #6]
 80048cc:	e00b      	b.n	80048e6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2201      	movs	r2, #1
 80048d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004918:	b29b      	uxth	r3, r3
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800492c:	b29b      	uxth	r3, r3
 800492e:	f043 0302 	orr.w	r3, r3, #2
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <HAL_PWREx_GetVoltageRange+0x18>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40007000 	.word	0x40007000

08004964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004972:	d130      	bne.n	80049d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004974:	4b23      	ldr	r3, [pc, #140]	; (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800497c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004980:	d038      	beq.n	80049f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004982:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800498a:	4a1e      	ldr	r2, [pc, #120]	; (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800498c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004990:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004992:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2232      	movs	r2, #50	; 0x32
 8004998:	fb02 f303 	mul.w	r3, r2, r3
 800499c:	4a1b      	ldr	r2, [pc, #108]	; (8004a0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	0c9b      	lsrs	r3, r3, #18
 80049a4:	3301      	adds	r3, #1
 80049a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049a8:	e002      	b.n	80049b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049b0:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049bc:	d102      	bne.n	80049c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f2      	bne.n	80049aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049c4:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d0:	d110      	bne.n	80049f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e00f      	b.n	80049f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e2:	d007      	beq.n	80049f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049e4:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049ec:	4a05      	ldr	r2, [pc, #20]	; (8004a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40007000 	.word	0x40007000
 8004a08:	20000004 	.word	0x20000004
 8004a0c:	431bde83 	.word	0x431bde83

08004a10 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a1e:	6053      	str	r3, [r2, #4]
}
 8004a20:	bf00      	nop
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40007000 	.word	0x40007000

08004a30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	; 0x28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f000 bc4f 	b.w	80052e2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a44:	4b97      	ldr	r3, [pc, #604]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a4e:	4b95      	ldr	r3, [pc, #596]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80e6 	beq.w	8004c32 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <HAL_RCC_OscConfig+0x4c>
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	2b0c      	cmp	r3, #12
 8004a70:	f040 808d 	bne.w	8004b8e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	f040 8089 	bne.w	8004b8e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a7c:	4b89      	ldr	r3, [pc, #548]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d006      	beq.n	8004a96 <HAL_RCC_OscConfig+0x66>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	f000 bc26 	b.w	80052e2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9a:	4b82      	ldr	r3, [pc, #520]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x80>
 8004aa6:	4b7f      	ldr	r3, [pc, #508]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aae:	e005      	b.n	8004abc <HAL_RCC_OscConfig+0x8c>
 8004ab0:	4b7c      	ldr	r3, [pc, #496]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d224      	bcs.n	8004b0a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fdd9 	bl	800567c <RCC_SetFlashLatencyFromMSIRange>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	f000 bc06 	b.w	80052e2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ad6:	4b73      	ldr	r3, [pc, #460]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a72      	ldr	r2, [pc, #456]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004adc:	f043 0308 	orr.w	r3, r3, #8
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	4b70      	ldr	r3, [pc, #448]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	496d      	ldr	r1, [pc, #436]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004af4:	4b6b      	ldr	r3, [pc, #428]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	4968      	ldr	r1, [pc, #416]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
 8004b08:	e025      	b.n	8004b56 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b0a:	4b66      	ldr	r3, [pc, #408]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a65      	ldr	r2, [pc, #404]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004b10:	f043 0308 	orr.w	r3, r3, #8
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b63      	ldr	r3, [pc, #396]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	4960      	ldr	r1, [pc, #384]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b28:	4b5e      	ldr	r3, [pc, #376]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	495b      	ldr	r1, [pc, #364]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fd98 	bl	800567c <RCC_SetFlashLatencyFromMSIRange>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e3c5      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b56:	f000 fccd 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	4b51      	ldr	r3, [pc, #324]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	4950      	ldr	r1, [pc, #320]	; (8004ca8 <HAL_RCC_OscConfig+0x278>)
 8004b68:	5ccb      	ldrb	r3, [r1, r3]
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b72:	4a4e      	ldr	r2, [pc, #312]	; (8004cac <HAL_RCC_OscConfig+0x27c>)
 8004b74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b76:	4b4e      	ldr	r3, [pc, #312]	; (8004cb0 <HAL_RCC_OscConfig+0x280>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fc fe9a 	bl	80018b4 <HAL_InitTick>
 8004b80:	4603      	mov	r3, r0
 8004b82:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d052      	beq.n	8004c30 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
 8004b8c:	e3a9      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d032      	beq.n	8004bfc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b96:	4b43      	ldr	r3, [pc, #268]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a42      	ldr	r2, [pc, #264]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ba2:	f7fc fed7 	bl	8001954 <HAL_GetTick>
 8004ba6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004baa:	f7fc fed3 	bl	8001954 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e392      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bbc:	4b39      	ldr	r3, [pc, #228]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bc8:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a35      	ldr	r2, [pc, #212]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004bce:	f043 0308 	orr.w	r3, r3, #8
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	4b33      	ldr	r3, [pc, #204]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	4930      	ldr	r1, [pc, #192]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004be6:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	492b      	ldr	r1, [pc, #172]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	604b      	str	r3, [r1, #4]
 8004bfa:	e01a      	b.n	8004c32 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bfc:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a28      	ldr	r2, [pc, #160]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c08:	f7fc fea4 	bl	8001954 <HAL_GetTick>
 8004c0c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c10:	f7fc fea0 	bl	8001954 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e35f      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c22:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1e0>
 8004c2e:	e000      	b.n	8004c32 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d073      	beq.n	8004d26 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_OscConfig+0x220>
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	2b0c      	cmp	r3, #12
 8004c48:	d10e      	bne.n	8004c68 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d10b      	bne.n	8004c68 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c50:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d063      	beq.n	8004d24 <HAL_RCC_OscConfig+0x2f4>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d15f      	bne.n	8004d24 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e33c      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c70:	d106      	bne.n	8004c80 <HAL_RCC_OscConfig+0x250>
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a0b      	ldr	r2, [pc, #44]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e025      	b.n	8004ccc <HAL_RCC_OscConfig+0x29c>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c88:	d114      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x284>
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a05      	ldr	r2, [pc, #20]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a02      	ldr	r2, [pc, #8]	; (8004ca4 <HAL_RCC_OscConfig+0x274>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e013      	b.n	8004ccc <HAL_RCC_OscConfig+0x29c>
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	0800cea0 	.word	0x0800cea0
 8004cac:	20000004 	.word	0x20000004
 8004cb0:	20000008 	.word	0x20000008
 8004cb4:	4b8f      	ldr	r3, [pc, #572]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a8e      	ldr	r2, [pc, #568]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	4b8c      	ldr	r3, [pc, #560]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a8b      	ldr	r2, [pc, #556]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d013      	beq.n	8004cfc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fc fe3e 	bl	8001954 <HAL_GetTick>
 8004cd8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cdc:	f7fc fe3a 	bl	8001954 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	; 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e2f9      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cee:	4b81      	ldr	r3, [pc, #516]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x2ac>
 8004cfa:	e014      	b.n	8004d26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fc fe2a 	bl	8001954 <HAL_GetTick>
 8004d00:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fc fe26 	bl	8001954 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e2e5      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d16:	4b77      	ldr	r3, [pc, #476]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x2d4>
 8004d22:	e000      	b.n	8004d26 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d060      	beq.n	8004df4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_OscConfig+0x314>
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	2b0c      	cmp	r3, #12
 8004d3c:	d119      	bne.n	8004d72 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d116      	bne.n	8004d72 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d44:	4b6b      	ldr	r3, [pc, #428]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_OscConfig+0x32c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e2c2      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5c:	4b65      	ldr	r3, [pc, #404]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	4962      	ldr	r1, [pc, #392]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d70:	e040      	b.n	8004df4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d023      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d7a:	4b5e      	ldr	r3, [pc, #376]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a5d      	ldr	r2, [pc, #372]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d86:	f7fc fde5 	bl	8001954 <HAL_GetTick>
 8004d8a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8e:	f7fc fde1 	bl	8001954 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e2a0      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004da0:	4b54      	ldr	r3, [pc, #336]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0f0      	beq.n	8004d8e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dac:	4b51      	ldr	r3, [pc, #324]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	494e      	ldr	r1, [pc, #312]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]
 8004dc0:	e018      	b.n	8004df4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dc2:	4b4c      	ldr	r3, [pc, #304]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a4b      	ldr	r2, [pc, #300]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dce:	f7fc fdc1 	bl	8001954 <HAL_GetTick>
 8004dd2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd6:	f7fc fdbd 	bl	8001954 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e27c      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004de8:	4b42      	ldr	r3, [pc, #264]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f0      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8082 	beq.w	8004f06 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d05f      	beq.n	8004eca <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004e0a:	4b3a      	ldr	r3, [pc, #232]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e10:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d037      	beq.n	8004e90 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d006      	beq.n	8004e38 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e254      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01b      	beq.n	8004e7a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004e42:	4b2c      	ldr	r3, [pc, #176]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e48:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e52:	f7fc fd7f 	bl	8001954 <HAL_GetTick>
 8004e56:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e5a:	f7fc fd7b 	bl	8001954 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b11      	cmp	r3, #17
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e23a      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e6c:	4b21      	ldr	r3, [pc, #132]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1ef      	bne.n	8004e5a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004e7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e80:	f023 0210 	bic.w	r2, r3, #16
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	491a      	ldr	r1, [pc, #104]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e90:	4b18      	ldr	r3, [pc, #96]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e96:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea0:	f7fc fd58 	bl	8001954 <HAL_GetTick>
 8004ea4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea8:	f7fc fd54 	bl	8001954 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b11      	cmp	r3, #17
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e213      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eba:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0ef      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x478>
 8004ec8:	e01d      	b.n	8004f06 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eca:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed0:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <HAL_RCC_OscConfig+0x4c4>)
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7fc fd3b 	bl	8001954 <HAL_GetTick>
 8004ede:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee2:	f7fc fd37 	bl	8001954 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b11      	cmp	r3, #17
 8004eee:	d903      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e1f6      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
 8004ef4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ef8:	4ba9      	ldr	r3, [pc, #676]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1ed      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 80bd 	beq.w	800508e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f1a:	4ba1      	ldr	r3, [pc, #644]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10e      	bne.n	8004f44 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f26:	4b9e      	ldr	r3, [pc, #632]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	4a9d      	ldr	r2, [pc, #628]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f30:	6593      	str	r3, [r2, #88]	; 0x58
 8004f32:	4b9b      	ldr	r3, [pc, #620]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f44:	4b97      	ldr	r3, [pc, #604]	; (80051a4 <HAL_RCC_OscConfig+0x774>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d118      	bne.n	8004f82 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f50:	4b94      	ldr	r3, [pc, #592]	; (80051a4 <HAL_RCC_OscConfig+0x774>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a93      	ldr	r2, [pc, #588]	; (80051a4 <HAL_RCC_OscConfig+0x774>)
 8004f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f5c:	f7fc fcfa 	bl	8001954 <HAL_GetTick>
 8004f60:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f64:	f7fc fcf6 	bl	8001954 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e1b5      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f76:	4b8b      	ldr	r3, [pc, #556]	; (80051a4 <HAL_RCC_OscConfig+0x774>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d02c      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004f8e:	4b84      	ldr	r3, [pc, #528]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	497f      	ldr	r1, [pc, #508]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d010      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004fb4:	4b7a      	ldr	r3, [pc, #488]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fba:	4a79      	ldr	r2, [pc, #484]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004fbc:	f043 0304 	orr.w	r3, r3, #4
 8004fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fc4:	4b76      	ldr	r3, [pc, #472]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	4a75      	ldr	r2, [pc, #468]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fd4:	e018      	b.n	8005008 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fd6:	4b72      	ldr	r3, [pc, #456]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fdc:	4a70      	ldr	r2, [pc, #448]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fe6:	e00f      	b.n	8005008 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fe8:	4b6d      	ldr	r3, [pc, #436]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	4a6c      	ldr	r2, [pc, #432]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ff8:	4b69      	ldr	r3, [pc, #420]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	4a68      	ldr	r2, [pc, #416]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8005000:	f023 0304 	bic.w	r3, r3, #4
 8005004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d016      	beq.n	800503e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fc fca0 	bl	8001954 <HAL_GetTick>
 8005014:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005016:	e00a      	b.n	800502e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005018:	f7fc fc9c 	bl	8001954 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e159      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800502e:	4b5c      	ldr	r3, [pc, #368]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0ed      	beq.n	8005018 <HAL_RCC_OscConfig+0x5e8>
 800503c:	e01d      	b.n	800507a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503e:	f7fc fc89 	bl	8001954 <HAL_GetTick>
 8005042:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005044:	e00a      	b.n	800505c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005046:	f7fc fc85 	bl	8001954 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	f241 3288 	movw	r2, #5000	; 0x1388
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e142      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800505c:	4b50      	ldr	r3, [pc, #320]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1ed      	bne.n	8005046 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800506a:	4b4d      	ldr	r3, [pc, #308]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 800506c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005070:	4a4b      	ldr	r2, [pc, #300]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8005072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800507a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800507e:	2b01      	cmp	r3, #1
 8005080:	d105      	bne.n	800508e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005082:	4b47      	ldr	r3, [pc, #284]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	4a46      	ldr	r2, [pc, #280]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8005088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800508c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d03c      	beq.n	8005114 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01c      	beq.n	80050dc <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050a2:	4b3f      	ldr	r3, [pc, #252]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 80050a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a8:	4a3d      	ldr	r2, [pc, #244]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 80050aa:	f043 0301 	orr.w	r3, r3, #1
 80050ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b2:	f7fc fc4f 	bl	8001954 <HAL_GetTick>
 80050b6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050ba:	f7fc fc4b 	bl	8001954 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e10a      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050cc:	4b34      	ldr	r3, [pc, #208]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 80050ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0ef      	beq.n	80050ba <HAL_RCC_OscConfig+0x68a>
 80050da:	e01b      	b.n	8005114 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050dc:	4b30      	ldr	r3, [pc, #192]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 80050de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050e2:	4a2f      	ldr	r2, [pc, #188]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ec:	f7fc fc32 	bl	8001954 <HAL_GetTick>
 80050f0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050f4:	f7fc fc2e 	bl	8001954 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e0ed      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005106:	4b26      	ldr	r3, [pc, #152]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8005108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1ef      	bne.n	80050f4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 80e1 	beq.w	80052e0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	2b02      	cmp	r3, #2
 8005124:	f040 80b5 	bne.w	8005292 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f003 0203 	and.w	r2, r3, #3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	429a      	cmp	r2, r3
 800513a:	d124      	bne.n	8005186 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005146:	3b01      	subs	r3, #1
 8005148:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d11b      	bne.n	8005186 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d113      	bne.n	8005186 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	3b01      	subs	r3, #1
 800516c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d109      	bne.n	8005186 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	085b      	lsrs	r3, r3, #1
 800517e:	3b01      	subs	r3, #1
 8005180:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d05f      	beq.n	8005246 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	2b0c      	cmp	r3, #12
 800518a:	d05a      	beq.n	8005242 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800518c:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a03      	ldr	r2, [pc, #12]	; (80051a0 <HAL_RCC_OscConfig+0x770>)
 8005192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005196:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005198:	f7fc fbdc 	bl	8001954 <HAL_GetTick>
 800519c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800519e:	e00c      	b.n	80051ba <HAL_RCC_OscConfig+0x78a>
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a8:	f7fc fbd4 	bl	8001954 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e093      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ba:	4b4c      	ldr	r3, [pc, #304]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051c6:	4b49      	ldr	r3, [pc, #292]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	4b49      	ldr	r3, [pc, #292]	; (80052f0 <HAL_RCC_OscConfig+0x8c0>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051d6:	3a01      	subs	r2, #1
 80051d8:	0112      	lsls	r2, r2, #4
 80051da:	4311      	orrs	r1, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051e0:	0212      	lsls	r2, r2, #8
 80051e2:	4311      	orrs	r1, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051e8:	0852      	lsrs	r2, r2, #1
 80051ea:	3a01      	subs	r2, #1
 80051ec:	0552      	lsls	r2, r2, #21
 80051ee:	4311      	orrs	r1, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051f4:	0852      	lsrs	r2, r2, #1
 80051f6:	3a01      	subs	r2, #1
 80051f8:	0652      	lsls	r2, r2, #25
 80051fa:	430a      	orrs	r2, r1
 80051fc:	493b      	ldr	r1, [pc, #236]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005202:	4b3a      	ldr	r3, [pc, #232]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a39      	ldr	r2, [pc, #228]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 8005208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800520c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800520e:	4b37      	ldr	r3, [pc, #220]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	4a36      	ldr	r2, [pc, #216]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 8005214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005218:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800521a:	f7fc fb9b 	bl	8001954 <HAL_GetTick>
 800521e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005222:	f7fc fb97 	bl	8001954 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e056      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005234:	4b2d      	ldr	r3, [pc, #180]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0f0      	beq.n	8005222 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005240:	e04e      	b.n	80052e0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e04d      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005246:	4b29      	ldr	r3, [pc, #164]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d146      	bne.n	80052e0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005252:	4b26      	ldr	r3, [pc, #152]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a25      	ldr	r2, [pc, #148]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 8005258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800525c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800525e:	4b23      	ldr	r3, [pc, #140]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	4a22      	ldr	r2, [pc, #136]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 8005264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005268:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800526a:	f7fc fb73 	bl	8001954 <HAL_GetTick>
 800526e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005272:	f7fc fb6f 	bl	8001954 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e02e      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005284:	4b19      	ldr	r3, [pc, #100]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f0      	beq.n	8005272 <HAL_RCC_OscConfig+0x842>
 8005290:	e026      	b.n	80052e0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	2b0c      	cmp	r3, #12
 8005296:	d021      	beq.n	80052dc <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005298:	4b14      	ldr	r3, [pc, #80]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a13      	ldr	r2, [pc, #76]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 800529e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fc fb56 	bl	8001954 <HAL_GetTick>
 80052a8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fc fb52 	bl	8001954 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e011      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80052ca:	4b08      	ldr	r3, [pc, #32]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	4a07      	ldr	r2, [pc, #28]	; (80052ec <HAL_RCC_OscConfig+0x8bc>)
 80052d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80052d4:	f023 0303 	bic.w	r3, r3, #3
 80052d8:	60d3      	str	r3, [r2, #12]
 80052da:	e001      	b.n	80052e0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3728      	adds	r7, #40	; 0x28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000
 80052f0:	f99f808c 	.word	0xf99f808c

080052f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0e7      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005308:	4b75      	ldr	r3, [pc, #468]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d910      	bls.n	8005338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005316:	4b72      	ldr	r3, [pc, #456]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 0207 	bic.w	r2, r3, #7
 800531e:	4970      	ldr	r1, [pc, #448]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	4313      	orrs	r3, r2
 8005324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005326:	4b6e      	ldr	r3, [pc, #440]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d001      	beq.n	8005338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0cf      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d010      	beq.n	8005366 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	4b66      	ldr	r3, [pc, #408]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005350:	429a      	cmp	r2, r3
 8005352:	d908      	bls.n	8005366 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b63      	ldr	r3, [pc, #396]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	4960      	ldr	r1, [pc, #384]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d04c      	beq.n	800540c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b03      	cmp	r3, #3
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800537a:	4b5a      	ldr	r3, [pc, #360]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d121      	bne.n	80053ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0a6      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d107      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005392:	4b54      	ldr	r3, [pc, #336]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d115      	bne.n	80053ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e09a      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053aa:	4b4e      	ldr	r3, [pc, #312]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e08e      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ba:	4b4a      	ldr	r3, [pc, #296]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e086      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053ca:	4b46      	ldr	r3, [pc, #280]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f023 0203 	bic.w	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4943      	ldr	r1, [pc, #268]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053dc:	f7fc faba 	bl	8001954 <HAL_GetTick>
 80053e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e2:	e00a      	b.n	80053fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e4:	f7fc fab6 	bl	8001954 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e06e      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	4b3a      	ldr	r3, [pc, #232]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 020c 	and.w	r2, r3, #12
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	429a      	cmp	r2, r3
 800540a:	d1eb      	bne.n	80053e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d010      	beq.n	800543a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	4b31      	ldr	r3, [pc, #196]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005424:	429a      	cmp	r2, r3
 8005426:	d208      	bcs.n	800543a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005428:	4b2e      	ldr	r3, [pc, #184]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	492b      	ldr	r1, [pc, #172]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005436:	4313      	orrs	r3, r2
 8005438:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800543a:	4b29      	ldr	r3, [pc, #164]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d210      	bcs.n	800546a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005448:	4b25      	ldr	r3, [pc, #148]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f023 0207 	bic.w	r2, r3, #7
 8005450:	4923      	ldr	r1, [pc, #140]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	4313      	orrs	r3, r2
 8005456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005458:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d001      	beq.n	800546a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e036      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d008      	beq.n	8005488 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005476:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	4918      	ldr	r1, [pc, #96]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005484:	4313      	orrs	r3, r2
 8005486:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005494:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	4910      	ldr	r1, [pc, #64]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054a8:	f000 f824 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	490b      	ldr	r1, [pc, #44]	; (80054e8 <HAL_RCC_ClockConfig+0x1f4>)
 80054ba:	5ccb      	ldrb	r3, [r1, r3]
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	4a09      	ldr	r2, [pc, #36]	; (80054ec <HAL_RCC_ClockConfig+0x1f8>)
 80054c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_RCC_ClockConfig+0x1fc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fc f9f1 	bl	80018b4 <HAL_InitTick>
 80054d2:	4603      	mov	r3, r0
 80054d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80054d6:	7afb      	ldrb	r3, [r7, #11]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40022000 	.word	0x40022000
 80054e4:	40021000 	.word	0x40021000
 80054e8:	0800cea0 	.word	0x0800cea0
 80054ec:	20000004 	.word	0x20000004
 80054f0:	20000008 	.word	0x20000008

080054f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b089      	sub	sp, #36	; 0x24
 80054f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	2300      	movs	r3, #0
 8005500:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005502:	4b3e      	ldr	r3, [pc, #248]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800550c:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_RCC_GetSysClockFreq+0x34>
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d121      	bne.n	8005566 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d11e      	bne.n	8005566 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005528:	4b34      	ldr	r3, [pc, #208]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005534:	4b31      	ldr	r3, [pc, #196]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	e005      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005544:	4b2d      	ldr	r3, [pc, #180]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	091b      	lsrs	r3, r3, #4
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005550:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005558:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10d      	bne.n	800557c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005564:	e00a      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b04      	cmp	r3, #4
 800556a:	d102      	bne.n	8005572 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800556c:	4b25      	ldr	r3, [pc, #148]	; (8005604 <HAL_RCC_GetSysClockFreq+0x110>)
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e004      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d101      	bne.n	800557c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005578:	4b23      	ldr	r3, [pc, #140]	; (8005608 <HAL_RCC_GetSysClockFreq+0x114>)
 800557a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b0c      	cmp	r3, #12
 8005580:	d134      	bne.n	80055ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005582:	4b1e      	ldr	r3, [pc, #120]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d003      	beq.n	800559a <HAL_RCC_GetSysClockFreq+0xa6>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d003      	beq.n	80055a0 <HAL_RCC_GetSysClockFreq+0xac>
 8005598:	e005      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800559a:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <HAL_RCC_GetSysClockFreq+0x110>)
 800559c:	617b      	str	r3, [r7, #20]
      break;
 800559e:	e005      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055a0:	4b19      	ldr	r3, [pc, #100]	; (8005608 <HAL_RCC_GetSysClockFreq+0x114>)
 80055a2:	617b      	str	r3, [r7, #20]
      break;
 80055a4:	e002      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	617b      	str	r3, [r7, #20]
      break;
 80055aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055ac:	4b13      	ldr	r3, [pc, #76]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	3301      	adds	r3, #1
 80055b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055ba:	4b10      	ldr	r3, [pc, #64]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	fb03 f202 	mul.w	r2, r3, r2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	0e5b      	lsrs	r3, r3, #25
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	3301      	adds	r3, #1
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055ec:	69bb      	ldr	r3, [r7, #24]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3724      	adds	r7, #36	; 0x24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40021000 	.word	0x40021000
 8005600:	0800ceb8 	.word	0x0800ceb8
 8005604:	00f42400 	.word	0x00f42400
 8005608:	007a1200 	.word	0x007a1200

0800560c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005610:	4b03      	ldr	r3, [pc, #12]	; (8005620 <HAL_RCC_GetHCLKFreq+0x14>)
 8005612:	681b      	ldr	r3, [r3, #0]
}
 8005614:	4618      	mov	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20000004 	.word	0x20000004

08005624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005628:	f7ff fff0 	bl	800560c <HAL_RCC_GetHCLKFreq>
 800562c:	4602      	mov	r2, r0
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	0a1b      	lsrs	r3, r3, #8
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	4904      	ldr	r1, [pc, #16]	; (800564c <HAL_RCC_GetPCLK1Freq+0x28>)
 800563a:	5ccb      	ldrb	r3, [r1, r3]
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005644:	4618      	mov	r0, r3
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40021000 	.word	0x40021000
 800564c:	0800ceb0 	.word	0x0800ceb0

08005650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005654:	f7ff ffda 	bl	800560c <HAL_RCC_GetHCLKFreq>
 8005658:	4602      	mov	r2, r0
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	0adb      	lsrs	r3, r3, #11
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	4904      	ldr	r1, [pc, #16]	; (8005678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005666:	5ccb      	ldrb	r3, [r1, r3]
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40021000 	.word	0x40021000
 8005678:	0800ceb0 	.word	0x0800ceb0

0800567c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005688:	4b2a      	ldr	r3, [pc, #168]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005694:	f7ff f958 	bl	8004948 <HAL_PWREx_GetVoltageRange>
 8005698:	6178      	str	r0, [r7, #20]
 800569a:	e014      	b.n	80056c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800569c:	4b25      	ldr	r3, [pc, #148]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800569e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a0:	4a24      	ldr	r2, [pc, #144]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a6:	6593      	str	r3, [r2, #88]	; 0x58
 80056a8:	4b22      	ldr	r3, [pc, #136]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056b4:	f7ff f948 	bl	8004948 <HAL_PWREx_GetVoltageRange>
 80056b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056ba:	4b1e      	ldr	r3, [pc, #120]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056cc:	d10b      	bne.n	80056e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	d919      	bls.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2ba0      	cmp	r3, #160	; 0xa0
 80056d8:	d902      	bls.n	80056e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056da:	2302      	movs	r3, #2
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	e013      	b.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056e0:	2301      	movs	r3, #1
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	e010      	b.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b80      	cmp	r3, #128	; 0x80
 80056ea:	d902      	bls.n	80056f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056ec:	2303      	movs	r3, #3
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	e00a      	b.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b80      	cmp	r3, #128	; 0x80
 80056f6:	d102      	bne.n	80056fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056f8:	2302      	movs	r3, #2
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	e004      	b.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b70      	cmp	r3, #112	; 0x70
 8005702:	d101      	bne.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005704:	2301      	movs	r3, #1
 8005706:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005708:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f023 0207 	bic.w	r2, r3, #7
 8005710:	4909      	ldr	r1, [pc, #36]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005718:	4b07      	ldr	r3, [pc, #28]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	429a      	cmp	r2, r3
 8005724:	d001      	beq.n	800572a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40021000 	.word	0x40021000
 8005738:	40022000 	.word	0x40022000

0800573c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005744:	2300      	movs	r3, #0
 8005746:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005748:	2300      	movs	r3, #0
 800574a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 809e 	beq.w	8005896 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800575a:	2300      	movs	r3, #0
 800575c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800575e:	4b46      	ldr	r3, [pc, #280]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800576e:	2300      	movs	r3, #0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00d      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005774:	4b40      	ldr	r3, [pc, #256]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005778:	4a3f      	ldr	r2, [pc, #252]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800577a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577e:	6593      	str	r3, [r2, #88]	; 0x58
 8005780:	4b3d      	ldr	r3, [pc, #244]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800578c:	2301      	movs	r3, #1
 800578e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005790:	4b3a      	ldr	r3, [pc, #232]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a39      	ldr	r2, [pc, #228]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800579c:	f7fc f8da 	bl	8001954 <HAL_GetTick>
 80057a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057a2:	e009      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a4:	f7fc f8d6 	bl	8001954 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d902      	bls.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	74fb      	strb	r3, [r7, #19]
        break;
 80057b6:	e005      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057b8:	4b30      	ldr	r3, [pc, #192]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0ef      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80057c4:	7cfb      	ldrb	r3, [r7, #19]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d15a      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057ca:	4b2b      	ldr	r3, [pc, #172]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01e      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d019      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057e6:	4b24      	ldr	r3, [pc, #144]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057f2:	4b21      	ldr	r3, [pc, #132]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f8:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80057fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005802:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800580a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005812:	4a19      	ldr	r2, [pc, #100]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d016      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fc f896 	bl	8001954 <HAL_GetTick>
 8005828:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800582a:	e00b      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582c:	f7fc f892 	bl	8001954 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f241 3288 	movw	r2, #5000	; 0x1388
 800583a:	4293      	cmp	r3, r2
 800583c:	d902      	bls.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	74fb      	strb	r3, [r7, #19]
            break;
 8005842:	e006      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005844:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0ec      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005852:	7cfb      	ldrb	r3, [r7, #19]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10b      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005858:	4b07      	ldr	r3, [pc, #28]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	4904      	ldr	r1, [pc, #16]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800586e:	e009      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	74bb      	strb	r3, [r7, #18]
 8005874:	e006      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005876:	bf00      	nop
 8005878:	40021000 	.word	0x40021000
 800587c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	7cfb      	ldrb	r3, [r7, #19]
 8005882:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005884:	7c7b      	ldrb	r3, [r7, #17]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d105      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800588a:	4b6e      	ldr	r3, [pc, #440]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800588c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588e:	4a6d      	ldr	r2, [pc, #436]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005894:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058a2:	4b68      	ldr	r3, [pc, #416]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a8:	f023 0203 	bic.w	r2, r3, #3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4964      	ldr	r1, [pc, #400]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058c4:	4b5f      	ldr	r3, [pc, #380]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ca:	f023 020c 	bic.w	r2, r3, #12
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	495c      	ldr	r1, [pc, #368]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058e6:	4b57      	ldr	r3, [pc, #348]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4953      	ldr	r1, [pc, #332]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005908:	4b4e      	ldr	r3, [pc, #312]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800590a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	494b      	ldr	r1, [pc, #300]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005918:	4313      	orrs	r3, r2
 800591a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800592a:	4b46      	ldr	r3, [pc, #280]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	4942      	ldr	r1, [pc, #264]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800594c:	4b3d      	ldr	r3, [pc, #244]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	493a      	ldr	r1, [pc, #232]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800596e:	4b35      	ldr	r3, [pc, #212]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005974:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	4931      	ldr	r1, [pc, #196]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005990:	4b2c      	ldr	r3, [pc, #176]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005996:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	4929      	ldr	r1, [pc, #164]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059b2:	4b24      	ldr	r3, [pc, #144]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	4920      	ldr	r1, [pc, #128]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d015      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059d4:	4b1b      	ldr	r3, [pc, #108]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e2:	4918      	ldr	r1, [pc, #96]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059f2:	d105      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f4:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4a12      	ldr	r2, [pc, #72]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d015      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a0c:	4b0d      	ldr	r3, [pc, #52]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	490a      	ldr	r1, [pc, #40]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2a:	d105      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4a04      	ldr	r2, [pc, #16]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a38:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40021000 	.word	0x40021000

08005a48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e095      	b.n	8005b86 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d108      	bne.n	8005a74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a6a:	d009      	beq.n	8005a80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	61da      	str	r2, [r3, #28]
 8005a72:	e005      	b.n	8005a80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fb fe3e 	bl	800171c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ac0:	d902      	bls.n	8005ac8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e002      	b.n	8005ace <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005acc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ad6:	d007      	beq.n	8005ae8 <HAL_SPI_Init+0xa0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ae0:	d002      	beq.n	8005ae8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2a:	ea42 0103 	orr.w	r1, r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	0c1b      	lsrs	r3, r3, #16
 8005b44:	f003 0204 	and.w	r2, r3, #4
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b64:	ea42 0103 	orr.w	r1, r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b088      	sub	sp, #32
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_SPI_Transmit+0x22>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e15f      	b.n	8005e70 <HAL_SPI_Transmit+0x2e2>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bb8:	f7fb fecc 	bl	8001954 <HAL_GetTick>
 8005bbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d002      	beq.n	8005bd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bd2:	e148      	b.n	8005e66 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_SPI_Transmit+0x52>
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d102      	bne.n	8005be6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005be4:	e13f      	b.n	8005e66 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2203      	movs	r2, #3
 8005bea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	88fa      	ldrh	r2, [r7, #6]
 8005bfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c30:	d10f      	bne.n	8005c52 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d007      	beq.n	8005c70 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c78:	d94f      	bls.n	8005d1a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_SPI_Transmit+0xfa>
 8005c82:	8afb      	ldrh	r3, [r7, #22]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d142      	bne.n	8005d0e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	881a      	ldrh	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	1c9a      	adds	r2, r3, #2
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cac:	e02f      	b.n	8005d0e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d112      	bne.n	8005ce2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	881a      	ldrh	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	1c9a      	adds	r2, r3, #2
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ce0:	e015      	b.n	8005d0e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ce2:	f7fb fe37 	bl	8001954 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d803      	bhi.n	8005cfa <HAL_SPI_Transmit+0x16c>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf8:	d102      	bne.n	8005d00 <HAL_SPI_Transmit+0x172>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005d0c:	e0ab      	b.n	8005e66 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1ca      	bne.n	8005cae <HAL_SPI_Transmit+0x120>
 8005d18:	e080      	b.n	8005e1c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_SPI_Transmit+0x19a>
 8005d22:	8afb      	ldrh	r3, [r7, #22]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d174      	bne.n	8005e12 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d912      	bls.n	8005d58 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	881a      	ldrh	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	1c9a      	adds	r2, r3, #2
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b02      	subs	r3, #2
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d56:	e05c      	b.n	8005e12 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	7812      	ldrb	r2, [r2, #0]
 8005d64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d7e:	e048      	b.n	8005e12 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d12b      	bne.n	8005de6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d912      	bls.n	8005dbe <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	881a      	ldrh	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	1c9a      	adds	r2, r3, #2
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b02      	subs	r3, #2
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dbc:	e029      	b.n	8005e12 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	7812      	ldrb	r2, [r2, #0]
 8005dca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005de4:	e015      	b.n	8005e12 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005de6:	f7fb fdb5 	bl	8001954 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d803      	bhi.n	8005dfe <HAL_SPI_Transmit+0x270>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d102      	bne.n	8005e04 <HAL_SPI_Transmit+0x276>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d106      	bne.n	8005e12 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005e10:	e029      	b.n	8005e66 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1b1      	bne.n	8005d80 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 fcf9 	bl	8006818 <SPI_EndRxTxTransaction>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e003      	b.n	8005e66 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	4613      	mov	r3, r2
 8005e86:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d002      	beq.n	8005e9e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e9c:	e11a      	b.n	80060d4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea6:	d112      	bne.n	8005ece <HAL_SPI_Receive+0x56>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10e      	bne.n	8005ece <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2204      	movs	r2, #4
 8005eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005eb8:	88fa      	ldrh	r2, [r7, #6]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f90e 	bl	80060e6 <HAL_SPI_TransmitReceive>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	e107      	b.n	80060de <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_SPI_Receive+0x64>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e100      	b.n	80060de <HAL_SPI_Receive+0x266>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ee4:	f7fb fd36 	bl	8001954 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_SPI_Receive+0x7e>
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005efa:	e0eb      	b.n	80060d4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2204      	movs	r2, #4
 8005f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	88fa      	ldrh	r2, [r7, #6]
 8005f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	88fa      	ldrh	r2, [r7, #6]
 8005f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f46:	d908      	bls.n	8005f5a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f56:	605a      	str	r2, [r3, #4]
 8005f58:	e007      	b.n	8005f6a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f68:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f72:	d10f      	bne.n	8005f94 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f92:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b40      	cmp	r3, #64	; 0x40
 8005fa0:	d007      	beq.n	8005fb2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fb0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fba:	d86f      	bhi.n	800609c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005fbc:	e034      	b.n	8006028 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d117      	bne.n	8005ffc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f103 020c 	add.w	r2, r3, #12
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	7812      	ldrb	r2, [r2, #0]
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ffa:	e015      	b.n	8006028 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ffc:	f7fb fcaa 	bl	8001954 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d803      	bhi.n	8006014 <HAL_SPI_Receive+0x19c>
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d102      	bne.n	800601a <HAL_SPI_Receive+0x1a2>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006026:	e055      	b.n	80060d4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1c4      	bne.n	8005fbe <HAL_SPI_Receive+0x146>
 8006034:	e038      	b.n	80060a8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b01      	cmp	r3, #1
 8006042:	d115      	bne.n	8006070 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	b292      	uxth	r2, r2
 8006050:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	1c9a      	adds	r2, r3, #2
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800606e:	e015      	b.n	800609c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006070:	f7fb fc70 	bl	8001954 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d803      	bhi.n	8006088 <HAL_SPI_Receive+0x210>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d102      	bne.n	800608e <HAL_SPI_Receive+0x216>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800609a:	e01b      	b.n	80060d4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1c6      	bne.n	8006036 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fb5b 	bl	8006768 <SPI_EndRxTransaction>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	75fb      	strb	r3, [r7, #23]
 80060ca:	e003      	b.n	80060d4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b08a      	sub	sp, #40	; 0x28
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060f4:	2301      	movs	r3, #1
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_SPI_TransmitReceive+0x26>
 8006108:	2302      	movs	r3, #2
 800610a:	e20a      	b.n	8006522 <HAL_SPI_TransmitReceive+0x43c>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006114:	f7fb fc1e 	bl	8001954 <HAL_GetTick>
 8006118:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006120:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006128:	887b      	ldrh	r3, [r7, #2]
 800612a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800612c:	887b      	ldrh	r3, [r7, #2]
 800612e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006130:	7efb      	ldrb	r3, [r7, #27]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d00e      	beq.n	8006154 <HAL_SPI_TransmitReceive+0x6e>
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800613c:	d106      	bne.n	800614c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <HAL_SPI_TransmitReceive+0x66>
 8006146:	7efb      	ldrb	r3, [r7, #27]
 8006148:	2b04      	cmp	r3, #4
 800614a:	d003      	beq.n	8006154 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800614c:	2302      	movs	r3, #2
 800614e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006152:	e1e0      	b.n	8006516 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_SPI_TransmitReceive+0x80>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <HAL_SPI_TransmitReceive+0x80>
 8006160:	887b      	ldrh	r3, [r7, #2]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d103      	bne.n	800616e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800616c:	e1d3      	b.n	8006516 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b04      	cmp	r3, #4
 8006178:	d003      	beq.n	8006182 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2205      	movs	r2, #5
 800617e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	887a      	ldrh	r2, [r7, #2]
 8006192:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	887a      	ldrh	r2, [r7, #2]
 800619a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	887a      	ldrh	r2, [r7, #2]
 80061a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	887a      	ldrh	r2, [r7, #2]
 80061ae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061c4:	d802      	bhi.n	80061cc <HAL_SPI_TransmitReceive+0xe6>
 80061c6:	8a3b      	ldrh	r3, [r7, #16]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d908      	bls.n	80061de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061da:	605a      	str	r2, [r3, #4]
 80061dc:	e007      	b.n	80061ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f8:	2b40      	cmp	r3, #64	; 0x40
 80061fa:	d007      	beq.n	800620c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800620a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006214:	f240 8081 	bls.w	800631a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_SPI_TransmitReceive+0x140>
 8006220:	8a7b      	ldrh	r3, [r7, #18]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d16d      	bne.n	8006302 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	881a      	ldrh	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	1c9a      	adds	r2, r3, #2
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006240:	b29b      	uxth	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b29a      	uxth	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800624a:	e05a      	b.n	8006302 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b02      	cmp	r3, #2
 8006258:	d11b      	bne.n	8006292 <HAL_SPI_TransmitReceive+0x1ac>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d016      	beq.n	8006292 <HAL_SPI_TransmitReceive+0x1ac>
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	2b01      	cmp	r3, #1
 8006268:	d113      	bne.n	8006292 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	881a      	ldrh	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	1c9a      	adds	r2, r3, #2
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006284:	b29b      	uxth	r3, r3
 8006286:	3b01      	subs	r3, #1
 8006288:	b29a      	uxth	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b01      	cmp	r3, #1
 800629e:	d11c      	bne.n	80062da <HAL_SPI_TransmitReceive+0x1f4>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d016      	beq.n	80062da <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	b292      	uxth	r2, r2
 80062b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	1c9a      	adds	r2, r3, #2
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062d6:	2301      	movs	r3, #1
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062da:	f7fb fb3b 	bl	8001954 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d80b      	bhi.n	8006302 <HAL_SPI_TransmitReceive+0x21c>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f0:	d007      	beq.n	8006302 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006300:	e109      	b.n	8006516 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d19f      	bne.n	800624c <HAL_SPI_TransmitReceive+0x166>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d199      	bne.n	800624c <HAL_SPI_TransmitReceive+0x166>
 8006318:	e0e3      	b.n	80064e2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <HAL_SPI_TransmitReceive+0x244>
 8006322:	8a7b      	ldrh	r3, [r7, #18]
 8006324:	2b01      	cmp	r3, #1
 8006326:	f040 80cf 	bne.w	80064c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	d912      	bls.n	800635a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	881a      	ldrh	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	1c9a      	adds	r2, r3, #2
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b02      	subs	r3, #2
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006358:	e0b6      	b.n	80064c8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	330c      	adds	r3, #12
 8006364:	7812      	ldrb	r2, [r2, #0]
 8006366:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006380:	e0a2      	b.n	80064c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b02      	cmp	r3, #2
 800638e:	d134      	bne.n	80063fa <HAL_SPI_TransmitReceive+0x314>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d02f      	beq.n	80063fa <HAL_SPI_TransmitReceive+0x314>
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	2b01      	cmp	r3, #1
 800639e:	d12c      	bne.n	80063fa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d912      	bls.n	80063d0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	881a      	ldrh	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	1c9a      	adds	r2, r3, #2
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b02      	subs	r3, #2
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ce:	e012      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	330c      	adds	r3, #12
 80063da:	7812      	ldrb	r2, [r2, #0]
 80063dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b01      	cmp	r3, #1
 8006406:	d148      	bne.n	800649a <HAL_SPI_TransmitReceive+0x3b4>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d042      	beq.n	800649a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800641a:	b29b      	uxth	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	d923      	bls.n	8006468 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	b292      	uxth	r2, r2
 800642c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	1c9a      	adds	r2, r3, #2
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b02      	subs	r3, #2
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b01      	cmp	r3, #1
 8006454:	d81f      	bhi.n	8006496 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	e016      	b.n	8006496 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f103 020c 	add.w	r2, r3, #12
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	7812      	ldrb	r2, [r2, #0]
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006496:	2301      	movs	r3, #1
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800649a:	f7fb fa5b 	bl	8001954 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d803      	bhi.n	80064b2 <HAL_SPI_TransmitReceive+0x3cc>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d102      	bne.n	80064b8 <HAL_SPI_TransmitReceive+0x3d2>
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d107      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80064c6:	e026      	b.n	8006516 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f47f af57 	bne.w	8006382 <HAL_SPI_TransmitReceive+0x29c>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f47f af50 	bne.w	8006382 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f996 	bl	8006818 <SPI_EndRxTxTransaction>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800650c:	e003      	b.n	8006516 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800651e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006522:	4618      	mov	r0, r3
 8006524:	3728      	adds	r7, #40	; 0x28
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800653c:	f7fb fa0a 	bl	8001954 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	1a9b      	subs	r3, r3, r2
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	4413      	add	r3, r2
 800654a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800654c:	f7fb fa02 	bl	8001954 <HAL_GetTick>
 8006550:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006552:	4b39      	ldr	r3, [pc, #228]	; (8006638 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	015b      	lsls	r3, r3, #5
 8006558:	0d1b      	lsrs	r3, r3, #20
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	fb02 f303 	mul.w	r3, r2, r3
 8006560:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006562:	e054      	b.n	800660e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656a:	d050      	beq.n	800660e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800656c:	f7fb f9f2 	bl	8001954 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	429a      	cmp	r2, r3
 800657a:	d902      	bls.n	8006582 <SPI_WaitFlagStateUntilTimeout+0x56>
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d13d      	bne.n	80065fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800659a:	d111      	bne.n	80065c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a4:	d004      	beq.n	80065b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ae:	d107      	bne.n	80065c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c8:	d10f      	bne.n	80065ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e017      	b.n	800662e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	3b01      	subs	r3, #1
 800660c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4013      	ands	r3, r2
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	429a      	cmp	r2, r3
 800661c:	bf0c      	ite	eq
 800661e:	2301      	moveq	r3, #1
 8006620:	2300      	movne	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	79fb      	ldrb	r3, [r7, #7]
 8006628:	429a      	cmp	r2, r3
 800662a:	d19b      	bne.n	8006564 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3720      	adds	r7, #32
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000004 	.word	0x20000004

0800663c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08a      	sub	sp, #40	; 0x28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800664e:	f7fb f981 	bl	8001954 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	1a9b      	subs	r3, r3, r2
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	4413      	add	r3, r2
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800665e:	f7fb f979 	bl	8001954 <HAL_GetTick>
 8006662:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	330c      	adds	r3, #12
 800666a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800666c:	4b3d      	ldr	r3, [pc, #244]	; (8006764 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	00da      	lsls	r2, r3, #3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	0d1b      	lsrs	r3, r3, #20
 800667c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667e:	fb02 f303 	mul.w	r3, r2, r3
 8006682:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006684:	e060      	b.n	8006748 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800668c:	d107      	bne.n	800669e <SPI_WaitFifoStateUntilTimeout+0x62>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800669c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a4:	d050      	beq.n	8006748 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066a6:	f7fb f955 	bl	8001954 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d902      	bls.n	80066bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d13d      	bne.n	8006738 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d4:	d111      	bne.n	80066fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066de:	d004      	beq.n	80066ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e8:	d107      	bne.n	80066fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006702:	d10f      	bne.n	8006724 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006722:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e010      	b.n	800675a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	3b01      	subs	r3, #1
 8006746:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	4013      	ands	r3, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	429a      	cmp	r2, r3
 8006756:	d196      	bne.n	8006686 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3728      	adds	r7, #40	; 0x28
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000004 	.word	0x20000004

08006768 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af02      	add	r7, sp, #8
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800677c:	d111      	bne.n	80067a2 <SPI_EndRxTransaction+0x3a>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006786:	d004      	beq.n	8006792 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006790:	d107      	bne.n	80067a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2200      	movs	r2, #0
 80067aa:	2180      	movs	r1, #128	; 0x80
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff febd 	bl	800652c <SPI_WaitFlagStateUntilTimeout>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067bc:	f043 0220 	orr.w	r2, r3, #32
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e023      	b.n	8006810 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067d0:	d11d      	bne.n	800680e <SPI_EndRxTransaction+0xa6>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067da:	d004      	beq.n	80067e6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e4:	d113      	bne.n	800680e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff ff22 	bl	800663c <SPI_WaitFifoStateUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006802:	f043 0220 	orr.w	r2, r3, #32
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e000      	b.n	8006810 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2200      	movs	r2, #0
 800682c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f7ff ff03 	bl	800663c <SPI_WaitFifoStateUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006840:	f043 0220 	orr.w	r2, r3, #32
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e027      	b.n	800689c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2200      	movs	r2, #0
 8006854:	2180      	movs	r1, #128	; 0x80
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff fe68 	bl	800652c <SPI_WaitFlagStateUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006866:	f043 0220 	orr.w	r2, r3, #32
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e014      	b.n	800689c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2200      	movs	r2, #0
 800687a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f7ff fedc 	bl	800663c <SPI_WaitFifoStateUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d007      	beq.n	800689a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688e:	f043 0220 	orr.w	r2, r3, #32
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e000      	b.n	800689c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068a8:	b08a      	sub	sp, #40	; 0x28
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	431a      	orrs	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	4b9e      	ldr	r3, [pc, #632]	; (8006b4c <UART_SetConfig+0x2a8>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	6812      	ldr	r2, [r2, #0]
 80068da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068dc:	430b      	orrs	r3, r1
 80068de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a93      	ldr	r2, [pc, #588]	; (8006b50 <UART_SetConfig+0x2ac>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690c:	4313      	orrs	r3, r2
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006920:	430a      	orrs	r2, r1
 8006922:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a8a      	ldr	r2, [pc, #552]	; (8006b54 <UART_SetConfig+0x2b0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d126      	bne.n	800697c <UART_SetConfig+0xd8>
 800692e:	4b8a      	ldr	r3, [pc, #552]	; (8006b58 <UART_SetConfig+0x2b4>)
 8006930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	2b03      	cmp	r3, #3
 800693a:	d81b      	bhi.n	8006974 <UART_SetConfig+0xd0>
 800693c:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <UART_SetConfig+0xa0>)
 800693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006942:	bf00      	nop
 8006944:	08006955 	.word	0x08006955
 8006948:	08006965 	.word	0x08006965
 800694c:	0800695d 	.word	0x0800695d
 8006950:	0800696d 	.word	0x0800696d
 8006954:	2301      	movs	r3, #1
 8006956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695a:	e0ab      	b.n	8006ab4 <UART_SetConfig+0x210>
 800695c:	2302      	movs	r3, #2
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006962:	e0a7      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006964:	2304      	movs	r3, #4
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696a:	e0a3      	b.n	8006ab4 <UART_SetConfig+0x210>
 800696c:	2308      	movs	r3, #8
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006972:	e09f      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006974:	2310      	movs	r3, #16
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697a:	e09b      	b.n	8006ab4 <UART_SetConfig+0x210>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a76      	ldr	r2, [pc, #472]	; (8006b5c <UART_SetConfig+0x2b8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d138      	bne.n	80069f8 <UART_SetConfig+0x154>
 8006986:	4b74      	ldr	r3, [pc, #464]	; (8006b58 <UART_SetConfig+0x2b4>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	f003 030c 	and.w	r3, r3, #12
 8006990:	2b0c      	cmp	r3, #12
 8006992:	d82d      	bhi.n	80069f0 <UART_SetConfig+0x14c>
 8006994:	a201      	add	r2, pc, #4	; (adr r2, 800699c <UART_SetConfig+0xf8>)
 8006996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699a:	bf00      	nop
 800699c:	080069d1 	.word	0x080069d1
 80069a0:	080069f1 	.word	0x080069f1
 80069a4:	080069f1 	.word	0x080069f1
 80069a8:	080069f1 	.word	0x080069f1
 80069ac:	080069e1 	.word	0x080069e1
 80069b0:	080069f1 	.word	0x080069f1
 80069b4:	080069f1 	.word	0x080069f1
 80069b8:	080069f1 	.word	0x080069f1
 80069bc:	080069d9 	.word	0x080069d9
 80069c0:	080069f1 	.word	0x080069f1
 80069c4:	080069f1 	.word	0x080069f1
 80069c8:	080069f1 	.word	0x080069f1
 80069cc:	080069e9 	.word	0x080069e9
 80069d0:	2300      	movs	r3, #0
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e06d      	b.n	8006ab4 <UART_SetConfig+0x210>
 80069d8:	2302      	movs	r3, #2
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e069      	b.n	8006ab4 <UART_SetConfig+0x210>
 80069e0:	2304      	movs	r3, #4
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e065      	b.n	8006ab4 <UART_SetConfig+0x210>
 80069e8:	2308      	movs	r3, #8
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ee:	e061      	b.n	8006ab4 <UART_SetConfig+0x210>
 80069f0:	2310      	movs	r3, #16
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f6:	e05d      	b.n	8006ab4 <UART_SetConfig+0x210>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a58      	ldr	r2, [pc, #352]	; (8006b60 <UART_SetConfig+0x2bc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d125      	bne.n	8006a4e <UART_SetConfig+0x1aa>
 8006a02:	4b55      	ldr	r3, [pc, #340]	; (8006b58 <UART_SetConfig+0x2b4>)
 8006a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a0c:	2b30      	cmp	r3, #48	; 0x30
 8006a0e:	d016      	beq.n	8006a3e <UART_SetConfig+0x19a>
 8006a10:	2b30      	cmp	r3, #48	; 0x30
 8006a12:	d818      	bhi.n	8006a46 <UART_SetConfig+0x1a2>
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d00a      	beq.n	8006a2e <UART_SetConfig+0x18a>
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d814      	bhi.n	8006a46 <UART_SetConfig+0x1a2>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <UART_SetConfig+0x182>
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d008      	beq.n	8006a36 <UART_SetConfig+0x192>
 8006a24:	e00f      	b.n	8006a46 <UART_SetConfig+0x1a2>
 8006a26:	2300      	movs	r3, #0
 8006a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2c:	e042      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a34:	e03e      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a36:	2304      	movs	r3, #4
 8006a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3c:	e03a      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a3e:	2308      	movs	r3, #8
 8006a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a44:	e036      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a46:	2310      	movs	r3, #16
 8006a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4c:	e032      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a3f      	ldr	r2, [pc, #252]	; (8006b50 <UART_SetConfig+0x2ac>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d12a      	bne.n	8006aae <UART_SetConfig+0x20a>
 8006a58:	4b3f      	ldr	r3, [pc, #252]	; (8006b58 <UART_SetConfig+0x2b4>)
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a66:	d01a      	beq.n	8006a9e <UART_SetConfig+0x1fa>
 8006a68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a6c:	d81b      	bhi.n	8006aa6 <UART_SetConfig+0x202>
 8006a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a72:	d00c      	beq.n	8006a8e <UART_SetConfig+0x1ea>
 8006a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a78:	d815      	bhi.n	8006aa6 <UART_SetConfig+0x202>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <UART_SetConfig+0x1e2>
 8006a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a82:	d008      	beq.n	8006a96 <UART_SetConfig+0x1f2>
 8006a84:	e00f      	b.n	8006aa6 <UART_SetConfig+0x202>
 8006a86:	2300      	movs	r3, #0
 8006a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8c:	e012      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a94:	e00e      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a96:	2304      	movs	r3, #4
 8006a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9c:	e00a      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a9e:	2308      	movs	r3, #8
 8006aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa4:	e006      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006aa6:	2310      	movs	r3, #16
 8006aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aac:	e002      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006aae:	2310      	movs	r3, #16
 8006ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a25      	ldr	r2, [pc, #148]	; (8006b50 <UART_SetConfig+0x2ac>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	f040 808a 	bne.w	8006bd4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d824      	bhi.n	8006b12 <UART_SetConfig+0x26e>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <UART_SetConfig+0x22c>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006af5 	.word	0x08006af5
 8006ad4:	08006b13 	.word	0x08006b13
 8006ad8:	08006afd 	.word	0x08006afd
 8006adc:	08006b13 	.word	0x08006b13
 8006ae0:	08006b03 	.word	0x08006b03
 8006ae4:	08006b13 	.word	0x08006b13
 8006ae8:	08006b13 	.word	0x08006b13
 8006aec:	08006b13 	.word	0x08006b13
 8006af0:	08006b0b 	.word	0x08006b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af4:	f7fe fd96 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8006af8:	61f8      	str	r0, [r7, #28]
        break;
 8006afa:	e010      	b.n	8006b1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006afc:	4b19      	ldr	r3, [pc, #100]	; (8006b64 <UART_SetConfig+0x2c0>)
 8006afe:	61fb      	str	r3, [r7, #28]
        break;
 8006b00:	e00d      	b.n	8006b1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b02:	f7fe fcf7 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 8006b06:	61f8      	str	r0, [r7, #28]
        break;
 8006b08:	e009      	b.n	8006b1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b0e:	61fb      	str	r3, [r7, #28]
        break;
 8006b10:	e005      	b.n	8006b1e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8109 	beq.w	8006d38 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d305      	bcc.n	8006b42 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d912      	bls.n	8006b68 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b48:	e0f6      	b.n	8006d38 <UART_SetConfig+0x494>
 8006b4a:	bf00      	nop
 8006b4c:	efff69f3 	.word	0xefff69f3
 8006b50:	40008000 	.word	0x40008000
 8006b54:	40013800 	.word	0x40013800
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40004400 	.word	0x40004400
 8006b60:	40004800 	.word	0x40004800
 8006b64:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	461c      	mov	r4, r3
 8006b6e:	4615      	mov	r5, r2
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	022b      	lsls	r3, r5, #8
 8006b7a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b7e:	0222      	lsls	r2, r4, #8
 8006b80:	68f9      	ldr	r1, [r7, #12]
 8006b82:	6849      	ldr	r1, [r1, #4]
 8006b84:	0849      	lsrs	r1, r1, #1
 8006b86:	2000      	movs	r0, #0
 8006b88:	4688      	mov	r8, r1
 8006b8a:	4681      	mov	r9, r0
 8006b8c:	eb12 0a08 	adds.w	sl, r2, r8
 8006b90:	eb43 0b09 	adc.w	fp, r3, r9
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	607a      	str	r2, [r7, #4]
 8006b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	4659      	mov	r1, fp
 8006ba6:	f7f9 fb11 	bl	80001cc <__aeabi_uldivmod>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4613      	mov	r3, r2
 8006bb0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bb8:	d308      	bcc.n	8006bcc <UART_SetConfig+0x328>
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bc0:	d204      	bcs.n	8006bcc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	60da      	str	r2, [r3, #12]
 8006bca:	e0b5      	b.n	8006d38 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bd2:	e0b1      	b.n	8006d38 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bdc:	d15d      	bne.n	8006c9a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006bde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d827      	bhi.n	8006c36 <UART_SetConfig+0x392>
 8006be6:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <UART_SetConfig+0x348>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c11 	.word	0x08006c11
 8006bf0:	08006c19 	.word	0x08006c19
 8006bf4:	08006c21 	.word	0x08006c21
 8006bf8:	08006c37 	.word	0x08006c37
 8006bfc:	08006c27 	.word	0x08006c27
 8006c00:	08006c37 	.word	0x08006c37
 8006c04:	08006c37 	.word	0x08006c37
 8006c08:	08006c37 	.word	0x08006c37
 8006c0c:	08006c2f 	.word	0x08006c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c10:	f7fe fd08 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8006c14:	61f8      	str	r0, [r7, #28]
        break;
 8006c16:	e014      	b.n	8006c42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c18:	f7fe fd1a 	bl	8005650 <HAL_RCC_GetPCLK2Freq>
 8006c1c:	61f8      	str	r0, [r7, #28]
        break;
 8006c1e:	e010      	b.n	8006c42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c20:	4b4c      	ldr	r3, [pc, #304]	; (8006d54 <UART_SetConfig+0x4b0>)
 8006c22:	61fb      	str	r3, [r7, #28]
        break;
 8006c24:	e00d      	b.n	8006c42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c26:	f7fe fc65 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 8006c2a:	61f8      	str	r0, [r7, #28]
        break;
 8006c2c:	e009      	b.n	8006c42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c32:	61fb      	str	r3, [r7, #28]
        break;
 8006c34:	e005      	b.n	8006c42 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d077      	beq.n	8006d38 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	005a      	lsls	r2, r3, #1
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	441a      	add	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b0f      	cmp	r3, #15
 8006c62:	d916      	bls.n	8006c92 <UART_SetConfig+0x3ee>
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6a:	d212      	bcs.n	8006c92 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f023 030f 	bic.w	r3, r3, #15
 8006c74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	8afb      	ldrh	r3, [r7, #22]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	8afa      	ldrh	r2, [r7, #22]
 8006c8e:	60da      	str	r2, [r3, #12]
 8006c90:	e052      	b.n	8006d38 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c98:	e04e      	b.n	8006d38 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d827      	bhi.n	8006cf2 <UART_SetConfig+0x44e>
 8006ca2:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <UART_SetConfig+0x404>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006ccd 	.word	0x08006ccd
 8006cac:	08006cd5 	.word	0x08006cd5
 8006cb0:	08006cdd 	.word	0x08006cdd
 8006cb4:	08006cf3 	.word	0x08006cf3
 8006cb8:	08006ce3 	.word	0x08006ce3
 8006cbc:	08006cf3 	.word	0x08006cf3
 8006cc0:	08006cf3 	.word	0x08006cf3
 8006cc4:	08006cf3 	.word	0x08006cf3
 8006cc8:	08006ceb 	.word	0x08006ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ccc:	f7fe fcaa 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8006cd0:	61f8      	str	r0, [r7, #28]
        break;
 8006cd2:	e014      	b.n	8006cfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd4:	f7fe fcbc 	bl	8005650 <HAL_RCC_GetPCLK2Freq>
 8006cd8:	61f8      	str	r0, [r7, #28]
        break;
 8006cda:	e010      	b.n	8006cfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cdc:	4b1d      	ldr	r3, [pc, #116]	; (8006d54 <UART_SetConfig+0x4b0>)
 8006cde:	61fb      	str	r3, [r7, #28]
        break;
 8006ce0:	e00d      	b.n	8006cfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce2:	f7fe fc07 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 8006ce6:	61f8      	str	r0, [r7, #28]
        break;
 8006ce8:	e009      	b.n	8006cfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cee:	61fb      	str	r3, [r7, #28]
        break;
 8006cf0:	e005      	b.n	8006cfe <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006cfc:	bf00      	nop
    }

    if (pclk != 0U)
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d019      	beq.n	8006d38 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	085a      	lsrs	r2, r3, #1
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	441a      	add	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b0f      	cmp	r3, #15
 8006d1c:	d909      	bls.n	8006d32 <UART_SetConfig+0x48e>
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d24:	d205      	bcs.n	8006d32 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60da      	str	r2, [r3, #12]
 8006d30:	e002      	b.n	8006d38 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3728      	adds	r7, #40	; 0x28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d52:	bf00      	nop
 8006d54:	00f42400 	.word	0x00f42400

08006d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	f003 0310 	and.w	r3, r3, #16
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01a      	beq.n	8006e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e56:	d10a      	bne.n	8006e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	605a      	str	r2, [r3, #4]
  }
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b098      	sub	sp, #96	; 0x60
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006eac:	f7fa fd52 	bl	8001954 <HAL_GetTick>
 8006eb0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d12e      	bne.n	8006f1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f88c 	bl	8006fec <UART_WaitOnFlagUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d021      	beq.n	8006f1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eee:	653b      	str	r3, [r7, #80]	; 0x50
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8006efa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006efe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e6      	bne.n	8006eda <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e062      	b.n	8006fe4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d149      	bne.n	8006fc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f34:	2200      	movs	r2, #0
 8006f36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f856 	bl	8006fec <UART_WaitOnFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d03c      	beq.n	8006fc0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	623b      	str	r3, [r7, #32]
   return(result);
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f64:	633b      	str	r3, [r7, #48]	; 0x30
 8006f66:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e6      	bne.n	8006f46 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0301 	bic.w	r3, r3, #1
 8006f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3308      	adds	r3, #8
 8006f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f98:	61fa      	str	r2, [r7, #28]
 8006f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	69b9      	ldr	r1, [r7, #24]
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e5      	bne.n	8006f78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e011      	b.n	8006fe4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3758      	adds	r7, #88	; 0x58
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffc:	e049      	b.n	8007092 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d045      	beq.n	8007092 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007006:	f7fa fca5 	bl	8001954 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	429a      	cmp	r2, r3
 8007014:	d302      	bcc.n	800701c <UART_WaitOnFlagUntilTimeout+0x30>
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e048      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b00      	cmp	r3, #0
 800702c:	d031      	beq.n	8007092 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	f003 0308 	and.w	r3, r3, #8
 8007038:	2b08      	cmp	r3, #8
 800703a:	d110      	bne.n	800705e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2208      	movs	r2, #8
 8007042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f838 	bl	80070ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2208      	movs	r2, #8
 800704e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e029      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800706c:	d111      	bne.n	8007092 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 f81e 	bl	80070ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2220      	movs	r2, #32
 8007082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e00f      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69da      	ldr	r2, [r3, #28]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4013      	ands	r3, r2
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	429a      	cmp	r2, r3
 80070a0:	bf0c      	ite	eq
 80070a2:	2301      	moveq	r3, #1
 80070a4:	2300      	movne	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d0a6      	beq.n	8006ffe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b095      	sub	sp, #84	; 0x54
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e0:	643b      	str	r3, [r7, #64]	; 0x40
 80070e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070e8:	e841 2300 	strex	r3, r2, [r1]
 80070ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e6      	bne.n	80070c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3308      	adds	r3, #8
 80070fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	61fb      	str	r3, [r7, #28]
   return(result);
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	f023 0301 	bic.w	r3, r3, #1
 800710a:	64bb      	str	r3, [r7, #72]	; 0x48
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3308      	adds	r3, #8
 8007112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007114:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800711a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e5      	bne.n	80070f4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800712c:	2b01      	cmp	r3, #1
 800712e:	d118      	bne.n	8007162 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	60bb      	str	r3, [r7, #8]
   return(result);
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f023 0310 	bic.w	r3, r3, #16
 8007144:	647b      	str	r3, [r7, #68]	; 0x44
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800714e:	61bb      	str	r3, [r7, #24]
 8007150:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	6979      	ldr	r1, [r7, #20]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	613b      	str	r3, [r7, #16]
   return(result);
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e6      	bne.n	8007130 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007176:	bf00      	nop
 8007178:	3754      	adds	r7, #84	; 0x54
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b086      	sub	sp, #24
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	607a      	str	r2, [r7, #4]
 800718e:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e056      	b.n	8007248 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f7fa fa40 	bl	8001630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2224      	movs	r2, #36	; 0x24
 80071b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0201 	bic.w	r2, r2, #1
 80071c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fdc2 	bl	8006d58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f7ff fb65 	bl	80068a4 <UART_SetConfig>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e031      	b.n	8007248 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689a      	ldr	r2, [r3, #8]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071f2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	430a      	orrs	r2, r1
 8007206:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	055b      	lsls	r3, r3, #21
 800720c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	041b      	lsls	r3, r3, #16
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8007222:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	6979      	ldr	r1, [r7, #20]
 800722c:	430b      	orrs	r3, r1
 800722e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0201 	orr.w	r2, r2, #1
 800723e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fe2b 	bl	8006e9c <UART_CheckIdleState>
 8007246:	4603      	mov	r3, r0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007250:	b084      	sub	sp, #16
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	f107 0014 	add.w	r0, r7, #20
 800725e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	b004      	add	sp, #16
 8007270:	4770      	bx	lr

08007272 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007282:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007286:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	b29a      	uxth	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80072a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80072ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	43db      	mvns	r3, r3
 80072bc:	b29b      	uxth	r3, r3
 80072be:	4013      	ands	r3, r2
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80072f0:	b084      	sub	sp, #16
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	f107 0014 	add.w	r0, r7, #20
 80072fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	b004      	add	sp, #16
 8007330:	4770      	bx	lr
	...

08007334 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007334:	b480      	push	{r7}
 8007336:	b09d      	sub	sp, #116	; 0x74
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	78db      	ldrb	r3, [r3, #3]
 8007362:	2b03      	cmp	r3, #3
 8007364:	d81f      	bhi.n	80073a6 <USB_ActivateEndpoint+0x72>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <USB_ActivateEndpoint+0x38>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	0800737d 	.word	0x0800737d
 8007370:	08007399 	.word	0x08007399
 8007374:	080073af 	.word	0x080073af
 8007378:	0800738b 	.word	0x0800738b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800737c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007384:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007388:	e012      	b.n	80073b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800738a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800738e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007392:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007396:	e00b      	b.n	80073b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007398:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800739c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80073a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80073a4:	e004      	b.n	80073b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80073ac:	e000      	b.n	80073b0 <USB_ActivateEndpoint+0x7c>
      break;
 80073ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	441a      	add	r2, r3
 80073ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80073be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	b21b      	sxth	r3, r3
 80073e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ea:	b21a      	sxth	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	b21b      	sxth	r3, r3
 80073f2:	4313      	orrs	r3, r2
 80073f4:	b21b      	sxth	r3, r3
 80073f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	441a      	add	r2, r3
 8007404:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	b29b      	uxth	r3, r3
 800741a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	7b1b      	ldrb	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	f040 8178 	bne.w	8007716 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	785b      	ldrb	r3, [r3, #1]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 8084 	beq.w	8007538 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	61bb      	str	r3, [r7, #24]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800743a:	b29b      	uxth	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	4413      	add	r3, r2
 8007442:	61bb      	str	r3, [r7, #24]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	00da      	lsls	r2, r3, #3
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	88db      	ldrh	r3, [r3, #6]
 8007458:	085b      	lsrs	r3, r3, #1
 800745a:	b29b      	uxth	r3, r3
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	b29a      	uxth	r2, r3
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	827b      	strh	r3, [r7, #18]
 8007472:	8a7b      	ldrh	r3, [r7, #18]
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01b      	beq.n	80074b4 <USB_ActivateEndpoint+0x180>
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	b29b      	uxth	r3, r3
 800748a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007492:	823b      	strh	r3, [r7, #16]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	441a      	add	r2, r3
 800749e:	8a3b      	ldrh	r3, [r7, #16]
 80074a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	78db      	ldrb	r3, [r3, #3]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d020      	beq.n	80074fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d2:	81bb      	strh	r3, [r7, #12]
 80074d4:	89bb      	ldrh	r3, [r7, #12]
 80074d6:	f083 0320 	eor.w	r3, r3, #32
 80074da:	81bb      	strh	r3, [r7, #12]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	441a      	add	r2, r3
 80074e6:	89bb      	ldrh	r3, [r7, #12]
 80074e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	8013      	strh	r3, [r2, #0]
 80074fc:	e2d5      	b.n	8007aaa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007514:	81fb      	strh	r3, [r7, #14]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	441a      	add	r2, r3
 8007520:	89fb      	ldrh	r3, [r7, #14]
 8007522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800752e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007532:	b29b      	uxth	r3, r3
 8007534:	8013      	strh	r3, [r2, #0]
 8007536:	e2b8      	b.n	8007aaa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	633b      	str	r3, [r7, #48]	; 0x30
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007542:	b29b      	uxth	r3, r3
 8007544:	461a      	mov	r2, r3
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	4413      	add	r3, r2
 800754a:	633b      	str	r3, [r7, #48]	; 0x30
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	00da      	lsls	r2, r3, #3
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	4413      	add	r3, r2
 8007556:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800755a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	88db      	ldrh	r3, [r3, #6]
 8007560:	085b      	lsrs	r3, r3, #1
 8007562:	b29b      	uxth	r3, r3
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007576:	b29b      	uxth	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	4413      	add	r3, r2
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	00da      	lsls	r2, r3, #3
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	4413      	add	r3, r2
 800758a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800759a:	b29a      	uxth	r2, r3
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b3e      	cmp	r3, #62	; 0x3e
 80075a6:	d91d      	bls.n	80075e4 <USB_ActivateEndpoint+0x2b0>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	095b      	lsrs	r3, r3, #5
 80075ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	f003 031f 	and.w	r3, r3, #31
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <USB_ActivateEndpoint+0x28e>
 80075bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075be:	3b01      	subs	r3, #1
 80075c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	029b      	lsls	r3, r3, #10
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	4313      	orrs	r3, r2
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075dc:	b29a      	uxth	r2, r3
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	e026      	b.n	8007632 <USB_ActivateEndpoint+0x2fe>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <USB_ActivateEndpoint+0x2ce>
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	801a      	strh	r2, [r3, #0]
 8007600:	e017      	b.n	8007632 <USB_ActivateEndpoint+0x2fe>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	66bb      	str	r3, [r7, #104]	; 0x68
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <USB_ActivateEndpoint+0x2e8>
 8007616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007618:	3301      	adds	r3, #1
 800761a:	66bb      	str	r3, [r7, #104]	; 0x68
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29a      	uxth	r2, r3
 8007622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007624:	b29b      	uxth	r3, r3
 8007626:	029b      	lsls	r3, r3, #10
 8007628:	b29b      	uxth	r3, r3
 800762a:	4313      	orrs	r3, r2
 800762c:	b29a      	uxth	r2, r3
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01b      	beq.n	8007682 <USB_ActivateEndpoint+0x34e>
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007660:	843b      	strh	r3, [r7, #32]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	441a      	add	r2, r3
 800766c:	8c3b      	ldrh	r3, [r7, #32]
 800766e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800767a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800767e:	b29b      	uxth	r3, r3
 8007680:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d124      	bne.n	80076d4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	b29b      	uxth	r3, r3
 8007698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800769c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a0:	83bb      	strh	r3, [r7, #28]
 80076a2:	8bbb      	ldrh	r3, [r7, #28]
 80076a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076a8:	83bb      	strh	r3, [r7, #28]
 80076aa:	8bbb      	ldrh	r3, [r7, #28]
 80076ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076b0:	83bb      	strh	r3, [r7, #28]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	441a      	add	r2, r3
 80076bc:	8bbb      	ldrh	r3, [r7, #28]
 80076be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	8013      	strh	r3, [r2, #0]
 80076d2:	e1ea      	b.n	8007aaa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ea:	83fb      	strh	r3, [r7, #30]
 80076ec:	8bfb      	ldrh	r3, [r7, #30]
 80076ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076f2:	83fb      	strh	r3, [r7, #30]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	441a      	add	r2, r3
 80076fe:	8bfb      	ldrh	r3, [r7, #30]
 8007700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800770c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007710:	b29b      	uxth	r3, r3
 8007712:	8013      	strh	r3, [r2, #0]
 8007714:	e1c9      	b.n	8007aaa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	78db      	ldrb	r3, [r3, #3]
 800771a:	2b02      	cmp	r3, #2
 800771c:	d11e      	bne.n	800775c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	b29b      	uxth	r3, r3
 800772c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007734:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	441a      	add	r2, r3
 8007742:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800774a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800774e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007756:	b29b      	uxth	r3, r3
 8007758:	8013      	strh	r3, [r2, #0]
 800775a:	e01d      	b.n	8007798 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800776e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007772:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	441a      	add	r2, r3
 8007780:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007794:	b29b      	uxth	r3, r3
 8007796:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077a8:	4413      	add	r3, r2
 80077aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	00da      	lsls	r2, r3, #3
 80077b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	891b      	ldrh	r3, [r3, #8]
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ca:	801a      	strh	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	657b      	str	r3, [r7, #84]	; 0x54
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077dc:	4413      	add	r3, r2
 80077de:	657b      	str	r3, [r7, #84]	; 0x54
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	00da      	lsls	r2, r3, #3
 80077e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077e8:	4413      	add	r3, r2
 80077ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077ee:	653b      	str	r3, [r7, #80]	; 0x50
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	895b      	ldrh	r3, [r3, #10]
 80077f4:	085b      	lsrs	r3, r3, #1
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f040 8093 	bne.w	8007930 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800781a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800781e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d01b      	beq.n	800785e <USB_ActivateEndpoint+0x52a>
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	441a      	add	r2, r3
 8007848:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800784a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800784e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800785a:	b29b      	uxth	r3, r3
 800785c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800786c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800786e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	d01b      	beq.n	80078ae <USB_ActivateEndpoint+0x57a>
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	441a      	add	r2, r3
 8007898:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800789a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800789e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80078c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80078c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078cc:	873b      	strh	r3, [r7, #56]	; 0x38
 80078ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80078d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	441a      	add	r2, r3
 80078e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80078e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800790c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	441a      	add	r2, r3
 8007918:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800791a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792a:	b29b      	uxth	r3, r3
 800792c:	8013      	strh	r3, [r2, #0]
 800792e:	e0bc      	b.n	8007aaa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007940:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01d      	beq.n	8007988 <USB_ActivateEndpoint+0x654>
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b29b      	uxth	r3, r3
 800795a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800795e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007962:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	441a      	add	r2, r3
 8007970:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800797c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007984:	b29b      	uxth	r3, r3
 8007986:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007998:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01d      	beq.n	80079e0 <USB_ActivateEndpoint+0x6ac>
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	441a      	add	r2, r3
 80079c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80079cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079dc:	b29b      	uxth	r3, r3
 80079de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	78db      	ldrb	r3, [r3, #3]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d024      	beq.n	8007a32 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007a02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007a06:	f083 0320 	eor.w	r3, r3, #32
 8007a0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	441a      	add	r2, r3
 8007a18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	8013      	strh	r3, [r2, #0]
 8007a30:	e01d      	b.n	8007a6e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	441a      	add	r2, r3
 8007a56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	441a      	add	r2, r3
 8007a92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007aaa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3774      	adds	r7, #116	; 0x74
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop

08007abc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b08d      	sub	sp, #52	; 0x34
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	7b1b      	ldrb	r3, [r3, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f040 808e 	bne.w	8007bec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d044      	beq.n	8007b62 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	81bb      	strh	r3, [r7, #12]
 8007ae6:	89bb      	ldrh	r3, [r7, #12]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d01b      	beq.n	8007b28 <USB_DeactivateEndpoint+0x6c>
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b06:	817b      	strh	r3, [r7, #10]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	441a      	add	r2, r3
 8007b12:	897b      	ldrh	r3, [r7, #10]
 8007b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b3e:	813b      	strh	r3, [r7, #8]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	441a      	add	r2, r3
 8007b4a:	893b      	ldrh	r3, [r7, #8]
 8007b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	8013      	strh	r3, [r2, #0]
 8007b60:	e192      	b.n	8007e88 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	827b      	strh	r3, [r7, #18]
 8007b70:	8a7b      	ldrh	r3, [r7, #18]
 8007b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d01b      	beq.n	8007bb2 <USB_DeactivateEndpoint+0xf6>
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b90:	823b      	strh	r3, [r7, #16]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	441a      	add	r2, r3
 8007b9c:	8a3b      	ldrh	r3, [r7, #16]
 8007b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc8:	81fb      	strh	r3, [r7, #14]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	441a      	add	r2, r3
 8007bd4:	89fb      	ldrh	r3, [r7, #14]
 8007bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	8013      	strh	r3, [r2, #0]
 8007bea:	e14d      	b.n	8007e88 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	785b      	ldrb	r3, [r3, #1]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f040 80a5 	bne.w	8007d40 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	843b      	strh	r3, [r7, #32]
 8007c04:	8c3b      	ldrh	r3, [r7, #32]
 8007c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d01b      	beq.n	8007c46 <USB_DeactivateEndpoint+0x18a>
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c24:	83fb      	strh	r3, [r7, #30]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	441a      	add	r2, r3
 8007c30:	8bfb      	ldrh	r3, [r7, #30]
 8007c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	83bb      	strh	r3, [r7, #28]
 8007c54:	8bbb      	ldrh	r3, [r7, #28]
 8007c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01b      	beq.n	8007c96 <USB_DeactivateEndpoint+0x1da>
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c74:	837b      	strh	r3, [r7, #26]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	441a      	add	r2, r3
 8007c80:	8b7b      	ldrh	r3, [r7, #26]
 8007c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cac:	833b      	strh	r3, [r7, #24]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	441a      	add	r2, r3
 8007cb8:	8b3b      	ldrh	r3, [r7, #24]
 8007cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce4:	82fb      	strh	r3, [r7, #22]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	441a      	add	r2, r3
 8007cf0:	8afb      	ldrh	r3, [r7, #22]
 8007cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d1c:	82bb      	strh	r3, [r7, #20]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	441a      	add	r2, r3
 8007d28:	8abb      	ldrh	r3, [r7, #20]
 8007d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	8013      	strh	r3, [r2, #0]
 8007d3e:	e0a3      	b.n	8007e88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007d4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01b      	beq.n	8007d90 <USB_DeactivateEndpoint+0x2d4>
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	441a      	add	r2, r3
 8007d7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007d9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01b      	beq.n	8007de0 <USB_DeactivateEndpoint+0x324>
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbe:	853b      	strh	r3, [r7, #40]	; 0x28
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	441a      	add	r2, r3
 8007dca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	441a      	add	r2, r3
 8007e02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	441a      	add	r2, r3
 8007e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e66:	847b      	strh	r3, [r7, #34]	; 0x22
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	441a      	add	r2, r3
 8007e72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3734      	adds	r7, #52	; 0x34
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b0c2      	sub	sp, #264	; 0x108
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ea4:	6018      	str	r0, [r3, #0]
 8007ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	f040 86b7 	bne.w	8008c30 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d908      	bls.n	8007ef0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007eee:	e007      	b.n	8007f00 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	7b1b      	ldrb	r3, [r3, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d13a      	bne.n	8007f86 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6959      	ldr	r1, [r3, #20]
 8007f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	88da      	ldrh	r2, [r3, #6]
 8007f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f32:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f36:	6800      	ldr	r0, [r0, #0]
 8007f38:	f001 fcb9 	bl	80098ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	613b      	str	r3, [r7, #16]
 8007f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	461a      	mov	r2, r3
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
 8007f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	00da      	lsls	r2, r3, #3
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	4413      	add	r3, r2
 8007f72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	801a      	strh	r2, [r3, #0]
 8007f82:	f000 be1f 	b.w	8008bc4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	78db      	ldrb	r3, [r3, #3]
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	f040 8462 	bne.w	800885c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6a1a      	ldr	r2, [r3, #32]
 8007fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	f240 83df 	bls.w	8008774 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fdc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008006:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800800a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800e:	b29b      	uxth	r3, r3
 8008010:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6a1a      	ldr	r2, [r3, #32]
 800801e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008022:	1ad2      	subs	r2, r2, r3
 8008024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800803e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29b      	uxth	r3, r3
 800804e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 81c7 	beq.w	80083e6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800805c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	633b      	str	r3, [r7, #48]	; 0x30
 8008064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	785b      	ldrb	r3, [r3, #1]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d177      	bne.n	8008164 <USB_EPStartXfer+0x2ce>
 8008074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008078:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800808e:	b29b      	uxth	r3, r3
 8008090:	461a      	mov	r2, r3
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	4413      	add	r3, r2
 8008096:	62bb      	str	r3, [r7, #40]	; 0x28
 8008098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	00da      	lsls	r2, r3, #3
 80080a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a8:	4413      	add	r3, r2
 80080aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	801a      	strh	r2, [r3, #0]
 80080c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c4:	2b3e      	cmp	r3, #62	; 0x3e
 80080c6:	d921      	bls.n	800810c <USB_EPStartXfer+0x276>
 80080c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080cc:	095b      	lsrs	r3, r3, #5
 80080ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80080d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d6:	f003 031f 	and.w	r3, r3, #31
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d104      	bne.n	80080e8 <USB_EPStartXfer+0x252>
 80080de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080e2:	3b01      	subs	r3, #1
 80080e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	029b      	lsls	r3, r3, #10
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	4313      	orrs	r3, r2
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008104:	b29a      	uxth	r2, r3
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	801a      	strh	r2, [r3, #0]
 800810a:	e050      	b.n	80081ae <USB_EPStartXfer+0x318>
 800810c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <USB_EPStartXfer+0x294>
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29b      	uxth	r3, r3
 800811a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800811e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008122:	b29a      	uxth	r2, r3
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	801a      	strh	r2, [r3, #0]
 8008128:	e041      	b.n	80081ae <USB_EPStartXfer+0x318>
 800812a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800812e:	085b      	lsrs	r3, r3, #1
 8008130:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d004      	beq.n	800814a <USB_EPStartXfer+0x2b4>
 8008140:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008144:	3301      	adds	r3, #1
 8008146:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b29a      	uxth	r2, r3
 8008150:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008154:	b29b      	uxth	r3, r3
 8008156:	029b      	lsls	r3, r3, #10
 8008158:	b29b      	uxth	r3, r3
 800815a:	4313      	orrs	r3, r2
 800815c:	b29a      	uxth	r2, r3
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	801a      	strh	r2, [r3, #0]
 8008162:	e024      	b.n	80081ae <USB_EPStartXfer+0x318>
 8008164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	785b      	ldrb	r3, [r3, #1]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d11c      	bne.n	80081ae <USB_EPStartXfer+0x318>
 8008174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008182:	b29b      	uxth	r3, r3
 8008184:	461a      	mov	r2, r3
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	4413      	add	r3, r2
 800818a:	633b      	str	r3, [r7, #48]	; 0x30
 800818c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	00da      	lsls	r2, r3, #3
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	4413      	add	r3, r2
 800819e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80081ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	895b      	ldrh	r3, [r3, #10]
 80081ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6959      	ldr	r1, [r3, #20]
 80081ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80081d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80081d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f001 fb66 	bl	80098ae <USB_WritePMA>
            ep->xfer_buff += len;
 80081e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695a      	ldr	r2, [r3, #20]
 80081ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f2:	441a      	add	r2, r3
 80081f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6a1a      	ldr	r2, [r3, #32]
 800820c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	429a      	cmp	r2, r3
 800821a:	d90f      	bls.n	800823c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800821c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6a1a      	ldr	r2, [r3, #32]
 8008228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800822c:	1ad2      	subs	r2, r2, r3
 800822e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	621a      	str	r2, [r3, #32]
 800823a:	e00e      	b.n	800825a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800823c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800824c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2200      	movs	r2, #0
 8008258:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800825a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	785b      	ldrb	r3, [r3, #1]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d177      	bne.n	800835a <USB_EPStartXfer+0x4c4>
 800826a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800826e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	61bb      	str	r3, [r7, #24]
 8008276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008284:	b29b      	uxth	r3, r3
 8008286:	461a      	mov	r2, r3
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	4413      	add	r3, r2
 800828c:	61bb      	str	r3, [r7, #24]
 800828e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	00da      	lsls	r2, r3, #3
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	4413      	add	r3, r2
 80082a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082a4:	617b      	str	r3, [r7, #20]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	801a      	strh	r2, [r3, #0]
 80082b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ba:	2b3e      	cmp	r3, #62	; 0x3e
 80082bc:	d921      	bls.n	8008302 <USB_EPStartXfer+0x46c>
 80082be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c2:	095b      	lsrs	r3, r3, #5
 80082c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80082c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082cc:	f003 031f 	and.w	r3, r3, #31
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d104      	bne.n	80082de <USB_EPStartXfer+0x448>
 80082d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082d8:	3b01      	subs	r3, #1
 80082da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	881b      	ldrh	r3, [r3, #0]
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	029b      	lsls	r3, r3, #10
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	4313      	orrs	r3, r2
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	801a      	strh	r2, [r3, #0]
 8008300:	e056      	b.n	80083b0 <USB_EPStartXfer+0x51a>
 8008302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10a      	bne.n	8008320 <USB_EPStartXfer+0x48a>
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008318:	b29a      	uxth	r2, r3
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	801a      	strh	r2, [r3, #0]
 800831e:	e047      	b.n	80083b0 <USB_EPStartXfer+0x51a>
 8008320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008324:	085b      	lsrs	r3, r3, #1
 8008326:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800832a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <USB_EPStartXfer+0x4aa>
 8008336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800833a:	3301      	adds	r3, #1
 800833c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	b29a      	uxth	r2, r3
 8008346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800834a:	b29b      	uxth	r3, r3
 800834c:	029b      	lsls	r3, r3, #10
 800834e:	b29b      	uxth	r3, r3
 8008350:	4313      	orrs	r3, r2
 8008352:	b29a      	uxth	r2, r3
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	801a      	strh	r2, [r3, #0]
 8008358:	e02a      	b.n	80083b0 <USB_EPStartXfer+0x51a>
 800835a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d122      	bne.n	80083b0 <USB_EPStartXfer+0x51a>
 800836a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	623b      	str	r3, [r7, #32]
 8008376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008384:	b29b      	uxth	r3, r3
 8008386:	461a      	mov	r2, r3
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	4413      	add	r3, r2
 800838c:	623b      	str	r3, [r7, #32]
 800838e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	00da      	lsls	r2, r3, #3
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	4413      	add	r3, r2
 80083a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083a4:	61fb      	str	r3, [r7, #28]
 80083a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80083b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	891b      	ldrh	r3, [r3, #8]
 80083bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6959      	ldr	r1, [r3, #20]
 80083cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80083d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80083da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80083de:	6800      	ldr	r0, [r0, #0]
 80083e0:	f001 fa65 	bl	80098ae <USB_WritePMA>
 80083e4:	e3ee      	b.n	8008bc4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d177      	bne.n	80084e6 <USB_EPStartXfer+0x650>
 80083f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	64bb      	str	r3, [r7, #72]	; 0x48
 8008402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008410:	b29b      	uxth	r3, r3
 8008412:	461a      	mov	r2, r3
 8008414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008416:	4413      	add	r3, r2
 8008418:	64bb      	str	r3, [r7, #72]	; 0x48
 800841a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	00da      	lsls	r2, r3, #3
 8008428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800842a:	4413      	add	r3, r2
 800842c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008430:	647b      	str	r3, [r7, #68]	; 0x44
 8008432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	b29b      	uxth	r3, r3
 8008438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800843c:	b29a      	uxth	r2, r3
 800843e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008440:	801a      	strh	r2, [r3, #0]
 8008442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008446:	2b3e      	cmp	r3, #62	; 0x3e
 8008448:	d921      	bls.n	800848e <USB_EPStartXfer+0x5f8>
 800844a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800844e:	095b      	lsrs	r3, r3, #5
 8008450:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008458:	f003 031f 	and.w	r3, r3, #31
 800845c:	2b00      	cmp	r3, #0
 800845e:	d104      	bne.n	800846a <USB_EPStartXfer+0x5d4>
 8008460:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008464:	3b01      	subs	r3, #1
 8008466:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800846a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	b29a      	uxth	r2, r3
 8008470:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008474:	b29b      	uxth	r3, r3
 8008476:	029b      	lsls	r3, r3, #10
 8008478:	b29b      	uxth	r3, r3
 800847a:	4313      	orrs	r3, r2
 800847c:	b29b      	uxth	r3, r3
 800847e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008486:	b29a      	uxth	r2, r3
 8008488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800848a:	801a      	strh	r2, [r3, #0]
 800848c:	e056      	b.n	800853c <USB_EPStartXfer+0x6a6>
 800848e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10a      	bne.n	80084ac <USB_EPStartXfer+0x616>
 8008496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a8:	801a      	strh	r2, [r3, #0]
 80084aa:	e047      	b.n	800853c <USB_EPStartXfer+0x6a6>
 80084ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084b0:	085b      	lsrs	r3, r3, #1
 80084b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80084b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <USB_EPStartXfer+0x636>
 80084c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084c6:	3301      	adds	r3, #1
 80084c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80084cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	029b      	lsls	r3, r3, #10
 80084da:	b29b      	uxth	r3, r3
 80084dc:	4313      	orrs	r3, r2
 80084de:	b29a      	uxth	r2, r3
 80084e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e2:	801a      	strh	r2, [r3, #0]
 80084e4:	e02a      	b.n	800853c <USB_EPStartXfer+0x6a6>
 80084e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	785b      	ldrb	r3, [r3, #1]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d122      	bne.n	800853c <USB_EPStartXfer+0x6a6>
 80084f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	653b      	str	r3, [r7, #80]	; 0x50
 8008502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008510:	b29b      	uxth	r3, r3
 8008512:	461a      	mov	r2, r3
 8008514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008516:	4413      	add	r3, r2
 8008518:	653b      	str	r3, [r7, #80]	; 0x50
 800851a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	00da      	lsls	r2, r3, #3
 8008528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800852a:	4413      	add	r3, r2
 800852c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008530:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008536:	b29a      	uxth	r2, r3
 8008538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800853a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800853c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	891b      	ldrh	r3, [r3, #8]
 8008548:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800854c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6959      	ldr	r1, [r3, #20]
 8008558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800855c:	b29b      	uxth	r3, r3
 800855e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008562:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008566:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	f001 f99f 	bl	80098ae <USB_WritePMA>
            ep->xfer_buff += len;
 8008570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	695a      	ldr	r2, [r3, #20]
 800857c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008580:	441a      	add	r2, r3
 8008582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800858e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6a1a      	ldr	r2, [r3, #32]
 800859a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d90f      	bls.n	80085ca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80085aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6a1a      	ldr	r2, [r3, #32]
 80085b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ba:	1ad2      	subs	r2, r2, r3
 80085bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	621a      	str	r2, [r3, #32]
 80085c8:	e00e      	b.n	80085e8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80085ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80085da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2200      	movs	r2, #0
 80085e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	643b      	str	r3, [r7, #64]	; 0x40
 80085f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	785b      	ldrb	r3, [r3, #1]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d177      	bne.n	80086f4 <USB_EPStartXfer+0x85e>
 8008604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800861e:	b29b      	uxth	r3, r3
 8008620:	461a      	mov	r2, r3
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	4413      	add	r3, r2
 8008626:	63bb      	str	r3, [r7, #56]	; 0x38
 8008628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	00da      	lsls	r2, r3, #3
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	4413      	add	r3, r2
 800863a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800863e:	637b      	str	r3, [r7, #52]	; 0x34
 8008640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	b29b      	uxth	r3, r3
 8008646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800864a:	b29a      	uxth	r2, r3
 800864c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864e:	801a      	strh	r2, [r3, #0]
 8008650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008654:	2b3e      	cmp	r3, #62	; 0x3e
 8008656:	d921      	bls.n	800869c <USB_EPStartXfer+0x806>
 8008658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800865c:	095b      	lsrs	r3, r3, #5
 800865e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008666:	f003 031f 	and.w	r3, r3, #31
 800866a:	2b00      	cmp	r3, #0
 800866c:	d104      	bne.n	8008678 <USB_EPStartXfer+0x7e2>
 800866e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008672:	3b01      	subs	r3, #1
 8008674:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867a:	881b      	ldrh	r3, [r3, #0]
 800867c:	b29a      	uxth	r2, r3
 800867e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008682:	b29b      	uxth	r3, r3
 8008684:	029b      	lsls	r3, r3, #10
 8008686:	b29b      	uxth	r3, r3
 8008688:	4313      	orrs	r3, r2
 800868a:	b29b      	uxth	r3, r3
 800868c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008694:	b29a      	uxth	r2, r3
 8008696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008698:	801a      	strh	r2, [r3, #0]
 800869a:	e050      	b.n	800873e <USB_EPStartXfer+0x8a8>
 800869c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <USB_EPStartXfer+0x824>
 80086a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b6:	801a      	strh	r2, [r3, #0]
 80086b8:	e041      	b.n	800873e <USB_EPStartXfer+0x8a8>
 80086ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086be:	085b      	lsrs	r3, r3, #1
 80086c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80086c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d004      	beq.n	80086da <USB_EPStartXfer+0x844>
 80086d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d4:	3301      	adds	r3, #1
 80086d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	b29a      	uxth	r2, r3
 80086e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	029b      	lsls	r3, r3, #10
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	4313      	orrs	r3, r2
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f0:	801a      	strh	r2, [r3, #0]
 80086f2:	e024      	b.n	800873e <USB_EPStartXfer+0x8a8>
 80086f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	785b      	ldrb	r3, [r3, #1]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d11c      	bne.n	800873e <USB_EPStartXfer+0x8a8>
 8008704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008712:	b29b      	uxth	r3, r3
 8008714:	461a      	mov	r2, r3
 8008716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008718:	4413      	add	r3, r2
 800871a:	643b      	str	r3, [r7, #64]	; 0x40
 800871c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	00da      	lsls	r2, r3, #3
 800872a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800872c:	4413      	add	r3, r2
 800872e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008738:	b29a      	uxth	r2, r3
 800873a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800873e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	895b      	ldrh	r3, [r3, #10]
 800874a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800874e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6959      	ldr	r1, [r3, #20]
 800875a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800875e:	b29b      	uxth	r3, r3
 8008760:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008764:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008768:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800876c:	6800      	ldr	r0, [r0, #0]
 800876e:	f001 f89e 	bl	80098ae <USB_WritePMA>
 8008772:	e227      	b.n	8008bc4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6a1b      	ldr	r3, [r3, #32]
 8008780:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80087a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087aa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80087ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	441a      	add	r2, r3
 80087c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80087cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087dc:	b29b      	uxth	r3, r3
 80087de:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80087e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008800:	4413      	add	r3, r2
 8008802:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	00da      	lsls	r2, r3, #3
 8008812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008814:	4413      	add	r3, r2
 8008816:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800881a:	65bb      	str	r3, [r7, #88]	; 0x58
 800881c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008820:	b29a      	uxth	r2, r3
 8008822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008824:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800882a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	891b      	ldrh	r3, [r3, #8]
 8008832:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800883a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6959      	ldr	r1, [r3, #20]
 8008842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008846:	b29b      	uxth	r3, r3
 8008848:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800884c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008850:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008854:	6800      	ldr	r0, [r0, #0]
 8008856:	f001 f82a 	bl	80098ae <USB_WritePMA>
 800885a:	e1b3      	b.n	8008bc4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800885c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6a1a      	ldr	r2, [r3, #32]
 8008868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800886c:	1ad2      	subs	r2, r2, r3
 800886e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800887a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4413      	add	r3, r2
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	b29b      	uxth	r3, r3
 8008898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 80c6 	beq.w	8008a2e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	673b      	str	r3, [r7, #112]	; 0x70
 80088ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d177      	bne.n	80089ae <USB_EPStartXfer+0xb18>
 80088be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80088ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088d8:	b29b      	uxth	r3, r3
 80088da:	461a      	mov	r2, r3
 80088dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088de:	4413      	add	r3, r2
 80088e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80088e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	00da      	lsls	r2, r3, #3
 80088f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088f2:	4413      	add	r3, r2
 80088f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088f8:	667b      	str	r3, [r7, #100]	; 0x64
 80088fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008904:	b29a      	uxth	r2, r3
 8008906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008908:	801a      	strh	r2, [r3, #0]
 800890a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800890e:	2b3e      	cmp	r3, #62	; 0x3e
 8008910:	d921      	bls.n	8008956 <USB_EPStartXfer+0xac0>
 8008912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008916:	095b      	lsrs	r3, r3, #5
 8008918:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800891c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008920:	f003 031f 	and.w	r3, r3, #31
 8008924:	2b00      	cmp	r3, #0
 8008926:	d104      	bne.n	8008932 <USB_EPStartXfer+0xa9c>
 8008928:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800892c:	3b01      	subs	r3, #1
 800892e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29a      	uxth	r2, r3
 8008938:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800893c:	b29b      	uxth	r3, r3
 800893e:	029b      	lsls	r3, r3, #10
 8008940:	b29b      	uxth	r3, r3
 8008942:	4313      	orrs	r3, r2
 8008944:	b29b      	uxth	r3, r3
 8008946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800894a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800894e:	b29a      	uxth	r2, r3
 8008950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008952:	801a      	strh	r2, [r3, #0]
 8008954:	e050      	b.n	80089f8 <USB_EPStartXfer+0xb62>
 8008956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <USB_EPStartXfer+0xade>
 800895e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800896c:	b29a      	uxth	r2, r3
 800896e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008970:	801a      	strh	r2, [r3, #0]
 8008972:	e041      	b.n	80089f8 <USB_EPStartXfer+0xb62>
 8008974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008978:	085b      	lsrs	r3, r3, #1
 800897a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800897e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d004      	beq.n	8008994 <USB_EPStartXfer+0xafe>
 800898a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800898e:	3301      	adds	r3, #1
 8008990:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29a      	uxth	r2, r3
 800899a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800899e:	b29b      	uxth	r3, r3
 80089a0:	029b      	lsls	r3, r3, #10
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	4313      	orrs	r3, r2
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089aa:	801a      	strh	r2, [r3, #0]
 80089ac:	e024      	b.n	80089f8 <USB_EPStartXfer+0xb62>
 80089ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d11c      	bne.n	80089f8 <USB_EPStartXfer+0xb62>
 80089be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	461a      	mov	r2, r3
 80089d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089d2:	4413      	add	r3, r2
 80089d4:	673b      	str	r3, [r7, #112]	; 0x70
 80089d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	00da      	lsls	r2, r3, #3
 80089e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089e6:	4413      	add	r3, r2
 80089e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80089f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	895b      	ldrh	r3, [r3, #10]
 8008a04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6959      	ldr	r1, [r3, #20]
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a26:	6800      	ldr	r0, [r0, #0]
 8008a28:	f000 ff41 	bl	80098ae <USB_WritePMA>
 8008a2c:	e0ca      	b.n	8008bc4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	785b      	ldrb	r3, [r3, #1]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d177      	bne.n	8008b2e <USB_EPStartXfer+0xc98>
 8008a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a5e:	4413      	add	r3, r2
 8008a60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	00da      	lsls	r2, r3, #3
 8008a70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a72:	4413      	add	r3, r2
 8008a74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a88:	801a      	strh	r2, [r3, #0]
 8008a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8008a90:	d921      	bls.n	8008ad6 <USB_EPStartXfer+0xc40>
 8008a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a96:	095b      	lsrs	r3, r3, #5
 8008a98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aa0:	f003 031f 	and.w	r3, r3, #31
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d104      	bne.n	8008ab2 <USB_EPStartXfer+0xc1c>
 8008aa8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008aac:	3b01      	subs	r3, #1
 8008aae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	029b      	lsls	r3, r3, #10
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad2:	801a      	strh	r2, [r3, #0]
 8008ad4:	e05c      	b.n	8008b90 <USB_EPStartXfer+0xcfa>
 8008ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10a      	bne.n	8008af4 <USB_EPStartXfer+0xc5e>
 8008ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008af0:	801a      	strh	r2, [r3, #0]
 8008af2:	e04d      	b.n	8008b90 <USB_EPStartXfer+0xcfa>
 8008af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af8:	085b      	lsrs	r3, r3, #1
 8008afa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d004      	beq.n	8008b14 <USB_EPStartXfer+0xc7e>
 8008b0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008b0e:	3301      	adds	r3, #1
 8008b10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	029b      	lsls	r3, r3, #10
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	4313      	orrs	r3, r2
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b2a:	801a      	strh	r2, [r3, #0]
 8008b2c:	e030      	b.n	8008b90 <USB_EPStartXfer+0xcfa>
 8008b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	785b      	ldrb	r3, [r3, #1]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d128      	bne.n	8008b90 <USB_EPStartXfer+0xcfa>
 8008b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b62:	4413      	add	r3, r2
 8008b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	00da      	lsls	r2, r3, #3
 8008b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	891b      	ldrh	r3, [r3, #8]
 8008b9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6959      	ldr	r1, [r3, #20]
 8008bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008bb6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008bba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008bbe:	6800      	ldr	r0, [r0, #0]
 8008bc0:	f000 fe75 	bl	80098ae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bea:	817b      	strh	r3, [r7, #10]
 8008bec:	897b      	ldrh	r3, [r7, #10]
 8008bee:	f083 0310 	eor.w	r3, r3, #16
 8008bf2:	817b      	strh	r3, [r7, #10]
 8008bf4:	897b      	ldrh	r3, [r7, #10]
 8008bf6:	f083 0320 	eor.w	r3, r3, #32
 8008bfa:	817b      	strh	r3, [r7, #10]
 8008bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	441a      	add	r2, r3
 8008c16:	897b      	ldrh	r3, [r7, #10]
 8008c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	8013      	strh	r3, [r2, #0]
 8008c2c:	f000 bcde 	b.w	80095ec <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	7b1b      	ldrb	r3, [r3, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f040 80bb 	bne.w	8008db8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	699a      	ldr	r2, [r3, #24]
 8008c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d917      	bls.n	8008c8e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	699a      	ldr	r2, [r3, #24]
 8008c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c7e:	1ad2      	subs	r2, r2, r3
 8008c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	619a      	str	r2, [r3, #24]
 8008c8c:	e00e      	b.n	8008cac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	00da      	lsls	r2, r3, #3
 8008ce4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ce8:	4413      	add	r3, r2
 8008cea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d04:	801a      	strh	r2, [r3, #0]
 8008d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d0a:	2b3e      	cmp	r3, #62	; 0x3e
 8008d0c:	d924      	bls.n	8008d58 <USB_EPStartXfer+0xec2>
 8008d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d12:	095b      	lsrs	r3, r3, #5
 8008d14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d1c:	f003 031f 	and.w	r3, r3, #31
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <USB_EPStartXfer+0xe98>
 8008d24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	029b      	lsls	r3, r3, #10
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	4313      	orrs	r3, r2
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d52:	801a      	strh	r2, [r3, #0]
 8008d54:	f000 bc10 	b.w	8009578 <USB_EPStartXfer+0x16e2>
 8008d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10c      	bne.n	8008d7a <USB_EPStartXfer+0xee4>
 8008d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d76:	801a      	strh	r2, [r3, #0]
 8008d78:	e3fe      	b.n	8009578 <USB_EPStartXfer+0x16e2>
 8008d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d7e:	085b      	lsrs	r3, r3, #1
 8008d80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d004      	beq.n	8008d9a <USB_EPStartXfer+0xf04>
 8008d90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d94:	3301      	adds	r3, #1
 8008d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	029b      	lsls	r3, r3, #10
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	4313      	orrs	r3, r2
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008db4:	801a      	strh	r2, [r3, #0]
 8008db6:	e3df      	b.n	8009578 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	78db      	ldrb	r3, [r3, #3]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	f040 8218 	bne.w	80091fa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	785b      	ldrb	r3, [r3, #1]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f040 809d 	bne.w	8008f16 <USB_EPStartXfer+0x1080>
 8008ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e00:	4413      	add	r3, r2
 8008e02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	00da      	lsls	r2, r3, #3
 8008e14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e18:	4413      	add	r3, r2
 8008e1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e34:	801a      	strh	r2, [r3, #0]
 8008e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b3e      	cmp	r3, #62	; 0x3e
 8008e44:	d92b      	bls.n	8008e9e <USB_EPStartXfer+0x1008>
 8008e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	095b      	lsrs	r3, r3, #5
 8008e54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	f003 031f 	and.w	r3, r3, #31
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d104      	bne.n	8008e76 <USB_EPStartXfer+0xfe0>
 8008e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e70:	3b01      	subs	r3, #1
 8008e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	029b      	lsls	r3, r3, #10
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e9a:	801a      	strh	r2, [r3, #0]
 8008e9c:	e070      	b.n	8008f80 <USB_EPStartXfer+0x10ea>
 8008e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10c      	bne.n	8008ec8 <USB_EPStartXfer+0x1032>
 8008eae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ec4:	801a      	strh	r2, [r3, #0]
 8008ec6:	e05b      	b.n	8008f80 <USB_EPStartXfer+0x10ea>
 8008ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	085b      	lsrs	r3, r3, #1
 8008ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d004      	beq.n	8008ef8 <USB_EPStartXfer+0x1062>
 8008eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	029b      	lsls	r3, r3, #10
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f12:	801a      	strh	r2, [r3, #0]
 8008f14:	e034      	b.n	8008f80 <USB_EPStartXfer+0x10ea>
 8008f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	785b      	ldrb	r3, [r3, #1]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d12c      	bne.n	8008f80 <USB_EPStartXfer+0x10ea>
 8008f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	461a      	mov	r2, r3
 8008f46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	00da      	lsls	r2, r3, #3
 8008f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f62:	4413      	add	r3, r2
 8008f64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008f7e:	801a      	strh	r2, [r3, #0]
 8008f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	785b      	ldrb	r3, [r3, #1]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f040 809d 	bne.w	80090da <USB_EPStartXfer+0x1244>
 8008fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	00da      	lsls	r2, r3, #3
 8008fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fdc:	4413      	add	r3, r2
 8008fde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008fe2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008fe6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ff8:	801a      	strh	r2, [r3, #0]
 8008ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	2b3e      	cmp	r3, #62	; 0x3e
 8009008:	d92b      	bls.n	8009062 <USB_EPStartXfer+0x11cc>
 800900a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800900e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	095b      	lsrs	r3, r3, #5
 8009018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800901c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	f003 031f 	and.w	r3, r3, #31
 800902c:	2b00      	cmp	r3, #0
 800902e:	d104      	bne.n	800903a <USB_EPStartXfer+0x11a4>
 8009030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009034:	3b01      	subs	r3, #1
 8009036:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800903a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	b29a      	uxth	r2, r3
 8009042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009046:	b29b      	uxth	r3, r3
 8009048:	029b      	lsls	r3, r3, #10
 800904a:	b29b      	uxth	r3, r3
 800904c:	4313      	orrs	r3, r2
 800904e:	b29b      	uxth	r3, r3
 8009050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009058:	b29a      	uxth	r2, r3
 800905a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800905e:	801a      	strh	r2, [r3, #0]
 8009060:	e069      	b.n	8009136 <USB_EPStartXfer+0x12a0>
 8009062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10c      	bne.n	800908c <USB_EPStartXfer+0x11f6>
 8009072:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800907e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009082:	b29a      	uxth	r2, r3
 8009084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009088:	801a      	strh	r2, [r3, #0]
 800908a:	e054      	b.n	8009136 <USB_EPStartXfer+0x12a0>
 800908c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	085b      	lsrs	r3, r3, #1
 800909a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800909e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d004      	beq.n	80090bc <USB_EPStartXfer+0x1226>
 80090b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090b6:	3301      	adds	r3, #1
 80090b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	029b      	lsls	r3, r3, #10
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	4313      	orrs	r3, r2
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090d6:	801a      	strh	r2, [r3, #0]
 80090d8:	e02d      	b.n	8009136 <USB_EPStartXfer+0x12a0>
 80090da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	785b      	ldrb	r3, [r3, #1]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d125      	bne.n	8009136 <USB_EPStartXfer+0x12a0>
 80090ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	461a      	mov	r2, r3
 80090fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009100:	4413      	add	r3, r2
 8009102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800910a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	00da      	lsls	r2, r3, #3
 8009114:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009118:	4413      	add	r3, r2
 800911a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800911e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	b29a      	uxth	r2, r3
 8009130:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009134:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 8218 	beq.w	8009578 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009168:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800916c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <USB_EPStartXfer+0x12ea>
 8009174:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10d      	bne.n	800919c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009180:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009188:	2b00      	cmp	r3, #0
 800918a:	f040 81f5 	bne.w	8009578 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800918e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009196:	2b00      	cmp	r3, #0
 8009198:	f040 81ee 	bne.w	8009578 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800919c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80091c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	441a      	add	r2, r3
 80091e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80091e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	8013      	strh	r3, [r2, #0]
 80091f8:	e1be      	b.n	8009578 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80091fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	78db      	ldrb	r3, [r3, #3]
 8009206:	2b01      	cmp	r3, #1
 8009208:	f040 81b4 	bne.w	8009574 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800920c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	699a      	ldr	r2, [r3, #24]
 8009218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	429a      	cmp	r2, r3
 8009226:	d917      	bls.n	8009258 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800923c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	699a      	ldr	r2, [r3, #24]
 8009244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009248:	1ad2      	subs	r2, r2, r3
 800924a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	619a      	str	r2, [r3, #24]
 8009256:	e00e      	b.n	8009276 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2200      	movs	r2, #0
 8009274:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	785b      	ldrb	r3, [r3, #1]
 8009282:	2b00      	cmp	r3, #0
 8009284:	f040 8085 	bne.w	8009392 <USB_EPStartXfer+0x14fc>
 8009288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800928c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	461a      	mov	r2, r3
 80092a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80092ac:	4413      	add	r3, r2
 80092ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	00da      	lsls	r2, r3, #3
 80092c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80092c4:	4413      	add	r3, r2
 80092c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80092ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092da:	b29a      	uxth	r2, r3
 80092dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092e0:	801a      	strh	r2, [r3, #0]
 80092e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092e6:	2b3e      	cmp	r3, #62	; 0x3e
 80092e8:	d923      	bls.n	8009332 <USB_EPStartXfer+0x149c>
 80092ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ee:	095b      	lsrs	r3, r3, #5
 80092f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80092f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f8:	f003 031f 	and.w	r3, r3, #31
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d104      	bne.n	800930a <USB_EPStartXfer+0x1474>
 8009300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009304:	3b01      	subs	r3, #1
 8009306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800930a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	b29a      	uxth	r2, r3
 8009312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009316:	b29b      	uxth	r3, r3
 8009318:	029b      	lsls	r3, r3, #10
 800931a:	b29b      	uxth	r3, r3
 800931c:	4313      	orrs	r3, r2
 800931e:	b29b      	uxth	r3, r3
 8009320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009328:	b29a      	uxth	r2, r3
 800932a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800932e:	801a      	strh	r2, [r3, #0]
 8009330:	e060      	b.n	80093f4 <USB_EPStartXfer+0x155e>
 8009332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10c      	bne.n	8009354 <USB_EPStartXfer+0x14be>
 800933a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	b29b      	uxth	r3, r3
 8009342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800934a:	b29a      	uxth	r2, r3
 800934c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009350:	801a      	strh	r2, [r3, #0]
 8009352:	e04f      	b.n	80093f4 <USB_EPStartXfer+0x155e>
 8009354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009358:	085b      	lsrs	r3, r3, #1
 800935a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800935e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d004      	beq.n	8009374 <USB_EPStartXfer+0x14de>
 800936a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800936e:	3301      	adds	r3, #1
 8009370:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	b29a      	uxth	r2, r3
 800937c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009380:	b29b      	uxth	r3, r3
 8009382:	029b      	lsls	r3, r3, #10
 8009384:	b29b      	uxth	r3, r3
 8009386:	4313      	orrs	r3, r2
 8009388:	b29a      	uxth	r2, r3
 800938a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800938e:	801a      	strh	r2, [r3, #0]
 8009390:	e030      	b.n	80093f4 <USB_EPStartXfer+0x155e>
 8009392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	785b      	ldrb	r3, [r3, #1]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d128      	bne.n	80093f4 <USB_EPStartXfer+0x155e>
 80093a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80093b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093be:	b29b      	uxth	r3, r3
 80093c0:	461a      	mov	r2, r3
 80093c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093c6:	4413      	add	r3, r2
 80093c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80093cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	00da      	lsls	r2, r3, #3
 80093da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093de:	4413      	add	r3, r2
 80093e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80093e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80093f2:	801a      	strh	r2, [r3, #0]
 80093f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	785b      	ldrb	r3, [r3, #1]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f040 8085 	bne.w	800951e <USB_EPStartXfer+0x1688>
 8009414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009430:	b29b      	uxth	r3, r3
 8009432:	461a      	mov	r2, r3
 8009434:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009438:	4413      	add	r3, r2
 800943a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800943e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	00da      	lsls	r2, r3, #3
 800944c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009450:	4413      	add	r3, r2
 8009452:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009456:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800945a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	b29b      	uxth	r3, r3
 8009462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009466:	b29a      	uxth	r2, r3
 8009468:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800946c:	801a      	strh	r2, [r3, #0]
 800946e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009472:	2b3e      	cmp	r3, #62	; 0x3e
 8009474:	d923      	bls.n	80094be <USB_EPStartXfer+0x1628>
 8009476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800947a:	095b      	lsrs	r3, r3, #5
 800947c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009484:	f003 031f 	and.w	r3, r3, #31
 8009488:	2b00      	cmp	r3, #0
 800948a:	d104      	bne.n	8009496 <USB_EPStartXfer+0x1600>
 800948c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009490:	3b01      	subs	r3, #1
 8009492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800949a:	881b      	ldrh	r3, [r3, #0]
 800949c:	b29a      	uxth	r2, r3
 800949e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	029b      	lsls	r3, r3, #10
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	4313      	orrs	r3, r2
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094ba:	801a      	strh	r2, [r3, #0]
 80094bc:	e05c      	b.n	8009578 <USB_EPStartXfer+0x16e2>
 80094be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10c      	bne.n	80094e0 <USB_EPStartXfer+0x164a>
 80094c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094dc:	801a      	strh	r2, [r3, #0]
 80094de:	e04b      	b.n	8009578 <USB_EPStartXfer+0x16e2>
 80094e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094e4:	085b      	lsrs	r3, r3, #1
 80094e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80094ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <USB_EPStartXfer+0x166a>
 80094f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094fa:	3301      	adds	r3, #1
 80094fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009500:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	b29a      	uxth	r2, r3
 8009508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800950c:	b29b      	uxth	r3, r3
 800950e:	029b      	lsls	r3, r3, #10
 8009510:	b29b      	uxth	r3, r3
 8009512:	4313      	orrs	r3, r2
 8009514:	b29a      	uxth	r2, r3
 8009516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800951a:	801a      	strh	r2, [r3, #0]
 800951c:	e02c      	b.n	8009578 <USB_EPStartXfer+0x16e2>
 800951e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	785b      	ldrb	r3, [r3, #1]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d124      	bne.n	8009578 <USB_EPStartXfer+0x16e2>
 800952e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800953c:	b29b      	uxth	r3, r3
 800953e:	461a      	mov	r2, r3
 8009540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009544:	4413      	add	r3, r2
 8009546:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800954a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	00da      	lsls	r2, r3, #3
 8009558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800955c:	4413      	add	r3, r2
 800955e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009562:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800956a:	b29a      	uxth	r2, r3
 800956c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009570:	801a      	strh	r2, [r3, #0]
 8009572:	e001      	b.n	8009578 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e03a      	b.n	80095ee <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	881b      	ldrh	r3, [r3, #0]
 8009594:	b29b      	uxth	r3, r3
 8009596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800959a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800959e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80095a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80095a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80095aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80095ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80095b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80095b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80095ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	441a      	add	r2, r3
 80095d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80095d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	785b      	ldrb	r3, [r3, #1]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d020      	beq.n	800964c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	b29b      	uxth	r3, r3
 8009618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009620:	81bb      	strh	r3, [r7, #12]
 8009622:	89bb      	ldrh	r3, [r7, #12]
 8009624:	f083 0310 	eor.w	r3, r3, #16
 8009628:	81bb      	strh	r3, [r7, #12]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	441a      	add	r2, r3
 8009634:	89bb      	ldrh	r3, [r7, #12]
 8009636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800963a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800963e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009646:	b29b      	uxth	r3, r3
 8009648:	8013      	strh	r3, [r2, #0]
 800964a:	e01f      	b.n	800968c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	881b      	ldrh	r3, [r3, #0]
 8009658:	b29b      	uxth	r3, r3
 800965a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800965e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009662:	81fb      	strh	r3, [r7, #14]
 8009664:	89fb      	ldrh	r3, [r7, #14]
 8009666:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800966a:	81fb      	strh	r3, [r7, #14]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	441a      	add	r2, r3
 8009676:	89fb      	ldrh	r3, [r7, #14]
 8009678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800967c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009688:	b29b      	uxth	r3, r3
 800968a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800969a:	b480      	push	{r7}
 800969c:	b087      	sub	sp, #28
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	7b1b      	ldrb	r3, [r3, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f040 809d 	bne.w	80097e8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d04c      	beq.n	8009750 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	823b      	strh	r3, [r7, #16]
 80096c4:	8a3b      	ldrh	r3, [r7, #16]
 80096c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d01b      	beq.n	8009706 <USB_EPClearStall+0x6c>
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e4:	81fb      	strh	r3, [r7, #14]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	441a      	add	r2, r3
 80096f0:	89fb      	ldrh	r3, [r7, #14]
 80096f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009702:	b29b      	uxth	r3, r3
 8009704:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	78db      	ldrb	r3, [r3, #3]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d06c      	beq.n	80097e8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	b29b      	uxth	r3, r3
 800971c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009724:	81bb      	strh	r3, [r7, #12]
 8009726:	89bb      	ldrh	r3, [r7, #12]
 8009728:	f083 0320 	eor.w	r3, r3, #32
 800972c:	81bb      	strh	r3, [r7, #12]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	441a      	add	r2, r3
 8009738:	89bb      	ldrh	r3, [r7, #12]
 800973a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800973e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974a:	b29b      	uxth	r3, r3
 800974c:	8013      	strh	r3, [r2, #0]
 800974e:	e04b      	b.n	80097e8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	82fb      	strh	r3, [r7, #22]
 800975e:	8afb      	ldrh	r3, [r7, #22]
 8009760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d01b      	beq.n	80097a0 <USB_EPClearStall+0x106>
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	b29b      	uxth	r3, r3
 8009776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800977a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800977e:	82bb      	strh	r3, [r7, #20]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	441a      	add	r2, r3
 800978a:	8abb      	ldrh	r3, [r7, #20]
 800978c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800979c:	b29b      	uxth	r3, r3
 800979e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b6:	827b      	strh	r3, [r7, #18]
 80097b8:	8a7b      	ldrh	r3, [r7, #18]
 80097ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80097be:	827b      	strh	r3, [r7, #18]
 80097c0:	8a7b      	ldrh	r3, [r7, #18]
 80097c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80097c6:	827b      	strh	r3, [r7, #18]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	441a      	add	r2, r3
 80097d2:	8a7b      	ldrh	r3, [r7, #18]
 80097d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	460b      	mov	r3, r1
 8009800:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009802:	78fb      	ldrb	r3, [r7, #3]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d103      	bne.n	8009810 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2280      	movs	r2, #128	; 0x80
 800980c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800981e:	b480      	push	{r7}
 8009820:	b083      	sub	sp, #12
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800982c:	b29b      	uxth	r3, r3
 800982e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009836:	b29a      	uxth	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800985a:	b29b      	uxth	r3, r3
 800985c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009860:	b29a      	uxth	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009876:	b480      	push	{r7}
 8009878:	b085      	sub	sp, #20
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009884:	b29b      	uxth	r3, r3
 8009886:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009888:	68fb      	ldr	r3, [r7, #12]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b08b      	sub	sp, #44	; 0x2c
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	60f8      	str	r0, [r7, #12]
 80098b6:	60b9      	str	r1, [r7, #8]
 80098b8:	4611      	mov	r1, r2
 80098ba:	461a      	mov	r2, r3
 80098bc:	460b      	mov	r3, r1
 80098be:	80fb      	strh	r3, [r7, #6]
 80098c0:	4613      	mov	r3, r2
 80098c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80098c4:	88bb      	ldrh	r3, [r7, #4]
 80098c6:	3301      	adds	r3, #1
 80098c8:	085b      	lsrs	r3, r3, #1
 80098ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80098d4:	88fa      	ldrh	r2, [r7, #6]
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098de:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	627b      	str	r3, [r7, #36]	; 0x24
 80098e4:	e01b      	b.n	800991e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	3301      	adds	r3, #1
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	021b      	lsls	r3, r3, #8
 80098f4:	b21a      	sxth	r2, r3
 80098f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	b21b      	sxth	r3, r3
 80098fe:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	8a7a      	ldrh	r2, [r7, #18]
 8009904:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	3302      	adds	r3, #2
 800990a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	3301      	adds	r3, #1
 8009910:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	3301      	adds	r3, #1
 8009916:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	3b01      	subs	r3, #1
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e0      	bne.n	80098e6 <USB_WritePMA+0x38>
  }
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop
 8009928:	372c      	adds	r7, #44	; 0x2c
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009932:	b480      	push	{r7}
 8009934:	b08b      	sub	sp, #44	; 0x2c
 8009936:	af00      	add	r7, sp, #0
 8009938:	60f8      	str	r0, [r7, #12]
 800993a:	60b9      	str	r1, [r7, #8]
 800993c:	4611      	mov	r1, r2
 800993e:	461a      	mov	r2, r3
 8009940:	460b      	mov	r3, r1
 8009942:	80fb      	strh	r3, [r7, #6]
 8009944:	4613      	mov	r3, r2
 8009946:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009948:	88bb      	ldrh	r3, [r7, #4]
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	b29b      	uxth	r3, r3
 800994e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009958:	88fa      	ldrh	r2, [r7, #6]
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009962:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	627b      	str	r3, [r7, #36]	; 0x24
 8009968:	e018      	b.n	800999c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	b29b      	uxth	r3, r3
 8009970:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	3302      	adds	r3, #2
 8009976:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	b2da      	uxtb	r2, r3
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	3301      	adds	r3, #1
 8009984:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	0a1b      	lsrs	r3, r3, #8
 800998a:	b2da      	uxtb	r2, r3
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	3301      	adds	r3, #1
 8009994:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009998:	3b01      	subs	r3, #1
 800999a:	627b      	str	r3, [r7, #36]	; 0x24
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1e3      	bne.n	800996a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80099a2:	88bb      	ldrh	r3, [r7, #4]
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d007      	beq.n	80099be <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	701a      	strb	r2, [r3, #0]
  }
}
 80099be:	bf00      	nop
 80099c0:	372c      	adds	r7, #44	; 0x2c
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
	...

080099cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80099d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80099dc:	f002 fd24 	bl	800c428 <USBD_static_malloc>
 80099e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d109      	bne.n	80099fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	32b0      	adds	r2, #176	; 0xb0
 80099f2:	2100      	movs	r1, #0
 80099f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80099f8:	2302      	movs	r3, #2
 80099fa:	e0d4      	b.n	8009ba6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80099fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009a00:	2100      	movs	r1, #0
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f002 fd2e 	bl	800c464 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	32b0      	adds	r2, #176	; 0xb0
 8009a12:	68f9      	ldr	r1, [r7, #12]
 8009a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	32b0      	adds	r2, #176	; 0xb0
 8009a22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	7c1b      	ldrb	r3, [r3, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d138      	bne.n	8009aa6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009a34:	4b5e      	ldr	r3, [pc, #376]	; (8009bb0 <USBD_CDC_Init+0x1e4>)
 8009a36:	7819      	ldrb	r1, [r3, #0]
 8009a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f002 faf4 	bl	800c02c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009a44:	4b5a      	ldr	r3, [pc, #360]	; (8009bb0 <USBD_CDC_Init+0x1e4>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	f003 020f 	and.w	r2, r3, #15
 8009a4c:	6879      	ldr	r1, [r7, #4]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	440b      	add	r3, r1
 8009a58:	3324      	adds	r3, #36	; 0x24
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a5e:	4b55      	ldr	r3, [pc, #340]	; (8009bb4 <USBD_CDC_Init+0x1e8>)
 8009a60:	7819      	ldrb	r1, [r3, #0]
 8009a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a66:	2202      	movs	r2, #2
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f002 fadf 	bl	800c02c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009a6e:	4b51      	ldr	r3, [pc, #324]	; (8009bb4 <USBD_CDC_Init+0x1e8>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	f003 020f 	and.w	r2, r3, #15
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4413      	add	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	440b      	add	r3, r1
 8009a82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a86:	2201      	movs	r2, #1
 8009a88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009a8a:	4b4b      	ldr	r3, [pc, #300]	; (8009bb8 <USBD_CDC_Init+0x1ec>)
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	f003 020f 	and.w	r2, r3, #15
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	4613      	mov	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	440b      	add	r3, r1
 8009a9e:	3326      	adds	r3, #38	; 0x26
 8009aa0:	2210      	movs	r2, #16
 8009aa2:	801a      	strh	r2, [r3, #0]
 8009aa4:	e035      	b.n	8009b12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009aa6:	4b42      	ldr	r3, [pc, #264]	; (8009bb0 <USBD_CDC_Init+0x1e4>)
 8009aa8:	7819      	ldrb	r1, [r3, #0]
 8009aaa:	2340      	movs	r3, #64	; 0x40
 8009aac:	2202      	movs	r2, #2
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f002 fabc 	bl	800c02c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ab4:	4b3e      	ldr	r3, [pc, #248]	; (8009bb0 <USBD_CDC_Init+0x1e4>)
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	f003 020f 	and.w	r2, r3, #15
 8009abc:	6879      	ldr	r1, [r7, #4]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	440b      	add	r3, r1
 8009ac8:	3324      	adds	r3, #36	; 0x24
 8009aca:	2201      	movs	r2, #1
 8009acc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009ace:	4b39      	ldr	r3, [pc, #228]	; (8009bb4 <USBD_CDC_Init+0x1e8>)
 8009ad0:	7819      	ldrb	r1, [r3, #0]
 8009ad2:	2340      	movs	r3, #64	; 0x40
 8009ad4:	2202      	movs	r2, #2
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f002 faa8 	bl	800c02c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009adc:	4b35      	ldr	r3, [pc, #212]	; (8009bb4 <USBD_CDC_Init+0x1e8>)
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	f003 020f 	and.w	r2, r3, #15
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	440b      	add	r3, r1
 8009af0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009af4:	2201      	movs	r2, #1
 8009af6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009af8:	4b2f      	ldr	r3, [pc, #188]	; (8009bb8 <USBD_CDC_Init+0x1ec>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	f003 020f 	and.w	r2, r3, #15
 8009b00:	6879      	ldr	r1, [r7, #4]
 8009b02:	4613      	mov	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	440b      	add	r3, r1
 8009b0c:	3326      	adds	r3, #38	; 0x26
 8009b0e:	2210      	movs	r2, #16
 8009b10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009b12:	4b29      	ldr	r3, [pc, #164]	; (8009bb8 <USBD_CDC_Init+0x1ec>)
 8009b14:	7819      	ldrb	r1, [r3, #0]
 8009b16:	2308      	movs	r3, #8
 8009b18:	2203      	movs	r2, #3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f002 fa86 	bl	800c02c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009b20:	4b25      	ldr	r3, [pc, #148]	; (8009bb8 <USBD_CDC_Init+0x1ec>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	f003 020f 	and.w	r2, r3, #15
 8009b28:	6879      	ldr	r1, [r7, #4]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	440b      	add	r3, r1
 8009b34:	3324      	adds	r3, #36	; 0x24
 8009b36:	2201      	movs	r2, #1
 8009b38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	33b0      	adds	r3, #176	; 0xb0
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4413      	add	r3, r2
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009b70:	2302      	movs	r3, #2
 8009b72:	e018      	b.n	8009ba6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	7c1b      	ldrb	r3, [r3, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b7c:	4b0d      	ldr	r3, [pc, #52]	; (8009bb4 <USBD_CDC_Init+0x1e8>)
 8009b7e:	7819      	ldrb	r1, [r3, #0]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f002 fbca 	bl	800c324 <USBD_LL_PrepareReceive>
 8009b90:	e008      	b.n	8009ba4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b92:	4b08      	ldr	r3, [pc, #32]	; (8009bb4 <USBD_CDC_Init+0x1e8>)
 8009b94:	7819      	ldrb	r1, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b9c:	2340      	movs	r3, #64	; 0x40
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f002 fbc0 	bl	800c324 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20000097 	.word	0x20000097
 8009bb4:	20000098 	.word	0x20000098
 8009bb8:	20000099 	.word	0x20000099

08009bbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009bc8:	4b3a      	ldr	r3, [pc, #232]	; (8009cb4 <USBD_CDC_DeInit+0xf8>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f002 fa6a 	bl	800c0a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009bd4:	4b37      	ldr	r3, [pc, #220]	; (8009cb4 <USBD_CDC_DeInit+0xf8>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	f003 020f 	and.w	r2, r3, #15
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	4613      	mov	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	440b      	add	r3, r1
 8009be8:	3324      	adds	r3, #36	; 0x24
 8009bea:	2200      	movs	r2, #0
 8009bec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009bee:	4b32      	ldr	r3, [pc, #200]	; (8009cb8 <USBD_CDC_DeInit+0xfc>)
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f002 fa57 	bl	800c0a8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009bfa:	4b2f      	ldr	r3, [pc, #188]	; (8009cb8 <USBD_CDC_DeInit+0xfc>)
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	f003 020f 	and.w	r2, r3, #15
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	4613      	mov	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c12:	2200      	movs	r2, #0
 8009c14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009c16:	4b29      	ldr	r3, [pc, #164]	; (8009cbc <USBD_CDC_DeInit+0x100>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f002 fa43 	bl	800c0a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009c22:	4b26      	ldr	r3, [pc, #152]	; (8009cbc <USBD_CDC_DeInit+0x100>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	f003 020f 	and.w	r2, r3, #15
 8009c2a:	6879      	ldr	r1, [r7, #4]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	440b      	add	r3, r1
 8009c36:	3324      	adds	r3, #36	; 0x24
 8009c38:	2200      	movs	r2, #0
 8009c3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009c3c:	4b1f      	ldr	r3, [pc, #124]	; (8009cbc <USBD_CDC_DeInit+0x100>)
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	f003 020f 	and.w	r2, r3, #15
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	4613      	mov	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	440b      	add	r3, r1
 8009c50:	3326      	adds	r3, #38	; 0x26
 8009c52:	2200      	movs	r2, #0
 8009c54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	32b0      	adds	r2, #176	; 0xb0
 8009c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d01f      	beq.n	8009ca8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	33b0      	adds	r3, #176	; 0xb0
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	32b0      	adds	r2, #176	; 0xb0
 8009c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f002 fbda 	bl	800c444 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	32b0      	adds	r2, #176	; 0xb0
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20000097 	.word	0x20000097
 8009cb8:	20000098 	.word	0x20000098
 8009cbc:	20000099 	.word	0x20000099

08009cc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	32b0      	adds	r2, #176	; 0xb0
 8009cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e0bf      	b.n	8009e70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d050      	beq.n	8009d9e <USBD_CDC_Setup+0xde>
 8009cfc:	2b20      	cmp	r3, #32
 8009cfe:	f040 80af 	bne.w	8009e60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	88db      	ldrh	r3, [r3, #6]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d03a      	beq.n	8009d80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	b25b      	sxtb	r3, r3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	da1b      	bge.n	8009d4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	33b0      	adds	r3, #176	; 0xb0
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009d2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	88d2      	ldrh	r2, [r2, #6]
 8009d30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	88db      	ldrh	r3, [r3, #6]
 8009d36:	2b07      	cmp	r3, #7
 8009d38:	bf28      	it	cs
 8009d3a:	2307      	movcs	r3, #7
 8009d3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	89fa      	ldrh	r2, [r7, #14]
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 fd21 	bl	800b78c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009d4a:	e090      	b.n	8009e6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	785a      	ldrb	r2, [r3, #1]
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	88db      	ldrh	r3, [r3, #6]
 8009d5a:	2b3f      	cmp	r3, #63	; 0x3f
 8009d5c:	d803      	bhi.n	8009d66 <USBD_CDC_Setup+0xa6>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	88db      	ldrh	r3, [r3, #6]
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	e000      	b.n	8009d68 <USBD_CDC_Setup+0xa8>
 8009d66:	2240      	movs	r2, #64	; 0x40
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009d6e:	6939      	ldr	r1, [r7, #16]
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009d76:	461a      	mov	r2, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f001 fd33 	bl	800b7e4 <USBD_CtlPrepareRx>
      break;
 8009d7e:	e076      	b.n	8009e6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	33b0      	adds	r3, #176	; 0xb0
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	7850      	ldrb	r0, [r2, #1]
 8009d96:	2200      	movs	r2, #0
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	4798      	blx	r3
      break;
 8009d9c:	e067      	b.n	8009e6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b0b      	cmp	r3, #11
 8009da4:	d851      	bhi.n	8009e4a <USBD_CDC_Setup+0x18a>
 8009da6:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <USBD_CDC_Setup+0xec>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009ddd 	.word	0x08009ddd
 8009db0:	08009e59 	.word	0x08009e59
 8009db4:	08009e4b 	.word	0x08009e4b
 8009db8:	08009e4b 	.word	0x08009e4b
 8009dbc:	08009e4b 	.word	0x08009e4b
 8009dc0:	08009e4b 	.word	0x08009e4b
 8009dc4:	08009e4b 	.word	0x08009e4b
 8009dc8:	08009e4b 	.word	0x08009e4b
 8009dcc:	08009e4b 	.word	0x08009e4b
 8009dd0:	08009e4b 	.word	0x08009e4b
 8009dd4:	08009e07 	.word	0x08009e07
 8009dd8:	08009e31 	.word	0x08009e31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	d107      	bne.n	8009df8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009de8:	f107 030a 	add.w	r3, r7, #10
 8009dec:	2202      	movs	r2, #2
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f001 fccb 	bl	800b78c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009df6:	e032      	b.n	8009e5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009df8:	6839      	ldr	r1, [r7, #0]
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f001 fc55 	bl	800b6aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009e00:	2303      	movs	r3, #3
 8009e02:	75fb      	strb	r3, [r7, #23]
          break;
 8009e04:	e02b      	b.n	8009e5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	d107      	bne.n	8009e22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e12:	f107 030d 	add.w	r3, r7, #13
 8009e16:	2201      	movs	r2, #1
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f001 fcb6 	bl	800b78c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e20:	e01d      	b.n	8009e5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f001 fc40 	bl	800b6aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8009e2e:	e016      	b.n	8009e5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d00f      	beq.n	8009e5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f001 fc33 	bl	800b6aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009e44:	2303      	movs	r3, #3
 8009e46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e48:	e008      	b.n	8009e5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f001 fc2c 	bl	800b6aa <USBD_CtlError>
          ret = USBD_FAIL;
 8009e52:	2303      	movs	r3, #3
 8009e54:	75fb      	strb	r3, [r7, #23]
          break;
 8009e56:	e002      	b.n	8009e5e <USBD_CDC_Setup+0x19e>
          break;
 8009e58:	bf00      	nop
 8009e5a:	e008      	b.n	8009e6e <USBD_CDC_Setup+0x1ae>
          break;
 8009e5c:	bf00      	nop
      }
      break;
 8009e5e:	e006      	b.n	8009e6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 fc21 	bl	800b6aa <USBD_CtlError>
      ret = USBD_FAIL;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	32b0      	adds	r2, #176	; 0xb0
 8009e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d101      	bne.n	8009ea2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e065      	b.n	8009f6e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	32b0      	adds	r2, #176	; 0xb0
 8009eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009eb2:	78fb      	ldrb	r3, [r7, #3]
 8009eb4:	f003 020f 	and.w	r2, r3, #15
 8009eb8:	6879      	ldr	r1, [r7, #4]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	440b      	add	r3, r1
 8009ec4:	3318      	adds	r3, #24
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d02f      	beq.n	8009f2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009ecc:	78fb      	ldrb	r3, [r7, #3]
 8009ece:	f003 020f 	and.w	r2, r3, #15
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	440b      	add	r3, r1
 8009ede:	3318      	adds	r3, #24
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	78fb      	ldrb	r3, [r7, #3]
 8009ee4:	f003 010f 	and.w	r1, r3, #15
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	460b      	mov	r3, r1
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	440b      	add	r3, r1
 8009ef0:	00db      	lsls	r3, r3, #3
 8009ef2:	4403      	add	r3, r0
 8009ef4:	3338      	adds	r3, #56	; 0x38
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	fbb2 f1f3 	udiv	r1, r2, r3
 8009efc:	fb01 f303 	mul.w	r3, r1, r3
 8009f00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d112      	bne.n	8009f2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	f003 020f 	and.w	r2, r3, #15
 8009f0c:	6879      	ldr	r1, [r7, #4]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	440b      	add	r3, r1
 8009f18:	3318      	adds	r3, #24
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f1e:	78f9      	ldrb	r1, [r7, #3]
 8009f20:	2300      	movs	r3, #0
 8009f22:	2200      	movs	r2, #0
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f002 f9c5 	bl	800c2b4 <USBD_LL_Transmit>
 8009f2a:	e01f      	b.n	8009f6c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	33b0      	adds	r3, #176	; 0xb0
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4413      	add	r3, r2
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d010      	beq.n	8009f6c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	33b0      	adds	r3, #176	; 0xb0
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009f68:	78fa      	ldrb	r2, [r7, #3]
 8009f6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b084      	sub	sp, #16
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	32b0      	adds	r2, #176	; 0xb0
 8009f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	32b0      	adds	r2, #176	; 0xb0
 8009f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d101      	bne.n	8009fa8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e01a      	b.n	8009fde <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fa8:	78fb      	ldrb	r3, [r7, #3]
 8009faa:	4619      	mov	r1, r3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f002 f9f1 	bl	800c394 <USBD_LL_GetRxDataSize>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	33b0      	adds	r3, #176	; 0xb0
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	32b0      	adds	r2, #176	; 0xb0
 8009ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ffc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a004:	2303      	movs	r3, #3
 800a006:	e025      	b.n	800a054 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	33b0      	adds	r3, #176	; 0xb0
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	4413      	add	r3, r2
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01a      	beq.n	800a052 <USBD_CDC_EP0_RxReady+0x6c>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a022:	2bff      	cmp	r3, #255	; 0xff
 800a024:	d015      	beq.n	800a052 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	33b0      	adds	r3, #176	; 0xb0
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a03e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a046:	b292      	uxth	r2, r2
 800a048:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	22ff      	movs	r2, #255	; 0xff
 800a04e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a064:	2182      	movs	r1, #130	; 0x82
 800a066:	4818      	ldr	r0, [pc, #96]	; (800a0c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a068:	f000 fcbd 	bl	800a9e6 <USBD_GetEpDesc>
 800a06c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a06e:	2101      	movs	r1, #1
 800a070:	4815      	ldr	r0, [pc, #84]	; (800a0c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a072:	f000 fcb8 	bl	800a9e6 <USBD_GetEpDesc>
 800a076:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a078:	2181      	movs	r1, #129	; 0x81
 800a07a:	4813      	ldr	r0, [pc, #76]	; (800a0c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a07c:	f000 fcb3 	bl	800a9e6 <USBD_GetEpDesc>
 800a080:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2210      	movs	r2, #16
 800a08c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d006      	beq.n	800a0a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	2200      	movs	r2, #0
 800a098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a09c:	711a      	strb	r2, [r3, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d006      	beq.n	800a0b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0b0:	711a      	strb	r2, [r3, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2243      	movs	r2, #67	; 0x43
 800a0ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0bc:	4b02      	ldr	r3, [pc, #8]	; (800a0c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3718      	adds	r7, #24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20000054 	.word	0x20000054

0800a0cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a0d4:	2182      	movs	r1, #130	; 0x82
 800a0d6:	4818      	ldr	r0, [pc, #96]	; (800a138 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a0d8:	f000 fc85 	bl	800a9e6 <USBD_GetEpDesc>
 800a0dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a0de:	2101      	movs	r1, #1
 800a0e0:	4815      	ldr	r0, [pc, #84]	; (800a138 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a0e2:	f000 fc80 	bl	800a9e6 <USBD_GetEpDesc>
 800a0e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a0e8:	2181      	movs	r1, #129	; 0x81
 800a0ea:	4813      	ldr	r0, [pc, #76]	; (800a138 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a0ec:	f000 fc7b 	bl	800a9e6 <USBD_GetEpDesc>
 800a0f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	2210      	movs	r2, #16
 800a0fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d006      	beq.n	800a112 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	2200      	movs	r2, #0
 800a108:	711a      	strb	r2, [r3, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f042 0202 	orr.w	r2, r2, #2
 800a110:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d006      	beq.n	800a126 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	711a      	strb	r2, [r3, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f042 0202 	orr.w	r2, r2, #2
 800a124:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2243      	movs	r2, #67	; 0x43
 800a12a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a12c:	4b02      	ldr	r3, [pc, #8]	; (800a138 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3718      	adds	r7, #24
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20000054 	.word	0x20000054

0800a13c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a144:	2182      	movs	r1, #130	; 0x82
 800a146:	4818      	ldr	r0, [pc, #96]	; (800a1a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a148:	f000 fc4d 	bl	800a9e6 <USBD_GetEpDesc>
 800a14c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a14e:	2101      	movs	r1, #1
 800a150:	4815      	ldr	r0, [pc, #84]	; (800a1a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a152:	f000 fc48 	bl	800a9e6 <USBD_GetEpDesc>
 800a156:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a158:	2181      	movs	r1, #129	; 0x81
 800a15a:	4813      	ldr	r0, [pc, #76]	; (800a1a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a15c:	f000 fc43 	bl	800a9e6 <USBD_GetEpDesc>
 800a160:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	2210      	movs	r2, #16
 800a16c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d006      	beq.n	800a182 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	2200      	movs	r2, #0
 800a178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a17c:	711a      	strb	r2, [r3, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d006      	beq.n	800a196 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a190:	711a      	strb	r2, [r3, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2243      	movs	r2, #67	; 0x43
 800a19a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a19c:	4b02      	ldr	r3, [pc, #8]	; (800a1a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000054 	.word	0x20000054

0800a1ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	220a      	movs	r2, #10
 800a1b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a1ba:	4b03      	ldr	r3, [pc, #12]	; (800a1c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	20000010 	.word	0x20000010

0800a1cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e009      	b.n	800a1f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	33b0      	adds	r3, #176	; 0xb0
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	32b0      	adds	r2, #176	; 0xb0
 800a216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d101      	bne.n	800a226 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a222:	2303      	movs	r3, #3
 800a224:	e008      	b.n	800a238 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	68ba      	ldr	r2, [r7, #8]
 800a22a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	371c      	adds	r7, #28
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	32b0      	adds	r2, #176	; 0xb0
 800a258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a264:	2303      	movs	r3, #3
 800a266:	e004      	b.n	800a272 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3714      	adds	r7, #20
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
	...

0800a280 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	32b0      	adds	r2, #176	; 0xb0
 800a292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a296:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a298:	2301      	movs	r3, #1
 800a29a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e025      	b.n	800a2f2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d11f      	bne.n	800a2f0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a2b8:	4b10      	ldr	r3, [pc, #64]	; (800a2fc <USBD_CDC_TransmitPacket+0x7c>)
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	f003 020f 	and.w	r2, r3, #15
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4403      	add	r3, r0
 800a2d2:	3318      	adds	r3, #24
 800a2d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a2d6:	4b09      	ldr	r3, [pc, #36]	; (800a2fc <USBD_CDC_TransmitPacket+0x7c>)
 800a2d8:	7819      	ldrb	r1, [r3, #0]
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f001 ffe4 	bl	800c2b4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20000097 	.word	0x20000097

0800a300 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	32b0      	adds	r2, #176	; 0xb0
 800a312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a316:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	32b0      	adds	r2, #176	; 0xb0
 800a322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e018      	b.n	800a360 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	7c1b      	ldrb	r3, [r3, #16]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10a      	bne.n	800a34c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a336:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <USBD_CDC_ReceivePacket+0x68>)
 800a338:	7819      	ldrb	r1, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a340:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f001 ffed 	bl	800c324 <USBD_LL_PrepareReceive>
 800a34a:	e008      	b.n	800a35e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a34c:	4b06      	ldr	r3, [pc, #24]	; (800a368 <USBD_CDC_ReceivePacket+0x68>)
 800a34e:	7819      	ldrb	r1, [r3, #0]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a356:	2340      	movs	r3, #64	; 0x40
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f001 ffe3 	bl	800c324 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	20000098 	.word	0x20000098

0800a36c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	4613      	mov	r3, r2
 800a378:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d101      	bne.n	800a384 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a380:	2303      	movs	r3, #3
 800a382:	e01f      	b.n	800a3c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2200      	movs	r2, #0
 800a398:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	79fa      	ldrb	r2, [r7, #7]
 800a3b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f001 fda3 	bl	800bf04 <USBD_LL_Init>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3718      	adds	r7, #24
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e025      	b.n	800a430 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	32ae      	adds	r2, #174	; 0xae
 800a3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00f      	beq.n	800a420 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	32ae      	adds	r2, #174	; 0xae
 800a40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	f107 020e 	add.w	r2, r7, #14
 800a414:	4610      	mov	r0, r2
 800a416:	4798      	blx	r3
 800a418:	4602      	mov	r2, r0
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a426:	1c5a      	adds	r2, r3, #1
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f001 fdc1 	bl	800bfc8 <USBD_LL_Start>
 800a446:	4603      	mov	r3, r0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a458:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b084      	sub	sp, #16
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	460b      	mov	r3, r1
 800a470:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a472:	2300      	movs	r3, #0
 800a474:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d009      	beq.n	800a494 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	78fa      	ldrb	r2, [r7, #3]
 800a48a:	4611      	mov	r1, r2
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	4798      	blx	r3
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a494:	7bfb      	ldrb	r3, [r7, #15]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	78fa      	ldrb	r2, [r7, #3]
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	4798      	blx	r3
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f001 f8a6 	bl	800b636 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a506:	f003 031f 	and.w	r3, r3, #31
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d01a      	beq.n	800a544 <USBD_LL_SetupStage+0x72>
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d822      	bhi.n	800a558 <USBD_LL_SetupStage+0x86>
 800a512:	2b00      	cmp	r3, #0
 800a514:	d002      	beq.n	800a51c <USBD_LL_SetupStage+0x4a>
 800a516:	2b01      	cmp	r3, #1
 800a518:	d00a      	beq.n	800a530 <USBD_LL_SetupStage+0x5e>
 800a51a:	e01d      	b.n	800a558 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fad3 	bl	800aad0 <USBD_StdDevReq>
 800a52a:	4603      	mov	r3, r0
 800a52c:	73fb      	strb	r3, [r7, #15]
      break;
 800a52e:	e020      	b.n	800a572 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fb3b 	bl	800abb4 <USBD_StdItfReq>
 800a53e:	4603      	mov	r3, r0
 800a540:	73fb      	strb	r3, [r7, #15]
      break;
 800a542:	e016      	b.n	800a572 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a54a:	4619      	mov	r1, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fb9d 	bl	800ac8c <USBD_StdEPReq>
 800a552:	4603      	mov	r3, r0
 800a554:	73fb      	strb	r3, [r7, #15]
      break;
 800a556:	e00c      	b.n	800a572 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a55e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a562:	b2db      	uxtb	r3, r3
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f001 fdd4 	bl	800c114 <USBD_LL_StallEP>
 800a56c:	4603      	mov	r3, r0
 800a56e:	73fb      	strb	r3, [r7, #15]
      break;
 800a570:	bf00      	nop
  }

  return ret;
 800a572:	7bfb      	ldrb	r3, [r7, #15]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	460b      	mov	r3, r1
 800a586:	607a      	str	r2, [r7, #4]
 800a588:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a58e:	7afb      	ldrb	r3, [r7, #11]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d16e      	bne.n	800a672 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a59a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	f040 8098 	bne.w	800a6d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d913      	bls.n	800a5dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	689a      	ldr	r2, [r3, #8]
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	1ad2      	subs	r2, r2, r3
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	68da      	ldr	r2, [r3, #12]
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	bf28      	it	cs
 800a5ce:	4613      	movcs	r3, r2
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	6879      	ldr	r1, [r7, #4]
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f001 f922 	bl	800b81e <USBD_CtlContinueRx>
 800a5da:	e07d      	b.n	800a6d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5e2:	f003 031f 	and.w	r3, r3, #31
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d014      	beq.n	800a614 <USBD_LL_DataOutStage+0x98>
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d81d      	bhi.n	800a62a <USBD_LL_DataOutStage+0xae>
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d002      	beq.n	800a5f8 <USBD_LL_DataOutStage+0x7c>
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d003      	beq.n	800a5fe <USBD_LL_DataOutStage+0x82>
 800a5f6:	e018      	b.n	800a62a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	75bb      	strb	r3, [r7, #22]
            break;
 800a5fc:	e018      	b.n	800a630 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a604:	b2db      	uxtb	r3, r3
 800a606:	4619      	mov	r1, r3
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f000 f9d2 	bl	800a9b2 <USBD_CoreFindIF>
 800a60e:	4603      	mov	r3, r0
 800a610:	75bb      	strb	r3, [r7, #22]
            break;
 800a612:	e00d      	b.n	800a630 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	4619      	mov	r1, r3
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 f9d4 	bl	800a9cc <USBD_CoreFindEP>
 800a624:	4603      	mov	r3, r0
 800a626:	75bb      	strb	r3, [r7, #22]
            break;
 800a628:	e002      	b.n	800a630 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a62a:	2300      	movs	r3, #0
 800a62c:	75bb      	strb	r3, [r7, #22]
            break;
 800a62e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a630:	7dbb      	ldrb	r3, [r7, #22]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d119      	bne.n	800a66a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b03      	cmp	r3, #3
 800a640:	d113      	bne.n	800a66a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a642:	7dba      	ldrb	r2, [r7, #22]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	32ae      	adds	r2, #174	; 0xae
 800a648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00b      	beq.n	800a66a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a652:	7dba      	ldrb	r2, [r7, #22]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a65a:	7dba      	ldrb	r2, [r7, #22]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	32ae      	adds	r2, #174	; 0xae
 800a660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f001 f8e8 	bl	800b840 <USBD_CtlSendStatus>
 800a670:	e032      	b.n	800a6d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a672:	7afb      	ldrb	r3, [r7, #11]
 800a674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	4619      	mov	r1, r3
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 f9a5 	bl	800a9cc <USBD_CoreFindEP>
 800a682:	4603      	mov	r3, r0
 800a684:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a686:	7dbb      	ldrb	r3, [r7, #22]
 800a688:	2bff      	cmp	r3, #255	; 0xff
 800a68a:	d025      	beq.n	800a6d8 <USBD_LL_DataOutStage+0x15c>
 800a68c:	7dbb      	ldrb	r3, [r7, #22]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d122      	bne.n	800a6d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d117      	bne.n	800a6ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a69e:	7dba      	ldrb	r2, [r7, #22]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	32ae      	adds	r2, #174	; 0xae
 800a6a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00f      	beq.n	800a6ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a6ae:	7dba      	ldrb	r2, [r7, #22]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a6b6:	7dba      	ldrb	r2, [r7, #22]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	32ae      	adds	r2, #174	; 0xae
 800a6bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	7afa      	ldrb	r2, [r7, #11]
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	4798      	blx	r3
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
 800a6d6:	e000      	b.n	800a6da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3718      	adds	r7, #24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b086      	sub	sp, #24
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	607a      	str	r2, [r7, #4]
 800a6ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a6f0:	7afb      	ldrb	r3, [r7, #11]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d16f      	bne.n	800a7d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3314      	adds	r3, #20
 800a6fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a702:	2b02      	cmp	r3, #2
 800a704:	d15a      	bne.n	800a7bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	689a      	ldr	r2, [r3, #8]
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d914      	bls.n	800a73c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	689a      	ldr	r2, [r3, #8]
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	1ad2      	subs	r2, r2, r3
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	461a      	mov	r2, r3
 800a726:	6879      	ldr	r1, [r7, #4]
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f001 f84a 	bl	800b7c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a72e:	2300      	movs	r3, #0
 800a730:	2200      	movs	r2, #0
 800a732:	2100      	movs	r1, #0
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f001 fdf5 	bl	800c324 <USBD_LL_PrepareReceive>
 800a73a:	e03f      	b.n	800a7bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	68da      	ldr	r2, [r3, #12]
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	429a      	cmp	r2, r3
 800a746:	d11c      	bne.n	800a782 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a750:	429a      	cmp	r2, r3
 800a752:	d316      	bcc.n	800a782 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a75e:	429a      	cmp	r2, r3
 800a760:	d20f      	bcs.n	800a782 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a762:	2200      	movs	r2, #0
 800a764:	2100      	movs	r1, #0
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f001 f82b 	bl	800b7c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a774:	2300      	movs	r3, #0
 800a776:	2200      	movs	r2, #0
 800a778:	2100      	movs	r1, #0
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f001 fdd2 	bl	800c324 <USBD_LL_PrepareReceive>
 800a780:	e01c      	b.n	800a7bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d10f      	bne.n	800a7ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d009      	beq.n	800a7ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7ae:	2180      	movs	r1, #128	; 0x80
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f001 fcaf 	bl	800c114 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f001 f855 	bl	800b866 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d03a      	beq.n	800a83c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f7ff fe42 	bl	800a450 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a7d4:	e032      	b.n	800a83c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a7d6:	7afb      	ldrb	r3, [r7, #11]
 800a7d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	4619      	mov	r1, r3
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 f8f3 	bl	800a9cc <USBD_CoreFindEP>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	2bff      	cmp	r3, #255	; 0xff
 800a7ee:	d025      	beq.n	800a83c <USBD_LL_DataInStage+0x15a>
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d122      	bne.n	800a83c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b03      	cmp	r3, #3
 800a800:	d11c      	bne.n	800a83c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a802:	7dfa      	ldrb	r2, [r7, #23]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	32ae      	adds	r2, #174	; 0xae
 800a808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d014      	beq.n	800a83c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a812:	7dfa      	ldrb	r2, [r7, #23]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a81a:	7dfa      	ldrb	r2, [r7, #23]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	32ae      	adds	r2, #174	; 0xae
 800a820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	7afa      	ldrb	r2, [r7, #11]
 800a828:	4611      	mov	r1, r2
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	4798      	blx	r3
 800a82e:	4603      	mov	r3, r0
 800a830:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a832:	7dbb      	ldrb	r3, [r7, #22]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a838:	7dbb      	ldrb	r3, [r7, #22]
 800a83a:	e000      	b.n	800a83e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3718      	adds	r7, #24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b084      	sub	sp, #16
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d014      	beq.n	800a8ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00e      	beq.n	800a8ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	6852      	ldr	r2, [r2, #4]
 800a89a:	b2d2      	uxtb	r2, r2
 800a89c:	4611      	mov	r1, r2
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	4798      	blx	r3
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d001      	beq.n	800a8ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8ac:	2340      	movs	r3, #64	; 0x40
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f001 fbba 	bl	800c02c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2240      	movs	r2, #64	; 0x40
 800a8c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8c8:	2340      	movs	r3, #64	; 0x40
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	2180      	movs	r1, #128	; 0x80
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f001 fbac 	bl	800c02c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2240      	movs	r2, #64	; 0x40
 800a8de:	621a      	str	r2, [r3, #32]

  return ret;
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b083      	sub	sp, #12
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	78fa      	ldrb	r2, [r7, #3]
 800a8fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b04      	cmp	r3, #4
 800a91c:	d006      	beq.n	800a92c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a924:	b2da      	uxtb	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2204      	movs	r2, #4
 800a930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a942:	b480      	push	{r7}
 800a944:	b083      	sub	sp, #12
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b04      	cmp	r3, #4
 800a954:	d106      	bne.n	800a964 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	370c      	adds	r7, #12
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a980:	b2db      	uxtb	r3, r3
 800a982:	2b03      	cmp	r3, #3
 800a984:	d110      	bne.n	800a9a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00b      	beq.n	800a9a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d005      	beq.n	800a9a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a9d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b086      	sub	sp, #24
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	885b      	ldrh	r3, [r3, #2]
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d920      	bls.n	800aa50 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aa16:	e013      	b.n	800aa40 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aa18:	f107 030a 	add.w	r3, r7, #10
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6978      	ldr	r0, [r7, #20]
 800aa20:	f000 f81b 	bl	800aa5a <USBD_GetNextDesc>
 800aa24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	785b      	ldrb	r3, [r3, #1]
 800aa2a:	2b05      	cmp	r3, #5
 800aa2c:	d108      	bne.n	800aa40 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	789b      	ldrb	r3, [r3, #2]
 800aa36:	78fa      	ldrb	r2, [r7, #3]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d008      	beq.n	800aa4e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	885b      	ldrh	r3, [r3, #2]
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	897b      	ldrh	r3, [r7, #10]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d8e5      	bhi.n	800aa18 <USBD_GetEpDesc+0x32>
 800aa4c:	e000      	b.n	800aa50 <USBD_GetEpDesc+0x6a>
          break;
 800aa4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa50:	693b      	ldr	r3, [r7, #16]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3718      	adds	r7, #24
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	881a      	ldrh	r2, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	4413      	add	r3, r2
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4413      	add	r3, r2
 800aa84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa86:	68fb      	ldr	r3, [r7, #12]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3714      	adds	r7, #20
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b087      	sub	sp, #28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aab2:	8a3b      	ldrh	r3, [r7, #16]
 800aab4:	021b      	lsls	r3, r3, #8
 800aab6:	b21a      	sxth	r2, r3
 800aab8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	b21b      	sxth	r3, r3
 800aac0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aac2:	89fb      	ldrh	r3, [r7, #14]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	371c      	adds	r7, #28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aae6:	2b40      	cmp	r3, #64	; 0x40
 800aae8:	d005      	beq.n	800aaf6 <USBD_StdDevReq+0x26>
 800aaea:	2b40      	cmp	r3, #64	; 0x40
 800aaec:	d857      	bhi.n	800ab9e <USBD_StdDevReq+0xce>
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00f      	beq.n	800ab12 <USBD_StdDevReq+0x42>
 800aaf2:	2b20      	cmp	r3, #32
 800aaf4:	d153      	bne.n	800ab9e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	32ae      	adds	r2, #174	; 0xae
 800ab00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	4798      	blx	r3
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab10:	e04a      	b.n	800aba8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	785b      	ldrb	r3, [r3, #1]
 800ab16:	2b09      	cmp	r3, #9
 800ab18:	d83b      	bhi.n	800ab92 <USBD_StdDevReq+0xc2>
 800ab1a:	a201      	add	r2, pc, #4	; (adr r2, 800ab20 <USBD_StdDevReq+0x50>)
 800ab1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab20:	0800ab75 	.word	0x0800ab75
 800ab24:	0800ab89 	.word	0x0800ab89
 800ab28:	0800ab93 	.word	0x0800ab93
 800ab2c:	0800ab7f 	.word	0x0800ab7f
 800ab30:	0800ab93 	.word	0x0800ab93
 800ab34:	0800ab53 	.word	0x0800ab53
 800ab38:	0800ab49 	.word	0x0800ab49
 800ab3c:	0800ab93 	.word	0x0800ab93
 800ab40:	0800ab6b 	.word	0x0800ab6b
 800ab44:	0800ab5d 	.word	0x0800ab5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fa3c 	bl	800afc8 <USBD_GetDescriptor>
          break;
 800ab50:	e024      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fbcb 	bl	800b2f0 <USBD_SetAddress>
          break;
 800ab5a:	e01f      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fc0a 	bl	800b378 <USBD_SetConfig>
 800ab64:	4603      	mov	r3, r0
 800ab66:	73fb      	strb	r3, [r7, #15]
          break;
 800ab68:	e018      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fcad 	bl	800b4cc <USBD_GetConfig>
          break;
 800ab72:	e013      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fcde 	bl	800b538 <USBD_GetStatus>
          break;
 800ab7c:	e00e      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fd0d 	bl	800b5a0 <USBD_SetFeature>
          break;
 800ab86:	e009      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fd31 	bl	800b5f2 <USBD_ClrFeature>
          break;
 800ab90:	e004      	b.n	800ab9c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ab92:	6839      	ldr	r1, [r7, #0]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fd88 	bl	800b6aa <USBD_CtlError>
          break;
 800ab9a:	bf00      	nop
      }
      break;
 800ab9c:	e004      	b.n	800aba8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 fd82 	bl	800b6aa <USBD_CtlError>
      break;
 800aba6:	bf00      	nop
  }

  return ret;
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop

0800abb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abca:	2b40      	cmp	r3, #64	; 0x40
 800abcc:	d005      	beq.n	800abda <USBD_StdItfReq+0x26>
 800abce:	2b40      	cmp	r3, #64	; 0x40
 800abd0:	d852      	bhi.n	800ac78 <USBD_StdItfReq+0xc4>
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <USBD_StdItfReq+0x26>
 800abd6:	2b20      	cmp	r3, #32
 800abd8:	d14e      	bne.n	800ac78 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	3b01      	subs	r3, #1
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d840      	bhi.n	800ac6a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	889b      	ldrh	r3, [r3, #4]
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d836      	bhi.n	800ac60 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	889b      	ldrh	r3, [r3, #4]
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff fed9 	bl	800a9b2 <USBD_CoreFindIF>
 800ac00:	4603      	mov	r3, r0
 800ac02:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
 800ac06:	2bff      	cmp	r3, #255	; 0xff
 800ac08:	d01d      	beq.n	800ac46 <USBD_StdItfReq+0x92>
 800ac0a:	7bbb      	ldrb	r3, [r7, #14]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d11a      	bne.n	800ac46 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ac10:	7bba      	ldrb	r2, [r7, #14]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	32ae      	adds	r2, #174	; 0xae
 800ac16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00f      	beq.n	800ac40 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ac20:	7bba      	ldrb	r2, [r7, #14]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac28:	7bba      	ldrb	r2, [r7, #14]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	32ae      	adds	r2, #174	; 0xae
 800ac2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac3e:	e004      	b.n	800ac4a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ac40:	2303      	movs	r3, #3
 800ac42:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac44:	e001      	b.n	800ac4a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ac46:	2303      	movs	r3, #3
 800ac48:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	88db      	ldrh	r3, [r3, #6]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d110      	bne.n	800ac74 <USBD_StdItfReq+0xc0>
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10d      	bne.n	800ac74 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fdf1 	bl	800b840 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac5e:	e009      	b.n	800ac74 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fd21 	bl	800b6aa <USBD_CtlError>
          break;
 800ac68:	e004      	b.n	800ac74 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ac6a:	6839      	ldr	r1, [r7, #0]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fd1c 	bl	800b6aa <USBD_CtlError>
          break;
 800ac72:	e000      	b.n	800ac76 <USBD_StdItfReq+0xc2>
          break;
 800ac74:	bf00      	nop
      }
      break;
 800ac76:	e004      	b.n	800ac82 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fd15 	bl	800b6aa <USBD_CtlError>
      break;
 800ac80:	bf00      	nop
  }

  return ret;
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	889b      	ldrh	r3, [r3, #4]
 800ac9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aca8:	2b40      	cmp	r3, #64	; 0x40
 800acaa:	d007      	beq.n	800acbc <USBD_StdEPReq+0x30>
 800acac:	2b40      	cmp	r3, #64	; 0x40
 800acae:	f200 817f 	bhi.w	800afb0 <USBD_StdEPReq+0x324>
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d02a      	beq.n	800ad0c <USBD_StdEPReq+0x80>
 800acb6:	2b20      	cmp	r3, #32
 800acb8:	f040 817a 	bne.w	800afb0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800acbc:	7bbb      	ldrb	r3, [r7, #14]
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff fe83 	bl	800a9cc <USBD_CoreFindEP>
 800acc6:	4603      	mov	r3, r0
 800acc8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acca:	7b7b      	ldrb	r3, [r7, #13]
 800accc:	2bff      	cmp	r3, #255	; 0xff
 800acce:	f000 8174 	beq.w	800afba <USBD_StdEPReq+0x32e>
 800acd2:	7b7b      	ldrb	r3, [r7, #13]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f040 8170 	bne.w	800afba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800acda:	7b7a      	ldrb	r2, [r7, #13]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ace2:	7b7a      	ldrb	r2, [r7, #13]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	32ae      	adds	r2, #174	; 0xae
 800ace8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 8163 	beq.w	800afba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800acf4:	7b7a      	ldrb	r2, [r7, #13]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	32ae      	adds	r2, #174	; 0xae
 800acfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	4798      	blx	r3
 800ad06:	4603      	mov	r3, r0
 800ad08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad0a:	e156      	b.n	800afba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	785b      	ldrb	r3, [r3, #1]
 800ad10:	2b03      	cmp	r3, #3
 800ad12:	d008      	beq.n	800ad26 <USBD_StdEPReq+0x9a>
 800ad14:	2b03      	cmp	r3, #3
 800ad16:	f300 8145 	bgt.w	800afa4 <USBD_StdEPReq+0x318>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 809b 	beq.w	800ae56 <USBD_StdEPReq+0x1ca>
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d03c      	beq.n	800ad9e <USBD_StdEPReq+0x112>
 800ad24:	e13e      	b.n	800afa4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d002      	beq.n	800ad38 <USBD_StdEPReq+0xac>
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d016      	beq.n	800ad64 <USBD_StdEPReq+0xd8>
 800ad36:	e02c      	b.n	800ad92 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad38:	7bbb      	ldrb	r3, [r7, #14]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00d      	beq.n	800ad5a <USBD_StdEPReq+0xce>
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
 800ad40:	2b80      	cmp	r3, #128	; 0x80
 800ad42:	d00a      	beq.n	800ad5a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad44:	7bbb      	ldrb	r3, [r7, #14]
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f001 f9e3 	bl	800c114 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad4e:	2180      	movs	r1, #128	; 0x80
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f001 f9df 	bl	800c114 <USBD_LL_StallEP>
 800ad56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad58:	e020      	b.n	800ad9c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fca4 	bl	800b6aa <USBD_CtlError>
              break;
 800ad62:	e01b      	b.n	800ad9c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	885b      	ldrh	r3, [r3, #2]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10e      	bne.n	800ad8a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00b      	beq.n	800ad8a <USBD_StdEPReq+0xfe>
 800ad72:	7bbb      	ldrb	r3, [r7, #14]
 800ad74:	2b80      	cmp	r3, #128	; 0x80
 800ad76:	d008      	beq.n	800ad8a <USBD_StdEPReq+0xfe>
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	88db      	ldrh	r3, [r3, #6]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d104      	bne.n	800ad8a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad80:	7bbb      	ldrb	r3, [r7, #14]
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f001 f9c5 	bl	800c114 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fd58 	bl	800b840 <USBD_CtlSendStatus>

              break;
 800ad90:	e004      	b.n	800ad9c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fc88 	bl	800b6aa <USBD_CtlError>
              break;
 800ad9a:	bf00      	nop
          }
          break;
 800ad9c:	e107      	b.n	800afae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d002      	beq.n	800adb0 <USBD_StdEPReq+0x124>
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d016      	beq.n	800addc <USBD_StdEPReq+0x150>
 800adae:	e04b      	b.n	800ae48 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00d      	beq.n	800add2 <USBD_StdEPReq+0x146>
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
 800adb8:	2b80      	cmp	r3, #128	; 0x80
 800adba:	d00a      	beq.n	800add2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
 800adbe:	4619      	mov	r1, r3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f001 f9a7 	bl	800c114 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800adc6:	2180      	movs	r1, #128	; 0x80
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f001 f9a3 	bl	800c114 <USBD_LL_StallEP>
 800adce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800add0:	e040      	b.n	800ae54 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fc68 	bl	800b6aa <USBD_CtlError>
              break;
 800adda:	e03b      	b.n	800ae54 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	885b      	ldrh	r3, [r3, #2]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d136      	bne.n	800ae52 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ade4:	7bbb      	ldrb	r3, [r7, #14]
 800ade6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adea:	2b00      	cmp	r3, #0
 800adec:	d004      	beq.n	800adf8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800adee:	7bbb      	ldrb	r3, [r7, #14]
 800adf0:	4619      	mov	r1, r3
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f001 f9c4 	bl	800c180 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fd21 	bl	800b840 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800adfe:	7bbb      	ldrb	r3, [r7, #14]
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff fde2 	bl	800a9cc <USBD_CoreFindEP>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae0c:	7b7b      	ldrb	r3, [r7, #13]
 800ae0e:	2bff      	cmp	r3, #255	; 0xff
 800ae10:	d01f      	beq.n	800ae52 <USBD_StdEPReq+0x1c6>
 800ae12:	7b7b      	ldrb	r3, [r7, #13]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d11c      	bne.n	800ae52 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ae18:	7b7a      	ldrb	r2, [r7, #13]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ae20:	7b7a      	ldrb	r2, [r7, #13]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	32ae      	adds	r2, #174	; 0xae
 800ae26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d010      	beq.n	800ae52 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae30:	7b7a      	ldrb	r2, [r7, #13]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	32ae      	adds	r2, #174	; 0xae
 800ae36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	4798      	blx	r3
 800ae42:	4603      	mov	r3, r0
 800ae44:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ae46:	e004      	b.n	800ae52 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fc2d 	bl	800b6aa <USBD_CtlError>
              break;
 800ae50:	e000      	b.n	800ae54 <USBD_StdEPReq+0x1c8>
              break;
 800ae52:	bf00      	nop
          }
          break;
 800ae54:	e0ab      	b.n	800afae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d002      	beq.n	800ae68 <USBD_StdEPReq+0x1dc>
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d032      	beq.n	800aecc <USBD_StdEPReq+0x240>
 800ae66:	e097      	b.n	800af98 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae68:	7bbb      	ldrb	r3, [r7, #14]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d007      	beq.n	800ae7e <USBD_StdEPReq+0x1f2>
 800ae6e:	7bbb      	ldrb	r3, [r7, #14]
 800ae70:	2b80      	cmp	r3, #128	; 0x80
 800ae72:	d004      	beq.n	800ae7e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fc17 	bl	800b6aa <USBD_CtlError>
                break;
 800ae7c:	e091      	b.n	800afa2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	da0b      	bge.n	800ae9e <USBD_StdEPReq+0x212>
 800ae86:	7bbb      	ldrb	r3, [r7, #14]
 800ae88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	3310      	adds	r3, #16
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	4413      	add	r3, r2
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	e00b      	b.n	800aeb6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae9e:	7bbb      	ldrb	r3, [r7, #14]
 800aea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aea4:	4613      	mov	r3, r2
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	4413      	add	r3, r2
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2202      	movs	r2, #2
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fc61 	bl	800b78c <USBD_CtlSendData>
              break;
 800aeca:	e06a      	b.n	800afa2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	da11      	bge.n	800aef8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aed4:	7bbb      	ldrb	r3, [r7, #14]
 800aed6:	f003 020f 	and.w	r2, r3, #15
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	440b      	add	r3, r1
 800aee6:	3324      	adds	r3, #36	; 0x24
 800aee8:	881b      	ldrh	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d117      	bne.n	800af1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fbda 	bl	800b6aa <USBD_CtlError>
                  break;
 800aef6:	e054      	b.n	800afa2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	f003 020f 	and.w	r2, r3, #15
 800aefe:	6879      	ldr	r1, [r7, #4]
 800af00:	4613      	mov	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	440b      	add	r3, r1
 800af0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d104      	bne.n	800af1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fbc7 	bl	800b6aa <USBD_CtlError>
                  break;
 800af1c:	e041      	b.n	800afa2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af22:	2b00      	cmp	r3, #0
 800af24:	da0b      	bge.n	800af3e <USBD_StdEPReq+0x2b2>
 800af26:	7bbb      	ldrb	r3, [r7, #14]
 800af28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af2c:	4613      	mov	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	3310      	adds	r3, #16
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	4413      	add	r3, r2
 800af3a:	3304      	adds	r3, #4
 800af3c:	e00b      	b.n	800af56 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af3e:	7bbb      	ldrb	r3, [r7, #14]
 800af40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af44:	4613      	mov	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	4413      	add	r3, r2
 800af54:	3304      	adds	r3, #4
 800af56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d002      	beq.n	800af64 <USBD_StdEPReq+0x2d8>
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
 800af60:	2b80      	cmp	r3, #128	; 0x80
 800af62:	d103      	bne.n	800af6c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	2200      	movs	r2, #0
 800af68:	601a      	str	r2, [r3, #0]
 800af6a:	e00e      	b.n	800af8a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f001 f93b 	bl	800c1ec <USBD_LL_IsStallEP>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d003      	beq.n	800af84 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	2201      	movs	r2, #1
 800af80:	601a      	str	r2, [r3, #0]
 800af82:	e002      	b.n	800af8a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2202      	movs	r2, #2
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fbfb 	bl	800b78c <USBD_CtlSendData>
              break;
 800af96:	e004      	b.n	800afa2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fb85 	bl	800b6aa <USBD_CtlError>
              break;
 800afa0:	bf00      	nop
          }
          break;
 800afa2:	e004      	b.n	800afae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fb7f 	bl	800b6aa <USBD_CtlError>
          break;
 800afac:	bf00      	nop
      }
      break;
 800afae:	e005      	b.n	800afbc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fb79 	bl	800b6aa <USBD_CtlError>
      break;
 800afb8:	e000      	b.n	800afbc <USBD_StdEPReq+0x330>
      break;
 800afba:	bf00      	nop
  }

  return ret;
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
	...

0800afc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800afd2:	2300      	movs	r3, #0
 800afd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800afda:	2300      	movs	r3, #0
 800afdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	885b      	ldrh	r3, [r3, #2]
 800afe2:	0a1b      	lsrs	r3, r3, #8
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	3b01      	subs	r3, #1
 800afe8:	2b0e      	cmp	r3, #14
 800afea:	f200 8152 	bhi.w	800b292 <USBD_GetDescriptor+0x2ca>
 800afee:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <USBD_GetDescriptor+0x2c>)
 800aff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff4:	0800b065 	.word	0x0800b065
 800aff8:	0800b07d 	.word	0x0800b07d
 800affc:	0800b0bd 	.word	0x0800b0bd
 800b000:	0800b293 	.word	0x0800b293
 800b004:	0800b293 	.word	0x0800b293
 800b008:	0800b233 	.word	0x0800b233
 800b00c:	0800b25f 	.word	0x0800b25f
 800b010:	0800b293 	.word	0x0800b293
 800b014:	0800b293 	.word	0x0800b293
 800b018:	0800b293 	.word	0x0800b293
 800b01c:	0800b293 	.word	0x0800b293
 800b020:	0800b293 	.word	0x0800b293
 800b024:	0800b293 	.word	0x0800b293
 800b028:	0800b293 	.word	0x0800b293
 800b02c:	0800b031 	.word	0x0800b031
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b036:	69db      	ldr	r3, [r3, #28]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00b      	beq.n	800b054 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	7c12      	ldrb	r2, [r2, #16]
 800b048:	f107 0108 	add.w	r1, r7, #8
 800b04c:	4610      	mov	r0, r2
 800b04e:	4798      	blx	r3
 800b050:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b052:	e126      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fb27 	bl	800b6aa <USBD_CtlError>
        err++;
 800b05c:	7afb      	ldrb	r3, [r7, #11]
 800b05e:	3301      	adds	r3, #1
 800b060:	72fb      	strb	r3, [r7, #11]
      break;
 800b062:	e11e      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	7c12      	ldrb	r2, [r2, #16]
 800b070:	f107 0108 	add.w	r1, r7, #8
 800b074:	4610      	mov	r0, r2
 800b076:	4798      	blx	r3
 800b078:	60f8      	str	r0, [r7, #12]
      break;
 800b07a:	e112      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	7c1b      	ldrb	r3, [r3, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10d      	bne.n	800b0a0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08c:	f107 0208 	add.w	r2, r7, #8
 800b090:	4610      	mov	r0, r2
 800b092:	4798      	blx	r3
 800b094:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3301      	adds	r3, #1
 800b09a:	2202      	movs	r2, #2
 800b09c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b09e:	e100      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a8:	f107 0208 	add.w	r2, r7, #8
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	4798      	blx	r3
 800b0b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	701a      	strb	r2, [r3, #0]
      break;
 800b0ba:	e0f2      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	885b      	ldrh	r3, [r3, #2]
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b05      	cmp	r3, #5
 800b0c4:	f200 80ac 	bhi.w	800b220 <USBD_GetDescriptor+0x258>
 800b0c8:	a201      	add	r2, pc, #4	; (adr r2, 800b0d0 <USBD_GetDescriptor+0x108>)
 800b0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ce:	bf00      	nop
 800b0d0:	0800b0e9 	.word	0x0800b0e9
 800b0d4:	0800b11d 	.word	0x0800b11d
 800b0d8:	0800b151 	.word	0x0800b151
 800b0dc:	0800b185 	.word	0x0800b185
 800b0e0:	0800b1b9 	.word	0x0800b1b9
 800b0e4:	0800b1ed 	.word	0x0800b1ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00b      	beq.n	800b10c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	7c12      	ldrb	r2, [r2, #16]
 800b100:	f107 0108 	add.w	r1, r7, #8
 800b104:	4610      	mov	r0, r2
 800b106:	4798      	blx	r3
 800b108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b10a:	e091      	b.n	800b230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 facb 	bl	800b6aa <USBD_CtlError>
            err++;
 800b114:	7afb      	ldrb	r3, [r7, #11]
 800b116:	3301      	adds	r3, #1
 800b118:	72fb      	strb	r3, [r7, #11]
          break;
 800b11a:	e089      	b.n	800b230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00b      	beq.n	800b140 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	7c12      	ldrb	r2, [r2, #16]
 800b134:	f107 0108 	add.w	r1, r7, #8
 800b138:	4610      	mov	r0, r2
 800b13a:	4798      	blx	r3
 800b13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b13e:	e077      	b.n	800b230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 fab1 	bl	800b6aa <USBD_CtlError>
            err++;
 800b148:	7afb      	ldrb	r3, [r7, #11]
 800b14a:	3301      	adds	r3, #1
 800b14c:	72fb      	strb	r3, [r7, #11]
          break;
 800b14e:	e06f      	b.n	800b230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00b      	beq.n	800b174 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	7c12      	ldrb	r2, [r2, #16]
 800b168:	f107 0108 	add.w	r1, r7, #8
 800b16c:	4610      	mov	r0, r2
 800b16e:	4798      	blx	r3
 800b170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b172:	e05d      	b.n	800b230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fa97 	bl	800b6aa <USBD_CtlError>
            err++;
 800b17c:	7afb      	ldrb	r3, [r7, #11]
 800b17e:	3301      	adds	r3, #1
 800b180:	72fb      	strb	r3, [r7, #11]
          break;
 800b182:	e055      	b.n	800b230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00b      	beq.n	800b1a8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	7c12      	ldrb	r2, [r2, #16]
 800b19c:	f107 0108 	add.w	r1, r7, #8
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	4798      	blx	r3
 800b1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1a6:	e043      	b.n	800b230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 fa7d 	bl	800b6aa <USBD_CtlError>
            err++;
 800b1b0:	7afb      	ldrb	r3, [r7, #11]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1b6:	e03b      	b.n	800b230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1be:	695b      	ldr	r3, [r3, #20]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00b      	beq.n	800b1dc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ca:	695b      	ldr	r3, [r3, #20]
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	7c12      	ldrb	r2, [r2, #16]
 800b1d0:	f107 0108 	add.w	r1, r7, #8
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	4798      	blx	r3
 800b1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1da:	e029      	b.n	800b230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fa63 	bl	800b6aa <USBD_CtlError>
            err++;
 800b1e4:	7afb      	ldrb	r3, [r7, #11]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ea:	e021      	b.n	800b230 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00b      	beq.n	800b210 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	7c12      	ldrb	r2, [r2, #16]
 800b204:	f107 0108 	add.w	r1, r7, #8
 800b208:	4610      	mov	r0, r2
 800b20a:	4798      	blx	r3
 800b20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b20e:	e00f      	b.n	800b230 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa49 	bl	800b6aa <USBD_CtlError>
            err++;
 800b218:	7afb      	ldrb	r3, [r7, #11]
 800b21a:	3301      	adds	r3, #1
 800b21c:	72fb      	strb	r3, [r7, #11]
          break;
 800b21e:	e007      	b.n	800b230 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fa41 	bl	800b6aa <USBD_CtlError>
          err++;
 800b228:	7afb      	ldrb	r3, [r7, #11]
 800b22a:	3301      	adds	r3, #1
 800b22c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b22e:	bf00      	nop
      }
      break;
 800b230:	e037      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	7c1b      	ldrb	r3, [r3, #16]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d109      	bne.n	800b24e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b242:	f107 0208 	add.w	r2, r7, #8
 800b246:	4610      	mov	r0, r2
 800b248:	4798      	blx	r3
 800b24a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b24c:	e029      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fa2a 	bl	800b6aa <USBD_CtlError>
        err++;
 800b256:	7afb      	ldrb	r3, [r7, #11]
 800b258:	3301      	adds	r3, #1
 800b25a:	72fb      	strb	r3, [r7, #11]
      break;
 800b25c:	e021      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	7c1b      	ldrb	r3, [r3, #16]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10d      	bne.n	800b282 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26e:	f107 0208 	add.w	r2, r7, #8
 800b272:	4610      	mov	r0, r2
 800b274:	4798      	blx	r3
 800b276:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	3301      	adds	r3, #1
 800b27c:	2207      	movs	r2, #7
 800b27e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b280:	e00f      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fa10 	bl	800b6aa <USBD_CtlError>
        err++;
 800b28a:	7afb      	ldrb	r3, [r7, #11]
 800b28c:	3301      	adds	r3, #1
 800b28e:	72fb      	strb	r3, [r7, #11]
      break;
 800b290:	e007      	b.n	800b2a2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b292:	6839      	ldr	r1, [r7, #0]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fa08 	bl	800b6aa <USBD_CtlError>
      err++;
 800b29a:	7afb      	ldrb	r3, [r7, #11]
 800b29c:	3301      	adds	r3, #1
 800b29e:	72fb      	strb	r3, [r7, #11]
      break;
 800b2a0:	bf00      	nop
  }

  if (err != 0U)
 800b2a2:	7afb      	ldrb	r3, [r7, #11]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d11e      	bne.n	800b2e6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	88db      	ldrh	r3, [r3, #6]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d016      	beq.n	800b2de <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b2b0:	893b      	ldrh	r3, [r7, #8]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00e      	beq.n	800b2d4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	88da      	ldrh	r2, [r3, #6]
 800b2ba:	893b      	ldrh	r3, [r7, #8]
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	bf28      	it	cs
 800b2c0:	4613      	movcs	r3, r2
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2c6:	893b      	ldrh	r3, [r7, #8]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	68f9      	ldr	r1, [r7, #12]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 fa5d 	bl	800b78c <USBD_CtlSendData>
 800b2d2:	e009      	b.n	800b2e8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f9e7 	bl	800b6aa <USBD_CtlError>
 800b2dc:	e004      	b.n	800b2e8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 faae 	bl	800b840 <USBD_CtlSendStatus>
 800b2e4:	e000      	b.n	800b2e8 <USBD_GetDescriptor+0x320>
    return;
 800b2e6:	bf00      	nop
  }
}
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop

0800b2f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	889b      	ldrh	r3, [r3, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d131      	bne.n	800b366 <USBD_SetAddress+0x76>
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	88db      	ldrh	r3, [r3, #6]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d12d      	bne.n	800b366 <USBD_SetAddress+0x76>
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	885b      	ldrh	r3, [r3, #2]
 800b30e:	2b7f      	cmp	r3, #127	; 0x7f
 800b310:	d829      	bhi.n	800b366 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	885b      	ldrh	r3, [r3, #2]
 800b316:	b2db      	uxtb	r3, r3
 800b318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b31c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b03      	cmp	r3, #3
 800b328:	d104      	bne.n	800b334 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f9bc 	bl	800b6aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b332:	e01d      	b.n	800b370 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	7bfa      	ldrb	r2, [r7, #15]
 800b338:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
 800b33e:	4619      	mov	r1, r3
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 ff81 	bl	800c248 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fa7a 	bl	800b840 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d004      	beq.n	800b35c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2202      	movs	r2, #2
 800b356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b35a:	e009      	b.n	800b370 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b364:	e004      	b.n	800b370 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b366:	6839      	ldr	r1, [r7, #0]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f99e 	bl	800b6aa <USBD_CtlError>
  }
}
 800b36e:	bf00      	nop
 800b370:	bf00      	nop
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	885b      	ldrh	r3, [r3, #2]
 800b38a:	b2da      	uxtb	r2, r3
 800b38c:	4b4e      	ldr	r3, [pc, #312]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b38e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b390:	4b4d      	ldr	r3, [pc, #308]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d905      	bls.n	800b3a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b398:	6839      	ldr	r1, [r7, #0]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 f985 	bl	800b6aa <USBD_CtlError>
    return USBD_FAIL;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	e08c      	b.n	800b4be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d002      	beq.n	800b3b6 <USBD_SetConfig+0x3e>
 800b3b0:	2b03      	cmp	r3, #3
 800b3b2:	d029      	beq.n	800b408 <USBD_SetConfig+0x90>
 800b3b4:	e075      	b.n	800b4a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b3b6:	4b44      	ldr	r3, [pc, #272]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d020      	beq.n	800b400 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b3be:	4b42      	ldr	r3, [pc, #264]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3c8:	4b3f      	ldr	r3, [pc, #252]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7ff f849 	bl	800a466 <USBD_SetClassConfig>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d008      	beq.n	800b3f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f962 	bl	800b6aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2202      	movs	r2, #2
 800b3ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3ee:	e065      	b.n	800b4bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fa25 	bl	800b840 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2203      	movs	r2, #3
 800b3fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b3fe:	e05d      	b.n	800b4bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fa1d 	bl	800b840 <USBD_CtlSendStatus>
      break;
 800b406:	e059      	b.n	800b4bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b408:	4b2f      	ldr	r3, [pc, #188]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d112      	bne.n	800b436 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2202      	movs	r2, #2
 800b414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b418:	4b2b      	ldr	r3, [pc, #172]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	461a      	mov	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b422:	4b29      	ldr	r3, [pc, #164]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f7ff f838 	bl	800a49e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fa06 	bl	800b840 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b434:	e042      	b.n	800b4bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b436:	4b24      	ldr	r3, [pc, #144]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	461a      	mov	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	429a      	cmp	r2, r3
 800b442:	d02a      	beq.n	800b49a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7ff f826 	bl	800a49e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b452:	4b1d      	ldr	r3, [pc, #116]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	461a      	mov	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b45c:	4b1a      	ldr	r3, [pc, #104]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7fe ffff 	bl	800a466 <USBD_SetClassConfig>
 800b468:	4603      	mov	r3, r0
 800b46a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00f      	beq.n	800b492 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f918 	bl	800b6aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff f80b 	bl	800a49e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2202      	movs	r2, #2
 800b48c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b490:	e014      	b.n	800b4bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 f9d4 	bl	800b840 <USBD_CtlSendStatus>
      break;
 800b498:	e010      	b.n	800b4bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f9d0 	bl	800b840 <USBD_CtlSendStatus>
      break;
 800b4a0:	e00c      	b.n	800b4bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f900 	bl	800b6aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4aa:	4b07      	ldr	r3, [pc, #28]	; (800b4c8 <USBD_SetConfig+0x150>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7fe fff4 	bl	800a49e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b4b6:	2303      	movs	r3, #3
 800b4b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ba:	bf00      	nop
  }

  return ret;
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	2000068c 	.word	0x2000068c

0800b4cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	88db      	ldrh	r3, [r3, #6]
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d004      	beq.n	800b4e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f8e2 	bl	800b6aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b4e6:	e023      	b.n	800b530 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	dc02      	bgt.n	800b4fa <USBD_GetConfig+0x2e>
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	dc03      	bgt.n	800b500 <USBD_GetConfig+0x34>
 800b4f8:	e015      	b.n	800b526 <USBD_GetConfig+0x5a>
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d00b      	beq.n	800b516 <USBD_GetConfig+0x4a>
 800b4fe:	e012      	b.n	800b526 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	3308      	adds	r3, #8
 800b50a:	2201      	movs	r2, #1
 800b50c:	4619      	mov	r1, r3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f93c 	bl	800b78c <USBD_CtlSendData>
        break;
 800b514:	e00c      	b.n	800b530 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	3304      	adds	r3, #4
 800b51a:	2201      	movs	r2, #1
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f934 	bl	800b78c <USBD_CtlSendData>
        break;
 800b524:	e004      	b.n	800b530 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f8be 	bl	800b6aa <USBD_CtlError>
        break;
 800b52e:	bf00      	nop
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	3b01      	subs	r3, #1
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d81e      	bhi.n	800b58e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	88db      	ldrh	r3, [r3, #6]
 800b554:	2b02      	cmp	r3, #2
 800b556:	d004      	beq.n	800b562 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 f8a5 	bl	800b6aa <USBD_CtlError>
        break;
 800b560:	e01a      	b.n	800b598 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2201      	movs	r2, #1
 800b566:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d005      	beq.n	800b57e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	f043 0202 	orr.w	r2, r3, #2
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	330c      	adds	r3, #12
 800b582:	2202      	movs	r2, #2
 800b584:	4619      	mov	r1, r3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f900 	bl	800b78c <USBD_CtlSendData>
      break;
 800b58c:	e004      	b.n	800b598 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f88a 	bl	800b6aa <USBD_CtlError>
      break;
 800b596:	bf00      	nop
  }
}
 800b598:	bf00      	nop
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	885b      	ldrh	r3, [r3, #2]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d107      	bne.n	800b5c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f940 	bl	800b840 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b5c0:	e013      	b.n	800b5ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	885b      	ldrh	r3, [r3, #2]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d10b      	bne.n	800b5e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	889b      	ldrh	r3, [r3, #4]
 800b5ce:	0a1b      	lsrs	r3, r3, #8
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f930 	bl	800b840 <USBD_CtlSendStatus>
}
 800b5e0:	e003      	b.n	800b5ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f860 	bl	800b6aa <USBD_CtlError>
}
 800b5ea:	bf00      	nop
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b082      	sub	sp, #8
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b602:	b2db      	uxtb	r3, r3
 800b604:	3b01      	subs	r3, #1
 800b606:	2b02      	cmp	r3, #2
 800b608:	d80b      	bhi.n	800b622 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	885b      	ldrh	r3, [r3, #2]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d10c      	bne.n	800b62c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f910 	bl	800b840 <USBD_CtlSendStatus>
      }
      break;
 800b620:	e004      	b.n	800b62c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b622:	6839      	ldr	r1, [r7, #0]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f840 	bl	800b6aa <USBD_CtlError>
      break;
 800b62a:	e000      	b.n	800b62e <USBD_ClrFeature+0x3c>
      break;
 800b62c:	bf00      	nop
  }
}
 800b62e:	bf00      	nop
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b084      	sub	sp, #16
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
 800b63e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	781a      	ldrb	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	3301      	adds	r3, #1
 800b650:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	781a      	ldrb	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3301      	adds	r3, #1
 800b65e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f7ff fa17 	bl	800aa94 <SWAPBYTE>
 800b666:	4603      	mov	r3, r0
 800b668:	461a      	mov	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3301      	adds	r3, #1
 800b672:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	3301      	adds	r3, #1
 800b678:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f7ff fa0a 	bl	800aa94 <SWAPBYTE>
 800b680:	4603      	mov	r3, r0
 800b682:	461a      	mov	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	3301      	adds	r3, #1
 800b68c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	3301      	adds	r3, #1
 800b692:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7ff f9fd 	bl	800aa94 <SWAPBYTE>
 800b69a:	4603      	mov	r3, r0
 800b69c:	461a      	mov	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	80da      	strh	r2, [r3, #6]
}
 800b6a2:	bf00      	nop
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b082      	sub	sp, #8
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6b4:	2180      	movs	r1, #128	; 0x80
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fd2c 	bl	800c114 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b6bc:	2100      	movs	r1, #0
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fd28 	bl	800c114 <USBD_LL_StallEP>
}
 800b6c4:	bf00      	nop
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d036      	beq.n	800b750 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b6e6:	6938      	ldr	r0, [r7, #16]
 800b6e8:	f000 f836 	bl	800b758 <USBD_GetLen>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	005b      	lsls	r3, r3, #1
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b6fa:	7dfb      	ldrb	r3, [r7, #23]
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	4413      	add	r3, r2
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	7812      	ldrb	r2, [r2, #0]
 800b704:	701a      	strb	r2, [r3, #0]
  idx++;
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	3301      	adds	r3, #1
 800b70a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	4413      	add	r3, r2
 800b712:	2203      	movs	r2, #3
 800b714:	701a      	strb	r2, [r3, #0]
  idx++;
 800b716:	7dfb      	ldrb	r3, [r7, #23]
 800b718:	3301      	adds	r3, #1
 800b71a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b71c:	e013      	b.n	800b746 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b71e:	7dfb      	ldrb	r3, [r7, #23]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	4413      	add	r3, r2
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	7812      	ldrb	r2, [r2, #0]
 800b728:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	3301      	adds	r3, #1
 800b72e:	613b      	str	r3, [r7, #16]
    idx++;
 800b730:	7dfb      	ldrb	r3, [r7, #23]
 800b732:	3301      	adds	r3, #1
 800b734:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b736:	7dfb      	ldrb	r3, [r7, #23]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	4413      	add	r3, r2
 800b73c:	2200      	movs	r2, #0
 800b73e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	3301      	adds	r3, #1
 800b744:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1e7      	bne.n	800b71e <USBD_GetString+0x52>
 800b74e:	e000      	b.n	800b752 <USBD_GetString+0x86>
    return;
 800b750:	bf00      	nop
  }
}
 800b752:	3718      	adds	r7, #24
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b760:	2300      	movs	r3, #0
 800b762:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b768:	e005      	b.n	800b776 <USBD_GetLen+0x1e>
  {
    len++;
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
 800b76c:	3301      	adds	r3, #1
 800b76e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	3301      	adds	r3, #1
 800b774:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1f5      	bne.n	800b76a <USBD_GetLen+0x12>
  }

  return len;
 800b77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3714      	adds	r7, #20
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2202      	movs	r2, #2
 800b79c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f000 fd7e 	bl	800c2b4 <USBD_LL_Transmit>

  return USBD_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	60f8      	str	r0, [r7, #12]
 800b7ca:	60b9      	str	r1, [r7, #8]
 800b7cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f000 fd6d 	bl	800c2b4 <USBD_LL_Transmit>

  return USBD_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2203      	movs	r2, #3
 800b7f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	2100      	movs	r1, #0
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f000 fd88 	bl	800c324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b084      	sub	sp, #16
 800b822:	af00      	add	r7, sp, #0
 800b824:	60f8      	str	r0, [r7, #12]
 800b826:	60b9      	str	r1, [r7, #8]
 800b828:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	2100      	movs	r1, #0
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f000 fd77 	bl	800c324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2204      	movs	r2, #4
 800b84c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b850:	2300      	movs	r3, #0
 800b852:	2200      	movs	r2, #0
 800b854:	2100      	movs	r1, #0
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 fd2c 	bl	800c2b4 <USBD_LL_Transmit>

  return USBD_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b082      	sub	sp, #8
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2205      	movs	r2, #5
 800b872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b876:	2300      	movs	r3, #0
 800b878:	2200      	movs	r2, #0
 800b87a:	2100      	movs	r1, #0
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 fd51 	bl	800c324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b890:	2200      	movs	r2, #0
 800b892:	4912      	ldr	r1, [pc, #72]	; (800b8dc <MX_USB_DEVICE_Init+0x50>)
 800b894:	4812      	ldr	r0, [pc, #72]	; (800b8e0 <MX_USB_DEVICE_Init+0x54>)
 800b896:	f7fe fd69 	bl	800a36c <USBD_Init>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d001      	beq.n	800b8a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b8a0:	f7f5 fe5e 	bl	8001560 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b8a4:	490f      	ldr	r1, [pc, #60]	; (800b8e4 <MX_USB_DEVICE_Init+0x58>)
 800b8a6:	480e      	ldr	r0, [pc, #56]	; (800b8e0 <MX_USB_DEVICE_Init+0x54>)
 800b8a8:	f7fe fd90 	bl	800a3cc <USBD_RegisterClass>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b8b2:	f7f5 fe55 	bl	8001560 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b8b6:	490c      	ldr	r1, [pc, #48]	; (800b8e8 <MX_USB_DEVICE_Init+0x5c>)
 800b8b8:	4809      	ldr	r0, [pc, #36]	; (800b8e0 <MX_USB_DEVICE_Init+0x54>)
 800b8ba:	f7fe fc87 	bl	800a1cc <USBD_CDC_RegisterInterface>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b8c4:	f7f5 fe4c 	bl	8001560 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b8c8:	4805      	ldr	r0, [pc, #20]	; (800b8e0 <MX_USB_DEVICE_Init+0x54>)
 800b8ca:	f7fe fdb5 	bl	800a438 <USBD_Start>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b8d4:	f7f5 fe44 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b8d8:	bf00      	nop
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	200000b0 	.word	0x200000b0
 800b8e0:	20000690 	.word	0x20000690
 800b8e4:	2000001c 	.word	0x2000001c
 800b8e8:	2000009c 	.word	0x2000009c

0800b8ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	4905      	ldr	r1, [pc, #20]	; (800b908 <CDC_Init_FS+0x1c>)
 800b8f4:	4805      	ldr	r0, [pc, #20]	; (800b90c <CDC_Init_FS+0x20>)
 800b8f6:	f7fe fc83 	bl	800a200 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b8fa:	4905      	ldr	r1, [pc, #20]	; (800b910 <CDC_Init_FS+0x24>)
 800b8fc:	4803      	ldr	r0, [pc, #12]	; (800b90c <CDC_Init_FS+0x20>)
 800b8fe:	f7fe fca1 	bl	800a244 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b902:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b904:	4618      	mov	r0, r3
 800b906:	bd80      	pop	{r7, pc}
 800b908:	20000d70 	.word	0x20000d70
 800b90c:	20000690 	.word	0x20000690
 800b910:	20000970 	.word	0x20000970

0800b914 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b914:	b480      	push	{r7}
 800b916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b918:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	4603      	mov	r3, r0
 800b92c:	6039      	str	r1, [r7, #0]
 800b92e:	71fb      	strb	r3, [r7, #7]
 800b930:	4613      	mov	r3, r2
 800b932:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b934:	79fb      	ldrb	r3, [r7, #7]
 800b936:	2b23      	cmp	r3, #35	; 0x23
 800b938:	d85a      	bhi.n	800b9f0 <CDC_Control_FS+0xcc>
 800b93a:	a201      	add	r2, pc, #4	; (adr r2, 800b940 <CDC_Control_FS+0x1c>)
 800b93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b940:	0800b9f1 	.word	0x0800b9f1
 800b944:	0800b9f1 	.word	0x0800b9f1
 800b948:	0800b9f1 	.word	0x0800b9f1
 800b94c:	0800b9f1 	.word	0x0800b9f1
 800b950:	0800b9f1 	.word	0x0800b9f1
 800b954:	0800b9f1 	.word	0x0800b9f1
 800b958:	0800b9f1 	.word	0x0800b9f1
 800b95c:	0800b9f1 	.word	0x0800b9f1
 800b960:	0800b9f1 	.word	0x0800b9f1
 800b964:	0800b9f1 	.word	0x0800b9f1
 800b968:	0800b9f1 	.word	0x0800b9f1
 800b96c:	0800b9f1 	.word	0x0800b9f1
 800b970:	0800b9f1 	.word	0x0800b9f1
 800b974:	0800b9f1 	.word	0x0800b9f1
 800b978:	0800b9f1 	.word	0x0800b9f1
 800b97c:	0800b9f1 	.word	0x0800b9f1
 800b980:	0800b9f1 	.word	0x0800b9f1
 800b984:	0800b9f1 	.word	0x0800b9f1
 800b988:	0800b9f1 	.word	0x0800b9f1
 800b98c:	0800b9f1 	.word	0x0800b9f1
 800b990:	0800b9f1 	.word	0x0800b9f1
 800b994:	0800b9f1 	.word	0x0800b9f1
 800b998:	0800b9f1 	.word	0x0800b9f1
 800b99c:	0800b9f1 	.word	0x0800b9f1
 800b9a0:	0800b9f1 	.word	0x0800b9f1
 800b9a4:	0800b9f1 	.word	0x0800b9f1
 800b9a8:	0800b9f1 	.word	0x0800b9f1
 800b9ac:	0800b9f1 	.word	0x0800b9f1
 800b9b0:	0800b9f1 	.word	0x0800b9f1
 800b9b4:	0800b9f1 	.word	0x0800b9f1
 800b9b8:	0800b9f1 	.word	0x0800b9f1
 800b9bc:	0800b9f1 	.word	0x0800b9f1
 800b9c0:	0800b9f1 	.word	0x0800b9f1
 800b9c4:	0800b9f1 	.word	0x0800b9f1
 800b9c8:	0800b9d1 	.word	0x0800b9d1
 800b9cc:	0800b9f1 	.word	0x0800b9f1
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
    	USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	60fb      	str	r3, [r7, #12]
    	if ((req->wValue & 0x0001) != 0){
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	885b      	ldrh	r3, [r3, #2]
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <CDC_Control_FS+0xc4>
    		USB_COM_Port_open = 1;
 800b9e0:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <CDC_Control_FS+0xdc>)
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	701a      	strb	r2, [r3, #0]
    	}
    	else {
    		USB_COM_Port_open = 0;
    	}
    break;
 800b9e6:	e004      	b.n	800b9f2 <CDC_Control_FS+0xce>
    		USB_COM_Port_open = 0;
 800b9e8:	4b05      	ldr	r3, [pc, #20]	; (800ba00 <CDC_Control_FS+0xdc>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	701a      	strb	r2, [r3, #0]
    break;
 800b9ee:	e000      	b.n	800b9f2 <CDC_Control_FS+0xce>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b9f0:	bf00      	nop
  }

  return (USBD_OK);
 800b9f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	2000096c 	.word	0x2000096c

0800ba04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	4808      	ldr	r0, [pc, #32]	; (800ba34 <CDC_Receive_FS+0x30>)
 800ba12:	f7fe fc17 	bl	800a244 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ba16:	4807      	ldr	r0, [pc, #28]	; (800ba34 <CDC_Receive_FS+0x30>)
 800ba18:	f7fe fc72 	bl	800a300 <USBD_CDC_ReceivePacket>
  CDC_FS_RxDataReady_Callback(Buf, *Len); // User implemented callback
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7f4 fd65 	bl	80004f4 <CDC_FS_RxDataReady_Callback>
  return (USBD_OK);
 800ba2a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20000690 	.word	0x20000690

0800ba38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	460b      	mov	r3, r1
 800ba42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ba44:	2300      	movs	r3, #0
 800ba46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ba48:	4b0d      	ldr	r3, [pc, #52]	; (800ba80 <CDC_Transmit_FS+0x48>)
 800ba4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e00b      	b.n	800ba76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ba5e:	887b      	ldrh	r3, [r7, #2]
 800ba60:	461a      	mov	r2, r3
 800ba62:	6879      	ldr	r1, [r7, #4]
 800ba64:	4806      	ldr	r0, [pc, #24]	; (800ba80 <CDC_Transmit_FS+0x48>)
 800ba66:	f7fe fbcb 	bl	800a200 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ba6a:	4805      	ldr	r0, [pc, #20]	; (800ba80 <CDC_Transmit_FS+0x48>)
 800ba6c:	f7fe fc08 	bl	800a280 <USBD_CDC_TransmitPacket>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	20000690 	.word	0x20000690

0800ba84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b087      	sub	sp, #28
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ba96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	371c      	adds	r7, #28
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
	...

0800baa8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	6039      	str	r1, [r7, #0]
 800bab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	2212      	movs	r2, #18
 800bab8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800baba:	4b03      	ldr	r3, [pc, #12]	; (800bac8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800babc:	4618      	mov	r0, r3
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	200000d0 	.word	0x200000d0

0800bacc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	4603      	mov	r3, r0
 800bad4:	6039      	str	r1, [r7, #0]
 800bad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2204      	movs	r2, #4
 800badc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bade:	4b03      	ldr	r3, [pc, #12]	; (800baec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	200000f0 	.word	0x200000f0

0800baf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	4603      	mov	r3, r0
 800baf8:	6039      	str	r1, [r7, #0]
 800bafa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bafc:	79fb      	ldrb	r3, [r7, #7]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d105      	bne.n	800bb0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	4907      	ldr	r1, [pc, #28]	; (800bb24 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb06:	4808      	ldr	r0, [pc, #32]	; (800bb28 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb08:	f7ff fde0 	bl	800b6cc <USBD_GetString>
 800bb0c:	e004      	b.n	800bb18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	4904      	ldr	r1, [pc, #16]	; (800bb24 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb12:	4805      	ldr	r0, [pc, #20]	; (800bb28 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb14:	f7ff fdda 	bl	800b6cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb18:	4b02      	ldr	r3, [pc, #8]	; (800bb24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	20001170 	.word	0x20001170
 800bb28:	0800ce58 	.word	0x0800ce58

0800bb2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	4603      	mov	r3, r0
 800bb34:	6039      	str	r1, [r7, #0]
 800bb36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	4904      	ldr	r1, [pc, #16]	; (800bb4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb3c:	4804      	ldr	r0, [pc, #16]	; (800bb50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb3e:	f7ff fdc5 	bl	800b6cc <USBD_GetString>
  return USBD_StrDesc;
 800bb42:	4b02      	ldr	r3, [pc, #8]	; (800bb4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20001170 	.word	0x20001170
 800bb50:	0800ce70 	.word	0x0800ce70

0800bb54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	6039      	str	r1, [r7, #0]
 800bb5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	221a      	movs	r2, #26
 800bb64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb66:	f000 f855 	bl	800bc14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bb6a:	4b02      	ldr	r3, [pc, #8]	; (800bb74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	200000f4 	.word	0x200000f4

0800bb78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	4603      	mov	r3, r0
 800bb80:	6039      	str	r1, [r7, #0]
 800bb82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb84:	79fb      	ldrb	r3, [r7, #7]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d105      	bne.n	800bb96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb8a:	683a      	ldr	r2, [r7, #0]
 800bb8c:	4907      	ldr	r1, [pc, #28]	; (800bbac <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb8e:	4808      	ldr	r0, [pc, #32]	; (800bbb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb90:	f7ff fd9c 	bl	800b6cc <USBD_GetString>
 800bb94:	e004      	b.n	800bba0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb96:	683a      	ldr	r2, [r7, #0]
 800bb98:	4904      	ldr	r1, [pc, #16]	; (800bbac <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb9a:	4805      	ldr	r0, [pc, #20]	; (800bbb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb9c:	f7ff fd96 	bl	800b6cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bba0:	4b02      	ldr	r3, [pc, #8]	; (800bbac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	20001170 	.word	0x20001170
 800bbb0:	0800ce84 	.word	0x0800ce84

0800bbb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	4603      	mov	r3, r0
 800bbbc:	6039      	str	r1, [r7, #0]
 800bbbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d105      	bne.n	800bbd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	4907      	ldr	r1, [pc, #28]	; (800bbe8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bbca:	4808      	ldr	r0, [pc, #32]	; (800bbec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bbcc:	f7ff fd7e 	bl	800b6cc <USBD_GetString>
 800bbd0:	e004      	b.n	800bbdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	4904      	ldr	r1, [pc, #16]	; (800bbe8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bbd6:	4805      	ldr	r0, [pc, #20]	; (800bbec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bbd8:	f7ff fd78 	bl	800b6cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbdc:	4b02      	ldr	r3, [pc, #8]	; (800bbe8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20001170 	.word	0x20001170
 800bbec:	0800ce90 	.word	0x0800ce90

0800bbf0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	6039      	str	r1, [r7, #0]
 800bbfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	220c      	movs	r2, #12
 800bc00:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bc02:	4b03      	ldr	r3, [pc, #12]	; (800bc10 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	200000e4 	.word	0x200000e4

0800bc14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc1a:	4b0f      	ldr	r3, [pc, #60]	; (800bc58 <Get_SerialNum+0x44>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc20:	4b0e      	ldr	r3, [pc, #56]	; (800bc5c <Get_SerialNum+0x48>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc26:	4b0e      	ldr	r3, [pc, #56]	; (800bc60 <Get_SerialNum+0x4c>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4413      	add	r3, r2
 800bc32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d009      	beq.n	800bc4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc3a:	2208      	movs	r2, #8
 800bc3c:	4909      	ldr	r1, [pc, #36]	; (800bc64 <Get_SerialNum+0x50>)
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f000 f814 	bl	800bc6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc44:	2204      	movs	r2, #4
 800bc46:	4908      	ldr	r1, [pc, #32]	; (800bc68 <Get_SerialNum+0x54>)
 800bc48:	68b8      	ldr	r0, [r7, #8]
 800bc4a:	f000 f80f 	bl	800bc6c <IntToUnicode>
  }
}
 800bc4e:	bf00      	nop
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	1fff7590 	.word	0x1fff7590
 800bc5c:	1fff7594 	.word	0x1fff7594
 800bc60:	1fff7598 	.word	0x1fff7598
 800bc64:	200000f6 	.word	0x200000f6
 800bc68:	20000106 	.word	0x20000106

0800bc6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b087      	sub	sp, #28
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	4613      	mov	r3, r2
 800bc78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc7e:	2300      	movs	r3, #0
 800bc80:	75fb      	strb	r3, [r7, #23]
 800bc82:	e027      	b.n	800bcd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	0f1b      	lsrs	r3, r3, #28
 800bc88:	2b09      	cmp	r3, #9
 800bc8a:	d80b      	bhi.n	800bca4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	0f1b      	lsrs	r3, r3, #28
 800bc90:	b2da      	uxtb	r2, r3
 800bc92:	7dfb      	ldrb	r3, [r7, #23]
 800bc94:	005b      	lsls	r3, r3, #1
 800bc96:	4619      	mov	r1, r3
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	440b      	add	r3, r1
 800bc9c:	3230      	adds	r2, #48	; 0x30
 800bc9e:	b2d2      	uxtb	r2, r2
 800bca0:	701a      	strb	r2, [r3, #0]
 800bca2:	e00a      	b.n	800bcba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	0f1b      	lsrs	r3, r3, #28
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	7dfb      	ldrb	r3, [r7, #23]
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	4619      	mov	r1, r3
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	440b      	add	r3, r1
 800bcb4:	3237      	adds	r2, #55	; 0x37
 800bcb6:	b2d2      	uxtb	r2, r2
 800bcb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	011b      	lsls	r3, r3, #4
 800bcbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bcc0:	7dfb      	ldrb	r3, [r7, #23]
 800bcc2:	005b      	lsls	r3, r3, #1
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	4413      	add	r3, r2
 800bcca:	2200      	movs	r2, #0
 800bccc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bcce:	7dfb      	ldrb	r3, [r7, #23]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	75fb      	strb	r3, [r7, #23]
 800bcd4:	7dfa      	ldrb	r2, [r7, #23]
 800bcd6:	79fb      	ldrb	r3, [r7, #7]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d3d3      	bcc.n	800bc84 <IntToUnicode+0x18>
  }
}
 800bcdc:	bf00      	nop
 800bcde:	bf00      	nop
 800bce0:	371c      	adds	r7, #28
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
	...

0800bcec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b096      	sub	sp, #88	; 0x58
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	605a      	str	r2, [r3, #4]
 800bcfe:	609a      	str	r2, [r3, #8]
 800bd00:	60da      	str	r2, [r3, #12]
 800bd02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bd04:	f107 0310 	add.w	r3, r7, #16
 800bd08:	2234      	movs	r2, #52	; 0x34
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f000 fba9 	bl	800c464 <memset>
  if(pcdHandle->Instance==USB)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a24      	ldr	r2, [pc, #144]	; (800bda8 <HAL_PCD_MspInit+0xbc>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d141      	bne.n	800bda0 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bd1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd20:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800bd22:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800bd26:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bd28:	f107 0310 	add.w	r3, r7, #16
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7f9 fd05 	bl	800573c <HAL_RCCEx_PeriphCLKConfig>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800bd38:	f7f5 fc12 	bl	8001560 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd3c:	4b1b      	ldr	r3, [pc, #108]	; (800bdac <HAL_PCD_MspInit+0xc0>)
 800bd3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd40:	4a1a      	ldr	r2, [pc, #104]	; (800bdac <HAL_PCD_MspInit+0xc0>)
 800bd42:	f043 0301 	orr.w	r3, r3, #1
 800bd46:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd48:	4b18      	ldr	r3, [pc, #96]	; (800bdac <HAL_PCD_MspInit+0xc0>)
 800bd4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd4c:	f003 0301 	and.w	r3, r3, #1
 800bd50:	60fb      	str	r3, [r7, #12]
 800bd52:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bd54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bd58:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd62:	2303      	movs	r3, #3
 800bd64:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800bd66:	230a      	movs	r3, #10
 800bd68:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bd6e:	4619      	mov	r1, r3
 800bd70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bd74:	f7f6 fee0 	bl	8002b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bd78:	4b0c      	ldr	r3, [pc, #48]	; (800bdac <HAL_PCD_MspInit+0xc0>)
 800bd7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd7c:	4a0b      	ldr	r2, [pc, #44]	; (800bdac <HAL_PCD_MspInit+0xc0>)
 800bd7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd82:	6593      	str	r3, [r2, #88]	; 0x58
 800bd84:	4b09      	ldr	r3, [pc, #36]	; (800bdac <HAL_PCD_MspInit+0xc0>)
 800bd86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd8c:	60bb      	str	r3, [r7, #8]
 800bd8e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800bd90:	2200      	movs	r2, #0
 800bd92:	2100      	movs	r1, #0
 800bd94:	2043      	movs	r0, #67	; 0x43
 800bd96:	f7f6 fe98 	bl	8002aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800bd9a:	2043      	movs	r0, #67	; 0x43
 800bd9c:	f7f6 feb1 	bl	8002b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bda0:	bf00      	nop
 800bda2:	3758      	adds	r7, #88	; 0x58
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	40006800 	.word	0x40006800
 800bdac:	40021000 	.word	0x40021000

0800bdb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	4610      	mov	r0, r2
 800bdc8:	f7fe fb83 	bl	800a4d2 <USBD_LL_SetupStage>
}
 800bdcc:	bf00      	nop
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	460b      	mov	r3, r1
 800bdde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800bde6:	78fa      	ldrb	r2, [r7, #3]
 800bde8:	6879      	ldr	r1, [r7, #4]
 800bdea:	4613      	mov	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	00db      	lsls	r3, r3, #3
 800bdf2:	440b      	add	r3, r1
 800bdf4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	78fb      	ldrb	r3, [r7, #3]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	f7fe fbbd 	bl	800a57c <USBD_LL_DataOutStage>
}
 800be02:	bf00      	nop
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b082      	sub	sp, #8
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	460b      	mov	r3, r1
 800be14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800be1c:	78fa      	ldrb	r2, [r7, #3]
 800be1e:	6879      	ldr	r1, [r7, #4]
 800be20:	4613      	mov	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4413      	add	r3, r2
 800be26:	00db      	lsls	r3, r3, #3
 800be28:	440b      	add	r3, r1
 800be2a:	333c      	adds	r3, #60	; 0x3c
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	78fb      	ldrb	r3, [r7, #3]
 800be30:	4619      	mov	r1, r3
 800be32:	f7fe fc56 	bl	800a6e2 <USBD_LL_DataInStage>
}
 800be36:	bf00      	nop
 800be38:	3708      	adds	r7, #8
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fe fd90 	bl	800a972 <USBD_LL_SOF>
}
 800be52:	bf00      	nop
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b084      	sub	sp, #16
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be62:	2301      	movs	r3, #1
 800be64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	2b02      	cmp	r3, #2
 800be6c:	d001      	beq.n	800be72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800be6e:	f7f5 fb77 	bl	8001560 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800be78:	7bfa      	ldrb	r2, [r7, #15]
 800be7a:	4611      	mov	r1, r2
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7fe fd34 	bl	800a8ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800be88:	4618      	mov	r0, r3
 800be8a:	f7fe fcdc 	bl	800a846 <USBD_LL_Reset>
}
 800be8e:	bf00      	nop
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
	...

0800be98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fe fd2f 	bl	800a90a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d005      	beq.n	800bec0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800beb4:	4b04      	ldr	r3, [pc, #16]	; (800bec8 <HAL_PCD_SuspendCallback+0x30>)
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	4a03      	ldr	r2, [pc, #12]	; (800bec8 <HAL_PCD_SuspendCallback+0x30>)
 800beba:	f043 0306 	orr.w	r3, r3, #6
 800bebe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bec0:	bf00      	nop
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	e000ed00 	.word	0xe000ed00

0800becc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d007      	beq.n	800beec <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bedc:	4b08      	ldr	r3, [pc, #32]	; (800bf00 <HAL_PCD_ResumeCallback+0x34>)
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	4a07      	ldr	r2, [pc, #28]	; (800bf00 <HAL_PCD_ResumeCallback+0x34>)
 800bee2:	f023 0306 	bic.w	r3, r3, #6
 800bee6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bee8:	f000 fab6 	bl	800c458 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe fd25 	bl	800a942 <USBD_LL_Resume>
}
 800bef8:	bf00      	nop
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	e000ed00 	.word	0xe000ed00

0800bf04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800bf0c:	f7f8 fd80 	bl	8004a10 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bf10:	4a2b      	ldr	r2, [pc, #172]	; (800bfc0 <USBD_LL_Init+0xbc>)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a29      	ldr	r2, [pc, #164]	; (800bfc0 <USBD_LL_Init+0xbc>)
 800bf1c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800bf20:	4b27      	ldr	r3, [pc, #156]	; (800bfc0 <USBD_LL_Init+0xbc>)
 800bf22:	4a28      	ldr	r2, [pc, #160]	; (800bfc4 <USBD_LL_Init+0xc0>)
 800bf24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bf26:	4b26      	ldr	r3, [pc, #152]	; (800bfc0 <USBD_LL_Init+0xbc>)
 800bf28:	2208      	movs	r2, #8
 800bf2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bf2c:	4b24      	ldr	r3, [pc, #144]	; (800bfc0 <USBD_LL_Init+0xbc>)
 800bf2e:	2202      	movs	r2, #2
 800bf30:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf32:	4b23      	ldr	r3, [pc, #140]	; (800bfc0 <USBD_LL_Init+0xbc>)
 800bf34:	2202      	movs	r2, #2
 800bf36:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bf38:	4b21      	ldr	r3, [pc, #132]	; (800bfc0 <USBD_LL_Init+0xbc>)
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bf3e:	4b20      	ldr	r3, [pc, #128]	; (800bfc0 <USBD_LL_Init+0xbc>)
 800bf40:	2200      	movs	r2, #0
 800bf42:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bf44:	4b1e      	ldr	r3, [pc, #120]	; (800bfc0 <USBD_LL_Init+0xbc>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bf4a:	4b1d      	ldr	r3, [pc, #116]	; (800bfc0 <USBD_LL_Init+0xbc>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bf50:	481b      	ldr	r0, [pc, #108]	; (800bfc0 <USBD_LL_Init+0xbc>)
 800bf52:	f7f6 ff7b 	bl	8002e4c <HAL_PCD_Init>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800bf5c:	f7f5 fb00 	bl	8001560 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf66:	2318      	movs	r3, #24
 800bf68:	2200      	movs	r2, #0
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	f7f8 fc7f 	bl	800486e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf76:	2358      	movs	r3, #88	; 0x58
 800bf78:	2200      	movs	r2, #0
 800bf7a:	2180      	movs	r1, #128	; 0x80
 800bf7c:	f7f8 fc77 	bl	800486e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf86:	23c0      	movs	r3, #192	; 0xc0
 800bf88:	2200      	movs	r2, #0
 800bf8a:	2181      	movs	r1, #129	; 0x81
 800bf8c:	f7f8 fc6f 	bl	800486e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf96:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	f7f8 fc66 	bl	800486e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bfa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfac:	2200      	movs	r2, #0
 800bfae:	2182      	movs	r1, #130	; 0x82
 800bfb0:	f7f8 fc5d 	bl	800486e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	20001370 	.word	0x20001370
 800bfc4:	40006800 	.word	0x40006800

0800bfc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7f7 f83a 	bl	8003058 <HAL_PCD_Start>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bfe8:	7bbb      	ldrb	r3, [r7, #14]
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	d816      	bhi.n	800c01c <USBD_LL_Start+0x54>
 800bfee:	a201      	add	r2, pc, #4	; (adr r2, 800bff4 <USBD_LL_Start+0x2c>)
 800bff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff4:	0800c005 	.word	0x0800c005
 800bff8:	0800c00b 	.word	0x0800c00b
 800bffc:	0800c011 	.word	0x0800c011
 800c000:	0800c017 	.word	0x0800c017
    case HAL_OK :
      usb_status = USBD_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]
    break;
 800c008:	e00b      	b.n	800c022 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c00a:	2303      	movs	r3, #3
 800c00c:	73fb      	strb	r3, [r7, #15]
    break;
 800c00e:	e008      	b.n	800c022 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c010:	2301      	movs	r3, #1
 800c012:	73fb      	strb	r3, [r7, #15]
    break;
 800c014:	e005      	b.n	800c022 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c016:	2303      	movs	r3, #3
 800c018:	73fb      	strb	r3, [r7, #15]
    break;
 800c01a:	e002      	b.n	800c022 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c01c:	2303      	movs	r3, #3
 800c01e:	73fb      	strb	r3, [r7, #15]
    break;
 800c020:	bf00      	nop
  }
  return usb_status;
 800c022:	7bfb      	ldrb	r3, [r7, #15]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	4608      	mov	r0, r1
 800c036:	4611      	mov	r1, r2
 800c038:	461a      	mov	r2, r3
 800c03a:	4603      	mov	r3, r0
 800c03c:	70fb      	strb	r3, [r7, #3]
 800c03e:	460b      	mov	r3, r1
 800c040:	70bb      	strb	r3, [r7, #2]
 800c042:	4613      	mov	r3, r2
 800c044:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c054:	78bb      	ldrb	r3, [r7, #2]
 800c056:	883a      	ldrh	r2, [r7, #0]
 800c058:	78f9      	ldrb	r1, [r7, #3]
 800c05a:	f7f7 f96b 	bl	8003334 <HAL_PCD_EP_Open>
 800c05e:	4603      	mov	r3, r0
 800c060:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c062:	7bbb      	ldrb	r3, [r7, #14]
 800c064:	2b03      	cmp	r3, #3
 800c066:	d817      	bhi.n	800c098 <USBD_LL_OpenEP+0x6c>
 800c068:	a201      	add	r2, pc, #4	; (adr r2, 800c070 <USBD_LL_OpenEP+0x44>)
 800c06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06e:	bf00      	nop
 800c070:	0800c081 	.word	0x0800c081
 800c074:	0800c087 	.word	0x0800c087
 800c078:	0800c08d 	.word	0x0800c08d
 800c07c:	0800c093 	.word	0x0800c093
    case HAL_OK :
      usb_status = USBD_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	73fb      	strb	r3, [r7, #15]
    break;
 800c084:	e00b      	b.n	800c09e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c086:	2303      	movs	r3, #3
 800c088:	73fb      	strb	r3, [r7, #15]
    break;
 800c08a:	e008      	b.n	800c09e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c08c:	2301      	movs	r3, #1
 800c08e:	73fb      	strb	r3, [r7, #15]
    break;
 800c090:	e005      	b.n	800c09e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c092:	2303      	movs	r3, #3
 800c094:	73fb      	strb	r3, [r7, #15]
    break;
 800c096:	e002      	b.n	800c09e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c098:	2303      	movs	r3, #3
 800c09a:	73fb      	strb	r3, [r7, #15]
    break;
 800c09c:	bf00      	nop
  }
  return usb_status;
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0c2:	78fa      	ldrb	r2, [r7, #3]
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7f7 f991 	bl	80033ee <HAL_PCD_EP_Close>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c0d0:	7bbb      	ldrb	r3, [r7, #14]
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d816      	bhi.n	800c104 <USBD_LL_CloseEP+0x5c>
 800c0d6:	a201      	add	r2, pc, #4	; (adr r2, 800c0dc <USBD_LL_CloseEP+0x34>)
 800c0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0dc:	0800c0ed 	.word	0x0800c0ed
 800c0e0:	0800c0f3 	.word	0x0800c0f3
 800c0e4:	0800c0f9 	.word	0x0800c0f9
 800c0e8:	0800c0ff 	.word	0x0800c0ff
    case HAL_OK :
      usb_status = USBD_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c0f0:	e00b      	b.n	800c10a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	73fb      	strb	r3, [r7, #15]
    break;
 800c0f6:	e008      	b.n	800c10a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c0fc:	e005      	b.n	800c10a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0fe:	2303      	movs	r3, #3
 800c100:	73fb      	strb	r3, [r7, #15]
    break;
 800c102:	e002      	b.n	800c10a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c104:	2303      	movs	r3, #3
 800c106:	73fb      	strb	r3, [r7, #15]
    break;
 800c108:	bf00      	nop
  }
  return usb_status;
 800c10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	460b      	mov	r3, r1
 800c11e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c124:	2300      	movs	r3, #0
 800c126:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c12e:	78fa      	ldrb	r2, [r7, #3]
 800c130:	4611      	mov	r1, r2
 800c132:	4618      	mov	r0, r3
 800c134:	f7f7 fa23 	bl	800357e <HAL_PCD_EP_SetStall>
 800c138:	4603      	mov	r3, r0
 800c13a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c13c:	7bbb      	ldrb	r3, [r7, #14]
 800c13e:	2b03      	cmp	r3, #3
 800c140:	d816      	bhi.n	800c170 <USBD_LL_StallEP+0x5c>
 800c142:	a201      	add	r2, pc, #4	; (adr r2, 800c148 <USBD_LL_StallEP+0x34>)
 800c144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c148:	0800c159 	.word	0x0800c159
 800c14c:	0800c15f 	.word	0x0800c15f
 800c150:	0800c165 	.word	0x0800c165
 800c154:	0800c16b 	.word	0x0800c16b
    case HAL_OK :
      usb_status = USBD_OK;
 800c158:	2300      	movs	r3, #0
 800c15a:	73fb      	strb	r3, [r7, #15]
    break;
 800c15c:	e00b      	b.n	800c176 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c15e:	2303      	movs	r3, #3
 800c160:	73fb      	strb	r3, [r7, #15]
    break;
 800c162:	e008      	b.n	800c176 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c164:	2301      	movs	r3, #1
 800c166:	73fb      	strb	r3, [r7, #15]
    break;
 800c168:	e005      	b.n	800c176 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c16a:	2303      	movs	r3, #3
 800c16c:	73fb      	strb	r3, [r7, #15]
    break;
 800c16e:	e002      	b.n	800c176 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c170:	2303      	movs	r3, #3
 800c172:	73fb      	strb	r3, [r7, #15]
    break;
 800c174:	bf00      	nop
  }
  return usb_status;
 800c176:	7bfb      	ldrb	r3, [r7, #15]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	460b      	mov	r3, r1
 800c18a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c19a:	78fa      	ldrb	r2, [r7, #3]
 800c19c:	4611      	mov	r1, r2
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7f7 fa4d 	bl	800363e <HAL_PCD_EP_ClrStall>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c1a8:	7bbb      	ldrb	r3, [r7, #14]
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	d816      	bhi.n	800c1dc <USBD_LL_ClearStallEP+0x5c>
 800c1ae:	a201      	add	r2, pc, #4	; (adr r2, 800c1b4 <USBD_LL_ClearStallEP+0x34>)
 800c1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b4:	0800c1c5 	.word	0x0800c1c5
 800c1b8:	0800c1cb 	.word	0x0800c1cb
 800c1bc:	0800c1d1 	.word	0x0800c1d1
 800c1c0:	0800c1d7 	.word	0x0800c1d7
    case HAL_OK :
      usb_status = USBD_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c1c8:	e00b      	b.n	800c1e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1ca:	2303      	movs	r3, #3
 800c1cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ce:	e008      	b.n	800c1e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1d4:	e005      	b.n	800c1e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1da:	e002      	b.n	800c1e2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c1dc:	2303      	movs	r3, #3
 800c1de:	73fb      	strb	r3, [r7, #15]
    break;
 800c1e0:	bf00      	nop
  }
  return usb_status;
 800c1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c204:	2b00      	cmp	r3, #0
 800c206:	da0c      	bge.n	800c222 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c208:	78fb      	ldrb	r3, [r7, #3]
 800c20a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c20e:	68f9      	ldr	r1, [r7, #12]
 800c210:	1c5a      	adds	r2, r3, #1
 800c212:	4613      	mov	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4413      	add	r3, r2
 800c218:	00db      	lsls	r3, r3, #3
 800c21a:	440b      	add	r3, r1
 800c21c:	3302      	adds	r3, #2
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	e00b      	b.n	800c23a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c222:	78fb      	ldrb	r3, [r7, #3]
 800c224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c228:	68f9      	ldr	r1, [r7, #12]
 800c22a:	4613      	mov	r3, r2
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	4413      	add	r3, r2
 800c230:	00db      	lsls	r3, r3, #3
 800c232:	440b      	add	r3, r1
 800c234:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c238:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
	...

0800c248 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c254:	2300      	movs	r3, #0
 800c256:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c262:	78fa      	ldrb	r2, [r7, #3]
 800c264:	4611      	mov	r1, r2
 800c266:	4618      	mov	r0, r3
 800c268:	f7f7 f83f 	bl	80032ea <HAL_PCD_SetAddress>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c270:	7bbb      	ldrb	r3, [r7, #14]
 800c272:	2b03      	cmp	r3, #3
 800c274:	d816      	bhi.n	800c2a4 <USBD_LL_SetUSBAddress+0x5c>
 800c276:	a201      	add	r2, pc, #4	; (adr r2, 800c27c <USBD_LL_SetUSBAddress+0x34>)
 800c278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27c:	0800c28d 	.word	0x0800c28d
 800c280:	0800c293 	.word	0x0800c293
 800c284:	0800c299 	.word	0x0800c299
 800c288:	0800c29f 	.word	0x0800c29f
    case HAL_OK :
      usb_status = USBD_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	73fb      	strb	r3, [r7, #15]
    break;
 800c290:	e00b      	b.n	800c2aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c292:	2303      	movs	r3, #3
 800c294:	73fb      	strb	r3, [r7, #15]
    break;
 800c296:	e008      	b.n	800c2aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c298:	2301      	movs	r3, #1
 800c29a:	73fb      	strb	r3, [r7, #15]
    break;
 800c29c:	e005      	b.n	800c2aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c29e:	2303      	movs	r3, #3
 800c2a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a2:	e002      	b.n	800c2aa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a8:	bf00      	nop
  }
  return usb_status;
 800c2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	607a      	str	r2, [r7, #4]
 800c2be:	603b      	str	r3, [r7, #0]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c2d2:	7af9      	ldrb	r1, [r7, #11]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	f7f7 f91a 	bl	8003510 <HAL_PCD_EP_Transmit>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c2e0:	7dbb      	ldrb	r3, [r7, #22]
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	d816      	bhi.n	800c314 <USBD_LL_Transmit+0x60>
 800c2e6:	a201      	add	r2, pc, #4	; (adr r2, 800c2ec <USBD_LL_Transmit+0x38>)
 800c2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ec:	0800c2fd 	.word	0x0800c2fd
 800c2f0:	0800c303 	.word	0x0800c303
 800c2f4:	0800c309 	.word	0x0800c309
 800c2f8:	0800c30f 	.word	0x0800c30f
    case HAL_OK :
      usb_status = USBD_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	75fb      	strb	r3, [r7, #23]
    break;
 800c300:	e00b      	b.n	800c31a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c302:	2303      	movs	r3, #3
 800c304:	75fb      	strb	r3, [r7, #23]
    break;
 800c306:	e008      	b.n	800c31a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c308:	2301      	movs	r3, #1
 800c30a:	75fb      	strb	r3, [r7, #23]
    break;
 800c30c:	e005      	b.n	800c31a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c30e:	2303      	movs	r3, #3
 800c310:	75fb      	strb	r3, [r7, #23]
    break;
 800c312:	e002      	b.n	800c31a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c314:	2303      	movs	r3, #3
 800c316:	75fb      	strb	r3, [r7, #23]
    break;
 800c318:	bf00      	nop
  }
  return usb_status;
 800c31a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3718      	adds	r7, #24
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	607a      	str	r2, [r7, #4]
 800c32e:	603b      	str	r3, [r7, #0]
 800c330:	460b      	mov	r3, r1
 800c332:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c342:	7af9      	ldrb	r1, [r7, #11]
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	f7f7 f899 	bl	800347e <HAL_PCD_EP_Receive>
 800c34c:	4603      	mov	r3, r0
 800c34e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c350:	7dbb      	ldrb	r3, [r7, #22]
 800c352:	2b03      	cmp	r3, #3
 800c354:	d816      	bhi.n	800c384 <USBD_LL_PrepareReceive+0x60>
 800c356:	a201      	add	r2, pc, #4	; (adr r2, 800c35c <USBD_LL_PrepareReceive+0x38>)
 800c358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35c:	0800c36d 	.word	0x0800c36d
 800c360:	0800c373 	.word	0x0800c373
 800c364:	0800c379 	.word	0x0800c379
 800c368:	0800c37f 	.word	0x0800c37f
    case HAL_OK :
      usb_status = USBD_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	75fb      	strb	r3, [r7, #23]
    break;
 800c370:	e00b      	b.n	800c38a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c372:	2303      	movs	r3, #3
 800c374:	75fb      	strb	r3, [r7, #23]
    break;
 800c376:	e008      	b.n	800c38a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c378:	2301      	movs	r3, #1
 800c37a:	75fb      	strb	r3, [r7, #23]
    break;
 800c37c:	e005      	b.n	800c38a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c37e:	2303      	movs	r3, #3
 800c380:	75fb      	strb	r3, [r7, #23]
    break;
 800c382:	e002      	b.n	800c38a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c384:	2303      	movs	r3, #3
 800c386:	75fb      	strb	r3, [r7, #23]
    break;
 800c388:	bf00      	nop
  }
  return usb_status;
 800c38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3718      	adds	r7, #24
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	460b      	mov	r3, r1
 800c39e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3a6:	78fa      	ldrb	r2, [r7, #3]
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7f7 f898 	bl	80034e0 <HAL_PCD_EP_GetRxCount>
 800c3b0:	4603      	mov	r3, r0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
	...

0800c3bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c3c8:	78fb      	ldrb	r3, [r7, #3]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d002      	beq.n	800c3d4 <HAL_PCDEx_LPM_Callback+0x18>
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d013      	beq.n	800c3fa <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c3d2:	e023      	b.n	800c41c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d007      	beq.n	800c3ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c3dc:	f000 f83c 	bl	800c458 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3e0:	4b10      	ldr	r3, [pc, #64]	; (800c424 <HAL_PCDEx_LPM_Callback+0x68>)
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	4a0f      	ldr	r2, [pc, #60]	; (800c424 <HAL_PCDEx_LPM_Callback+0x68>)
 800c3e6:	f023 0306 	bic.w	r3, r3, #6
 800c3ea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe faa5 	bl	800a942 <USBD_LL_Resume>
    break;
 800c3f8:	e010      	b.n	800c41c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c400:	4618      	mov	r0, r3
 800c402:	f7fe fa82 	bl	800a90a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d005      	beq.n	800c41a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c40e:	4b05      	ldr	r3, [pc, #20]	; (800c424 <HAL_PCDEx_LPM_Callback+0x68>)
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	4a04      	ldr	r2, [pc, #16]	; (800c424 <HAL_PCDEx_LPM_Callback+0x68>)
 800c414:	f043 0306 	orr.w	r3, r3, #6
 800c418:	6113      	str	r3, [r2, #16]
    break;
 800c41a:	bf00      	nop
}
 800c41c:	bf00      	nop
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	e000ed00 	.word	0xe000ed00

0800c428 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c430:	4b03      	ldr	r3, [pc, #12]	; (800c440 <USBD_static_malloc+0x18>)
}
 800c432:	4618      	mov	r0, r3
 800c434:	370c      	adds	r7, #12
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	20001668 	.word	0x20001668

0800c444 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]

}
 800c44c:	bf00      	nop
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c45c:	f7f4 fe9e 	bl	800119c <SystemClock_Config>
}
 800c460:	bf00      	nop
 800c462:	bd80      	pop	{r7, pc}

0800c464 <memset>:
 800c464:	4402      	add	r2, r0
 800c466:	4603      	mov	r3, r0
 800c468:	4293      	cmp	r3, r2
 800c46a:	d100      	bne.n	800c46e <memset+0xa>
 800c46c:	4770      	bx	lr
 800c46e:	f803 1b01 	strb.w	r1, [r3], #1
 800c472:	e7f9      	b.n	800c468 <memset+0x4>

0800c474 <strncmp>:
 800c474:	b510      	push	{r4, lr}
 800c476:	b16a      	cbz	r2, 800c494 <strncmp+0x20>
 800c478:	3901      	subs	r1, #1
 800c47a:	1884      	adds	r4, r0, r2
 800c47c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c480:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c484:	429a      	cmp	r2, r3
 800c486:	d103      	bne.n	800c490 <strncmp+0x1c>
 800c488:	42a0      	cmp	r0, r4
 800c48a:	d001      	beq.n	800c490 <strncmp+0x1c>
 800c48c:	2a00      	cmp	r2, #0
 800c48e:	d1f5      	bne.n	800c47c <strncmp+0x8>
 800c490:	1ad0      	subs	r0, r2, r3
 800c492:	bd10      	pop	{r4, pc}
 800c494:	4610      	mov	r0, r2
 800c496:	e7fc      	b.n	800c492 <strncmp+0x1e>

0800c498 <strncpy>:
 800c498:	b510      	push	{r4, lr}
 800c49a:	3901      	subs	r1, #1
 800c49c:	4603      	mov	r3, r0
 800c49e:	b132      	cbz	r2, 800c4ae <strncpy+0x16>
 800c4a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c4a4:	f803 4b01 	strb.w	r4, [r3], #1
 800c4a8:	3a01      	subs	r2, #1
 800c4aa:	2c00      	cmp	r4, #0
 800c4ac:	d1f7      	bne.n	800c49e <strncpy+0x6>
 800c4ae:	441a      	add	r2, r3
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d100      	bne.n	800c4b8 <strncpy+0x20>
 800c4b6:	bd10      	pop	{r4, pc}
 800c4b8:	f803 1b01 	strb.w	r1, [r3], #1
 800c4bc:	e7f9      	b.n	800c4b2 <strncpy+0x1a>
	...

0800c4c0 <__libc_init_array>:
 800c4c0:	b570      	push	{r4, r5, r6, lr}
 800c4c2:	4d0d      	ldr	r5, [pc, #52]	; (800c4f8 <__libc_init_array+0x38>)
 800c4c4:	4c0d      	ldr	r4, [pc, #52]	; (800c4fc <__libc_init_array+0x3c>)
 800c4c6:	1b64      	subs	r4, r4, r5
 800c4c8:	10a4      	asrs	r4, r4, #2
 800c4ca:	2600      	movs	r6, #0
 800c4cc:	42a6      	cmp	r6, r4
 800c4ce:	d109      	bne.n	800c4e4 <__libc_init_array+0x24>
 800c4d0:	4d0b      	ldr	r5, [pc, #44]	; (800c500 <__libc_init_array+0x40>)
 800c4d2:	4c0c      	ldr	r4, [pc, #48]	; (800c504 <__libc_init_array+0x44>)
 800c4d4:	f000 f826 	bl	800c524 <_init>
 800c4d8:	1b64      	subs	r4, r4, r5
 800c4da:	10a4      	asrs	r4, r4, #2
 800c4dc:	2600      	movs	r6, #0
 800c4de:	42a6      	cmp	r6, r4
 800c4e0:	d105      	bne.n	800c4ee <__libc_init_array+0x2e>
 800c4e2:	bd70      	pop	{r4, r5, r6, pc}
 800c4e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4e8:	4798      	blx	r3
 800c4ea:	3601      	adds	r6, #1
 800c4ec:	e7ee      	b.n	800c4cc <__libc_init_array+0xc>
 800c4ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f2:	4798      	blx	r3
 800c4f4:	3601      	adds	r6, #1
 800c4f6:	e7f2      	b.n	800c4de <__libc_init_array+0x1e>
 800c4f8:	0800cef0 	.word	0x0800cef0
 800c4fc:	0800cef0 	.word	0x0800cef0
 800c500:	0800cef0 	.word	0x0800cef0
 800c504:	0800cef4 	.word	0x0800cef4

0800c508 <memcpy>:
 800c508:	440a      	add	r2, r1
 800c50a:	4291      	cmp	r1, r2
 800c50c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c510:	d100      	bne.n	800c514 <memcpy+0xc>
 800c512:	4770      	bx	lr
 800c514:	b510      	push	{r4, lr}
 800c516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c51a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c51e:	4291      	cmp	r1, r2
 800c520:	d1f9      	bne.n	800c516 <memcpy+0xe>
 800c522:	bd10      	pop	{r4, pc}

0800c524 <_init>:
 800c524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c526:	bf00      	nop
 800c528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52a:	bc08      	pop	{r3}
 800c52c:	469e      	mov	lr, r3
 800c52e:	4770      	bx	lr

0800c530 <_fini>:
 800c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c532:	bf00      	nop
 800c534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c536:	bc08      	pop	{r3}
 800c538:	469e      	mov	lr, r3
 800c53a:	4770      	bx	lr
