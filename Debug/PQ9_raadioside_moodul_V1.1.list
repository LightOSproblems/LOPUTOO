
PQ9_raadioside_moodul_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbc4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  0800bd50  0800bd50  0001bd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfb8  0800bfb8  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfb8  0800bfb8  0001bfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfc0  0800bfc0  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfc0  0800bfc0  0001bfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfc4  0800bfc4  0001bfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800bfc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001374  2000010c  0800c0d4  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001480  0800c0d4  00021480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001afba  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d71  00000000  00000000  0003b139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  0003eeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000108f  00000000  00000000  00040470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e8b1  00000000  00000000  000414ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b252  00000000  00000000  0005fdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b87b2  00000000  00000000  0007b002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b38  00000000  00000000  001337b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001392ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000010c 	.word	0x2000010c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800bd38 	.word	0x0800bd38

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000110 	.word	0x20000110
 80001c8:	0800bd38 	.word	0x0800bd38

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004cc:	f3bf 8f4f 	dsb	sy
}
 80004d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <__NVIC_SystemReset+0x24>)
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80004da:	4904      	ldr	r1, [pc, #16]	; (80004ec <__NVIC_SystemReset+0x24>)
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <__NVIC_SystemReset+0x28>)
 80004de:	4313      	orrs	r3, r2
 80004e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004e2:	f3bf 8f4f 	dsb	sy
}
 80004e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <__NVIC_SystemReset+0x20>
 80004ec:	e000ed00 	.word	0xe000ed00
 80004f0:	05fa0004 	.word	0x05fa0004

080004f4 <CDC_FS_RxDataReady_Callback>:
/* USER CODE BEGIN 0 */

/* A callback function for USB received data handling.
 * NB! Must be kept short because it is triggered by an interrupt.
 */
void CDC_FS_RxDataReady_Callback(uint8_t * RxBuf, uint8_t Length){
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
	USB_RxBuf = RxBuf;
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <CDC_FS_RxDataReady_Callback+0x2c>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6013      	str	r3, [r2, #0]
	USB_RxBufLen = Length;
 8000506:	4a07      	ldr	r2, [pc, #28]	; (8000524 <CDC_FS_RxDataReady_Callback+0x30>)
 8000508:	78fb      	ldrb	r3, [r7, #3]
 800050a:	7013      	strb	r3, [r2, #0]
	USB_RxDataReadyFlag = 1;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <CDC_FS_RxDataReady_Callback+0x34>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000278 	.word	0x20000278
 8000524:	2000027c 	.word	0x2000027c
 8000528:	2000027d 	.word	0x2000027d

0800052c <USB_Rx_Parser>:

void USB_Rx_Parser(void){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	if (USB_RxDataReadyFlag){
 8000530:	4b70      	ldr	r3, [pc, #448]	; (80006f4 <USB_Rx_Parser+0x1c8>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	f000 80da 	beq.w	80006ee <USB_Rx_Parser+0x1c2>
		CDC_Transmit_FS((uint8_t *) "\r\n", 2);
 800053a:	2102      	movs	r1, #2
 800053c:	486e      	ldr	r0, [pc, #440]	; (80006f8 <USB_Rx_Parser+0x1cc>)
 800053e:	f00a fea7 	bl	800b290 <CDC_Transmit_FS>
		HAL_Delay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f000 fe3e 	bl	80011c4 <HAL_Delay>
		uint8_t Test[2] = {0};
		Test[0] = USB_RxBufLen + 48;
		CDC_Transmit_FS(Test, 2);
		HAL_Delay(1);
		*/
		if (Reset){
 8000548:	4b6c      	ldr	r3, [pc, #432]	; (80006fc <USB_Rx_Parser+0x1d0>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d022      	beq.n	8000596 <USB_Rx_Parser+0x6a>
			if (USB_RxBufLen == 2){
 8000550:	4b6b      	ldr	r3, [pc, #428]	; (8000700 <USB_Rx_Parser+0x1d4>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b02      	cmp	r3, #2
 8000556:	d119      	bne.n	800058c <USB_Rx_Parser+0x60>
				switch (*USB_RxBuf){
 8000558:	4b6a      	ldr	r3, [pc, #424]	; (8000704 <USB_Rx_Parser+0x1d8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b6e      	cmp	r3, #110	; 0x6e
 8000560:	d007      	beq.n	8000572 <USB_Rx_Parser+0x46>
 8000562:	2b79      	cmp	r3, #121	; 0x79
 8000564:	d10d      	bne.n	8000582 <USB_Rx_Parser+0x56>
					case 'y':
						CDC_Transmit_FS((uint8_t *) "RESTARTING!", 11);
 8000566:	210b      	movs	r1, #11
 8000568:	4867      	ldr	r0, [pc, #412]	; (8000708 <USB_Rx_Parser+0x1dc>)
 800056a:	f00a fe91 	bl	800b290 <CDC_Transmit_FS>
						NVIC_SystemReset(); // Reset the device
 800056e:	f7ff ffab 	bl	80004c8 <__NVIC_SystemReset>
					case 'n':
						Reset = 0;
 8000572:	4b62      	ldr	r3, [pc, #392]	; (80006fc <USB_Rx_Parser+0x1d0>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
						CDC_Transmit_FS((uint8_t *) "Enter a command (\"l\" for a list of available commands): ", 56);
 8000578:	2138      	movs	r1, #56	; 0x38
 800057a:	4864      	ldr	r0, [pc, #400]	; (800070c <USB_Rx_Parser+0x1e0>)
 800057c:	f00a fe88 	bl	800b290 <CDC_Transmit_FS>
						break;
 8000580:	e0b2      	b.n	80006e8 <USB_Rx_Parser+0x1bc>
					default:
						CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 8000582:	2119      	movs	r1, #25
 8000584:	4862      	ldr	r0, [pc, #392]	; (8000710 <USB_Rx_Parser+0x1e4>)
 8000586:	f00a fe83 	bl	800b290 <CDC_Transmit_FS>
 800058a:	e0ad      	b.n	80006e8 <USB_Rx_Parser+0x1bc>
				}
			}
			else{
				CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 800058c:	2119      	movs	r1, #25
 800058e:	4860      	ldr	r0, [pc, #384]	; (8000710 <USB_Rx_Parser+0x1e4>)
 8000590:	f00a fe7e 	bl	800b290 <CDC_Transmit_FS>
 8000594:	e0a8      	b.n	80006e8 <USB_Rx_Parser+0x1bc>
			}
		}
		else if (USB_RxBufLen == 2){
 8000596:	4b5a      	ldr	r3, [pc, #360]	; (8000700 <USB_Rx_Parser+0x1d4>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b02      	cmp	r3, #2
 800059c:	f040 8089 	bne.w	80006b2 <USB_Rx_Parser+0x186>

			switch (*USB_RxBuf){
 80005a0:	4b58      	ldr	r3, [pc, #352]	; (8000704 <USB_Rx_Parser+0x1d8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	3b52      	subs	r3, #82	; 0x52
 80005a8:	2b27      	cmp	r3, #39	; 0x27
 80005aa:	d876      	bhi.n	800069a <USB_Rx_Parser+0x16e>
 80005ac:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <USB_Rx_Parser+0x88>)
 80005ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b2:	bf00      	nop
 80005b4:	0800066d 	.word	0x0800066d
 80005b8:	0800069b 	.word	0x0800069b
 80005bc:	0800069b 	.word	0x0800069b
 80005c0:	0800069b 	.word	0x0800069b
 80005c4:	0800069b 	.word	0x0800069b
 80005c8:	0800069b 	.word	0x0800069b
 80005cc:	0800069b 	.word	0x0800069b
 80005d0:	0800069b 	.word	0x0800069b
 80005d4:	0800069b 	.word	0x0800069b
 80005d8:	0800069b 	.word	0x0800069b
 80005dc:	0800069b 	.word	0x0800069b
 80005e0:	0800069b 	.word	0x0800069b
 80005e4:	0800069b 	.word	0x0800069b
 80005e8:	0800069b 	.word	0x0800069b
 80005ec:	0800069b 	.word	0x0800069b
 80005f0:	0800069b 	.word	0x0800069b
 80005f4:	0800069b 	.word	0x0800069b
 80005f8:	0800069b 	.word	0x0800069b
 80005fc:	0800069b 	.word	0x0800069b
 8000600:	0800069b 	.word	0x0800069b
 8000604:	0800069b 	.word	0x0800069b
 8000608:	0800069b 	.word	0x0800069b
 800060c:	0800069b 	.word	0x0800069b
 8000610:	08000691 	.word	0x08000691
 8000614:	0800069b 	.word	0x0800069b
 8000618:	0800069b 	.word	0x0800069b
 800061c:	08000655 	.word	0x08000655
 8000620:	0800069b 	.word	0x0800069b
 8000624:	080006e7 	.word	0x080006e7
 8000628:	0800069b 	.word	0x0800069b
 800062c:	0800069b 	.word	0x0800069b
 8000630:	0800069b 	.word	0x0800069b
 8000634:	0800067d 	.word	0x0800067d
 8000638:	0800069b 	.word	0x0800069b
 800063c:	08000687 	.word	0x08000687
 8000640:	0800069b 	.word	0x0800069b
 8000644:	0800069b 	.word	0x0800069b
 8000648:	0800069b 	.word	0x0800069b
 800064c:	0800069b 	.word	0x0800069b
 8000650:	080006e7 	.word	0x080006e7
			case 'l':
				CDC_Transmit_FS((uint8_t *) "\nLIST OF COMMANDS:\r\n"
 8000654:	21a9      	movs	r1, #169	; 0xa9
 8000656:	482f      	ldr	r0, [pc, #188]	; (8000714 <USB_Rx_Parser+0x1e8>)
 8000658:	f00a fe1a 	bl	800b290 <CDC_Transmit_FS>
						"\tR - Resets the device\r\n"
						"\tr - Puts the device into receive mode\r\n"
						"\tt - Puts the device into transmit mode\r\n"
						"\ti - Returns the system info and settings\r\n\n"
						, 169);
				HAL_Delay(1);
 800065c:	2001      	movs	r0, #1
 800065e:	f000 fdb1 	bl	80011c4 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Enter a command (\"l\" for a list of available commands): ", 56);
 8000662:	2138      	movs	r1, #56	; 0x38
 8000664:	4829      	ldr	r0, [pc, #164]	; (800070c <USB_Rx_Parser+0x1e0>)
 8000666:	f00a fe13 	bl	800b290 <CDC_Transmit_FS>
				break;
 800066a:	e03d      	b.n	80006e8 <USB_Rx_Parser+0x1bc>
			case 'y':
				break;
			case 'n':
				break;
			case 'R':
				CDC_Transmit_FS((uint8_t *) "Reset the device? (y/n): ", 25);
 800066c:	2119      	movs	r1, #25
 800066e:	4828      	ldr	r0, [pc, #160]	; (8000710 <USB_Rx_Parser+0x1e4>)
 8000670:	f00a fe0e 	bl	800b290 <CDC_Transmit_FS>
				Reset = 1;
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <USB_Rx_Parser+0x1d0>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
				break;
 800067a:	e035      	b.n	80006e8 <USB_Rx_Parser+0x1bc>
			case 'r':
				CDC_Transmit_FS((uint8_t *) "Receive mode active!\r\n", 22);
 800067c:	2116      	movs	r1, #22
 800067e:	4826      	ldr	r0, [pc, #152]	; (8000718 <USB_Rx_Parser+0x1ec>)
 8000680:	f00a fe06 	bl	800b290 <CDC_Transmit_FS>
				break;
 8000684:	e030      	b.n	80006e8 <USB_Rx_Parser+0x1bc>
			case 't':
				CDC_Transmit_FS((uint8_t *) "Transmit mode active!\r\n", 23);
 8000686:	2117      	movs	r1, #23
 8000688:	4824      	ldr	r0, [pc, #144]	; (800071c <USB_Rx_Parser+0x1f0>)
 800068a:	f00a fe01 	bl	800b290 <CDC_Transmit_FS>
				break;
 800068e:	e02b      	b.n	80006e8 <USB_Rx_Parser+0x1bc>
			case 'i':
				CDC_Transmit_FS((uint8_t *) "Device info mode!\r\n", 19);
 8000690:	2113      	movs	r1, #19
 8000692:	4823      	ldr	r0, [pc, #140]	; (8000720 <USB_Rx_Parser+0x1f4>)
 8000694:	f00a fdfc 	bl	800b290 <CDC_Transmit_FS>
				break;
 8000698:	e026      	b.n	80006e8 <USB_Rx_Parser+0x1bc>
			default:
				CDC_Transmit_FS((uint8_t *) "Command not found!\r\n", 20);
 800069a:	2114      	movs	r1, #20
 800069c:	4821      	ldr	r0, [pc, #132]	; (8000724 <USB_Rx_Parser+0x1f8>)
 800069e:	f00a fdf7 	bl	800b290 <CDC_Transmit_FS>
				HAL_Delay(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f000 fd8e 	bl	80011c4 <HAL_Delay>
				CDC_Transmit_FS((uint8_t *) "Enter a command (\"l\" for a list of available commands): ", 56);
 80006a8:	2138      	movs	r1, #56	; 0x38
 80006aa:	4818      	ldr	r0, [pc, #96]	; (800070c <USB_Rx_Parser+0x1e0>)
 80006ac:	f00a fdf0 	bl	800b290 <CDC_Transmit_FS>
 80006b0:	e01a      	b.n	80006e8 <USB_Rx_Parser+0x1bc>
			}
		}
		else if((strncmp((char *)USB_RxBuf, "test", 4) == 0) && (USB_RxBufLen == 5)){
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <USB_Rx_Parser+0x1d8>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2204      	movs	r2, #4
 80006b8:	491b      	ldr	r1, [pc, #108]	; (8000728 <USB_Rx_Parser+0x1fc>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f00b fb06 	bl	800bccc <strncmp>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d110      	bne.n	80006e8 <USB_Rx_Parser+0x1bc>
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <USB_Rx_Parser+0x1d4>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b05      	cmp	r3, #5
 80006cc:	d10c      	bne.n	80006e8 <USB_Rx_Parser+0x1bc>
			CDC_Transmit_FS((uint8_t *) "Tested!\r\n", 9);
 80006ce:	2109      	movs	r1, #9
 80006d0:	4816      	ldr	r0, [pc, #88]	; (800072c <USB_Rx_Parser+0x200>)
 80006d2:	f00a fddd 	bl	800b290 <CDC_Transmit_FS>
			HAL_Delay(1);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f000 fd74 	bl	80011c4 <HAL_Delay>
			CDC_Transmit_FS((uint8_t *) "Enter a command (\"l\" for a list of available commands): ", 56);
 80006dc:	2138      	movs	r1, #56	; 0x38
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <USB_Rx_Parser+0x1e0>)
 80006e0:	f00a fdd6 	bl	800b290 <CDC_Transmit_FS>
 80006e4:	e000      	b.n	80006e8 <USB_Rx_Parser+0x1bc>
				break;
 80006e6:	bf00      	nop
		}
		USB_RxDataReadyFlag = 0; // Clear the flag
 80006e8:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <USB_Rx_Parser+0x1c8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	}
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000027d 	.word	0x2000027d
 80006f8:	0800bd50 	.word	0x0800bd50
 80006fc:	2000027e 	.word	0x2000027e
 8000700:	2000027c 	.word	0x2000027c
 8000704:	20000278 	.word	0x20000278
 8000708:	0800bd54 	.word	0x0800bd54
 800070c:	0800bd60 	.word	0x0800bd60
 8000710:	0800bd9c 	.word	0x0800bd9c
 8000714:	0800bdb8 	.word	0x0800bdb8
 8000718:	0800be64 	.word	0x0800be64
 800071c:	0800be7c 	.word	0x0800be7c
 8000720:	0800be94 	.word	0x0800be94
 8000724:	0800bea8 	.word	0x0800bea8
 8000728:	0800bec0 	.word	0x0800bec0
 800072c:	0800bec8 	.word	0x0800bec8

08000730 <Si4468_CmdTransmitReceive>:

uint8_t Si4468_CmdTransmitReceive(uint8_t * TxBuf, uint8_t * RxBuf, uint8_t Length){
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af02      	add	r7, sp, #8
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	4613      	mov	r3, r2
 800073c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f001 ff94 	bl	8002674 <HAL_GPIO_WritePin>
	uint8_t result = HAL_SPI_TransmitReceive(&hspi1, TxBuf, RxBuf, Length, HAL_MAX_DELAY);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	b29b      	uxth	r3, r3
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	9200      	str	r2, [sp, #0]
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	68f9      	ldr	r1, [r7, #12]
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <Si4468_CmdTransmitReceive+0x58>)
 800075c:	f005 f8ef 	bl	800593e <HAL_SPI_TransmitReceive>
 8000760:	4603      	mov	r3, r0
 8000762:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f001 ff81 	bl	8002674 <HAL_GPIO_WritePin>
	if (result != HAL_OK) return 1;
 8000772:	7dfb      	ldrb	r3, [r7, #23]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <Si4468_CmdTransmitReceive+0x4c>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <Si4468_CmdTransmitReceive+0x4e>
	return 0;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000214 	.word	0x20000214

0800078c <Si4468_CmdTransmit>:

uint8_t Si4468_CmdTransmit(uint8_t * RxBuf, uint8_t Length){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f001 ff67 	bl	8002674 <HAL_GPIO_WritePin>
	uint8_t result = HAL_SPI_Transmit(&hspi1, RxBuf, Length, HAL_MAX_DELAY);
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <Si4468_CmdTransmit+0x50>)
 80007b2:	f004 fe18 	bl	80053e6 <HAL_SPI_Transmit>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f001 ff56 	bl	8002674 <HAL_GPIO_WritePin>
	if (result != HAL_OK) return 1;
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <Si4468_CmdTransmit+0x46>
 80007ce:	2301      	movs	r3, #1
 80007d0:	e000      	b.n	80007d4 <Si4468_CmdTransmit+0x48>
	return 0;
 80007d2:	2300      	movs	r3, #0
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000214 	.word	0x20000214

080007e0 <Si4468_CmdReadCmdReplyWhenReady>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
	if (result != HAL_OK) return 1;
	return 0;
}

uint8_t Si4468_CmdReadCmdReplyWhenReady(uint8_t * RxBuf, uint8_t Length){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
	uint8_t CmdTxBuf[2] = {Si4468_READ_CMD_BUFF, 0};
 80007ec:	2344      	movs	r3, #68	; 0x44
 80007ee:	81bb      	strh	r3, [r7, #12]
	uint8_t CmdRxBuf[2] = {0, 0};
 80007f0:	2300      	movs	r3, #0
 80007f2:	813b      	strh	r3, [r7, #8]
	uint8_t result;
	while(1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f001 ff39 	bl	8002674 <HAL_GPIO_WritePin>
		result = HAL_SPI_TransmitReceive(&hspi1, CmdTxBuf, CmdRxBuf, 2, HAL_MAX_DELAY);
 8000802:	f107 0208 	add.w	r2, r7, #8
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2302      	movs	r3, #2
 8000812:	4815      	ldr	r0, [pc, #84]	; (8000868 <Si4468_CmdReadCmdReplyWhenReady+0x88>)
 8000814:	f005 f893 	bl	800593e <HAL_SPI_TransmitReceive>
 8000818:	4603      	mov	r3, r0
 800081a:	73fb      	strb	r3, [r7, #15]
		if (CmdRxBuf[1] == 0xFF) break;
 800081c:	7a7b      	ldrb	r3, [r7, #9]
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	d00a      	beq.n	8000838 <Si4468_CmdReadCmdReplyWhenReady+0x58>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Push SPI NSS high
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f001 ff22 	bl	8002674 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000830:	2001      	movs	r0, #1
 8000832:	f000 fcc7 	bl	80011c4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull SPI NSS low
 8000836:	e7dd      	b.n	80007f4 <Si4468_CmdReadCmdReplyWhenReady+0x14>
		if (CmdRxBuf[1] == 0xFF) break;
 8000838:	bf00      	nop
	}
	result += HAL_SPI_Receive(&hspi1, RxBuf, Length, HAL_MAX_DELAY);
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	b29a      	uxth	r2, r3
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	4808      	ldr	r0, [pc, #32]	; (8000868 <Si4468_CmdReadCmdReplyWhenReady+0x88>)
 8000846:	f004 ff43 	bl	80056d0 <HAL_SPI_Receive>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	4413      	add	r3, r2
 8000852:	73fb      	strb	r3, [r7, #15]
	if (result != HAL_OK) return 1;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <Si4468_CmdReadCmdReplyWhenReady+0x7e>
 800085a:	2301      	movs	r3, #1
 800085c:	e000      	b.n	8000860 <Si4468_CmdReadCmdReplyWhenReady+0x80>
	return 0;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000214 	.word	0x20000214

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b0e2      	sub	sp, #392	; 0x188
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t Si4468_TxBuf[64] = {0}; // For writing to Si4468 FIFO registers
 8000872:	2300      	movs	r3, #0
 8000874:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8000878:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800087c:	223c      	movs	r2, #60	; 0x3c
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f00b fa1b 	bl	800bcbc <memset>
	uint8_t Si4468_RxBuf[64] = {0}; // For reading from Si4468 FIFO registers
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800088c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000890:	223c      	movs	r2, #60	; 0x3c
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f00b fa11 	bl	800bcbc <memset>
	uint8_t Si4468_CmdTxBuf[128], Si4468_CmdRxBuf[128];
	uint8_t counter = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a0:	f000 fc1b 	bl	80010da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a4:	f000 f8a6 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a8:	f000 f9e0 	bl	8000c6c <MX_GPIO_Init>
  MX_ADC1_Init();
 80008ac:	f000 f8f8 	bl	8000aa0 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80008b0:	f000 f96c 	bl	8000b8c <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80008b4:	f000 f99c 	bl	8000bf0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80008b8:	f00a fc14 	bl	800b0e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Set SPI NSS high
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f001 fed5 	bl	8002674 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET); // Turn the amplifier OFF (drive EN low)
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d0:	4842      	ldr	r0, [pc, #264]	; (80009dc <main+0x170>)
 80008d2:	f001 fecf 	bl	8002674 <HAL_GPIO_WritePin>

  // ### Si4468 TRANSCEIVER STARTUP
  // Perform a POR (Power on reset)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e0:	f001 fec8 	bl	8002674 <HAL_GPIO_WritePin>
  HAL_Delay(1); // A minimum of 10 us is required
 80008e4:	2001      	movs	r0, #1
 80008e6:	f000 fc6d 	bl	80011c4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f4:	f001 febe 	bl	8002674 <HAL_GPIO_WritePin>
  HAL_Delay(10); // POR should not take more than 6 ms, but let's be safe...
 80008f8:	200a      	movs	r0, #10
 80008fa:	f000 fc63 	bl	80011c4 <HAL_Delay>
  // Send a POWER_UP command to Si4468
  Si4468_CmdTxBuf[0] = Si4468_POWER_UP;
 80008fe:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000902:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000906:	2202      	movs	r2, #2
 8000908:	701a      	strb	r2, [r3, #0]
  Si4468_CmdTxBuf[1] = 0x01;
 800090a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800090e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000912:	2201      	movs	r2, #1
 8000914:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTxBuf[2] = 0x01; // Using an external drive (TCXO) as clock source
 8000916:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800091a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800091e:	2201      	movs	r2, #1
 8000920:	709a      	strb	r2, [r3, #2]
  /* TCXO frequency is 30 MHz (30'000'000 Hz; in hex: 0x01C9C380).
   * NB! The byte order of the following hex value is reversed due to Endianness!
   * Si4468 expects most significant byte first, but STM32L412 seems to
   * be Little-Endian.
   */
  *((uint32_t *) &Si4468_CmdTxBuf[3]) = 0x80C3C901;
 8000922:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000926:	3303      	adds	r3, #3
 8000928:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <main+0x174>)
 800092a:	601a      	str	r2, [r3, #0]
  Si4468_CmdTransmit(Si4468_CmdTxBuf, 7);
 800092c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000930:	2107      	movs	r1, #7
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff2a 	bl	800078c <Si4468_CmdTransmit>

  /* Wait until Si4468 has finished the power-up sequence.
   * The transceiver will be ready when the returned value of
   * CTS (clear to send) byte will be equal to 0xFF
   */
  Si4468_CmdTxBuf[0] = Si4468_READ_CMD_BUFF;
 8000938:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800093c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000940:	2244      	movs	r2, #68	; 0x44
 8000942:	701a      	strb	r2, [r3, #0]
  Si4468_CmdRxBuf[1] = 0;
 8000944:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000948:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800094c:	2200      	movs	r2, #0
 800094e:	705a      	strb	r2, [r3, #1]
  while(Si4468_CmdRxBuf[1] != 0xFF){
 8000950:	e006      	b.n	8000960 <main+0xf4>
	  Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 8000952:	1d39      	adds	r1, r7, #4
 8000954:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000958:	2202      	movs	r2, #2
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fee8 	bl	8000730 <Si4468_CmdTransmitReceive>
  while(Si4468_CmdRxBuf[1] != 0xFF){
 8000960:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000964:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000968:	785b      	ldrb	r3, [r3, #1]
 800096a:	2bff      	cmp	r3, #255	; 0xff
 800096c:	d1f1      	bne.n	8000952 <main+0xe6>
  }

  /* Read the "part info" of the device to make sure the initialization worked
   * and we have a good SPI communication going...
   */
  Si4468_CmdTxBuf[0] = Si4468_PART_INFO;
 800096e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
  Si4468_CmdRxBuf[1] = 0;
 800097a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800097e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000982:	2200      	movs	r2, #0
 8000984:	705a      	strb	r2, [r3, #1]
  Si4468_CmdTransmitReceive(Si4468_CmdTxBuf, Si4468_CmdRxBuf, 2);
 8000986:	1d39      	adds	r1, r7, #4
 8000988:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800098c:	2202      	movs	r2, #2
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fece 	bl	8000730 <Si4468_CmdTransmitReceive>
  Si4468_CmdReadCmdReplyWhenReady(Si4468_CmdRxBuf, 8);
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2108      	movs	r1, #8
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff21 	bl	80007e0 <Si4468_CmdReadCmdReplyWhenReady>

  // Wait for the COM port to open:
  while(!USB_COM_Port_open){
 800099e:	bf00      	nop
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <main+0x178>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0fb      	beq.n	80009a0 <main+0x134>
	  //
  };
  HAL_Delay(1000);
 80009a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ac:	f000 fc0a 	bl	80011c4 <HAL_Delay>
  // Send the welcome message:
  CDC_Transmit_FS((uint8_t *) "PQ9 COM module V1.1 by 213415IACB\r\n", 35);
 80009b0:	2123      	movs	r1, #35	; 0x23
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <main+0x17c>)
 80009b4:	f00a fc6c 	bl	800b290 <CDC_Transmit_FS>
  HAL_Delay(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f000 fc03 	bl	80011c4 <HAL_Delay>
  CDC_Transmit_FS((uint8_t *) "Copyright (c): Ergo Haavasalu 2024, TalTech\r\n", 45);
 80009be:	212d      	movs	r1, #45	; 0x2d
 80009c0:	480a      	ldr	r0, [pc, #40]	; (80009ec <main+0x180>)
 80009c2:	f00a fc65 	bl	800b290 <CDC_Transmit_FS>
  HAL_Delay(1);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f000 fbfc 	bl	80011c4 <HAL_Delay>
  CDC_Transmit_FS((uint8_t *) "Enter a command (\"l\" for a list of available commands): ", 56);
 80009cc:	2138      	movs	r1, #56	; 0x38
 80009ce:	4808      	ldr	r0, [pc, #32]	; (80009f0 <main+0x184>)
 80009d0:	f00a fc5e 	bl	800b290 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  USB_Rx_Parser();
 80009d4:	f7ff fdaa 	bl	800052c <USB_Rx_Parser>
 80009d8:	e7fc      	b.n	80009d4 <main+0x168>
 80009da:	bf00      	nop
 80009dc:	48000800 	.word	0x48000800
 80009e0:	80c3c901 	.word	0x80c3c901
 80009e4:	20000564 	.word	0x20000564
 80009e8:	0800bed4 	.word	0x0800bed4
 80009ec:	0800bef8 	.word	0x0800bef8
 80009f0:	0800bd60 	.word	0x0800bd60

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b096      	sub	sp, #88	; 0x58
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2244      	movs	r2, #68	; 0x44
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f00b f95a 	bl	800bcbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a1a:	f003 fbcf 	bl	80041bc <HAL_PWREx_ControlVoltageScaling>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a24:	f000 f9c8 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a32:	2340      	movs	r3, #64	; 0x40
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a36:	2301      	movs	r3, #1
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000a3e:	23b0      	movs	r3, #176	; 0xb0
 8000a40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a42:	2302      	movs	r3, #2
 8000a44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a46:	2302      	movs	r3, #2
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a4e:	230a      	movs	r3, #10
 8000a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 fc12 	bl	8004288 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a6a:	f000 f9a5 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2303      	movs	r3, #3
 8000a74:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	2104      	movs	r1, #4
 8000a86:	4618      	mov	r0, r3
 8000a88:	f004 f860 	bl	8004b4c <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a92:	f000 f991 	bl	8000db8 <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3758      	adds	r7, #88	; 0x58
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ac2:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000ac4:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <MX_ADC1_Init+0xe4>)
 8000ac6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac8:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ace:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad4:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ada:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aec:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b22:	4817      	ldr	r0, [pc, #92]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000b24:	f000 fd12 	bl	800154c <HAL_ADC_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b2e:	f000 f943 	bl	8000db8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4810      	ldr	r0, [pc, #64]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000b3e:	f001 fa71 	bl	8002024 <HAL_ADCEx_MultiModeConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b48:	f000 f936 	bl	8000db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_ADC1_Init+0xe8>)
 8000b4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b50:	2306      	movs	r3, #6
 8000b52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b58:	237f      	movs	r3, #127	; 0x7f
 8000b5a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_ADC1_Init+0xe0>)
 8000b6a:	f000 fe39 	bl	80017e0 <HAL_ADC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b74:	f000 f920 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000128 	.word	0x20000128
 8000b84:	50040000 	.word	0x50040000
 8000b88:	2e300800 	.word	0x2e300800

08000b8c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_LPUART1_UART_Init+0x58>)
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MX_LPUART1_UART_Init+0x5c>)
 8000b94:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_LPUART1_UART_Init+0x58>)
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <MX_LPUART1_UART_Init+0x60>)
 8000b9a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_LPUART1_UART_Init+0x58>)
 8000b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ba2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_LPUART1_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_LPUART1_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_LPUART1_UART_Init+0x58>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_LPUART1_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_LPUART1_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_LPUART1_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_LPUART1_UART_Init+0x58>)
 8000bd0:	f005 ff03 	bl	80069da <HAL_RS485Ex_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bda:	f000 f8ed 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000018c 	.word	0x2000018c
 8000be8:	40008000 	.word	0x40008000
 8000bec:	00033324 	.word	0x00033324

08000bf0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000bf6:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <MX_SPI1_Init+0x78>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000bfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c26:	2210      	movs	r2, #16
 8000c28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c3e:	2207      	movs	r2, #7
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_SPI1_Init+0x74>)
 8000c50:	f004 fb26 	bl	80052a0 <HAL_SPI_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c5a:	f000 f8ad 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000214 	.word	0x20000214
 8000c68:	40013000 	.word	0x40013000

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	4b4a      	ldr	r3, [pc, #296]	; (8000dac <MX_GPIO_Init+0x140>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a49      	ldr	r2, [pc, #292]	; (8000dac <MX_GPIO_Init+0x140>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b47      	ldr	r3, [pc, #284]	; (8000dac <MX_GPIO_Init+0x140>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b44      	ldr	r3, [pc, #272]	; (8000dac <MX_GPIO_Init+0x140>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	4a43      	ldr	r2, [pc, #268]	; (8000dac <MX_GPIO_Init+0x140>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca6:	4b41      	ldr	r3, [pc, #260]	; (8000dac <MX_GPIO_Init+0x140>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b3e      	ldr	r3, [pc, #248]	; (8000dac <MX_GPIO_Init+0x140>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a3d      	ldr	r2, [pc, #244]	; (8000dac <MX_GPIO_Init+0x140>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <MX_GPIO_Init+0x140>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOST_EN_GPIO_Port, BOOST_EN_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd0:	4837      	ldr	r0, [pc, #220]	; (8000db0 <MX_GPIO_Init+0x144>)
 8000cd2:	f001 fccf 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYS_RST_Pin|TRANS_SDN_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f248 4110 	movw	r1, #33808	; 0x8410
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f001 fcc8 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FWD_MEAS_AMP_EN_Pin|REV_MEAS_AMP_EN_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	21c0      	movs	r1, #192	; 0xc0
 8000ce8:	4832      	ldr	r0, [pc, #200]	; (8000db4 <MX_GPIO_Init+0x148>)
 8000cea:	f001 fcc3 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOOST_EN_Pin */
  GPIO_InitStruct.Pin = BOOST_EN_Pin;
 8000cee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOST_EN_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	482a      	ldr	r0, [pc, #168]	; (8000db0 <MX_GPIO_Init+0x144>)
 8000d08:	f001 fb42 	bl	8002390 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYS_RST_Pin TRANS_SDN_Pin */
  GPIO_InitStruct.Pin = SYS_RST_Pin|TRANS_SDN_Pin;
 8000d0c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f001 fb32 	bl	8002390 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRANS_NIRQ_Pin */
  GPIO_InitStruct.Pin = TRANS_NIRQ_Pin;
 8000d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TRANS_NIRQ_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d46:	f001 fb23 	bl	8002390 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDO_PG_Pin */
  GPIO_InitStruct.Pin = LDO_PG_Pin;
 8000d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LDO_PG_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f001 fb15 	bl	8002390 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f001 fb05 	bl	8002390 <HAL_GPIO_Init>

  /*Configure GPIO pins : FWD_MEAS_AMP_EN_Pin REV_MEAS_AMP_EN_Pin */
  GPIO_InitStruct.Pin = FWD_MEAS_AMP_EN_Pin|REV_MEAS_AMP_EN_Pin;
 8000d86:	23c0      	movs	r3, #192	; 0xc0
 8000d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_GPIO_Init+0x148>)
 8000d9e:	f001 faf7 	bl	8002390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000
 8000db0:	48000800 	.word	0x48000800
 8000db4:	48000400 	.word	0x48000400

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <Error_Handler+0x8>
	...

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_MspInit+0x44>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_MspInit+0x44>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_MspInit+0x44>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_MspInit+0x44>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_MspInit+0x44>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_MspInit+0x44>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a15      	ldr	r2, [pc, #84]	; (8000e80 <HAL_ADC_MspInit+0x74>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d124      	bne.n	8000e78 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_ADC_MspInit+0x78>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <HAL_ADC_MspInit+0x78>)
 8000e34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_ADC_MspInit+0x78>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_ADC_MspInit+0x78>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <HAL_ADC_MspInit+0x78>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_ADC_MspInit+0x78>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e5e:	23c0      	movs	r3, #192	; 0xc0
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e62:	230b      	movs	r3, #11
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f001 fa8c 	bl	8002390 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	50040000 	.word	0x50040000
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b098      	sub	sp, #96	; 0x60
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	2234      	movs	r2, #52	; 0x34
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00a ff07 	bl	800bcbc <memset>
  if(huart->Instance==LPUART1)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a2d      	ldr	r2, [pc, #180]	; (8000f68 <HAL_UART_MspInit+0xe0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d152      	bne.n	8000f5e <HAL_UART_MspInit+0xd6>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000eb8:	2320      	movs	r3, #32
 8000eba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec0:	f107 0318 	add.w	r3, r7, #24
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 f865 	bl	8004f94 <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ed0:	f7ff ff72 	bl	8000db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ed4:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <HAL_UART_MspInit+0xe4>)
 8000ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed8:	4a24      	ldr	r2, [pc, #144]	; (8000f6c <HAL_UART_MspInit+0xe4>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <HAL_UART_MspInit+0xe4>)
 8000ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <HAL_UART_MspInit+0xe4>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <HAL_UART_MspInit+0xe4>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_UART_MspInit+0xe4>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_UART_MspInit+0xe4>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <HAL_UART_MspInit+0xe4>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_UART_MspInit+0xe4>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PB1     ------> LPUART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f001 fa29 	bl	8002390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_UART_MspInit+0xe8>)
 8000f5a:	f001 fa19 	bl	8002390 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3760      	adds	r7, #96	; 0x60
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40008000 	.word	0x40008000
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000400 	.word	0x48000400

08000f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <HAL_SPI_MspInit+0x7c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d127      	bne.n	8000fe6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_SPI_MspInit+0x80>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <HAL_SPI_MspInit+0x80>)
 8000f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_SPI_MspInit+0x80>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_SPI_MspInit+0x80>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <HAL_SPI_MspInit+0x80>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_SPI_MspInit+0x80>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fc6:	2338      	movs	r3, #56	; 0x38
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <HAL_SPI_MspInit+0x84>)
 8000fe2:	f001 f9d5 	bl	8002390 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40013000 	.word	0x40013000
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48000400 	.word	0x48000400

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 f89c 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <USB_IRQHandler+0x10>)
 8001056:	f001 fc4d 	bl	80028f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000f68 	.word	0x20000f68

08001064 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800108c:	f7ff ffea 	bl	8001064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001092:	490d      	ldr	r1, [pc, #52]	; (80010c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <LoopForever+0xe>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a8:	4c0a      	ldr	r4, [pc, #40]	; (80010d4 <LoopForever+0x16>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b6:	f00a fe1b 	bl	800bcf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ba:	f7ff fbd7 	bl	800086c <main>

080010be <LoopForever>:

LoopForever:
    b LoopForever
 80010be:	e7fe      	b.n	80010be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010c0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80010cc:	0800bfc8 	.word	0x0800bfc8
  ldr r2, =_sbss
 80010d0:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80010d4:	20001480 	.word	0x20001480

080010d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC1_2_IRQHandler>

080010da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f001 f911 	bl	800230c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ea:	200f      	movs	r0, #15
 80010ec:	f000 f80e 	bl	800110c <HAL_InitTick>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d002      	beq.n	80010fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	e001      	b.n	8001100 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010fc:	f7ff fe62 	bl	8000dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001100:	79fb      	ldrb	r3, [r7, #7]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_InitTick+0x6c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d023      	beq.n	8001168 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_InitTick+0x70>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_InitTick+0x6c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f91d 	bl	8002376 <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10f      	bne.n	8001162 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d809      	bhi.n	800115c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f001 f8e7 	bl	8002322 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_InitTick+0x74>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e007      	b.n	800116c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e004      	b.n	800116c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	e001      	b.n	800116c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008
 800117c:	20000000 	.word	0x20000000
 8001180:	20000004 	.word	0x20000004

08001184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x20>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x24>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_IncTick+0x24>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000280 	.word	0x20000280

080011ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return uwTick;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <HAL_GetTick+0x14>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000280 	.word	0x20000280

080011c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff ffee 	bl	80011ac <HAL_GetTick>
 80011d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d005      	beq.n	80011ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_Delay+0x44>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ea:	bf00      	nop
 80011ec:	f7ff ffde 	bl	80011ac <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8f7      	bhi.n	80011ec <HAL_Delay+0x28>
  {
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008

0800120c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	609a      	str	r2, [r3, #8]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	609a      	str	r2, [r3, #8]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3360      	adds	r3, #96	; 0x60
 8001286:	461a      	mov	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <LL_ADC_SetOffset+0x44>)
 8001296:	4013      	ands	r3, r2
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	4313      	orrs	r3, r2
 80012a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012ac:	bf00      	nop
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	03fff000 	.word	0x03fff000

080012bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3360      	adds	r3, #96	; 0x60
 80012ca:	461a      	mov	r2, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3360      	adds	r3, #96	; 0x60
 80012f8:	461a      	mov	r2, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	431a      	orrs	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	615a      	str	r2, [r3, #20]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3330      	adds	r3, #48	; 0x30
 8001354:	461a      	mov	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	4413      	add	r3, r2
 8001362:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	f003 031f 	and.w	r3, r3, #31
 800136e:	211f      	movs	r1, #31
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	401a      	ands	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0e9b      	lsrs	r3, r3, #26
 800137c:	f003 011f 	and.w	r1, r3, #31
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	431a      	orrs	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3314      	adds	r3, #20
 80013ac:	461a      	mov	r2, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	0e5b      	lsrs	r3, r3, #25
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	0d1b      	lsrs	r3, r3, #20
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	2107      	movs	r1, #7
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	401a      	ands	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	0d1b      	lsrs	r3, r3, #20
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	431a      	orrs	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013e6:	bf00      	nop
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800140c:	43db      	mvns	r3, r3
 800140e:	401a      	ands	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0318 	and.w	r3, r3, #24
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001418:	40d9      	lsrs	r1, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	400b      	ands	r3, r1
 800141e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001422:	431a      	orrs	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	0007ffff 	.word	0x0007ffff

0800143c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800144c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6093      	str	r3, [r2, #8]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001474:	d101      	bne.n	800147a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001498:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800149c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014c4:	d101      	bne.n	80014ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <LL_ADC_IsEnabled+0x18>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <LL_ADC_IsEnabled+0x1a>
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b04      	cmp	r3, #4
 8001510:	d101      	bne.n	8001516 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b08      	cmp	r3, #8
 8001536:	d101      	bne.n	800153c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e12b      	b.n	80017be <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fc49 	bl	8000e0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff67 	bl	8001460 <LL_ADC_IsDeepPowerDownEnabled>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d004      	beq.n	80015a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff4d 	bl	800143c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ff82 	bl	80014b0 <LL_ADC_IsInternalRegulatorEnabled>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d115      	bne.n	80015de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff66 	bl	8001488 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015bc:	4b82      	ldr	r3, [pc, #520]	; (80017c8 <HAL_ADC_Init+0x27c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	4a82      	ldr	r2, [pc, #520]	; (80017cc <HAL_ADC_Init+0x280>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	099b      	lsrs	r3, r3, #6
 80015ca:	3301      	adds	r3, #1
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015d0:	e002      	b.n	80015d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f9      	bne.n	80015d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff64 	bl	80014b0 <LL_ADC_IsInternalRegulatorEnabled>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10d      	bne.n	800160a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f2:	f043 0210 	orr.w	r2, r3, #16
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff75 	bl	80014fe <LL_ADC_REG_IsConversionOngoing>
 8001614:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 80c4 	bne.w	80017ac <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 80c0 	bne.w	80017ac <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001630:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001634:	f043 0202 	orr.w	r2, r3, #2
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff49 	bl	80014d8 <LL_ADC_IsEnabled>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d110      	bne.n	800166e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800164c:	4860      	ldr	r0, [pc, #384]	; (80017d0 <HAL_ADC_Init+0x284>)
 800164e:	f7ff ff43 	bl	80014d8 <LL_ADC_IsEnabled>
 8001652:	4604      	mov	r4, r0
 8001654:	485f      	ldr	r0, [pc, #380]	; (80017d4 <HAL_ADC_Init+0x288>)
 8001656:	f7ff ff3f 	bl	80014d8 <LL_ADC_IsEnabled>
 800165a:	4603      	mov	r3, r0
 800165c:	4323      	orrs	r3, r4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d105      	bne.n	800166e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4619      	mov	r1, r3
 8001668:	485b      	ldr	r0, [pc, #364]	; (80017d8 <HAL_ADC_Init+0x28c>)
 800166a:	f7ff fdcf 	bl	800120c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7e5b      	ldrb	r3, [r3, #25]
 8001672:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001678:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800167e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001684:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d106      	bne.n	80016aa <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	3b01      	subs	r3, #1
 80016a2:	045b      	lsls	r3, r3, #17
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	4b43      	ldr	r3, [pc, #268]	; (80017dc <HAL_ADC_Init+0x290>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	69b9      	ldr	r1, [r7, #24]
 80016d6:	430b      	orrs	r3, r1
 80016d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff20 	bl	8001524 <LL_ADC_INJ_IsConversionOngoing>
 80016e4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d13d      	bne.n	8001768 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d13a      	bne.n	8001768 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016f6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016fe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800170e:	f023 0302 	bic.w	r3, r3, #2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	430b      	orrs	r3, r1
 800171a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001722:	2b01      	cmp	r3, #1
 8001724:	d118      	bne.n	8001758 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800173c:	4311      	orrs	r1, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001748:	430a      	orrs	r2, r1
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0201 	orr.w	r2, r2, #1
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	e007      	b.n	8001768 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d10c      	bne.n	800178a <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f023 010f 	bic.w	r1, r3, #15
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	1e5a      	subs	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	631a      	str	r2, [r3, #48]	; 0x30
 8001788:	e007      	b.n	800179a <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 020f 	bic.w	r2, r2, #15
 8001798:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	f023 0303 	bic.w	r3, r3, #3
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
 80017aa:	e007      	b.n	80017bc <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b0:	f043 0210 	orr.w	r2, r3, #16
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000000 	.word	0x20000000
 80017cc:	053e2d63 	.word	0x053e2d63
 80017d0:	50040000 	.word	0x50040000
 80017d4:	50040100 	.word	0x50040100
 80017d8:	50040300 	.word	0x50040300
 80017dc:	fff0c007 	.word	0xfff0c007

080017e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0b6      	sub	sp, #216	; 0xd8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x22>
 80017fe:	2302      	movs	r3, #2
 8001800:	e3d5      	b.n	8001fae <HAL_ADC_ConfigChannel+0x7ce>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fe75 	bl	80014fe <LL_ADC_REG_IsConversionOngoing>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 83ba 	bne.w	8001f90 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d824      	bhi.n	8001876 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	3b02      	subs	r3, #2
 8001832:	2b03      	cmp	r3, #3
 8001834:	d81b      	bhi.n	800186e <HAL_ADC_ConfigChannel+0x8e>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <HAL_ADC_ConfigChannel+0x5c>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800184d 	.word	0x0800184d
 8001840:	08001855 	.word	0x08001855
 8001844:	0800185d 	.word	0x0800185d
 8001848:	08001865 	.word	0x08001865
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800184c:	230c      	movs	r3, #12
 800184e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001852:	e010      	b.n	8001876 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001854:	2312      	movs	r3, #18
 8001856:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800185a:	e00c      	b.n	8001876 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800185c:	2318      	movs	r3, #24
 800185e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001862:	e008      	b.n	8001876 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800186c:	e003      	b.n	8001876 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800186e:	2306      	movs	r3, #6
 8001870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001874:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001884:	f7ff fd5e 	bl	8001344 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fe36 	bl	80014fe <LL_ADC_REG_IsConversionOngoing>
 8001892:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fe42 	bl	8001524 <LL_ADC_INJ_IsConversionOngoing>
 80018a0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 81bf 	bne.w	8001c2c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 81ba 	bne.w	8001c2c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018c0:	d10f      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff fd65 	bl	800139c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fd1f 	bl	800131e <LL_ADC_SetSamplingTimeCommonConfig>
 80018e0:	e00e      	b.n	8001900 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6819      	ldr	r1, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	461a      	mov	r2, r3
 80018f0:	f7ff fd54 	bl	800139c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fd0f 	bl	800131e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d00a      	beq.n	8001938 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6919      	ldr	r1, [r3, #16]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001932:	f7ff fc9f 	bl	8001274 <LL_ADC_SetOffset>
 8001936:	e179      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fcbc 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10a      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x184>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fcb1 	bl	80012bc <LL_ADC_GetOffsetChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	0e9b      	lsrs	r3, r3, #26
 800195e:	f003 021f 	and.w	r2, r3, #31
 8001962:	e01e      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x1c2>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fca6 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001982:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001986:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800198a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001992:	2320      	movs	r3, #32
 8001994:	e004      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x1da>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	0e9b      	lsrs	r3, r3, #26
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	e018      	b.n	80019ec <HAL_ADC_ConfigChannel+0x20c>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80019ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80019d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80019de:	2320      	movs	r3, #32
 80019e0:	e004      	b.n	80019ec <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80019e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d106      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fc75 	bl	80012e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fc59 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x24a>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fc4e 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	0e9b      	lsrs	r3, r3, #26
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	e01e      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x288>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2101      	movs	r1, #1
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fc43 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001a50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	e004      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001a5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x2a0>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0e9b      	lsrs	r3, r3, #26
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	e018      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x2d2>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a8c:	fa93 f3a3 	rbit	r3, r3
 8001a90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	e004      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d106      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	2101      	movs	r1, #1
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fc12 	bl	80012e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fbf6 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10a      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x310>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2102      	movs	r1, #2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fbeb 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	0e9b      	lsrs	r3, r3, #26
 8001aea:	f003 021f 	and.w	r2, r3, #31
 8001aee:	e01e      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x34e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2102      	movs	r1, #2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fbe0 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001b1e:	2320      	movs	r3, #32
 8001b20:	e004      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d105      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x366>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	0e9b      	lsrs	r3, r3, #26
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	e014      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x390>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001b5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001b62:	2320      	movs	r3, #32
 8001b64:	e004      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d106      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fbb3 	bl	80012e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2103      	movs	r1, #3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fb97 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10a      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x3ce>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fb8c 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	0e9b      	lsrs	r3, r3, #26
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	e017      	b.n	8001bde <HAL_ADC_ConfigChannel+0x3fe>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2103      	movs	r1, #3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fb81 	bl	80012bc <LL_ADC_GetOffsetChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc8:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001bd0:	2320      	movs	r3, #32
 8001bd2:	e003      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x416>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0e9b      	lsrs	r3, r3, #26
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	e011      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x43a>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001c04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c06:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e003      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d106      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	2103      	movs	r1, #3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fb5e 	bl	80012e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fc51 	bl	80014d8 <LL_ADC_IsEnabled>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 813f 	bne.w	8001ebc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6819      	ldr	r1, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f7ff fbd2 	bl	80013f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a8e      	ldr	r2, [pc, #568]	; (8001e90 <HAL_ADC_ConfigChannel+0x6b0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f040 8130 	bne.w	8001ebc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10b      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x4a4>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	3301      	adds	r3, #1
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	bf94      	ite	ls
 8001c7c:	2301      	movls	r3, #1
 8001c7e:	2300      	movhi	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	e019      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x4d8>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e003      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2b09      	cmp	r3, #9
 8001cb0:	bf94      	ite	ls
 8001cb2:	2301      	movls	r3, #1
 8001cb4:	2300      	movhi	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d079      	beq.n	8001db0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x4f8>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0e9b      	lsrs	r3, r3, #26
 8001cce:	3301      	adds	r3, #1
 8001cd0:	069b      	lsls	r3, r3, #26
 8001cd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cd6:	e015      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x524>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	e003      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	069b      	lsls	r3, r3, #26
 8001d00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x544>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0e9b      	lsrs	r3, r3, #26
 8001d16:	3301      	adds	r3, #1
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	e017      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x574>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d34:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	e003      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	2101      	movs	r1, #1
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	ea42 0103 	orr.w	r1, r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10a      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x59a>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0e9b      	lsrs	r3, r3, #26
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	051b      	lsls	r3, r3, #20
 8001d78:	e018      	b.n	8001dac <HAL_ADC_ConfigChannel+0x5cc>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001d92:	2320      	movs	r3, #32
 8001d94:	e003      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dac:	430b      	orrs	r3, r1
 8001dae:	e080      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x5ec>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	069b      	lsls	r3, r3, #26
 8001dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dca:	e015      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x618>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001de4:	2320      	movs	r3, #32
 8001de6:	e003      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	069b      	lsls	r3, r3, #26
 8001df4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x638>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	0e9b      	lsrs	r3, r3, #26
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	e017      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x668>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	61bb      	str	r3, [r7, #24]
  return result;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e003      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2101      	movs	r1, #1
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	ea42 0103 	orr.w	r1, r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x694>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0e9b      	lsrs	r3, r3, #26
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	3b1e      	subs	r3, #30
 8001e6c:	051b      	lsls	r3, r3, #20
 8001e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e72:	e01d      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x6d0>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	60fb      	str	r3, [r7, #12]
  return result;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d103      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	e005      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x6bc>
 8001e90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f003 021f 	and.w	r2, r3, #31
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b1e      	subs	r3, #30
 8001eaa:	051b      	lsls	r3, r3, #20
 8001eac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7ff fa70 	bl	800139c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d06c      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ec8:	483c      	ldr	r0, [pc, #240]	; (8001fbc <HAL_ADC_ConfigChannel+0x7dc>)
 8001eca:	f7ff f9c5 	bl	8001258 <LL_ADC_GetCommonPathInternalCh>
 8001ece:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a3a      	ldr	r2, [pc, #232]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d127      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001edc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d121      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a35      	ldr	r2, [pc, #212]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d157      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ef6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001efa:	4619      	mov	r1, r3
 8001efc:	482f      	ldr	r0, [pc, #188]	; (8001fbc <HAL_ADC_ConfigChannel+0x7dc>)
 8001efe:	f7ff f998 	bl	8001232 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f02:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7e8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	099b      	lsrs	r3, r3, #6
 8001f08:	4a30      	ldr	r2, [pc, #192]	; (8001fcc <HAL_ADC_ConfigChannel+0x7ec>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	099b      	lsrs	r3, r3, #6
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f1c:	e002      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f9      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f2a:	e03a      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <HAL_ADC_ConfigChannel+0x7f0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d113      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10d      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1f      	ldr	r2, [pc, #124]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d12a      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f54:	4619      	mov	r1, r3
 8001f56:	4819      	ldr	r0, [pc, #100]	; (8001fbc <HAL_ADC_ConfigChannel+0x7dc>)
 8001f58:	f7ff f96b 	bl	8001232 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f5c:	e021      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <HAL_ADC_ConfigChannel+0x7f4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d11c      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d116      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d111      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f86:	4619      	mov	r1, r3
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <HAL_ADC_ConfigChannel+0x7dc>)
 8001f8a:	f7ff f952 	bl	8001232 <LL_ADC_SetCommonPathInternalCh>
 8001f8e:	e008      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001faa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	37d8      	adds	r7, #216	; 0xd8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	80080000 	.word	0x80080000
 8001fbc:	50040300 	.word	0x50040300
 8001fc0:	c7520000 	.word	0xc7520000
 8001fc4:	50040000 	.word	0x50040000
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	053e2d63 	.word	0x053e2d63
 8001fd0:	cb840000 	.word	0xcb840000
 8001fd4:	80000001 	.word	0x80000001

08001fd8 <LL_ADC_IsEnabled>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <LL_ADC_IsEnabled+0x18>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <LL_ADC_IsEnabled+0x1a>
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_ADC_REG_IsConversionOngoing>:
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b04      	cmp	r3, #4
 8002010:	d101      	bne.n	8002016 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b09f      	sub	sp, #124	; 0x7c
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800203e:	2302      	movs	r3, #2
 8002040:	e089      	b.n	8002156 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800204a:	2300      	movs	r3, #0
 800204c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800204e:	2300      	movs	r3, #0
 8002050:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a42      	ldr	r2, [pc, #264]	; (8002160 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d102      	bne.n	8002062 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800205c:	4b41      	ldr	r3, [pc, #260]	; (8002164 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	e001      	b.n	8002066 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10b      	bne.n	8002084 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e068      	b.n	8002156 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ffb9 	bl	8001ffe <LL_ADC_REG_IsConversionOngoing>
 800208c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ffb3 	bl	8001ffe <LL_ADC_REG_IsConversionOngoing>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d14a      	bne.n	8002134 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800209e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d147      	bne.n	8002134 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80020a4:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80020a6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d027      	beq.n	8002100 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80020b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020c2:	035b      	lsls	r3, r3, #13
 80020c4:	430b      	orrs	r3, r1
 80020c6:	431a      	orrs	r2, r3
 80020c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020cc:	4824      	ldr	r0, [pc, #144]	; (8002160 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80020ce:	f7ff ff83 	bl	8001fd8 <LL_ADC_IsEnabled>
 80020d2:	4604      	mov	r4, r0
 80020d4:	4823      	ldr	r0, [pc, #140]	; (8002164 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020d6:	f7ff ff7f 	bl	8001fd8 <LL_ADC_IsEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	4323      	orrs	r3, r4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d132      	bne.n	8002148 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80020e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020ea:	f023 030f 	bic.w	r3, r3, #15
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	6811      	ldr	r1, [r2, #0]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	6892      	ldr	r2, [r2, #8]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	431a      	orrs	r2, r3
 80020fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020fe:	e023      	b.n	8002148 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800210a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800210c:	4814      	ldr	r0, [pc, #80]	; (8002160 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800210e:	f7ff ff63 	bl	8001fd8 <LL_ADC_IsEnabled>
 8002112:	4604      	mov	r4, r0
 8002114:	4813      	ldr	r0, [pc, #76]	; (8002164 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002116:	f7ff ff5f 	bl	8001fd8 <LL_ADC_IsEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	4323      	orrs	r3, r4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d112      	bne.n	8002148 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800212a:	f023 030f 	bic.w	r3, r3, #15
 800212e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002130:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002132:	e009      	b.n	8002148 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	f043 0220 	orr.w	r2, r3, #32
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002146:	e000      	b.n	800214a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002148:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002152:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002156:	4618      	mov	r0, r3
 8002158:	377c      	adds	r7, #124	; 0x7c
 800215a:	46bd      	mov	sp, r7
 800215c:	bd90      	pop	{r4, r7, pc}
 800215e:	bf00      	nop
 8002160:	50040000 	.word	0x50040000
 8002164:	50040100 	.word	0x50040100
 8002168:	50040300 	.word	0x50040300

0800216c <__NVIC_SetPriorityGrouping>:
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219e:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60d3      	str	r3, [r2, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_GetPriorityGrouping>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0307 	and.w	r3, r3, #7
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_EnableIRQ>:
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db0b      	blt.n	80021fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4907      	ldr	r1, [pc, #28]	; (8002208 <__NVIC_EnableIRQ+0x38>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	; (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	; (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d8:	d301      	bcc.n	80022de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022da:	2301      	movs	r3, #1
 80022dc:	e00f      	b.n	80022fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <SysTick_Config+0x40>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e6:	210f      	movs	r1, #15
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f7ff ff8e 	bl	800220c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <SysTick_Config+0x40>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <SysTick_Config+0x40>)
 80022f8:	2207      	movs	r2, #7
 80022fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	e000e010 	.word	0xe000e010

0800230c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff29 	bl	800216c <__NVIC_SetPriorityGrouping>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002334:	f7ff ff3e 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 8002338:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	6978      	ldr	r0, [r7, #20]
 8002340:	f7ff ff8e 	bl	8002260 <NVIC_EncodePriority>
 8002344:	4602      	mov	r2, r0
 8002346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff5d 	bl	800220c <__NVIC_SetPriority>
}
 8002352:	bf00      	nop
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	4603      	mov	r3, r0
 8002362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff31 	bl	80021d0 <__NVIC_EnableIRQ>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ffa2 	bl	80022c8 <SysTick_Config>
 8002384:	4603      	mov	r3, r0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239e:	e14e      	b.n	800263e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2101      	movs	r1, #1
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	4013      	ands	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 8140 	beq.w	8002638 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d005      	beq.n	80023d0 <HAL_GPIO_Init+0x40>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d130      	bne.n	8002432 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002406:	2201      	movs	r2, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 0201 	and.w	r2, r3, #1
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b03      	cmp	r3, #3
 800243c:	d017      	beq.n	800246e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d123      	bne.n	80024c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	08da      	lsrs	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3208      	adds	r2, #8
 8002482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002486:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	220f      	movs	r2, #15
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	08da      	lsrs	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3208      	adds	r2, #8
 80024bc:	6939      	ldr	r1, [r7, #16]
 80024be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2203      	movs	r2, #3
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0203 	and.w	r2, r3, #3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 809a 	beq.w	8002638 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002504:	4b55      	ldr	r3, [pc, #340]	; (800265c <HAL_GPIO_Init+0x2cc>)
 8002506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002508:	4a54      	ldr	r2, [pc, #336]	; (800265c <HAL_GPIO_Init+0x2cc>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6613      	str	r3, [r2, #96]	; 0x60
 8002510:	4b52      	ldr	r3, [pc, #328]	; (800265c <HAL_GPIO_Init+0x2cc>)
 8002512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800251c:	4a50      	ldr	r2, [pc, #320]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	3302      	adds	r3, #2
 8002524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	220f      	movs	r2, #15
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002546:	d013      	beq.n	8002570 <HAL_GPIO_Init+0x1e0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a46      	ldr	r2, [pc, #280]	; (8002664 <HAL_GPIO_Init+0x2d4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00d      	beq.n	800256c <HAL_GPIO_Init+0x1dc>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a45      	ldr	r2, [pc, #276]	; (8002668 <HAL_GPIO_Init+0x2d8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d007      	beq.n	8002568 <HAL_GPIO_Init+0x1d8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a44      	ldr	r2, [pc, #272]	; (800266c <HAL_GPIO_Init+0x2dc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_GPIO_Init+0x1d4>
 8002560:	2303      	movs	r3, #3
 8002562:	e006      	b.n	8002572 <HAL_GPIO_Init+0x1e2>
 8002564:	2307      	movs	r3, #7
 8002566:	e004      	b.n	8002572 <HAL_GPIO_Init+0x1e2>
 8002568:	2302      	movs	r3, #2
 800256a:	e002      	b.n	8002572 <HAL_GPIO_Init+0x1e2>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <HAL_GPIO_Init+0x1e2>
 8002570:	2300      	movs	r3, #0
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	f002 0203 	and.w	r2, r2, #3
 8002578:	0092      	lsls	r2, r2, #2
 800257a:	4093      	lsls	r3, r2
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002582:	4937      	ldr	r1, [pc, #220]	; (8002660 <HAL_GPIO_Init+0x2d0>)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3302      	adds	r3, #2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002590:	4b37      	ldr	r3, [pc, #220]	; (8002670 <HAL_GPIO_Init+0x2e0>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025b4:	4a2e      	ldr	r2, [pc, #184]	; (8002670 <HAL_GPIO_Init+0x2e0>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025ba:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <HAL_GPIO_Init+0x2e0>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025de:	4a24      	ldr	r2, [pc, #144]	; (8002670 <HAL_GPIO_Init+0x2e0>)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025e4:	4b22      	ldr	r3, [pc, #136]	; (8002670 <HAL_GPIO_Init+0x2e0>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002608:	4a19      	ldr	r2, [pc, #100]	; (8002670 <HAL_GPIO_Init+0x2e0>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800260e:	4b18      	ldr	r3, [pc, #96]	; (8002670 <HAL_GPIO_Init+0x2e0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002632:	4a0f      	ldr	r2, [pc, #60]	; (8002670 <HAL_GPIO_Init+0x2e0>)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f aea9 	bne.w	80023a0 <HAL_GPIO_Init+0x10>
  }
}
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40021000 	.word	0x40021000
 8002660:	40010000 	.word	0x40010000
 8002664:	48000400 	.word	0x48000400
 8002668:	48000800 	.word	0x48000800
 800266c:	48000c00 	.word	0x48000c00
 8002670:	40010400 	.word	0x40010400

08002674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
 8002680:	4613      	mov	r3, r2
 8002682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002690:	e002      	b.n	8002698 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a6:	b08b      	sub	sp, #44	; 0x2c
 80026a8:	af06      	add	r7, sp, #24
 80026aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0f8      	b.n	80028a8 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f008 ff3a 	bl	800b544 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2203      	movs	r2, #3
 80026d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 fa0b 	bl	8006af8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	687e      	ldr	r6, [r7, #4]
 80026ea:	466d      	mov	r5, sp
 80026ec:	f106 0410 	add.w	r4, r6, #16
 80026f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	602b      	str	r3, [r5, #0]
 80026f8:	1d33      	adds	r3, r6, #4
 80026fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026fc:	6838      	ldr	r0, [r7, #0]
 80026fe:	f004 f9d3 	bl	8006aa8 <USB_CoreInit>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0c9      	b.n	80028a8 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f004 fa07 	bl	8006b2e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	e040      	b.n	80027a8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	3301      	adds	r3, #1
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	440b      	add	r3, r1
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	3303      	adds	r3, #3
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	3338      	adds	r3, #56	; 0x38
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	333c      	adds	r3, #60	; 0x3c
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	3340      	adds	r3, #64	; 0x40
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	3301      	adds	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d3b9      	bcc.n	8002726 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	e044      	b.n	8002842 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	3301      	adds	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	d3b5      	bcc.n	80027b8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	687e      	ldr	r6, [r7, #4]
 8002854:	466d      	mov	r5, sp
 8002856:	f106 0410 	add.w	r4, r6, #16
 800285a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800285c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	602b      	str	r3, [r5, #0]
 8002862:	1d33      	adds	r3, r6, #4
 8002864:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002866:	6838      	ldr	r0, [r7, #0]
 8002868:	f004 f96e 	bl	8006b48 <USB_DevInit>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e014      	b.n	80028a8 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d102      	bne.n	800289c <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f001 fc58 	bl	800414c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f006 fbff 	bl	80090a4 <USB_DevDisconnect>

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_PCD_Start+0x16>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e012      	b.n	80028ec <HAL_PCD_Start+0x3c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f004 f8f9 	bl	8006aca <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f006 fbca 	bl	8009076 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f006 fbe4 	bl	80090ce <USB_ReadInterrupts>
 8002906:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fb13 	bl	8002f3e <PCD_EP_ISR_Handler>

    return;
 8002918:	e110      	b.n	8002b3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002920:	2b00      	cmp	r3, #0
 8002922:	d013      	beq.n	800294c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800292c:	b29a      	uxth	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002936:	b292      	uxth	r2, r2
 8002938:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f008 feb8 	bl	800b6b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002942:	2100      	movs	r1, #0
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f8fc 	bl	8002b42 <HAL_PCD_SetAddress>

    return;
 800294a:	e0f7      	b.n	8002b3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00c      	beq.n	8002970 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800295e:	b29a      	uxth	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002968:	b292      	uxth	r2, r2
 800296a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800296e:	e0e5      	b.n	8002b3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00c      	beq.n	8002994 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002982:	b29a      	uxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298c:	b292      	uxth	r2, r2
 800298e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002992:	e0d3      	b.n	8002b3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d034      	beq.n	8002a08 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0204 	bic.w	r2, r2, #4
 80029b0:	b292      	uxth	r2, r2
 80029b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029be:	b29a      	uxth	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0208 	bic.w	r2, r2, #8
 80029c8:	b292      	uxth	r2, r2
 80029ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d107      	bne.n	80029e8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029e0:	2100      	movs	r1, #0
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f009 f916 	bl	800bc14 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f008 fe9b 	bl	800b724 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a00:	b292      	uxth	r2, r2
 8002a02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a06:	e099      	b.n	8002b3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d027      	beq.n	8002a62 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0208 	orr.w	r2, r2, #8
 8002a24:	b292      	uxth	r2, r2
 8002a26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a3c:	b292      	uxth	r2, r2
 8002a3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0204 	orr.w	r2, r2, #4
 8002a54:	b292      	uxth	r2, r2
 8002a56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f008 fe48 	bl	800b6f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002a60:	e06c      	b.n	8002b3c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d040      	beq.n	8002aee <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d12b      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0204 	orr.w	r2, r2, #4
 8002aa0:	b292      	uxth	r2, r2
 8002aa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0208 	orr.w	r2, r2, #8
 8002ab8:	b292      	uxth	r2, r2
 8002aba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	089b      	lsrs	r3, r3, #2
 8002ad2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002adc:	2101      	movs	r1, #1
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f009 f898 	bl	800bc14 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002ae4:	e02a      	b.n	8002b3c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f008 fe02 	bl	800b6f0 <HAL_PCD_SuspendCallback>
    return;
 8002aec:	e026      	b.n	8002b3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00f      	beq.n	8002b18 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b0a:	b292      	uxth	r2, r2
 8002b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f008 fdc0 	bl	800b696 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b16:	e011      	b.n	8002b3c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00c      	beq.n	8002b3c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b34:	b292      	uxth	r2, r2
 8002b36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b3a:	bf00      	nop
  }
}
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_PCD_SetAddress+0x1a>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e013      	b.n	8002b84 <HAL_PCD_SetAddress+0x42>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f006 fa6a 	bl	800904e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	4608      	mov	r0, r1
 8002b96:	4611      	mov	r1, r2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	70fb      	strb	r3, [r7, #3]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	803b      	strh	r3, [r7, #0]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	da0e      	bge.n	8002bd0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	705a      	strb	r2, [r3, #1]
 8002bce:	e00e      	b.n	8002bee <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	f003 0207 	and.w	r2, r3, #7
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bfa:	883a      	ldrh	r2, [r7, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	78ba      	ldrb	r2, [r7, #2]
 8002c04:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c06:	78bb      	ldrb	r3, [r7, #2]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d102      	bne.n	8002c12 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_PCD_EP_Open+0x94>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e00e      	b.n	8002c3e <HAL_PCD_EP_Open+0xb2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68f9      	ldr	r1, [r7, #12]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 ffac 	bl	8006b8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da0e      	bge.n	8002c78 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	705a      	strb	r2, [r3, #1]
 8002c76:	e00e      	b.n	8002c96 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	f003 0207 	and.w	r2, r3, #7
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_PCD_EP_Close+0x6a>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e00e      	b.n	8002cce <HAL_PCD_EP_Close+0x88>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68f9      	ldr	r1, [r7, #12]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f004 fb28 	bl	8007314 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce6:	7afb      	ldrb	r3, [r7, #11]
 8002ce8:	f003 0207 	and.w	r2, r3, #7
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d16:	7afb      	ldrb	r3, [r7, #11]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6979      	ldr	r1, [r7, #20]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 fce0 	bl	80076ee <USB_EPStartXfer>

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	f003 0207 	and.w	r2, r3, #7
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	460b      	mov	r3, r1
 8002d76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d78:	7afb      	ldrb	r3, [r7, #11]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2201      	movs	r2, #1
 8002db2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db4:	7afb      	ldrb	r3, [r7, #11]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6979      	ldr	r1, [r7, #20]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 fc91 	bl	80076ee <USB_EPStartXfer>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 0207 	and.w	r2, r3, #7
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d901      	bls.n	8002df4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04c      	b.n	8002e8e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	da0e      	bge.n	8002e1a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	705a      	strb	r2, [r3, #1]
 8002e18:	e00c      	b.n	8002e34 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_PCD_EP_SetStall+0x7e>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e01c      	b.n	8002e8e <HAL_PCD_EP_SetStall+0xb8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68f9      	ldr	r1, [r7, #12]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f005 fff4 	bl	8008e50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d108      	bne.n	8002e84 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f006 f935 	bl	80090ee <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 020f 	and.w	r2, r3, #15
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d901      	bls.n	8002eb4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e040      	b.n	8002f36 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da0e      	bge.n	8002eda <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	705a      	strb	r2, [r3, #1]
 8002ed8:	e00e      	b.n	8002ef8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	f003 0207 	and.w	r2, r3, #7
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_PCD_EP_ClrStall+0x82>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e00e      	b.n	8002f36 <HAL_PCD_EP_ClrStall+0xa0>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68f9      	ldr	r1, [r7, #12]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f005 ffe3 	bl	8008ef2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b096      	sub	sp, #88	; 0x58
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f46:	e3b1      	b.n	80036ac <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002f62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 8173 	bne.w	8003252 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d150      	bne.n	800301a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f88:	81fb      	strh	r3, [r7, #14]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	89fb      	ldrh	r3, [r7, #14]
 8002f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3328      	adds	r3, #40	; 0x28
 8002fa0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	441a      	add	r2, r3
 8002fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002fd8:	2100      	movs	r1, #0
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f008 fb41 	bl	800b662 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 835f 	beq.w	80036ac <PCD_EP_ISR_Handler+0x76e>
 8002fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f040 835a 	bne.w	80036ac <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003004:	b2da      	uxtb	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	b292      	uxth	r2, r2
 800300c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003018:	e348      	b.n	80036ac <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003020:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800302c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003034:	2b00      	cmp	r3, #0
 8003036:	d032      	beq.n	800309e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	4413      	add	r3, r2
 8003052:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800305c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800306a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800306c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800306e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003070:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003072:	b29b      	uxth	r3, r3
 8003074:	f006 f889 	bl	800918a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b29a      	uxth	r2, r3
 8003080:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003084:	4013      	ands	r3, r2
 8003086:	823b      	strh	r3, [r7, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	8a3a      	ldrh	r2, [r7, #16]
 800308e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003092:	b292      	uxth	r2, r2
 8003094:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f008 fab6 	bl	800b608 <HAL_PCD_SetupStageCallback>
 800309c:	e306      	b.n	80036ac <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800309e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f280 8302 	bge.w	80036ac <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030b4:	4013      	ands	r3, r2
 80030b6:	83fb      	strh	r3, [r7, #30]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	8bfa      	ldrh	r2, [r7, #30]
 80030be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030c2:	b292      	uxth	r2, r2
 80030c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	4413      	add	r3, r2
 80030e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80030ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d019      	beq.n	800312a <PCD_EP_ISR_Handler+0x1ec>
 80030f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003104:	6959      	ldr	r1, [r3, #20]
 8003106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003108:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800310a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800310e:	b29b      	uxth	r3, r3
 8003110:	f006 f83b 	bl	800918a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	441a      	add	r2, r3
 800311e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003120:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003122:	2100      	movs	r1, #0
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f008 fa81 	bl	800b62c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003134:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313c:	2b00      	cmp	r3, #0
 800313e:	f040 82b5 	bne.w	80036ac <PCD_EP_ISR_Handler+0x76e>
 8003142:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003146:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800314a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800314e:	f000 82ad 	beq.w	80036ac <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003160:	b29b      	uxth	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	4413      	add	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800317c:	b29a      	uxth	r2, r3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b3e      	cmp	r3, #62	; 0x3e
 8003188:	d91d      	bls.n	80031c6 <PCD_EP_ISR_Handler+0x288>
 800318a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	647b      	str	r3, [r7, #68]	; 0x44
 8003192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <PCD_EP_ISR_Handler+0x266>
 800319e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a0:	3b01      	subs	r3, #1
 80031a2:	647b      	str	r3, [r7, #68]	; 0x44
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	029b      	lsls	r3, r3, #10
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	4313      	orrs	r3, r2
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031be:	b29a      	uxth	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	801a      	strh	r2, [r3, #0]
 80031c4:	e026      	b.n	8003214 <PCD_EP_ISR_Handler+0x2d6>
 80031c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <PCD_EP_ISR_Handler+0x2a6>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031dc:	b29a      	uxth	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	801a      	strh	r2, [r3, #0]
 80031e2:	e017      	b.n	8003214 <PCD_EP_ISR_Handler+0x2d6>
 80031e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	647b      	str	r3, [r7, #68]	; 0x44
 80031ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <PCD_EP_ISR_Handler+0x2c0>
 80031f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fa:	3301      	adds	r3, #1
 80031fc:	647b      	str	r3, [r7, #68]	; 0x44
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29a      	uxth	r2, r3
 8003204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003206:	b29b      	uxth	r3, r3
 8003208:	029b      	lsls	r3, r3, #10
 800320a:	b29b      	uxth	r3, r3
 800320c:	4313      	orrs	r3, r2
 800320e:	b29a      	uxth	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003224:	827b      	strh	r3, [r7, #18]
 8003226:	8a7b      	ldrh	r3, [r7, #18]
 8003228:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800322c:	827b      	strh	r3, [r7, #18]
 800322e:	8a7b      	ldrh	r3, [r7, #18]
 8003230:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003234:	827b      	strh	r3, [r7, #18]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	8a7b      	ldrh	r3, [r7, #18]
 800323c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324c:	b29b      	uxth	r3, r3
 800324e:	8013      	strh	r3, [r2, #0]
 8003250:	e22c      	b.n	80036ac <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003266:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800326a:	2b00      	cmp	r3, #0
 800326c:	f280 80f6 	bge.w	800345c <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b29a      	uxth	r2, r3
 8003282:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003286:	4013      	ands	r3, r2
 8003288:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800329e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032a2:	b292      	uxth	r2, r2
 80032a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80032a6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80032bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032be:	7b1b      	ldrb	r3, [r3, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d123      	bne.n	800330c <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	4413      	add	r3, r2
 80032de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80032ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 808e 	beq.w	8003412 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fc:	6959      	ldr	r1, [r3, #20]
 80032fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003300:	88da      	ldrh	r2, [r3, #6]
 8003302:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003306:	f005 ff40 	bl	800918a <USB_ReadPMA>
 800330a:	e082      	b.n	8003412 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800330c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330e:	78db      	ldrb	r3, [r3, #3]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d10a      	bne.n	800332a <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003314:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003318:	461a      	mov	r2, r3
 800331a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f9d3 	bl	80036c8 <HAL_PCD_EP_DB_Receive>
 8003322:	4603      	mov	r3, r0
 8003324:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003328:	e073      	b.n	8003412 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003344:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	441a      	add	r2, r3
 8003356:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800335a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800335e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003366:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800336a:	b29b      	uxth	r3, r3
 800336c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d022      	beq.n	80033ce <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003390:	b29b      	uxth	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	4413      	add	r3, r2
 80033a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80033b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02c      	beq.n	8003412 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033be:	6959      	ldr	r1, [r3, #20]
 80033c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c2:	891a      	ldrh	r2, [r3, #8]
 80033c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033c8:	f005 fedf 	bl	800918a <USB_ReadPMA>
 80033cc:	e021      	b.n	8003412 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	4413      	add	r3, r2
 80033e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80033f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003404:	6959      	ldr	r1, [r3, #20]
 8003406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003408:	895a      	ldrh	r2, [r3, #10]
 800340a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800340e:	f005 febc 	bl	800918a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800341a:	441a      	add	r2, r3
 800341c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003428:	441a      	add	r2, r3
 800342a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800342e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <PCD_EP_ISR_Handler+0x504>
 8003436:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800343a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	429a      	cmp	r2, r3
 8003440:	d206      	bcs.n	8003450 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	4619      	mov	r1, r3
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f008 f8ef 	bl	800b62c <HAL_PCD_DataOutStageCallback>
 800344e:	e005      	b.n	800345c <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003456:	4618      	mov	r0, r3
 8003458:	f004 f949 	bl	80076ee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800345c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8121 	beq.w	80036ac <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 800346a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003498:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	441a      	add	r2, r3
 80034aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80034ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034bc:	78db      	ldrb	r3, [r3, #3]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	f040 80a2 	bne.w	8003608 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 80034c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c6:	2200      	movs	r2, #0
 80034c8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80034ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034cc:	7b1b      	ldrb	r3, [r3, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8093 	beq.w	80035fa <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d046      	beq.n	800356e <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e2:	785b      	ldrb	r3, [r3, #1]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d126      	bne.n	8003536 <PCD_EP_ISR_Handler+0x5f8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	4413      	add	r3, r2
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	00da      	lsls	r2, r3, #3
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	4413      	add	r3, r2
 800350a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800350e:	623b      	str	r3, [r7, #32]
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351a:	b29a      	uxth	r2, r3
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	801a      	strh	r2, [r3, #0]
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800352a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800352e:	b29a      	uxth	r2, r3
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	801a      	strh	r2, [r3, #0]
 8003534:	e061      	b.n	80035fa <PCD_EP_ISR_Handler+0x6bc>
 8003536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003538:	785b      	ldrb	r3, [r3, #1]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d15d      	bne.n	80035fa <PCD_EP_ISR_Handler+0x6bc>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800354c:	b29b      	uxth	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003552:	4413      	add	r3, r2
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	00da      	lsls	r2, r3, #3
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	4413      	add	r3, r2
 8003560:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	e045      	b.n	80035fa <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003576:	785b      	ldrb	r3, [r3, #1]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d126      	bne.n	80035ca <PCD_EP_ISR_Handler+0x68c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	637b      	str	r3, [r7, #52]	; 0x34
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800358a:	b29b      	uxth	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	4413      	add	r3, r2
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
 8003594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	00da      	lsls	r2, r3, #3
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	4413      	add	r3, r2
 800359e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	801a      	strh	r2, [r3, #0]
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	801a      	strh	r2, [r3, #0]
 80035c8:	e017      	b.n	80035fa <PCD_EP_ISR_Handler+0x6bc>
 80035ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035cc:	785b      	ldrb	r3, [r3, #1]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d113      	bne.n	80035fa <PCD_EP_ISR_Handler+0x6bc>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035da:	b29b      	uxth	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e0:	4413      	add	r3, r2
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	00da      	lsls	r2, r3, #3
 80035ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ec:	4413      	add	r3, r2
 80035ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	2200      	movs	r2, #0
 80035f8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	4619      	mov	r1, r3
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f008 f82e 	bl	800b662 <HAL_PCD_DataInStageCallback>
 8003606:	e051      	b.n	80036ac <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003608:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d144      	bne.n	800369e <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361c:	b29b      	uxth	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	4413      	add	r3, r2
 800362e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003638:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800363c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363e:	699a      	ldr	r2, [r3, #24]
 8003640:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003644:	429a      	cmp	r2, r3
 8003646:	d907      	bls.n	8003658 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8003648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364a:	699a      	ldr	r2, [r3, #24]
 800364c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003650:	1ad2      	subs	r2, r2, r3
 8003652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003654:	619a      	str	r2, [r3, #24]
 8003656:	e002      	b.n	800365e <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8003658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365a:	2200      	movs	r2, #0
 800365c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800365e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f007 fff8 	bl	800b662 <HAL_PCD_DataInStageCallback>
 8003672:	e01b      	b.n	80036ac <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800367c:	441a      	add	r2, r3
 800367e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003680:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800368a:	441a      	add	r2, r3
 800368c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003696:	4618      	mov	r0, r3
 8003698:	f004 f829 	bl	80076ee <USB_EPStartXfer>
 800369c:	e006      	b.n	80036ac <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800369e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036a2:	461a      	mov	r2, r3
 80036a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f917 	bl	80038da <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	b21b      	sxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f6ff ac45 	blt.w	8002f48 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3758      	adds	r7, #88	; 0x58
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d07c      	beq.n	80037da <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	4413      	add	r3, r2
 80036fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003704:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	8b7b      	ldrh	r3, [r7, #26]
 800370c:	429a      	cmp	r2, r3
 800370e:	d306      	bcc.n	800371e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	8b7b      	ldrh	r3, [r7, #26]
 8003716:	1ad2      	subs	r2, r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	619a      	str	r2, [r3, #24]
 800371c:	e002      	b.n	8003724 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2200      	movs	r2, #0
 8003722:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d123      	bne.n	8003774 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	b29b      	uxth	r3, r3
 800373e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	833b      	strh	r3, [r7, #24]
 8003748:	8b3b      	ldrh	r3, [r7, #24]
 800374a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800374e:	833b      	strh	r3, [r7, #24]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	8b3b      	ldrh	r3, [r7, #24]
 8003760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003770:	b29b      	uxth	r3, r3
 8003772:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01f      	beq.n	80037be <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003798:	82fb      	strh	r3, [r7, #22]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	441a      	add	r2, r3
 80037a8:	8afb      	ldrh	r3, [r7, #22]
 80037aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037be:	8b7b      	ldrh	r3, [r7, #26]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8085 	beq.w	80038d0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6959      	ldr	r1, [r3, #20]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	891a      	ldrh	r2, [r3, #8]
 80037d2:	8b7b      	ldrh	r3, [r7, #26]
 80037d4:	f005 fcd9 	bl	800918a <USB_ReadPMA>
 80037d8:	e07a      	b.n	80038d0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	4413      	add	r3, r2
 80037f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	8b7b      	ldrh	r3, [r7, #26]
 8003806:	429a      	cmp	r2, r3
 8003808:	d306      	bcc.n	8003818 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	8b7b      	ldrh	r3, [r7, #26]
 8003810:	1ad2      	subs	r2, r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	619a      	str	r2, [r3, #24]
 8003816:	e002      	b.n	800381e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2200      	movs	r2, #0
 800381c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d123      	bne.n	800386e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800383c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003840:	83fb      	strh	r3, [r7, #30]
 8003842:	8bfb      	ldrh	r3, [r7, #30]
 8003844:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003848:	83fb      	strh	r3, [r7, #30]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	441a      	add	r2, r3
 8003858:	8bfb      	ldrh	r3, [r7, #30]
 800385a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800385e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386a:	b29b      	uxth	r3, r3
 800386c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d11f      	bne.n	80038b8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	83bb      	strh	r3, [r7, #28]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	441a      	add	r2, r3
 80038a2:	8bbb      	ldrh	r3, [r7, #28]
 80038a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038b8:	8b7b      	ldrh	r3, [r7, #26]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	6959      	ldr	r1, [r3, #20]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	895a      	ldrh	r2, [r3, #10]
 80038ca:	8b7b      	ldrh	r3, [r7, #26]
 80038cc:	f005 fc5d 	bl	800918a <USB_ReadPMA>
    }
  }

  return count;
 80038d0:	8b7b      	ldrh	r3, [r7, #26]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b0a4      	sub	sp, #144	; 0x90
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	4613      	mov	r3, r2
 80038e6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 81db 	beq.w	8003caa <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	4413      	add	r3, r2
 800390e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003918:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	699a      	ldr	r2, [r3, #24]
 8003920:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003924:	429a      	cmp	r2, r3
 8003926:	d907      	bls.n	8003938 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003930:	1ad2      	subs	r2, r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	619a      	str	r2, [r3, #24]
 8003936:	e002      	b.n	800393e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2200      	movs	r2, #0
 800393c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 80b9 	bne.w	8003aba <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	785b      	ldrb	r3, [r3, #1]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d126      	bne.n	800399e <HAL_PCD_EP_DB_Transmit+0xc4>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800395e:	b29b      	uxth	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	4413      	add	r3, r2
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	00da      	lsls	r2, r3, #3
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	4413      	add	r3, r2
 8003972:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003982:	b29a      	uxth	r2, r3
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	801a      	strh	r2, [r3, #0]
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003996:	b29a      	uxth	r2, r3
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	801a      	strh	r2, [r3, #0]
 800399c:	e01a      	b.n	80039d4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	785b      	ldrb	r3, [r3, #1]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d116      	bne.n	80039d4 <HAL_PCD_EP_DB_Transmit+0xfa>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	637b      	str	r3, [r7, #52]	; 0x34
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	461a      	mov	r2, r3
 80039b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ba:	4413      	add	r3, r2
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	00da      	lsls	r2, r3, #3
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	4413      	add	r3, r2
 80039c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	2200      	movs	r2, #0
 80039d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	785b      	ldrb	r3, [r3, #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d126      	bne.n	8003a30 <HAL_PCD_EP_DB_Transmit+0x156>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4413      	add	r3, r2
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	00da      	lsls	r2, r3, #3
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	801a      	strh	r2, [r3, #0]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	801a      	strh	r2, [r3, #0]
 8003a2e:	e017      	b.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x186>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	785b      	ldrb	r3, [r3, #1]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d113      	bne.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x186>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	4413      	add	r3, r2
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	00da      	lsls	r2, r3, #3
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	4413      	add	r3, r2
 8003a54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a58:	623b      	str	r3, [r7, #32]
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	4619      	mov	r1, r3
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f007 fdfb 	bl	800b662 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 82fa 	beq.w	800406c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	82fb      	strh	r3, [r7, #22]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	441a      	add	r2, r3
 8003aa2:	8afb      	ldrh	r3, [r7, #22]
 8003aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	8013      	strh	r3, [r2, #0]
 8003ab8:	e2d8      	b.n	800406c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d021      	beq.n	8003b08 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ade:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	441a      	add	r2, r3
 8003af0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	f040 82ac 	bne.w	800406c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b1c:	441a      	add	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b2a:	441a      	add	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6a1a      	ldr	r2, [r3, #32]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d30b      	bcc.n	8003b54 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b4c:	1ad2      	subs	r2, r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	621a      	str	r2, [r3, #32]
 8003b52:	e017      	b.n	8003b84 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d108      	bne.n	8003b6e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003b5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b6c:	e00a      	b.n	8003b84 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2200      	movs	r2, #0
 8003b82:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d165      	bne.n	8003c58 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba0:	4413      	add	r3, r2
 8003ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	00da      	lsls	r2, r3, #3
 8003baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bac:	4413      	add	r3, r2
 8003bae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc2:	801a      	strh	r2, [r3, #0]
 8003bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bc8:	2b3e      	cmp	r3, #62	; 0x3e
 8003bca:	d91d      	bls.n	8003c08 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be2:	3b01      	subs	r3, #1
 8003be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	029b      	lsls	r3, r3, #10
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	e044      	b.n	8003c92 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c22:	801a      	strh	r2, [r3, #0]
 8003c24:	e035      	b.n	8003c92 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_PCD_EP_DB_Transmit+0x366>
 8003c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	029b      	lsls	r3, r3, #10
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	801a      	strh	r2, [r3, #0]
 8003c56:	e01c      	b.n	8003c92 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	785b      	ldrb	r3, [r3, #1]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d118      	bne.n	8003c92 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	647b      	str	r3, [r7, #68]	; 0x44
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c74:	4413      	add	r3, r2
 8003c76:	647b      	str	r3, [r7, #68]	; 0x44
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	00da      	lsls	r2, r3, #3
 8003c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c80:	4413      	add	r3, r2
 8003c82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c86:	643b      	str	r3, [r7, #64]	; 0x40
 8003c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c90:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6959      	ldr	r1, [r3, #20]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	891a      	ldrh	r2, [r3, #8]
 8003c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f005 fa2f 	bl	8009106 <USB_WritePMA>
 8003ca8:	e1e0      	b.n	800406c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d307      	bcc.n	8003cee <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ce6:	1ad2      	subs	r2, r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	619a      	str	r2, [r3, #24]
 8003cec:	e002      	b.n	8003cf4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f040 80c0 	bne.w	8003e7e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	785b      	ldrb	r3, [r3, #1]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d126      	bne.n	8003d54 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d1a:	4413      	add	r3, r2
 8003d1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	00da      	lsls	r2, r3, #3
 8003d24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d26:	4413      	add	r3, r2
 8003d28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3c:	801a      	strh	r2, [r3, #0]
 8003d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d50:	801a      	strh	r2, [r3, #0]
 8003d52:	e01a      	b.n	8003d8a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	785b      	ldrb	r3, [r3, #1]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d116      	bne.n	8003d8a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	667b      	str	r3, [r7, #100]	; 0x64
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d70:	4413      	add	r3, r2
 8003d72:	667b      	str	r3, [r7, #100]	; 0x64
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	00da      	lsls	r2, r3, #3
 8003d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d82:	663b      	str	r3, [r7, #96]	; 0x60
 8003d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d86:	2200      	movs	r2, #0
 8003d88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	677b      	str	r3, [r7, #116]	; 0x74
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	785b      	ldrb	r3, [r3, #1]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d12b      	bne.n	8003df0 <HAL_PCD_EP_DB_Transmit+0x516>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dac:	4413      	add	r3, r2
 8003dae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	00da      	lsls	r2, r3, #3
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	4413      	add	r3, r2
 8003dba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dd4:	801a      	strh	r2, [r3, #0]
 8003dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dec:	801a      	strh	r2, [r3, #0]
 8003dee:	e017      	b.n	8003e20 <HAL_PCD_EP_DB_Transmit+0x546>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	785b      	ldrb	r3, [r3, #1]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d113      	bne.n	8003e20 <HAL_PCD_EP_DB_Transmit+0x546>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e06:	4413      	add	r3, r2
 8003e08:	677b      	str	r3, [r7, #116]	; 0x74
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	00da      	lsls	r2, r3, #3
 8003e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e12:	4413      	add	r3, r2
 8003e14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e18:	673b      	str	r3, [r7, #112]	; 0x70
 8003e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	4619      	mov	r1, r3
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f007 fc1b 	bl	800b662 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f040 811a 	bne.w	800406c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	441a      	add	r2, r3
 8003e64:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	8013      	strh	r3, [r2, #0]
 8003e7c:	e0f6      	b.n	800406c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d121      	bne.n	8003ecc <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	441a      	add	r2, r3
 8003eb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	f040 80ca 	bne.w	800406c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ee0:	441a      	add	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003eee:	441a      	add	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d30b      	bcc.n	8003f18 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	6a1a      	ldr	r2, [r3, #32]
 8003f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f10:	1ad2      	subs	r2, r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	621a      	str	r2, [r3, #32]
 8003f16:	e017      	b.n	8003f48 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d108      	bne.n	8003f32 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003f20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f30:	e00a      	b.n	8003f48 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	785b      	ldrb	r3, [r3, #1]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d165      	bne.n	8004022 <HAL_PCD_EP_DB_Transmit+0x748>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f6a:	4413      	add	r3, r2
 8003f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	00da      	lsls	r2, r3, #3
 8003f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f76:	4413      	add	r3, r2
 8003f78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f8c:	801a      	strh	r2, [r3, #0]
 8003f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f92:	2b3e      	cmp	r3, #62	; 0x3e
 8003f94:	d91d      	bls.n	8003fd2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fac:	3b01      	subs	r3, #1
 8003fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	029b      	lsls	r3, r3, #10
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fce:	801a      	strh	r2, [r3, #0]
 8003fd0:	e041      	b.n	8004056 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <HAL_PCD_EP_DB_Transmit+0x716>
 8003fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	e032      	b.n	8004056 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_PCD_EP_DB_Transmit+0x730>
 8004004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004006:	3301      	adds	r3, #1
 8004008:	66bb      	str	r3, [r7, #104]	; 0x68
 800400a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	b29a      	uxth	r2, r3
 8004010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004012:	b29b      	uxth	r3, r3
 8004014:	029b      	lsls	r3, r3, #10
 8004016:	b29b      	uxth	r3, r3
 8004018:	4313      	orrs	r3, r2
 800401a:	b29a      	uxth	r2, r3
 800401c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800401e:	801a      	strh	r2, [r3, #0]
 8004020:	e019      	b.n	8004056 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	785b      	ldrb	r3, [r3, #1]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d115      	bne.n	8004056 <HAL_PCD_EP_DB_Transmit+0x77c>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004032:	b29b      	uxth	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004038:	4413      	add	r3, r2
 800403a:	657b      	str	r3, [r7, #84]	; 0x54
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	00da      	lsls	r2, r3, #3
 8004042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004044:	4413      	add	r3, r2
 8004046:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800404a:	653b      	str	r3, [r7, #80]	; 0x50
 800404c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004050:	b29a      	uxth	r2, r3
 8004052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004054:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6959      	ldr	r1, [r3, #20]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	895a      	ldrh	r2, [r3, #10]
 8004062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004066:	b29b      	uxth	r3, r3
 8004068:	f005 f84d 	bl	8009106 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	b29b      	uxth	r3, r3
 800407e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004086:	82bb      	strh	r3, [r7, #20]
 8004088:	8abb      	ldrh	r3, [r7, #20]
 800408a:	f083 0310 	eor.w	r3, r3, #16
 800408e:	82bb      	strh	r3, [r7, #20]
 8004090:	8abb      	ldrh	r3, [r7, #20]
 8004092:	f083 0320 	eor.w	r3, r3, #32
 8004096:	82bb      	strh	r3, [r7, #20]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	8abb      	ldrh	r3, [r7, #20]
 80040a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3790      	adds	r7, #144	; 0x90
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b087      	sub	sp, #28
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	817b      	strh	r3, [r7, #10]
 80040d4:	4613      	mov	r3, r2
 80040d6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80040d8:	897b      	ldrh	r3, [r7, #10]
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040e4:	897b      	ldrh	r3, [r7, #10]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	e009      	b.n	8004110 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040fc:	897a      	ldrh	r2, [r7, #10]
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4413      	add	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004110:	893b      	ldrh	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d107      	bne.n	8004126 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	b29a      	uxth	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	80da      	strh	r2, [r3, #6]
 8004124:	e00b      	b.n	800413e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2201      	movs	r2, #1
 800412a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	b29a      	uxth	r2, r3
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	0c1b      	lsrs	r3, r3, #16
 8004138:	b29a      	uxth	r2, r3
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004170:	b29b      	uxth	r3, r3
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004184:	b29b      	uxth	r3, r3
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40007000 	.word	0x40007000

080041bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ca:	d130      	bne.n	800422e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041cc:	4b23      	ldr	r3, [pc, #140]	; (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d8:	d038      	beq.n	800424c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041da:	4b20      	ldr	r3, [pc, #128]	; (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041e2:	4a1e      	ldr	r2, [pc, #120]	; (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041ea:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2232      	movs	r2, #50	; 0x32
 80041f0:	fb02 f303 	mul.w	r3, r2, r3
 80041f4:	4a1b      	ldr	r2, [pc, #108]	; (8004264 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	0c9b      	lsrs	r3, r3, #18
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004200:	e002      	b.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3b01      	subs	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004208:	4b14      	ldr	r3, [pc, #80]	; (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004214:	d102      	bne.n	800421c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f2      	bne.n	8004202 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004228:	d110      	bne.n	800424c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e00f      	b.n	800424e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800422e:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423a:	d007      	beq.n	800424c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800423c:	4b07      	ldr	r3, [pc, #28]	; (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004244:	4a05      	ldr	r2, [pc, #20]	; (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800424a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40007000 	.word	0x40007000
 8004260:	20000000 	.word	0x20000000
 8004264:	431bde83 	.word	0x431bde83

08004268 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_PWREx_EnableVddUSB+0x1c>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a04      	ldr	r2, [pc, #16]	; (8004284 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004276:	6053      	str	r3, [r2, #4]
}
 8004278:	bf00      	nop
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40007000 	.word	0x40007000

08004288 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f000 bc4f 	b.w	8004b3a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800429c:	4b97      	ldr	r3, [pc, #604]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a6:	4b95      	ldr	r3, [pc, #596]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80e6 	beq.w	800448a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <HAL_RCC_OscConfig+0x4c>
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	f040 808d 	bne.w	80043e6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	f040 8089 	bne.w	80043e6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042d4:	4b89      	ldr	r3, [pc, #548]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d006      	beq.n	80042ee <HAL_RCC_OscConfig+0x66>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f000 bc26 	b.w	8004b3a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f2:	4b82      	ldr	r3, [pc, #520]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <HAL_RCC_OscConfig+0x80>
 80042fe:	4b7f      	ldr	r3, [pc, #508]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004306:	e005      	b.n	8004314 <HAL_RCC_OscConfig+0x8c>
 8004308:	4b7c      	ldr	r3, [pc, #496]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 800430a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004314:	4293      	cmp	r3, r2
 8004316:	d224      	bcs.n	8004362 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fdd9 	bl	8004ed4 <RCC_SetFlashLatencyFromMSIRange>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f000 bc06 	b.w	8004b3a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800432e:	4b73      	ldr	r3, [pc, #460]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a72      	ldr	r2, [pc, #456]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004334:	f043 0308 	orr.w	r3, r3, #8
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b70      	ldr	r3, [pc, #448]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	496d      	ldr	r1, [pc, #436]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800434c:	4b6b      	ldr	r3, [pc, #428]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	4968      	ldr	r1, [pc, #416]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]
 8004360:	e025      	b.n	80043ae <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004362:	4b66      	ldr	r3, [pc, #408]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a65      	ldr	r2, [pc, #404]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004368:	f043 0308 	orr.w	r3, r3, #8
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b63      	ldr	r3, [pc, #396]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	4960      	ldr	r1, [pc, #384]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 800437c:	4313      	orrs	r3, r2
 800437e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004380:	4b5e      	ldr	r3, [pc, #376]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	495b      	ldr	r1, [pc, #364]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004390:	4313      	orrs	r3, r2
 8004392:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fd98 	bl	8004ed4 <RCC_SetFlashLatencyFromMSIRange>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e3c5      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ae:	f000 fccd 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 80043b2:	4602      	mov	r2, r0
 80043b4:	4b51      	ldr	r3, [pc, #324]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	4950      	ldr	r1, [pc, #320]	; (8004500 <HAL_RCC_OscConfig+0x278>)
 80043c0:	5ccb      	ldrb	r3, [r1, r3]
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ca:	4a4e      	ldr	r2, [pc, #312]	; (8004504 <HAL_RCC_OscConfig+0x27c>)
 80043cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043ce:	4b4e      	ldr	r3, [pc, #312]	; (8004508 <HAL_RCC_OscConfig+0x280>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fc fe9a 	bl	800110c <HAL_InitTick>
 80043d8:	4603      	mov	r3, r0
 80043da:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d052      	beq.n	8004488 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
 80043e4:	e3a9      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d032      	beq.n	8004454 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043ee:	4b43      	ldr	r3, [pc, #268]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a42      	ldr	r2, [pc, #264]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043fa:	f7fc fed7 	bl	80011ac <HAL_GetTick>
 80043fe:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004402:	f7fc fed3 	bl	80011ac <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e392      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004414:	4b39      	ldr	r3, [pc, #228]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004420:	4b36      	ldr	r3, [pc, #216]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a35      	ldr	r2, [pc, #212]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004426:	f043 0308 	orr.w	r3, r3, #8
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b33      	ldr	r3, [pc, #204]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	4930      	ldr	r1, [pc, #192]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800443e:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	492b      	ldr	r1, [pc, #172]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 800444e:	4313      	orrs	r3, r2
 8004450:	604b      	str	r3, [r1, #4]
 8004452:	e01a      	b.n	800448a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004454:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a28      	ldr	r2, [pc, #160]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004460:	f7fc fea4 	bl	80011ac <HAL_GetTick>
 8004464:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004468:	f7fc fea0 	bl	80011ac <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e35f      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x1e0>
 8004486:	e000      	b.n	800448a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004488:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d073      	beq.n	800457e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_OscConfig+0x220>
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	d10e      	bne.n	80044c0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d10b      	bne.n	80044c0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	4b14      	ldr	r3, [pc, #80]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d063      	beq.n	800457c <HAL_RCC_OscConfig+0x2f4>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d15f      	bne.n	800457c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e33c      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c8:	d106      	bne.n	80044d8 <HAL_RCC_OscConfig+0x250>
 80044ca:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a0b      	ldr	r2, [pc, #44]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e025      	b.n	8004524 <HAL_RCC_OscConfig+0x29c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e0:	d114      	bne.n	800450c <HAL_RCC_OscConfig+0x284>
 80044e2:	4b06      	ldr	r3, [pc, #24]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a05      	ldr	r2, [pc, #20]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80044e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b03      	ldr	r3, [pc, #12]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a02      	ldr	r2, [pc, #8]	; (80044fc <HAL_RCC_OscConfig+0x274>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e013      	b.n	8004524 <HAL_RCC_OscConfig+0x29c>
 80044fc:	40021000 	.word	0x40021000
 8004500:	0800bf70 	.word	0x0800bf70
 8004504:	20000000 	.word	0x20000000
 8004508:	20000004 	.word	0x20000004
 800450c:	4b8f      	ldr	r3, [pc, #572]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a8e      	ldr	r2, [pc, #568]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 8004512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b8c      	ldr	r3, [pc, #560]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a8b      	ldr	r2, [pc, #556]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 800451e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fc fe3e 	bl	80011ac <HAL_GetTick>
 8004530:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004534:	f7fc fe3a 	bl	80011ac <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e2f9      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004546:	4b81      	ldr	r3, [pc, #516]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x2ac>
 8004552:	e014      	b.n	800457e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fc fe2a 	bl	80011ac <HAL_GetTick>
 8004558:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455c:	f7fc fe26 	bl	80011ac <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	; 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e2e5      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800456e:	4b77      	ldr	r3, [pc, #476]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x2d4>
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d060      	beq.n	800464c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	2b04      	cmp	r3, #4
 800458e:	d005      	beq.n	800459c <HAL_RCC_OscConfig+0x314>
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d119      	bne.n	80045ca <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d116      	bne.n	80045ca <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800459c:	4b6b      	ldr	r3, [pc, #428]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <HAL_RCC_OscConfig+0x32c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e2c2      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b4:	4b65      	ldr	r3, [pc, #404]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	061b      	lsls	r3, r3, #24
 80045c2:	4962      	ldr	r1, [pc, #392]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c8:	e040      	b.n	800464c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d023      	beq.n	800461a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d2:	4b5e      	ldr	r3, [pc, #376]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a5d      	ldr	r2, [pc, #372]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 80045d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045de:	f7fc fde5 	bl	80011ac <HAL_GetTick>
 80045e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e6:	f7fc fde1 	bl	80011ac <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e2a0      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f8:	4b54      	ldr	r3, [pc, #336]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004604:	4b51      	ldr	r3, [pc, #324]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	061b      	lsls	r3, r3, #24
 8004612:	494e      	ldr	r1, [pc, #312]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]
 8004618:	e018      	b.n	800464c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800461a:	4b4c      	ldr	r3, [pc, #304]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a4b      	ldr	r2, [pc, #300]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 8004620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004626:	f7fc fdc1 	bl	80011ac <HAL_GetTick>
 800462a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462e:	f7fc fdbd 	bl	80011ac <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e27c      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004640:	4b42      	ldr	r3, [pc, #264]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f0      	bne.n	800462e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8082 	beq.w	800475e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d05f      	beq.n	8004722 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004662:	4b3a      	ldr	r3, [pc, #232]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 8004664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004668:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	429a      	cmp	r2, r3
 8004676:	d037      	beq.n	80046e8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d006      	beq.n	8004690 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e254      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01b      	beq.n	80046d2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800469a:	4b2c      	ldr	r3, [pc, #176]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 800469c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a0:	4a2a      	ldr	r2, [pc, #168]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046aa:	f7fc fd7f 	bl	80011ac <HAL_GetTick>
 80046ae:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b2:	f7fc fd7b 	bl	80011ac <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b11      	cmp	r3, #17
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e23a      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1ef      	bne.n	80046b2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d8:	f023 0210 	bic.w	r2, r3, #16
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	491a      	ldr	r1, [pc, #104]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e8:	4b18      	ldr	r3, [pc, #96]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 80046ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fc fd58 	bl	80011ac <HAL_GetTick>
 80046fc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004700:	f7fc fd54 	bl	80011ac <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b11      	cmp	r3, #17
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e213      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004712:	4b0e      	ldr	r3, [pc, #56]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 8004714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0ef      	beq.n	8004700 <HAL_RCC_OscConfig+0x478>
 8004720:	e01d      	b.n	800475e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 8004724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004728:	4a08      	ldr	r2, [pc, #32]	; (800474c <HAL_RCC_OscConfig+0x4c4>)
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fc fd3b 	bl	80011ac <HAL_GetTick>
 8004736:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473a:	f7fc fd37 	bl	80011ac <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b11      	cmp	r3, #17
 8004746:	d903      	bls.n	8004750 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e1f6      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
 800474c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004750:	4ba9      	ldr	r3, [pc, #676]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1ed      	bne.n	800473a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80bd 	beq.w	80048e6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476c:	2300      	movs	r3, #0
 800476e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004772:	4ba1      	ldr	r3, [pc, #644]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10e      	bne.n	800479c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477e:	4b9e      	ldr	r3, [pc, #632]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004782:	4a9d      	ldr	r2, [pc, #628]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	6593      	str	r3, [r2, #88]	; 0x58
 800478a:	4b9b      	ldr	r3, [pc, #620]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479c:	4b97      	ldr	r3, [pc, #604]	; (80049fc <HAL_RCC_OscConfig+0x774>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d118      	bne.n	80047da <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a8:	4b94      	ldr	r3, [pc, #592]	; (80049fc <HAL_RCC_OscConfig+0x774>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a93      	ldr	r2, [pc, #588]	; (80049fc <HAL_RCC_OscConfig+0x774>)
 80047ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b4:	f7fc fcfa 	bl	80011ac <HAL_GetTick>
 80047b8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047bc:	f7fc fcf6 	bl	80011ac <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e1b5      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ce:	4b8b      	ldr	r3, [pc, #556]	; (80049fc <HAL_RCC_OscConfig+0x774>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d02c      	beq.n	8004840 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80047e6:	4b84      	ldr	r3, [pc, #528]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f8:	497f      	ldr	r1, [pc, #508]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d010      	beq.n	800482e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800480c:	4b7a      	ldr	r3, [pc, #488]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	4a79      	ldr	r2, [pc, #484]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004814:	f043 0304 	orr.w	r3, r3, #4
 8004818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800481c:	4b76      	ldr	r3, [pc, #472]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	4a75      	ldr	r2, [pc, #468]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800482c:	e018      	b.n	8004860 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800482e:	4b72      	ldr	r3, [pc, #456]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	4a70      	ldr	r2, [pc, #448]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800483e:	e00f      	b.n	8004860 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004840:	4b6d      	ldr	r3, [pc, #436]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	4a6c      	ldr	r2, [pc, #432]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004848:	f023 0301 	bic.w	r3, r3, #1
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004850:	4b69      	ldr	r3, [pc, #420]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	4a68      	ldr	r2, [pc, #416]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004858:	f023 0304 	bic.w	r3, r3, #4
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d016      	beq.n	8004896 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fc fca0 	bl	80011ac <HAL_GetTick>
 800486c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486e:	e00a      	b.n	8004886 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7fc fc9c 	bl	80011ac <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e159      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004886:	4b5c      	ldr	r3, [pc, #368]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ed      	beq.n	8004870 <HAL_RCC_OscConfig+0x5e8>
 8004894:	e01d      	b.n	80048d2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004896:	f7fc fc89 	bl	80011ac <HAL_GetTick>
 800489a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800489c:	e00a      	b.n	80048b4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489e:	f7fc fc85 	bl	80011ac <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e142      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b4:	4b50      	ldr	r3, [pc, #320]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ed      	bne.n	800489e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80048c2:	4b4d      	ldr	r3, [pc, #308]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	4a4b      	ldr	r2, [pc, #300]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 80048ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d105      	bne.n	80048e6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048da:	4b47      	ldr	r3, [pc, #284]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 80048dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048de:	4a46      	ldr	r2, [pc, #280]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 80048e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d03c      	beq.n	800496c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01c      	beq.n	8004934 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048fa:	4b3f      	ldr	r3, [pc, #252]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 80048fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004900:	4a3d      	ldr	r2, [pc, #244]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490a:	f7fc fc4f 	bl	80011ac <HAL_GetTick>
 800490e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004912:	f7fc fc4b 	bl	80011ac <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e10a      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004924:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0ef      	beq.n	8004912 <HAL_RCC_OscConfig+0x68a>
 8004932:	e01b      	b.n	800496c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004934:	4b30      	ldr	r3, [pc, #192]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800493a:	4a2f      	ldr	r2, [pc, #188]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fc fc32 	bl	80011ac <HAL_GetTick>
 8004948:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800494c:	f7fc fc2e 	bl	80011ac <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e0ed      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800495e:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1ef      	bne.n	800494c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80e1 	beq.w	8004b38 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	2b02      	cmp	r3, #2
 800497c:	f040 80b5 	bne.w	8004aea <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004980:	4b1d      	ldr	r3, [pc, #116]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f003 0203 	and.w	r2, r3, #3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	429a      	cmp	r2, r3
 8004992:	d124      	bne.n	80049de <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	3b01      	subs	r3, #1
 80049a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d11b      	bne.n	80049de <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d113      	bne.n	80049de <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	3b01      	subs	r3, #1
 80049c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d109      	bne.n	80049de <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	085b      	lsrs	r3, r3, #1
 80049d6:	3b01      	subs	r3, #1
 80049d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d05f      	beq.n	8004a9e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	2b0c      	cmp	r3, #12
 80049e2:	d05a      	beq.n	8004a9a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a03      	ldr	r2, [pc, #12]	; (80049f8 <HAL_RCC_OscConfig+0x770>)
 80049ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049f0:	f7fc fbdc 	bl	80011ac <HAL_GetTick>
 80049f4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f6:	e00c      	b.n	8004a12 <HAL_RCC_OscConfig+0x78a>
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fc fbd4 	bl	80011ac <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e093      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a12:	4b4c      	ldr	r3, [pc, #304]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a1e:	4b49      	ldr	r3, [pc, #292]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	4b49      	ldr	r3, [pc, #292]	; (8004b48 <HAL_RCC_OscConfig+0x8c0>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	0112      	lsls	r2, r2, #4
 8004a32:	4311      	orrs	r1, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a38:	0212      	lsls	r2, r2, #8
 8004a3a:	4311      	orrs	r1, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a40:	0852      	lsrs	r2, r2, #1
 8004a42:	3a01      	subs	r2, #1
 8004a44:	0552      	lsls	r2, r2, #21
 8004a46:	4311      	orrs	r1, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a4c:	0852      	lsrs	r2, r2, #1
 8004a4e:	3a01      	subs	r2, #1
 8004a50:	0652      	lsls	r2, r2, #25
 8004a52:	430a      	orrs	r2, r1
 8004a54:	493b      	ldr	r1, [pc, #236]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a5a:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a39      	ldr	r2, [pc, #228]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a64:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a66:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4a36      	ldr	r2, [pc, #216]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a70:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a72:	f7fc fb9b 	bl	80011ac <HAL_GetTick>
 8004a76:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7a:	f7fc fb97 	bl	80011ac <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e056      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8c:	4b2d      	ldr	r3, [pc, #180]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a98:	e04e      	b.n	8004b38 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e04d      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9e:	4b29      	ldr	r3, [pc, #164]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d146      	bne.n	8004b38 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004aaa:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a25      	ldr	r2, [pc, #148]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004ab0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ab6:	4b23      	ldr	r3, [pc, #140]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ac2:	f7fc fb73 	bl	80011ac <HAL_GetTick>
 8004ac6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aca:	f7fc fb6f 	bl	80011ac <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e02e      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004adc:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x842>
 8004ae8:	e026      	b.n	8004b38 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	2b0c      	cmp	r3, #12
 8004aee:	d021      	beq.n	8004b34 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af0:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a13      	ldr	r2, [pc, #76]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fc fb56 	bl	80011ac <HAL_GetTick>
 8004b00:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b04:	f7fc fb52 	bl	80011ac <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e011      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	4a07      	ldr	r2, [pc, #28]	; (8004b44 <HAL_RCC_OscConfig+0x8bc>)
 8004b28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b2c:	f023 0303 	bic.w	r3, r3, #3
 8004b30:	60d3      	str	r3, [r2, #12]
 8004b32:	e001      	b.n	8004b38 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3728      	adds	r7, #40	; 0x28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	f99f808c 	.word	0xf99f808c

08004b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0e7      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b60:	4b75      	ldr	r3, [pc, #468]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d910      	bls.n	8004b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b72      	ldr	r3, [pc, #456]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 0207 	bic.w	r2, r3, #7
 8004b76:	4970      	ldr	r1, [pc, #448]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b6e      	ldr	r3, [pc, #440]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0cf      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d010      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	4b66      	ldr	r3, [pc, #408]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d908      	bls.n	8004bbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bac:	4b63      	ldr	r3, [pc, #396]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4960      	ldr	r1, [pc, #384]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d04c      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd2:	4b5a      	ldr	r3, [pc, #360]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d121      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e0a6      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d107      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bea:	4b54      	ldr	r3, [pc, #336]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d115      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e09a      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d107      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c02:	4b4e      	ldr	r3, [pc, #312]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e08e      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c12:	4b4a      	ldr	r3, [pc, #296]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e086      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c22:	4b46      	ldr	r3, [pc, #280]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f023 0203 	bic.w	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4943      	ldr	r1, [pc, #268]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c34:	f7fc faba 	bl	80011ac <HAL_GetTick>
 8004c38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c3c:	f7fc fab6 	bl	80011ac <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e06e      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	4b3a      	ldr	r3, [pc, #232]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 020c 	and.w	r2, r3, #12
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d1eb      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d010      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	4b31      	ldr	r3, [pc, #196]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d208      	bcs.n	8004c92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c80:	4b2e      	ldr	r3, [pc, #184]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	492b      	ldr	r1, [pc, #172]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c92:	4b29      	ldr	r3, [pc, #164]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d210      	bcs.n	8004cc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca0:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f023 0207 	bic.w	r2, r3, #7
 8004ca8:	4923      	ldr	r1, [pc, #140]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb0:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d001      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e036      	b.n	8004d30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cce:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	4918      	ldr	r1, [pc, #96]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d009      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4910      	ldr	r1, [pc, #64]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d00:	f000 f824 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <HAL_RCC_ClockConfig+0x1f0>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	490b      	ldr	r1, [pc, #44]	; (8004d40 <HAL_RCC_ClockConfig+0x1f4>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1c:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <HAL_RCC_ClockConfig+0x1f8>)
 8004d1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <HAL_RCC_ClockConfig+0x1fc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fc f9f1 	bl	800110c <HAL_InitTick>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d2e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40022000 	.word	0x40022000
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	0800bf70 	.word	0x0800bf70
 8004d44:	20000000 	.word	0x20000000
 8004d48:	20000004 	.word	0x20000004

08004d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	; 0x24
 8004d50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5a:	4b3e      	ldr	r3, [pc, #248]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d64:	4b3b      	ldr	r3, [pc, #236]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_GetSysClockFreq+0x34>
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b0c      	cmp	r3, #12
 8004d78:	d121      	bne.n	8004dbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d11e      	bne.n	8004dbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d80:	4b34      	ldr	r3, [pc, #208]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d107      	bne.n	8004d9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d8c:	4b31      	ldr	r3, [pc, #196]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	e005      	b.n	8004da8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d9c:	4b2d      	ldr	r3, [pc, #180]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004da8:	4a2b      	ldr	r2, [pc, #172]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10d      	bne.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dbc:	e00a      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d102      	bne.n	8004dca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dc4:	4b25      	ldr	r3, [pc, #148]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	e004      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d101      	bne.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dd0:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	d134      	bne.n	8004e44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dda:	4b1e      	ldr	r3, [pc, #120]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d003      	beq.n	8004df2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d003      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0xac>
 8004df0:	e005      	b.n	8004dfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004df2:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004df4:	617b      	str	r3, [r7, #20]
      break;
 8004df6:	e005      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004df8:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dfa:	617b      	str	r3, [r7, #20]
      break;
 8004dfc:	e002      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	617b      	str	r3, [r7, #20]
      break;
 8004e02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e04:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	3301      	adds	r3, #1
 8004e10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e12:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	fb03 f202 	mul.w	r2, r3, r2
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	0e5b      	lsrs	r3, r3, #25
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	3301      	adds	r3, #1
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e44:	69bb      	ldr	r3, [r7, #24]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3724      	adds	r7, #36	; 0x24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	0800bf88 	.word	0x0800bf88
 8004e5c:	00f42400 	.word	0x00f42400
 8004e60:	007a1200 	.word	0x007a1200

08004e64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000000 	.word	0x20000000

08004e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e80:	f7ff fff0 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004e84:	4602      	mov	r2, r0
 8004e86:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	0a1b      	lsrs	r3, r3, #8
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	4904      	ldr	r1, [pc, #16]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e92:	5ccb      	ldrb	r3, [r1, r3]
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	0800bf80 	.word	0x0800bf80

08004ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004eac:	f7ff ffda 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	0adb      	lsrs	r3, r3, #11
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4904      	ldr	r1, [pc, #16]	; (8004ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ebe:	5ccb      	ldrb	r3, [r1, r3]
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	0800bf80 	.word	0x0800bf80

08004ed4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ee0:	4b2a      	ldr	r3, [pc, #168]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004eec:	f7ff f958 	bl	80041a0 <HAL_PWREx_GetVoltageRange>
 8004ef0:	6178      	str	r0, [r7, #20]
 8004ef2:	e014      	b.n	8004f1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ef4:	4b25      	ldr	r3, [pc, #148]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	4a24      	ldr	r2, [pc, #144]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efe:	6593      	str	r3, [r2, #88]	; 0x58
 8004f00:	4b22      	ldr	r3, [pc, #136]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f0c:	f7ff f948 	bl	80041a0 <HAL_PWREx_GetVoltageRange>
 8004f10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f12:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f24:	d10b      	bne.n	8004f3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d919      	bls.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2ba0      	cmp	r3, #160	; 0xa0
 8004f30:	d902      	bls.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f32:	2302      	movs	r3, #2
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	e013      	b.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f38:	2301      	movs	r3, #1
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	e010      	b.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b80      	cmp	r3, #128	; 0x80
 8004f42:	d902      	bls.n	8004f4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f44:	2303      	movs	r3, #3
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	e00a      	b.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b80      	cmp	r3, #128	; 0x80
 8004f4e:	d102      	bne.n	8004f56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f50:	2302      	movs	r3, #2
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	e004      	b.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b70      	cmp	r3, #112	; 0x70
 8004f5a:	d101      	bne.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f023 0207 	bic.w	r2, r3, #7
 8004f68:	4909      	ldr	r1, [pc, #36]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d001      	beq.n	8004f82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40022000 	.word	0x40022000

08004f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 809e 	beq.w	80050ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fb6:	4b46      	ldr	r3, [pc, #280]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00d      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fcc:	4b40      	ldr	r3, [pc, #256]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	4a3f      	ldr	r2, [pc, #252]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fd8:	4b3d      	ldr	r3, [pc, #244]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fe8:	4b3a      	ldr	r3, [pc, #232]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a39      	ldr	r2, [pc, #228]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ff4:	f7fc f8da 	bl	80011ac <HAL_GetTick>
 8004ff8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ffa:	e009      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffc:	f7fc f8d6 	bl	80011ac <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d902      	bls.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	74fb      	strb	r3, [r7, #19]
        break;
 800500e:	e005      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005010:	4b30      	ldr	r3, [pc, #192]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0ef      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800501c:	7cfb      	ldrb	r3, [r7, #19]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d15a      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005022:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01e      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	429a      	cmp	r2, r3
 800503c:	d019      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800503e:	4b24      	ldr	r3, [pc, #144]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005048:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800504a:	4b21      	ldr	r3, [pc, #132]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800504c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005050:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800505a:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800506a:	4a19      	ldr	r2, [pc, #100]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d016      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507c:	f7fc f896 	bl	80011ac <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005082:	e00b      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005084:	f7fc f892 	bl	80011ac <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005092:	4293      	cmp	r3, r2
 8005094:	d902      	bls.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	74fb      	strb	r3, [r7, #19]
            break;
 800509a:	e006      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509c:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0ec      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80050aa:	7cfb      	ldrb	r3, [r7, #19]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b0:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	4904      	ldr	r1, [pc, #16]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050c6:	e009      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050c8:	7cfb      	ldrb	r3, [r7, #19]
 80050ca:	74bb      	strb	r3, [r7, #18]
 80050cc:	e006      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x148>
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
 80050d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d8:	7cfb      	ldrb	r3, [r7, #19]
 80050da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050dc:	7c7b      	ldrb	r3, [r7, #17]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d105      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e2:	4b6e      	ldr	r3, [pc, #440]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	4a6d      	ldr	r2, [pc, #436]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050fa:	4b68      	ldr	r3, [pc, #416]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f023 0203 	bic.w	r2, r3, #3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4964      	ldr	r1, [pc, #400]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800511c:	4b5f      	ldr	r3, [pc, #380]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005122:	f023 020c 	bic.w	r2, r3, #12
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	495c      	ldr	r1, [pc, #368]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800513e:	4b57      	ldr	r3, [pc, #348]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4953      	ldr	r1, [pc, #332]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005160:	4b4e      	ldr	r3, [pc, #312]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005166:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	494b      	ldr	r1, [pc, #300]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005182:	4b46      	ldr	r3, [pc, #280]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005188:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	4942      	ldr	r1, [pc, #264]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051a4:	4b3d      	ldr	r3, [pc, #244]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	493a      	ldr	r1, [pc, #232]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051c6:	4b35      	ldr	r3, [pc, #212]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	4931      	ldr	r1, [pc, #196]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051e8:	4b2c      	ldr	r3, [pc, #176]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	4929      	ldr	r1, [pc, #164]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800520a:	4b24      	ldr	r3, [pc, #144]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	4920      	ldr	r1, [pc, #128]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d015      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800522c:	4b1b      	ldr	r3, [pc, #108]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	4918      	ldr	r1, [pc, #96]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800524a:	d105      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800524c:	4b13      	ldr	r3, [pc, #76]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4a12      	ldr	r2, [pc, #72]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005256:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d015      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005264:	4b0d      	ldr	r3, [pc, #52]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	490a      	ldr	r1, [pc, #40]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005282:	d105      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005284:	4b05      	ldr	r3, [pc, #20]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4a04      	ldr	r2, [pc, #16]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800528a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800528e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005290:	7cbb      	ldrb	r3, [r7, #18]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40021000 	.word	0x40021000

080052a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e095      	b.n	80053de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d108      	bne.n	80052cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c2:	d009      	beq.n	80052d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	61da      	str	r2, [r3, #28]
 80052ca:	e005      	b.n	80052d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fb fe3e 	bl	8000f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800530e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005318:	d902      	bls.n	8005320 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e002      	b.n	8005326 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005324:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800532e:	d007      	beq.n	8005340 <HAL_SPI_Init+0xa0>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005338:	d002      	beq.n	8005340 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	ea42 0103 	orr.w	r1, r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	0c1b      	lsrs	r3, r3, #16
 800539c:	f003 0204 	and.w	r2, r3, #4
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053bc:	ea42 0103 	orr.w	r1, r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b088      	sub	sp, #32
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	603b      	str	r3, [r7, #0]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_SPI_Transmit+0x22>
 8005404:	2302      	movs	r3, #2
 8005406:	e15f      	b.n	80056c8 <HAL_SPI_Transmit+0x2e2>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005410:	f7fb fecc 	bl	80011ac <HAL_GetTick>
 8005414:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	d002      	beq.n	800542c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005426:	2302      	movs	r3, #2
 8005428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800542a:	e148      	b.n	80056be <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_SPI_Transmit+0x52>
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d102      	bne.n	800543e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800543c:	e13f      	b.n	80056be <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2203      	movs	r2, #3
 8005442:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	88fa      	ldrh	r2, [r7, #6]
 8005456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005488:	d10f      	bne.n	80054aa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d007      	beq.n	80054c8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054d0:	d94f      	bls.n	8005572 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <HAL_SPI_Transmit+0xfa>
 80054da:	8afb      	ldrh	r3, [r7, #22]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d142      	bne.n	8005566 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	881a      	ldrh	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	1c9a      	adds	r2, r3, #2
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005504:	e02f      	b.n	8005566 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b02      	cmp	r3, #2
 8005512:	d112      	bne.n	800553a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	881a      	ldrh	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	1c9a      	adds	r2, r3, #2
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005538:	e015      	b.n	8005566 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800553a:	f7fb fe37 	bl	80011ac <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d803      	bhi.n	8005552 <HAL_SPI_Transmit+0x16c>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d102      	bne.n	8005558 <HAL_SPI_Transmit+0x172>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005564:	e0ab      	b.n	80056be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1ca      	bne.n	8005506 <HAL_SPI_Transmit+0x120>
 8005570:	e080      	b.n	8005674 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_SPI_Transmit+0x19a>
 800557a:	8afb      	ldrh	r3, [r7, #22]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d174      	bne.n	800566a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b01      	cmp	r3, #1
 8005588:	d912      	bls.n	80055b0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	881a      	ldrh	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	1c9a      	adds	r2, r3, #2
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b02      	subs	r3, #2
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055ae:	e05c      	b.n	800566a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	7812      	ldrb	r2, [r2, #0]
 80055bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80055d6:	e048      	b.n	800566a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d12b      	bne.n	800563e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d912      	bls.n	8005616 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	881a      	ldrh	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	1c9a      	adds	r2, r3, #2
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b02      	subs	r3, #2
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005614:	e029      	b.n	800566a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	330c      	adds	r3, #12
 8005620:	7812      	ldrb	r2, [r2, #0]
 8005622:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800563c:	e015      	b.n	800566a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800563e:	f7fb fdb5 	bl	80011ac <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d803      	bhi.n	8005656 <HAL_SPI_Transmit+0x270>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d102      	bne.n	800565c <HAL_SPI_Transmit+0x276>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005668:	e029      	b.n	80056be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1b1      	bne.n	80055d8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 fcf9 	bl	8006070 <SPI_EndRxTxTransaction>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005692:	2300      	movs	r3, #0
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e003      	b.n	80056be <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3720      	adds	r7, #32
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	4613      	mov	r3, r2
 80056de:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d002      	beq.n	80056f6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
 80056f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056f4:	e11a      	b.n	800592c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056fe:	d112      	bne.n	8005726 <HAL_SPI_Receive+0x56>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10e      	bne.n	8005726 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2204      	movs	r2, #4
 800570c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005710:	88fa      	ldrh	r2, [r7, #6]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4613      	mov	r3, r2
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f90e 	bl	800593e <HAL_SPI_TransmitReceive>
 8005722:	4603      	mov	r3, r0
 8005724:	e107      	b.n	8005936 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_SPI_Receive+0x64>
 8005730:	2302      	movs	r3, #2
 8005732:	e100      	b.n	8005936 <HAL_SPI_Receive+0x266>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800573c:	f7fb fd36 	bl	80011ac <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <HAL_SPI_Receive+0x7e>
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d102      	bne.n	8005754 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005752:	e0eb      	b.n	800592c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2204      	movs	r2, #4
 8005758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	88fa      	ldrh	r2, [r7, #6]
 800576c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800579e:	d908      	bls.n	80057b2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057ae:	605a      	str	r2, [r3, #4]
 80057b0:	e007      	b.n	80057c2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057c0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ca:	d10f      	bne.n	80057ec <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f6:	2b40      	cmp	r3, #64	; 0x40
 80057f8:	d007      	beq.n	800580a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005808:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005812:	d86f      	bhi.n	80058f4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005814:	e034      	b.n	8005880 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	d117      	bne.n	8005854 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f103 020c 	add.w	r2, r3, #12
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	7812      	ldrb	r2, [r2, #0]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005852:	e015      	b.n	8005880 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005854:	f7fb fcaa 	bl	80011ac <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d803      	bhi.n	800586c <HAL_SPI_Receive+0x19c>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d102      	bne.n	8005872 <HAL_SPI_Receive+0x1a2>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800587e:	e055      	b.n	800592c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1c4      	bne.n	8005816 <HAL_SPI_Receive+0x146>
 800588c:	e038      	b.n	8005900 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b01      	cmp	r3, #1
 800589a:	d115      	bne.n	80058c8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	b292      	uxth	r2, r2
 80058a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	1c9a      	adds	r2, r3, #2
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058c6:	e015      	b.n	80058f4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058c8:	f7fb fc70 	bl	80011ac <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d803      	bhi.n	80058e0 <HAL_SPI_Receive+0x210>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d102      	bne.n	80058e6 <HAL_SPI_Receive+0x216>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80058f2:	e01b      	b.n	800592c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1c6      	bne.n	800588e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fb5b 	bl	8005fc0 <SPI_EndRxTransaction>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	75fb      	strb	r3, [r7, #23]
 8005922:	e003      	b.n	800592c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005934:	7dfb      	ldrb	r3, [r7, #23]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b08a      	sub	sp, #40	; 0x28
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800594c:	2301      	movs	r3, #1
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_SPI_TransmitReceive+0x26>
 8005960:	2302      	movs	r3, #2
 8005962:	e20a      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x43c>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800596c:	f7fb fc1e 	bl	80011ac <HAL_GetTick>
 8005970:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005978:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005980:	887b      	ldrh	r3, [r7, #2]
 8005982:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005984:	887b      	ldrh	r3, [r7, #2]
 8005986:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005988:	7efb      	ldrb	r3, [r7, #27]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d00e      	beq.n	80059ac <HAL_SPI_TransmitReceive+0x6e>
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005994:	d106      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x66>
 800599e:	7efb      	ldrb	r3, [r7, #27]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d003      	beq.n	80059ac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80059aa:	e1e0      	b.n	8005d6e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_SPI_TransmitReceive+0x80>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_SPI_TransmitReceive+0x80>
 80059b8:	887b      	ldrh	r3, [r7, #2]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80059c4:	e1d3      	b.n	8005d6e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d003      	beq.n	80059da <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2205      	movs	r2, #5
 80059d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	887a      	ldrh	r2, [r7, #2]
 80059ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	887a      	ldrh	r2, [r7, #2]
 80059f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	887a      	ldrh	r2, [r7, #2]
 8005a00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	887a      	ldrh	r2, [r7, #2]
 8005a06:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a1c:	d802      	bhi.n	8005a24 <HAL_SPI_TransmitReceive+0xe6>
 8005a1e:	8a3b      	ldrh	r3, [r7, #16]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d908      	bls.n	8005a36 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a32:	605a      	str	r2, [r3, #4]
 8005a34:	e007      	b.n	8005a46 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a44:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b40      	cmp	r3, #64	; 0x40
 8005a52:	d007      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a6c:	f240 8081 	bls.w	8005b72 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x140>
 8005a78:	8a7b      	ldrh	r3, [r7, #18]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d16d      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	881a      	ldrh	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	1c9a      	adds	r2, r3, #2
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aa2:	e05a      	b.n	8005b5a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d11b      	bne.n	8005aea <HAL_SPI_TransmitReceive+0x1ac>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d016      	beq.n	8005aea <HAL_SPI_TransmitReceive+0x1ac>
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d113      	bne.n	8005aea <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	881a      	ldrh	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	1c9a      	adds	r2, r3, #2
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d11c      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x1f4>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d016      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	b292      	uxth	r2, r2
 8005b10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	1c9a      	adds	r2, r3, #2
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b32:	f7fb fb3b 	bl	80011ac <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d80b      	bhi.n	8005b5a <HAL_SPI_TransmitReceive+0x21c>
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d007      	beq.n	8005b5a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005b58:	e109      	b.n	8005d6e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d19f      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x166>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d199      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x166>
 8005b70:	e0e3      	b.n	8005d3a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_SPI_TransmitReceive+0x244>
 8005b7a:	8a7b      	ldrh	r3, [r7, #18]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 80cf 	bne.w	8005d20 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d912      	bls.n	8005bb2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	881a      	ldrh	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	1c9a      	adds	r2, r3, #2
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b02      	subs	r3, #2
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bb0:	e0b6      	b.n	8005d20 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	330c      	adds	r3, #12
 8005bbc:	7812      	ldrb	r2, [r2, #0]
 8005bbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bd8:	e0a2      	b.n	8005d20 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d134      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x314>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d02f      	beq.n	8005c52 <HAL_SPI_TransmitReceive+0x314>
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d12c      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d912      	bls.n	8005c28 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	881a      	ldrh	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	1c9a      	adds	r2, r3, #2
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b02      	subs	r3, #2
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c26:	e012      	b.n	8005c4e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	7812      	ldrb	r2, [r2, #0]
 8005c34:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d148      	bne.n	8005cf2 <HAL_SPI_TransmitReceive+0x3b4>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d042      	beq.n	8005cf2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d923      	bls.n	8005cc0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	b292      	uxth	r2, r2
 8005c84:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	1c9a      	adds	r2, r3, #2
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b02      	subs	r3, #2
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d81f      	bhi.n	8005cee <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	e016      	b.n	8005cee <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f103 020c 	add.w	r2, r3, #12
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	7812      	ldrb	r2, [r2, #0]
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cf2:	f7fb fa5b 	bl	80011ac <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d803      	bhi.n	8005d0a <HAL_SPI_TransmitReceive+0x3cc>
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d102      	bne.n	8005d10 <HAL_SPI_TransmitReceive+0x3d2>
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d107      	bne.n	8005d20 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005d1e:	e026      	b.n	8005d6e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f47f af57 	bne.w	8005bda <HAL_SPI_TransmitReceive+0x29c>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f47f af50 	bne.w	8005bda <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f996 	bl	8006070 <SPI_EndRxTxTransaction>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d64:	e003      	b.n	8005d6e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3728      	adds	r7, #40	; 0x28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	4613      	mov	r3, r2
 8005d92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d94:	f7fb fa0a 	bl	80011ac <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	1a9b      	subs	r3, r3, r2
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	4413      	add	r3, r2
 8005da2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005da4:	f7fb fa02 	bl	80011ac <HAL_GetTick>
 8005da8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005daa:	4b39      	ldr	r3, [pc, #228]	; (8005e90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	015b      	lsls	r3, r3, #5
 8005db0:	0d1b      	lsrs	r3, r3, #20
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	fb02 f303 	mul.w	r3, r2, r3
 8005db8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dba:	e054      	b.n	8005e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d050      	beq.n	8005e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dc4:	f7fb f9f2 	bl	80011ac <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d902      	bls.n	8005dda <SPI_WaitFlagStateUntilTimeout+0x56>
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d13d      	bne.n	8005e56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005de8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005df2:	d111      	bne.n	8005e18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dfc:	d004      	beq.n	8005e08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e06:	d107      	bne.n	8005e18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e20:	d10f      	bne.n	8005e42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e017      	b.n	8005e86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	bf0c      	ite	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	2300      	movne	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d19b      	bne.n	8005dbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000000 	.word	0x20000000

08005e94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08a      	sub	sp, #40	; 0x28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ea6:	f7fb f981 	bl	80011ac <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	1a9b      	subs	r3, r3, r2
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005eb6:	f7fb f979 	bl	80011ac <HAL_GetTick>
 8005eba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	330c      	adds	r3, #12
 8005ec2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ec4:	4b3d      	ldr	r3, [pc, #244]	; (8005fbc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	00da      	lsls	r2, r3, #3
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	0d1b      	lsrs	r3, r3, #20
 8005ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed6:	fb02 f303 	mul.w	r3, r2, r3
 8005eda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005edc:	e060      	b.n	8005fa0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ee4:	d107      	bne.n	8005ef6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d050      	beq.n	8005fa0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005efe:	f7fb f955 	bl	80011ac <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d902      	bls.n	8005f14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d13d      	bne.n	8005f90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f2c:	d111      	bne.n	8005f52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f36:	d004      	beq.n	8005f42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f40:	d107      	bne.n	8005f52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5a:	d10f      	bne.n	8005f7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e010      	b.n	8005fb2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d196      	bne.n	8005ede <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3728      	adds	r7, #40	; 0x28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20000000 	.word	0x20000000

08005fc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fd4:	d111      	bne.n	8005ffa <SPI_EndRxTransaction+0x3a>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fde:	d004      	beq.n	8005fea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe8:	d107      	bne.n	8005ffa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2200      	movs	r2, #0
 8006002:	2180      	movs	r1, #128	; 0x80
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff febd 	bl	8005d84 <SPI_WaitFlagStateUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006014:	f043 0220 	orr.w	r2, r3, #32
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e023      	b.n	8006068 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006028:	d11d      	bne.n	8006066 <SPI_EndRxTransaction+0xa6>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006032:	d004      	beq.n	800603e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603c:	d113      	bne.n	8006066 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2200      	movs	r2, #0
 8006046:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff ff22 	bl	8005e94 <SPI_WaitFifoStateUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d007      	beq.n	8006066 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605a:	f043 0220 	orr.w	r2, r3, #32
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e000      	b.n	8006068 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af02      	add	r7, sp, #8
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2200      	movs	r2, #0
 8006084:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f7ff ff03 	bl	8005e94 <SPI_WaitFifoStateUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006098:	f043 0220 	orr.w	r2, r3, #32
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e027      	b.n	80060f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2200      	movs	r2, #0
 80060ac:	2180      	movs	r1, #128	; 0x80
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff fe68 	bl	8005d84 <SPI_WaitFlagStateUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e014      	b.n	80060f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff fedc 	bl	8005e94 <SPI_WaitFifoStateUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e6:	f043 0220 	orr.w	r2, r3, #32
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e000      	b.n	80060f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006100:	b08a      	sub	sp, #40	; 0x28
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	431a      	orrs	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	431a      	orrs	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	4313      	orrs	r3, r2
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4b9e      	ldr	r3, [pc, #632]	; (80063a4 <UART_SetConfig+0x2a8>)
 800612c:	4013      	ands	r3, r2
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006134:	430b      	orrs	r3, r1
 8006136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a93      	ldr	r2, [pc, #588]	; (80063a8 <UART_SetConfig+0x2ac>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006164:	4313      	orrs	r3, r2
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006178:	430a      	orrs	r2, r1
 800617a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a8a      	ldr	r2, [pc, #552]	; (80063ac <UART_SetConfig+0x2b0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d126      	bne.n	80061d4 <UART_SetConfig+0xd8>
 8006186:	4b8a      	ldr	r3, [pc, #552]	; (80063b0 <UART_SetConfig+0x2b4>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	2b03      	cmp	r3, #3
 8006192:	d81b      	bhi.n	80061cc <UART_SetConfig+0xd0>
 8006194:	a201      	add	r2, pc, #4	; (adr r2, 800619c <UART_SetConfig+0xa0>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	080061ad 	.word	0x080061ad
 80061a0:	080061bd 	.word	0x080061bd
 80061a4:	080061b5 	.word	0x080061b5
 80061a8:	080061c5 	.word	0x080061c5
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b2:	e0ab      	b.n	800630c <UART_SetConfig+0x210>
 80061b4:	2302      	movs	r3, #2
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ba:	e0a7      	b.n	800630c <UART_SetConfig+0x210>
 80061bc:	2304      	movs	r3, #4
 80061be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061c2:	e0a3      	b.n	800630c <UART_SetConfig+0x210>
 80061c4:	2308      	movs	r3, #8
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ca:	e09f      	b.n	800630c <UART_SetConfig+0x210>
 80061cc:	2310      	movs	r3, #16
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d2:	e09b      	b.n	800630c <UART_SetConfig+0x210>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a76      	ldr	r2, [pc, #472]	; (80063b4 <UART_SetConfig+0x2b8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d138      	bne.n	8006250 <UART_SetConfig+0x154>
 80061de:	4b74      	ldr	r3, [pc, #464]	; (80063b0 <UART_SetConfig+0x2b4>)
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e4:	f003 030c 	and.w	r3, r3, #12
 80061e8:	2b0c      	cmp	r3, #12
 80061ea:	d82d      	bhi.n	8006248 <UART_SetConfig+0x14c>
 80061ec:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0xf8>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	08006229 	.word	0x08006229
 80061f8:	08006249 	.word	0x08006249
 80061fc:	08006249 	.word	0x08006249
 8006200:	08006249 	.word	0x08006249
 8006204:	08006239 	.word	0x08006239
 8006208:	08006249 	.word	0x08006249
 800620c:	08006249 	.word	0x08006249
 8006210:	08006249 	.word	0x08006249
 8006214:	08006231 	.word	0x08006231
 8006218:	08006249 	.word	0x08006249
 800621c:	08006249 	.word	0x08006249
 8006220:	08006249 	.word	0x08006249
 8006224:	08006241 	.word	0x08006241
 8006228:	2300      	movs	r3, #0
 800622a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800622e:	e06d      	b.n	800630c <UART_SetConfig+0x210>
 8006230:	2302      	movs	r3, #2
 8006232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006236:	e069      	b.n	800630c <UART_SetConfig+0x210>
 8006238:	2304      	movs	r3, #4
 800623a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800623e:	e065      	b.n	800630c <UART_SetConfig+0x210>
 8006240:	2308      	movs	r3, #8
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006246:	e061      	b.n	800630c <UART_SetConfig+0x210>
 8006248:	2310      	movs	r3, #16
 800624a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800624e:	e05d      	b.n	800630c <UART_SetConfig+0x210>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a58      	ldr	r2, [pc, #352]	; (80063b8 <UART_SetConfig+0x2bc>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d125      	bne.n	80062a6 <UART_SetConfig+0x1aa>
 800625a:	4b55      	ldr	r3, [pc, #340]	; (80063b0 <UART_SetConfig+0x2b4>)
 800625c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006260:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006264:	2b30      	cmp	r3, #48	; 0x30
 8006266:	d016      	beq.n	8006296 <UART_SetConfig+0x19a>
 8006268:	2b30      	cmp	r3, #48	; 0x30
 800626a:	d818      	bhi.n	800629e <UART_SetConfig+0x1a2>
 800626c:	2b20      	cmp	r3, #32
 800626e:	d00a      	beq.n	8006286 <UART_SetConfig+0x18a>
 8006270:	2b20      	cmp	r3, #32
 8006272:	d814      	bhi.n	800629e <UART_SetConfig+0x1a2>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <UART_SetConfig+0x182>
 8006278:	2b10      	cmp	r3, #16
 800627a:	d008      	beq.n	800628e <UART_SetConfig+0x192>
 800627c:	e00f      	b.n	800629e <UART_SetConfig+0x1a2>
 800627e:	2300      	movs	r3, #0
 8006280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006284:	e042      	b.n	800630c <UART_SetConfig+0x210>
 8006286:	2302      	movs	r3, #2
 8006288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628c:	e03e      	b.n	800630c <UART_SetConfig+0x210>
 800628e:	2304      	movs	r3, #4
 8006290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006294:	e03a      	b.n	800630c <UART_SetConfig+0x210>
 8006296:	2308      	movs	r3, #8
 8006298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800629c:	e036      	b.n	800630c <UART_SetConfig+0x210>
 800629e:	2310      	movs	r3, #16
 80062a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a4:	e032      	b.n	800630c <UART_SetConfig+0x210>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a3f      	ldr	r2, [pc, #252]	; (80063a8 <UART_SetConfig+0x2ac>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d12a      	bne.n	8006306 <UART_SetConfig+0x20a>
 80062b0:	4b3f      	ldr	r3, [pc, #252]	; (80063b0 <UART_SetConfig+0x2b4>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062be:	d01a      	beq.n	80062f6 <UART_SetConfig+0x1fa>
 80062c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062c4:	d81b      	bhi.n	80062fe <UART_SetConfig+0x202>
 80062c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ca:	d00c      	beq.n	80062e6 <UART_SetConfig+0x1ea>
 80062cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d0:	d815      	bhi.n	80062fe <UART_SetConfig+0x202>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <UART_SetConfig+0x1e2>
 80062d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062da:	d008      	beq.n	80062ee <UART_SetConfig+0x1f2>
 80062dc:	e00f      	b.n	80062fe <UART_SetConfig+0x202>
 80062de:	2300      	movs	r3, #0
 80062e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e4:	e012      	b.n	800630c <UART_SetConfig+0x210>
 80062e6:	2302      	movs	r3, #2
 80062e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ec:	e00e      	b.n	800630c <UART_SetConfig+0x210>
 80062ee:	2304      	movs	r3, #4
 80062f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f4:	e00a      	b.n	800630c <UART_SetConfig+0x210>
 80062f6:	2308      	movs	r3, #8
 80062f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062fc:	e006      	b.n	800630c <UART_SetConfig+0x210>
 80062fe:	2310      	movs	r3, #16
 8006300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006304:	e002      	b.n	800630c <UART_SetConfig+0x210>
 8006306:	2310      	movs	r3, #16
 8006308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a25      	ldr	r2, [pc, #148]	; (80063a8 <UART_SetConfig+0x2ac>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f040 808a 	bne.w	800642c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800631c:	2b08      	cmp	r3, #8
 800631e:	d824      	bhi.n	800636a <UART_SetConfig+0x26e>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <UART_SetConfig+0x22c>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	0800634d 	.word	0x0800634d
 800632c:	0800636b 	.word	0x0800636b
 8006330:	08006355 	.word	0x08006355
 8006334:	0800636b 	.word	0x0800636b
 8006338:	0800635b 	.word	0x0800635b
 800633c:	0800636b 	.word	0x0800636b
 8006340:	0800636b 	.word	0x0800636b
 8006344:	0800636b 	.word	0x0800636b
 8006348:	08006363 	.word	0x08006363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800634c:	f7fe fd96 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8006350:	61f8      	str	r0, [r7, #28]
        break;
 8006352:	e010      	b.n	8006376 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006354:	4b19      	ldr	r3, [pc, #100]	; (80063bc <UART_SetConfig+0x2c0>)
 8006356:	61fb      	str	r3, [r7, #28]
        break;
 8006358:	e00d      	b.n	8006376 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635a:	f7fe fcf7 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 800635e:	61f8      	str	r0, [r7, #28]
        break;
 8006360:	e009      	b.n	8006376 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006366:	61fb      	str	r3, [r7, #28]
        break;
 8006368:	e005      	b.n	8006376 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006374:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8109 	beq.w	8006590 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	4613      	mov	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	4413      	add	r3, r2
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	429a      	cmp	r2, r3
 800638c:	d305      	bcc.n	800639a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	429a      	cmp	r2, r3
 8006398:	d912      	bls.n	80063c0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063a0:	e0f6      	b.n	8006590 <UART_SetConfig+0x494>
 80063a2:	bf00      	nop
 80063a4:	efff69f3 	.word	0xefff69f3
 80063a8:	40008000 	.word	0x40008000
 80063ac:	40013800 	.word	0x40013800
 80063b0:	40021000 	.word	0x40021000
 80063b4:	40004400 	.word	0x40004400
 80063b8:	40004800 	.word	0x40004800
 80063bc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2200      	movs	r2, #0
 80063c4:	461c      	mov	r4, r3
 80063c6:	4615      	mov	r5, r2
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	022b      	lsls	r3, r5, #8
 80063d2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80063d6:	0222      	lsls	r2, r4, #8
 80063d8:	68f9      	ldr	r1, [r7, #12]
 80063da:	6849      	ldr	r1, [r1, #4]
 80063dc:	0849      	lsrs	r1, r1, #1
 80063de:	2000      	movs	r0, #0
 80063e0:	4688      	mov	r8, r1
 80063e2:	4681      	mov	r9, r0
 80063e4:	eb12 0a08 	adds.w	sl, r2, r8
 80063e8:	eb43 0b09 	adc.w	fp, r3, r9
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063fa:	4650      	mov	r0, sl
 80063fc:	4659      	mov	r1, fp
 80063fe:	f7f9 fee5 	bl	80001cc <__aeabi_uldivmod>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4613      	mov	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006410:	d308      	bcc.n	8006424 <UART_SetConfig+0x328>
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006418:	d204      	bcs.n	8006424 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	60da      	str	r2, [r3, #12]
 8006422:	e0b5      	b.n	8006590 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800642a:	e0b1      	b.n	8006590 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006434:	d15d      	bne.n	80064f2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006436:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800643a:	2b08      	cmp	r3, #8
 800643c:	d827      	bhi.n	800648e <UART_SetConfig+0x392>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <UART_SetConfig+0x348>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006469 	.word	0x08006469
 8006448:	08006471 	.word	0x08006471
 800644c:	08006479 	.word	0x08006479
 8006450:	0800648f 	.word	0x0800648f
 8006454:	0800647f 	.word	0x0800647f
 8006458:	0800648f 	.word	0x0800648f
 800645c:	0800648f 	.word	0x0800648f
 8006460:	0800648f 	.word	0x0800648f
 8006464:	08006487 	.word	0x08006487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006468:	f7fe fd08 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 800646c:	61f8      	str	r0, [r7, #28]
        break;
 800646e:	e014      	b.n	800649a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006470:	f7fe fd1a 	bl	8004ea8 <HAL_RCC_GetPCLK2Freq>
 8006474:	61f8      	str	r0, [r7, #28]
        break;
 8006476:	e010      	b.n	800649a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006478:	4b4c      	ldr	r3, [pc, #304]	; (80065ac <UART_SetConfig+0x4b0>)
 800647a:	61fb      	str	r3, [r7, #28]
        break;
 800647c:	e00d      	b.n	800649a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800647e:	f7fe fc65 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8006482:	61f8      	str	r0, [r7, #28]
        break;
 8006484:	e009      	b.n	800649a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800648a:	61fb      	str	r3, [r7, #28]
        break;
 800648c:	e005      	b.n	800649a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d077      	beq.n	8006590 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	005a      	lsls	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	441a      	add	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b0f      	cmp	r3, #15
 80064ba:	d916      	bls.n	80064ea <UART_SetConfig+0x3ee>
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c2:	d212      	bcs.n	80064ea <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	f023 030f 	bic.w	r3, r3, #15
 80064cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	b29a      	uxth	r2, r3
 80064da:	8afb      	ldrh	r3, [r7, #22]
 80064dc:	4313      	orrs	r3, r2
 80064de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	8afa      	ldrh	r2, [r7, #22]
 80064e6:	60da      	str	r2, [r3, #12]
 80064e8:	e052      	b.n	8006590 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064f0:	e04e      	b.n	8006590 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	d827      	bhi.n	800654a <UART_SetConfig+0x44e>
 80064fa:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <UART_SetConfig+0x404>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	08006525 	.word	0x08006525
 8006504:	0800652d 	.word	0x0800652d
 8006508:	08006535 	.word	0x08006535
 800650c:	0800654b 	.word	0x0800654b
 8006510:	0800653b 	.word	0x0800653b
 8006514:	0800654b 	.word	0x0800654b
 8006518:	0800654b 	.word	0x0800654b
 800651c:	0800654b 	.word	0x0800654b
 8006520:	08006543 	.word	0x08006543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006524:	f7fe fcaa 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8006528:	61f8      	str	r0, [r7, #28]
        break;
 800652a:	e014      	b.n	8006556 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800652c:	f7fe fcbc 	bl	8004ea8 <HAL_RCC_GetPCLK2Freq>
 8006530:	61f8      	str	r0, [r7, #28]
        break;
 8006532:	e010      	b.n	8006556 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006534:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <UART_SetConfig+0x4b0>)
 8006536:	61fb      	str	r3, [r7, #28]
        break;
 8006538:	e00d      	b.n	8006556 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800653a:	f7fe fc07 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 800653e:	61f8      	str	r0, [r7, #28]
        break;
 8006540:	e009      	b.n	8006556 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006546:	61fb      	str	r3, [r7, #28]
        break;
 8006548:	e005      	b.n	8006556 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006554:	bf00      	nop
    }

    if (pclk != 0U)
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d019      	beq.n	8006590 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	085a      	lsrs	r2, r3, #1
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	441a      	add	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	fbb2 f3f3 	udiv	r3, r2, r3
 800656e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b0f      	cmp	r3, #15
 8006574:	d909      	bls.n	800658a <UART_SetConfig+0x48e>
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657c:	d205      	bcs.n	800658a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60da      	str	r2, [r3, #12]
 8006588:	e002      	b.n	8006590 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800659c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3728      	adds	r7, #40	; 0x28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065aa:	bf00      	nop
 80065ac:	00f42400 	.word	0x00f42400

080065b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01a      	beq.n	80066c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ae:	d10a      	bne.n	80066c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b098      	sub	sp, #96	; 0x60
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006704:	f7fa fd52 	bl	80011ac <HAL_GetTick>
 8006708:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d12e      	bne.n	8006776 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006720:	2200      	movs	r2, #0
 8006722:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f88c 	bl	8006844 <UART_WaitOnFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d021      	beq.n	8006776 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006746:	653b      	str	r3, [r7, #80]	; 0x50
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	461a      	mov	r2, r3
 800674e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006750:	647b      	str	r3, [r7, #68]	; 0x44
 8006752:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800675e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e6      	bne.n	8006732 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2220      	movs	r2, #32
 8006768:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e062      	b.n	800683c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b04      	cmp	r3, #4
 8006782:	d149      	bne.n	8006818 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800678c:	2200      	movs	r2, #0
 800678e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f856 	bl	8006844 <UART_WaitOnFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d03c      	beq.n	8006818 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	623b      	str	r3, [r7, #32]
   return(result);
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067bc:	633b      	str	r3, [r7, #48]	; 0x30
 80067be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e6      	bne.n	800679e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3308      	adds	r3, #8
 80067d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	60fb      	str	r3, [r7, #12]
   return(result);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0301 	bic.w	r3, r3, #1
 80067e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3308      	adds	r3, #8
 80067ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067f0:	61fa      	str	r2, [r7, #28]
 80067f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	69b9      	ldr	r1, [r7, #24]
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	617b      	str	r3, [r7, #20]
   return(result);
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e5      	bne.n	80067d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e011      	b.n	800683c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3758      	adds	r7, #88	; 0x58
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	4613      	mov	r3, r2
 8006852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006854:	e049      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685c:	d045      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685e:	f7fa fca5 	bl	80011ac <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	429a      	cmp	r2, r3
 800686c:	d302      	bcc.n	8006874 <UART_WaitOnFlagUntilTimeout+0x30>
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e048      	b.n	800690a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d031      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	f003 0308 	and.w	r3, r3, #8
 8006890:	2b08      	cmp	r3, #8
 8006892:	d110      	bne.n	80068b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2208      	movs	r2, #8
 800689a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f838 	bl	8006912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2208      	movs	r2, #8
 80068a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e029      	b.n	800690a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068c4:	d111      	bne.n	80068ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 f81e 	bl	8006912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e00f      	b.n	800690a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4013      	ands	r3, r2
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	bf0c      	ite	eq
 80068fa:	2301      	moveq	r3, #1
 80068fc:	2300      	movne	r3, #0
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	429a      	cmp	r2, r3
 8006906:	d0a6      	beq.n	8006856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006912:	b480      	push	{r7}
 8006914:	b095      	sub	sp, #84	; 0x54
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800692e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006938:	643b      	str	r3, [r7, #64]	; 0x40
 800693a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800693e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e6      	bne.n	800691a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3308      	adds	r3, #8
 8006952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	61fb      	str	r3, [r7, #28]
   return(result);
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	64bb      	str	r3, [r7, #72]	; 0x48
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3308      	adds	r3, #8
 800696a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800696c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800696e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e5      	bne.n	800694c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006984:	2b01      	cmp	r3, #1
 8006986:	d118      	bne.n	80069ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	60bb      	str	r3, [r7, #8]
   return(result);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f023 0310 	bic.w	r3, r3, #16
 800699c:	647b      	str	r3, [r7, #68]	; 0x44
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a6:	61bb      	str	r3, [r7, #24]
 80069a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6979      	ldr	r1, [r7, #20]
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	613b      	str	r3, [r7, #16]
   return(result);
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e6      	bne.n	8006988 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069ce:	bf00      	nop
 80069d0:	3754      	adds	r7, #84	; 0x54
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b086      	sub	sp, #24
 80069de:	af00      	add	r7, sp, #0
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	607a      	str	r2, [r7, #4]
 80069e6:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e056      	b.n	8006aa0 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d106      	bne.n	8006a08 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7fa fa40 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2224      	movs	r2, #36	; 0x24
 8006a0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0201 	bic.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7ff fdc2 	bl	80065b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f7ff fb65 	bl	80060fc <UART_SetConfig>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e031      	b.n	8006aa0 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a4a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	055b      	lsls	r3, r3, #21
 8006a64:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8006a7a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	6979      	ldr	r1, [r7, #20]
 8006a84:	430b      	orrs	r3, r1
 8006a86:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7ff fe2b 	bl	80066f4 <UART_CheckIdleState>
 8006a9e:	4603      	mov	r3, r0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	f107 0014 	add.w	r0, r7, #20
 8006ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	b004      	add	sp, #16
 8006ac8:	4770      	bx	lr

08006aca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ada:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006ade:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b00:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	43db      	mvns	r3, r3
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	4013      	ands	r3, r2
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	460b      	mov	r3, r1
 8006b38:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b48:	b084      	sub	sp, #16
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	f107 0014 	add.w	r0, r7, #20
 8006b56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	b004      	add	sp, #16
 8006b88:	4770      	bx	lr
	...

08006b8c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b09d      	sub	sp, #116	; 0x74
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	78db      	ldrb	r3, [r3, #3]
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d81f      	bhi.n	8006bfe <USB_ActivateEndpoint+0x72>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <USB_ActivateEndpoint+0x38>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006bd5 	.word	0x08006bd5
 8006bc8:	08006bf1 	.word	0x08006bf1
 8006bcc:	08006c07 	.word	0x08006c07
 8006bd0:	08006be3 	.word	0x08006be3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006bd4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006bd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bdc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006be0:	e012      	b.n	8006c08 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006be2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006be6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006bea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006bee:	e00b      	b.n	8006c08 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006bf0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006bf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bf8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006bfc:	e004      	b.n	8006c08 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006c04:	e000      	b.n	8006c08 <USB_ActivateEndpoint+0x7c>
      break;
 8006c06:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	441a      	add	r2, r3
 8006c12:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	b21b      	sxth	r3, r3
 8006c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c42:	b21a      	sxth	r2, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	b21b      	sxth	r3, r3
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	b21b      	sxth	r3, r3
 8006c4e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	441a      	add	r2, r3
 8006c5c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	7b1b      	ldrb	r3, [r3, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f040 8178 	bne.w	8006f6e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 8084 	beq.w	8006d90 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	4413      	add	r3, r2
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	00da      	lsls	r2, r3, #3
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	88db      	ldrh	r3, [r3, #6]
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	827b      	strh	r3, [r7, #18]
 8006cca:	8a7b      	ldrh	r3, [r7, #18]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d01b      	beq.n	8006d0c <USB_ActivateEndpoint+0x180>
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cea:	823b      	strh	r3, [r7, #16]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	441a      	add	r2, r3
 8006cf6:	8a3b      	ldrh	r3, [r7, #16]
 8006cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	78db      	ldrb	r3, [r3, #3]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d020      	beq.n	8006d56 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d2a:	81bb      	strh	r3, [r7, #12]
 8006d2c:	89bb      	ldrh	r3, [r7, #12]
 8006d2e:	f083 0320 	eor.w	r3, r3, #32
 8006d32:	81bb      	strh	r3, [r7, #12]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	89bb      	ldrh	r3, [r7, #12]
 8006d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	8013      	strh	r3, [r2, #0]
 8006d54:	e2d5      	b.n	8007302 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d6c:	81fb      	strh	r3, [r7, #14]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	441a      	add	r2, r3
 8006d78:	89fb      	ldrh	r3, [r7, #14]
 8006d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	8013      	strh	r3, [r2, #0]
 8006d8e:	e2b8      	b.n	8007302 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	633b      	str	r3, [r7, #48]	; 0x30
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	4413      	add	r3, r2
 8006da2:	633b      	str	r3, [r7, #48]	; 0x30
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	00da      	lsls	r2, r3, #3
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	4413      	add	r3, r2
 8006dae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	88db      	ldrh	r3, [r3, #6]
 8006db8:	085b      	lsrs	r3, r3, #1
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	4413      	add	r3, r2
 8006dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	00da      	lsls	r2, r3, #3
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	4413      	add	r3, r2
 8006de2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	801a      	strh	r2, [r3, #0]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8006dfe:	d91d      	bls.n	8006e3c <USB_ActivateEndpoint+0x2b0>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	095b      	lsrs	r3, r3, #5
 8006e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <USB_ActivateEndpoint+0x28e>
 8006e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e16:	3b01      	subs	r3, #1
 8006e18:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	029b      	lsls	r3, r3, #10
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	801a      	strh	r2, [r3, #0]
 8006e3a:	e026      	b.n	8006e8a <USB_ActivateEndpoint+0x2fe>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <USB_ActivateEndpoint+0x2ce>
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	801a      	strh	r2, [r3, #0]
 8006e58:	e017      	b.n	8006e8a <USB_ActivateEndpoint+0x2fe>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	085b      	lsrs	r3, r3, #1
 8006e60:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <USB_ActivateEndpoint+0x2e8>
 8006e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e70:	3301      	adds	r3, #1
 8006e72:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	029b      	lsls	r3, r3, #10
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	4313      	orrs	r3, r2
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d01b      	beq.n	8006eda <USB_ActivateEndpoint+0x34e>
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb8:	843b      	strh	r3, [r7, #32]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	441a      	add	r2, r3
 8006ec4:	8c3b      	ldrh	r3, [r7, #32]
 8006ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ece:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d124      	bne.n	8006f2c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef8:	83bb      	strh	r3, [r7, #28]
 8006efa:	8bbb      	ldrh	r3, [r7, #28]
 8006efc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f00:	83bb      	strh	r3, [r7, #28]
 8006f02:	8bbb      	ldrh	r3, [r7, #28]
 8006f04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f08:	83bb      	strh	r3, [r7, #28]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	8bbb      	ldrh	r3, [r7, #28]
 8006f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	8013      	strh	r3, [r2, #0]
 8006f2a:	e1ea      	b.n	8007302 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	83fb      	strh	r3, [r7, #30]
 8006f44:	8bfb      	ldrh	r3, [r7, #30]
 8006f46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f4a:	83fb      	strh	r3, [r7, #30]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	441a      	add	r2, r3
 8006f56:	8bfb      	ldrh	r3, [r7, #30]
 8006f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	8013      	strh	r3, [r2, #0]
 8006f6c:	e1c9      	b.n	8007302 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	78db      	ldrb	r3, [r3, #3]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d11e      	bne.n	8006fb4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	441a      	add	r2, r3
 8006f9a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	8013      	strh	r3, [r2, #0]
 8006fb2:	e01d      	b.n	8006ff0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	441a      	add	r2, r3
 8006fd8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007000:	4413      	add	r3, r2
 8007002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	00da      	lsls	r2, r3, #3
 800700a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800700c:	4413      	add	r3, r2
 800700e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007012:	65bb      	str	r3, [r7, #88]	; 0x58
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	891b      	ldrh	r3, [r3, #8]
 8007018:	085b      	lsrs	r3, r3, #1
 800701a:	b29b      	uxth	r3, r3
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007022:	801a      	strh	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	657b      	str	r3, [r7, #84]	; 0x54
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702e:	b29b      	uxth	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007034:	4413      	add	r3, r2
 8007036:	657b      	str	r3, [r7, #84]	; 0x54
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	00da      	lsls	r2, r3, #3
 800703e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007040:	4413      	add	r3, r2
 8007042:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007046:	653b      	str	r3, [r7, #80]	; 0x50
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	895b      	ldrh	r3, [r3, #10]
 800704c:	085b      	lsrs	r3, r3, #1
 800704e:	b29b      	uxth	r3, r3
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007056:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b00      	cmp	r3, #0
 800705e:	f040 8093 	bne.w	8007188 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007072:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d01b      	beq.n	80070b6 <USB_ActivateEndpoint+0x52a>
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007094:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	441a      	add	r2, r3
 80070a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80070a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80070c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80070c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d01b      	beq.n	8007106 <USB_ActivateEndpoint+0x57a>
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	441a      	add	r2, r3
 80070f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80070f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007102:	b29b      	uxth	r3, r3
 8007104:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	b29b      	uxth	r3, r3
 8007114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711c:	873b      	strh	r3, [r7, #56]	; 0x38
 800711e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007120:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007124:	873b      	strh	r3, [r7, #56]	; 0x38
 8007126:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007128:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800712c:	873b      	strh	r3, [r7, #56]	; 0x38
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	441a      	add	r2, r3
 8007138:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800713a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800713e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714a:	b29b      	uxth	r3, r3
 800714c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007164:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	441a      	add	r2, r3
 8007170:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800717a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800717e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007182:	b29b      	uxth	r3, r3
 8007184:	8013      	strh	r3, [r2, #0]
 8007186:	e0bc      	b.n	8007302 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007198:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800719c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01d      	beq.n	80071e0 <USB_ActivateEndpoint+0x654>
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	441a      	add	r2, r3
 80071c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071dc:	b29b      	uxth	r3, r3
 80071de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80071f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80071f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01d      	beq.n	8007238 <USB_ActivateEndpoint+0x6ac>
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	b29b      	uxth	r3, r3
 800720a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800720e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007212:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	441a      	add	r2, r3
 8007220:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800722c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007234:	b29b      	uxth	r3, r3
 8007236:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	78db      	ldrb	r3, [r3, #3]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d024      	beq.n	800728a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b29b      	uxth	r3, r3
 800724e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007256:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800725a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800725e:	f083 0320 	eor.w	r3, r3, #32
 8007262:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	441a      	add	r2, r3
 8007270:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800727c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007284:	b29b      	uxth	r3, r3
 8007286:	8013      	strh	r3, [r2, #0]
 8007288:	e01d      	b.n	80072c6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	b29b      	uxth	r3, r3
 8007298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800729c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	441a      	add	r2, r3
 80072ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80072b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	441a      	add	r2, r3
 80072ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80072ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072fe:	b29b      	uxth	r3, r3
 8007300:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007302:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007306:	4618      	mov	r0, r3
 8007308:	3774      	adds	r7, #116	; 0x74
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop

08007314 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007314:	b480      	push	{r7}
 8007316:	b08d      	sub	sp, #52	; 0x34
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	7b1b      	ldrb	r3, [r3, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	f040 808e 	bne.w	8007444 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d044      	beq.n	80073ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	81bb      	strh	r3, [r7, #12]
 800733e:	89bb      	ldrh	r3, [r7, #12]
 8007340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01b      	beq.n	8007380 <USB_DeactivateEndpoint+0x6c>
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735e:	817b      	strh	r3, [r7, #10]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	441a      	add	r2, r3
 800736a:	897b      	ldrh	r3, [r7, #10]
 800736c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007378:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800737c:	b29b      	uxth	r3, r3
 800737e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007396:	813b      	strh	r3, [r7, #8]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	441a      	add	r2, r3
 80073a2:	893b      	ldrh	r3, [r7, #8]
 80073a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	8013      	strh	r3, [r2, #0]
 80073b8:	e192      	b.n	80076e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	827b      	strh	r3, [r7, #18]
 80073c8:	8a7b      	ldrh	r3, [r7, #18]
 80073ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01b      	beq.n	800740a <USB_DeactivateEndpoint+0xf6>
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e8:	823b      	strh	r3, [r7, #16]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	441a      	add	r2, r3
 80073f4:	8a3b      	ldrh	r3, [r7, #16]
 80073f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007406:	b29b      	uxth	r3, r3
 8007408:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800741c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007420:	81fb      	strh	r3, [r7, #14]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	441a      	add	r2, r3
 800742c:	89fb      	ldrh	r3, [r7, #14]
 800742e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800743a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800743e:	b29b      	uxth	r3, r3
 8007440:	8013      	strh	r3, [r2, #0]
 8007442:	e14d      	b.n	80076e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f040 80a5 	bne.w	8007598 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	843b      	strh	r3, [r7, #32]
 800745c:	8c3b      	ldrh	r3, [r7, #32]
 800745e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d01b      	beq.n	800749e <USB_DeactivateEndpoint+0x18a>
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747c:	83fb      	strh	r3, [r7, #30]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	441a      	add	r2, r3
 8007488:	8bfb      	ldrh	r3, [r7, #30]
 800748a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800748e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749a:	b29b      	uxth	r3, r3
 800749c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	83bb      	strh	r3, [r7, #28]
 80074ac:	8bbb      	ldrh	r3, [r7, #28]
 80074ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d01b      	beq.n	80074ee <USB_DeactivateEndpoint+0x1da>
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074cc:	837b      	strh	r3, [r7, #26]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	441a      	add	r2, r3
 80074d8:	8b7b      	ldrh	r3, [r7, #26]
 80074da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007504:	833b      	strh	r3, [r7, #24]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	441a      	add	r2, r3
 8007510:	8b3b      	ldrh	r3, [r7, #24]
 8007512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800751a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800751e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007522:	b29b      	uxth	r3, r3
 8007524:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b29b      	uxth	r3, r3
 8007534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753c:	82fb      	strh	r3, [r7, #22]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	441a      	add	r2, r3
 8007548:	8afb      	ldrh	r3, [r7, #22]
 800754a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800754e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755a:	b29b      	uxth	r3, r3
 800755c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007574:	82bb      	strh	r3, [r7, #20]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	441a      	add	r2, r3
 8007580:	8abb      	ldrh	r3, [r7, #20]
 8007582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800758e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007592:	b29b      	uxth	r3, r3
 8007594:	8013      	strh	r3, [r2, #0]
 8007596:	e0a3      	b.n	80076e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80075a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01b      	beq.n	80075e8 <USB_DeactivateEndpoint+0x2d4>
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	441a      	add	r2, r3
 80075d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80075d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80075f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80075f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01b      	beq.n	8007638 <USB_DeactivateEndpoint+0x324>
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	853b      	strh	r3, [r7, #40]	; 0x28
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	441a      	add	r2, r3
 8007622:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800762c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007630:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007634:	b29b      	uxth	r3, r3
 8007636:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	441a      	add	r2, r3
 800765a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800765c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766c:	b29b      	uxth	r3, r3
 800766e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	b29b      	uxth	r3, r3
 800767e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007686:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	441a      	add	r2, r3
 8007692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800769c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	847b      	strh	r3, [r7, #34]	; 0x22
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	441a      	add	r2, r3
 80076ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076dc:	b29b      	uxth	r3, r3
 80076de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3734      	adds	r7, #52	; 0x34
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b0c2      	sub	sp, #264	; 0x108
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076fc:	6018      	str	r0, [r3, #0]
 80076fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007706:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	2b01      	cmp	r3, #1
 8007716:	f040 86b7 	bne.w	8008488 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800771a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	429a      	cmp	r2, r3
 8007734:	d908      	bls.n	8007748 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007746:	e007      	b.n	8007758 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	7b1b      	ldrb	r3, [r3, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d13a      	bne.n	80077de <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6959      	ldr	r1, [r3, #20]
 8007774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	88da      	ldrh	r2, [r3, #6]
 8007780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007784:	b29b      	uxth	r3, r3
 8007786:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800778a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800778e:	6800      	ldr	r0, [r0, #0]
 8007790:	f001 fcb9 	bl	8009106 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	613b      	str	r3, [r7, #16]
 80077a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	4413      	add	r3, r2
 80077b6:	613b      	str	r3, [r7, #16]
 80077b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	00da      	lsls	r2, r3, #3
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	4413      	add	r3, r2
 80077ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	801a      	strh	r2, [r3, #0]
 80077da:	f000 be1f 	b.w	800841c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80077de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	78db      	ldrb	r3, [r3, #3]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	f040 8462 	bne.w	80080b4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80077f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6a1a      	ldr	r2, [r3, #32]
 80077fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	429a      	cmp	r2, r3
 800780a:	f240 83df 	bls.w	8007fcc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800780e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007834:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	441a      	add	r2, r3
 8007852:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800785a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800785e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007866:	b29b      	uxth	r3, r3
 8007868:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800786a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6a1a      	ldr	r2, [r3, #32]
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800787a:	1ad2      	subs	r2, r2, r3
 800787c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 81c7 	beq.w	8007c3e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	633b      	str	r3, [r7, #48]	; 0x30
 80078bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	785b      	ldrb	r3, [r3, #1]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d177      	bne.n	80079bc <USB_EPStartXfer+0x2ce>
 80078cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ec:	4413      	add	r3, r2
 80078ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80078f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	00da      	lsls	r2, r3, #3
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	4413      	add	r3, r2
 8007902:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007906:	627b      	str	r3, [r7, #36]	; 0x24
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	b29b      	uxth	r3, r3
 800790e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007912:	b29a      	uxth	r2, r3
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	801a      	strh	r2, [r3, #0]
 8007918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791c:	2b3e      	cmp	r3, #62	; 0x3e
 800791e:	d921      	bls.n	8007964 <USB_EPStartXfer+0x276>
 8007920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007924:	095b      	lsrs	r3, r3, #5
 8007926:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800792a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792e:	f003 031f 	and.w	r3, r3, #31
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <USB_EPStartXfer+0x252>
 8007936:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800793a:	3b01      	subs	r3, #1
 800793c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	b29a      	uxth	r2, r3
 8007946:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800794a:	b29b      	uxth	r3, r3
 800794c:	029b      	lsls	r3, r3, #10
 800794e:	b29b      	uxth	r3, r3
 8007950:	4313      	orrs	r3, r2
 8007952:	b29b      	uxth	r3, r3
 8007954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800795c:	b29a      	uxth	r2, r3
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	801a      	strh	r2, [r3, #0]
 8007962:	e050      	b.n	8007a06 <USB_EPStartXfer+0x318>
 8007964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <USB_EPStartXfer+0x294>
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	b29b      	uxth	r3, r3
 8007972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800797a:	b29a      	uxth	r2, r3
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	e041      	b.n	8007a06 <USB_EPStartXfer+0x318>
 8007982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007986:	085b      	lsrs	r3, r3, #1
 8007988:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800798c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d004      	beq.n	80079a2 <USB_EPStartXfer+0x2b4>
 8007998:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800799c:	3301      	adds	r3, #1
 800799e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	029b      	lsls	r3, r3, #10
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	4313      	orrs	r3, r2
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	801a      	strh	r2, [r3, #0]
 80079ba:	e024      	b.n	8007a06 <USB_EPStartXfer+0x318>
 80079bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	785b      	ldrb	r3, [r3, #1]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d11c      	bne.n	8007a06 <USB_EPStartXfer+0x318>
 80079cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079da:	b29b      	uxth	r3, r3
 80079dc:	461a      	mov	r2, r3
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	4413      	add	r3, r2
 80079e2:	633b      	str	r3, [r7, #48]	; 0x30
 80079e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	00da      	lsls	r2, r3, #3
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	4413      	add	r3, r2
 80079f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	895b      	ldrh	r3, [r3, #10]
 8007a12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6959      	ldr	r1, [r3, #20]
 8007a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a34:	6800      	ldr	r0, [r0, #0]
 8007a36:	f001 fb66 	bl	8009106 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	695a      	ldr	r2, [r3, #20]
 8007a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4a:	441a      	add	r2, r3
 8007a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6a1a      	ldr	r2, [r3, #32]
 8007a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d90f      	bls.n	8007a94 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6a1a      	ldr	r2, [r3, #32]
 8007a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a84:	1ad2      	subs	r2, r2, r3
 8007a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	621a      	str	r2, [r3, #32]
 8007a92:	e00e      	b.n	8007ab2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d177      	bne.n	8007bb2 <USB_EPStartXfer+0x4c4>
 8007ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	61bb      	str	r3, [r7, #24]
 8007ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	00da      	lsls	r2, r3, #3
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	4413      	add	r3, r2
 8007af8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	801a      	strh	r2, [r3, #0]
 8007b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b12:	2b3e      	cmp	r3, #62	; 0x3e
 8007b14:	d921      	bls.n	8007b5a <USB_EPStartXfer+0x46c>
 8007b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b24:	f003 031f 	and.w	r3, r3, #31
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d104      	bne.n	8007b36 <USB_EPStartXfer+0x448>
 8007b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b30:	3b01      	subs	r3, #1
 8007b32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	029b      	lsls	r3, r3, #10
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	4313      	orrs	r3, r2
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	801a      	strh	r2, [r3, #0]
 8007b58:	e056      	b.n	8007c08 <USB_EPStartXfer+0x51a>
 8007b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <USB_EPStartXfer+0x48a>
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	801a      	strh	r2, [r3, #0]
 8007b76:	e047      	b.n	8007c08 <USB_EPStartXfer+0x51a>
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d004      	beq.n	8007b98 <USB_EPStartXfer+0x4aa>
 8007b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b92:	3301      	adds	r3, #1
 8007b94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	029b      	lsls	r3, r3, #10
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	801a      	strh	r2, [r3, #0]
 8007bb0:	e02a      	b.n	8007c08 <USB_EPStartXfer+0x51a>
 8007bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d122      	bne.n	8007c08 <USB_EPStartXfer+0x51a>
 8007bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	623b      	str	r3, [r7, #32]
 8007bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	4413      	add	r3, r2
 8007be4:	623b      	str	r3, [r7, #32]
 8007be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	00da      	lsls	r2, r3, #3
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bfc:	61fb      	str	r3, [r7, #28]
 8007bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	891b      	ldrh	r3, [r3, #8]
 8007c14:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6959      	ldr	r1, [r3, #20]
 8007c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c2e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c32:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c36:	6800      	ldr	r0, [r0, #0]
 8007c38:	f001 fa65 	bl	8009106 <USB_WritePMA>
 8007c3c:	e3ee      	b.n	800841c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	785b      	ldrb	r3, [r3, #1]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d177      	bne.n	8007d3e <USB_EPStartXfer+0x650>
 8007c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c6e:	4413      	add	r3, r2
 8007c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	00da      	lsls	r2, r3, #3
 8007c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c82:	4413      	add	r3, r2
 8007c84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c88:	647b      	str	r3, [r7, #68]	; 0x44
 8007c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c98:	801a      	strh	r2, [r3, #0]
 8007c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8007ca0:	d921      	bls.n	8007ce6 <USB_EPStartXfer+0x5f8>
 8007ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca6:	095b      	lsrs	r3, r3, #5
 8007ca8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb0:	f003 031f 	and.w	r3, r3, #31
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d104      	bne.n	8007cc2 <USB_EPStartXfer+0x5d4>
 8007cb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	029b      	lsls	r3, r3, #10
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	e056      	b.n	8007d94 <USB_EPStartXfer+0x6a6>
 8007ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10a      	bne.n	8007d04 <USB_EPStartXfer+0x616>
 8007cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d00:	801a      	strh	r2, [r3, #0]
 8007d02:	e047      	b.n	8007d94 <USB_EPStartXfer+0x6a6>
 8007d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d08:	085b      	lsrs	r3, r3, #1
 8007d0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d004      	beq.n	8007d24 <USB_EPStartXfer+0x636>
 8007d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d1e:	3301      	adds	r3, #1
 8007d20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	029b      	lsls	r3, r3, #10
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	4313      	orrs	r3, r2
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d3a:	801a      	strh	r2, [r3, #0]
 8007d3c:	e02a      	b.n	8007d94 <USB_EPStartXfer+0x6a6>
 8007d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	785b      	ldrb	r3, [r3, #1]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d122      	bne.n	8007d94 <USB_EPStartXfer+0x6a6>
 8007d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	653b      	str	r3, [r7, #80]	; 0x50
 8007d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d6e:	4413      	add	r3, r2
 8007d70:	653b      	str	r3, [r7, #80]	; 0x50
 8007d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	00da      	lsls	r2, r3, #3
 8007d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d82:	4413      	add	r3, r2
 8007d84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	891b      	ldrh	r3, [r3, #8]
 8007da0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6959      	ldr	r1, [r3, #20]
 8007db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007dba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007dbe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007dc2:	6800      	ldr	r0, [r0, #0]
 8007dc4:	f001 f99f 	bl	8009106 <USB_WritePMA>
            ep->xfer_buff += len;
 8007dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	695a      	ldr	r2, [r3, #20]
 8007dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd8:	441a      	add	r2, r3
 8007dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6a1a      	ldr	r2, [r3, #32]
 8007df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d90f      	bls.n	8007e22 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6a1a      	ldr	r2, [r3, #32]
 8007e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e12:	1ad2      	subs	r2, r2, r3
 8007e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	621a      	str	r2, [r3, #32]
 8007e20:	e00e      	b.n	8007e40 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8007e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	785b      	ldrb	r3, [r3, #1]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d177      	bne.n	8007f4c <USB_EPStartXfer+0x85e>
 8007e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	461a      	mov	r2, r3
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	4413      	add	r3, r2
 8007e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	00da      	lsls	r2, r3, #3
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	4413      	add	r3, r2
 8007e92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e96:	637b      	str	r3, [r7, #52]	; 0x34
 8007e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea6:	801a      	strh	r2, [r3, #0]
 8007ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eac:	2b3e      	cmp	r3, #62	; 0x3e
 8007eae:	d921      	bls.n	8007ef4 <USB_EPStartXfer+0x806>
 8007eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ebe:	f003 031f 	and.w	r3, r3, #31
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d104      	bne.n	8007ed0 <USB_EPStartXfer+0x7e2>
 8007ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	029b      	lsls	r3, r3, #10
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef0:	801a      	strh	r2, [r3, #0]
 8007ef2:	e050      	b.n	8007f96 <USB_EPStartXfer+0x8a8>
 8007ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10a      	bne.n	8007f12 <USB_EPStartXfer+0x824>
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	e041      	b.n	8007f96 <USB_EPStartXfer+0x8a8>
 8007f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f16:	085b      	lsrs	r3, r3, #1
 8007f18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <USB_EPStartXfer+0x844>
 8007f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	029b      	lsls	r3, r3, #10
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	4313      	orrs	r3, r2
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f48:	801a      	strh	r2, [r3, #0]
 8007f4a:	e024      	b.n	8007f96 <USB_EPStartXfer+0x8a8>
 8007f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d11c      	bne.n	8007f96 <USB_EPStartXfer+0x8a8>
 8007f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f70:	4413      	add	r3, r2
 8007f72:	643b      	str	r3, [r7, #64]	; 0x40
 8007f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	00da      	lsls	r2, r3, #3
 8007f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f84:	4413      	add	r3, r2
 8007f86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	895b      	ldrh	r3, [r3, #10]
 8007fa2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6959      	ldr	r1, [r3, #20]
 8007fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007fbc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007fc0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007fc4:	6800      	ldr	r0, [r0, #0]
 8007fc6:	f001 f89e 	bl	8009106 <USB_WritePMA>
 8007fca:	e227      	b.n	800841c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008002:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	441a      	add	r2, r3
 8008020:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800802c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008034:	b29b      	uxth	r3, r3
 8008036:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800803c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008048:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008052:	b29b      	uxth	r3, r3
 8008054:	461a      	mov	r2, r3
 8008056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008058:	4413      	add	r3, r2
 800805a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800805c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	00da      	lsls	r2, r3, #3
 800806a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800806c:	4413      	add	r3, r2
 800806e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008072:	65bb      	str	r3, [r7, #88]	; 0x58
 8008074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008078:	b29a      	uxth	r2, r3
 800807a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800807c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800807e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	891b      	ldrh	r3, [r3, #8]
 800808a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800808e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6959      	ldr	r1, [r3, #20]
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809e:	b29b      	uxth	r3, r3
 80080a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80080a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80080a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80080ac:	6800      	ldr	r0, [r0, #0]
 80080ae:	f001 f82a 	bl	8009106 <USB_WritePMA>
 80080b2:	e1b3      	b.n	800841c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80080b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6a1a      	ldr	r2, [r3, #32]
 80080c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c4:	1ad2      	subs	r2, r2, r3
 80080c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80080d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80c6 	beq.w	8008286 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	673b      	str	r3, [r7, #112]	; 0x70
 8008106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	785b      	ldrb	r3, [r3, #1]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d177      	bne.n	8008206 <USB_EPStartXfer+0xb18>
 8008116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	66bb      	str	r3, [r7, #104]	; 0x68
 8008122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008130:	b29b      	uxth	r3, r3
 8008132:	461a      	mov	r2, r3
 8008134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008136:	4413      	add	r3, r2
 8008138:	66bb      	str	r3, [r7, #104]	; 0x68
 800813a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	00da      	lsls	r2, r3, #3
 8008148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800814a:	4413      	add	r3, r2
 800814c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008150:	667b      	str	r3, [r7, #100]	; 0x64
 8008152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800815c:	b29a      	uxth	r2, r3
 800815e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008160:	801a      	strh	r2, [r3, #0]
 8008162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008166:	2b3e      	cmp	r3, #62	; 0x3e
 8008168:	d921      	bls.n	80081ae <USB_EPStartXfer+0xac0>
 800816a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800816e:	095b      	lsrs	r3, r3, #5
 8008170:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008178:	f003 031f 	and.w	r3, r3, #31
 800817c:	2b00      	cmp	r3, #0
 800817e:	d104      	bne.n	800818a <USB_EPStartXfer+0xa9c>
 8008180:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008184:	3b01      	subs	r3, #1
 8008186:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800818a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29a      	uxth	r2, r3
 8008190:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008194:	b29b      	uxth	r3, r3
 8008196:	029b      	lsls	r3, r3, #10
 8008198:	b29b      	uxth	r3, r3
 800819a:	4313      	orrs	r3, r2
 800819c:	b29b      	uxth	r3, r3
 800819e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081aa:	801a      	strh	r2, [r3, #0]
 80081ac:	e050      	b.n	8008250 <USB_EPStartXfer+0xb62>
 80081ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10a      	bne.n	80081cc <USB_EPStartXfer+0xade>
 80081b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081c8:	801a      	strh	r2, [r3, #0]
 80081ca:	e041      	b.n	8008250 <USB_EPStartXfer+0xb62>
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d0:	085b      	lsrs	r3, r3, #1
 80081d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80081d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d004      	beq.n	80081ec <USB_EPStartXfer+0xafe>
 80081e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80081e6:	3301      	adds	r3, #1
 80081e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80081ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	029b      	lsls	r3, r3, #10
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	4313      	orrs	r3, r2
 80081fe:	b29a      	uxth	r2, r3
 8008200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008202:	801a      	strh	r2, [r3, #0]
 8008204:	e024      	b.n	8008250 <USB_EPStartXfer+0xb62>
 8008206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	785b      	ldrb	r3, [r3, #1]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d11c      	bne.n	8008250 <USB_EPStartXfer+0xb62>
 8008216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008224:	b29b      	uxth	r3, r3
 8008226:	461a      	mov	r2, r3
 8008228:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800822a:	4413      	add	r3, r2
 800822c:	673b      	str	r3, [r7, #112]	; 0x70
 800822e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	00da      	lsls	r2, r3, #3
 800823c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800823e:	4413      	add	r3, r2
 8008240:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008244:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824a:	b29a      	uxth	r2, r3
 800824c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800824e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	895b      	ldrh	r3, [r3, #10]
 800825c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6959      	ldr	r1, [r3, #20]
 800826c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008270:	b29b      	uxth	r3, r3
 8008272:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008276:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800827a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800827e:	6800      	ldr	r0, [r0, #0]
 8008280:	f000 ff41 	bl	8009106 <USB_WritePMA>
 8008284:	e0ca      	b.n	800841c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	785b      	ldrb	r3, [r3, #1]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d177      	bne.n	8008386 <USB_EPStartXfer+0xc98>
 8008296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80082a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	461a      	mov	r2, r3
 80082b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082b6:	4413      	add	r3, r2
 80082b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80082ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	00da      	lsls	r2, r3, #3
 80082c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082ca:	4413      	add	r3, r2
 80082cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80082d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082dc:	b29a      	uxth	r2, r3
 80082de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082e0:	801a      	strh	r2, [r3, #0]
 80082e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082e6:	2b3e      	cmp	r3, #62	; 0x3e
 80082e8:	d921      	bls.n	800832e <USB_EPStartXfer+0xc40>
 80082ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ee:	095b      	lsrs	r3, r3, #5
 80082f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80082f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f8:	f003 031f 	and.w	r3, r3, #31
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d104      	bne.n	800830a <USB_EPStartXfer+0xc1c>
 8008300:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008304:	3b01      	subs	r3, #1
 8008306:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800830a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29a      	uxth	r2, r3
 8008310:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008314:	b29b      	uxth	r3, r3
 8008316:	029b      	lsls	r3, r3, #10
 8008318:	b29b      	uxth	r3, r3
 800831a:	4313      	orrs	r3, r2
 800831c:	b29b      	uxth	r3, r3
 800831e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008326:	b29a      	uxth	r2, r3
 8008328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800832a:	801a      	strh	r2, [r3, #0]
 800832c:	e05c      	b.n	80083e8 <USB_EPStartXfer+0xcfa>
 800832e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10a      	bne.n	800834c <USB_EPStartXfer+0xc5e>
 8008336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29b      	uxth	r3, r3
 800833c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008344:	b29a      	uxth	r2, r3
 8008346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008348:	801a      	strh	r2, [r3, #0]
 800834a:	e04d      	b.n	80083e8 <USB_EPStartXfer+0xcfa>
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008350:	085b      	lsrs	r3, r3, #1
 8008352:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d004      	beq.n	800836c <USB_EPStartXfer+0xc7e>
 8008362:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008366:	3301      	adds	r3, #1
 8008368:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800836c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29a      	uxth	r2, r3
 8008372:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008376:	b29b      	uxth	r3, r3
 8008378:	029b      	lsls	r3, r3, #10
 800837a:	b29b      	uxth	r3, r3
 800837c:	4313      	orrs	r3, r2
 800837e:	b29a      	uxth	r2, r3
 8008380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008382:	801a      	strh	r2, [r3, #0]
 8008384:	e030      	b.n	80083e8 <USB_EPStartXfer+0xcfa>
 8008386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	785b      	ldrb	r3, [r3, #1]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d128      	bne.n	80083e8 <USB_EPStartXfer+0xcfa>
 8008396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083ba:	4413      	add	r3, r2
 80083bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	00da      	lsls	r2, r3, #3
 80083ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083d2:	4413      	add	r3, r2
 80083d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80083e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	891b      	ldrh	r3, [r3, #8]
 80083f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6959      	ldr	r1, [r3, #20]
 8008404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008408:	b29b      	uxth	r3, r3
 800840a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800840e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008412:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008416:	6800      	ldr	r0, [r0, #0]
 8008418:	f000 fe75 	bl	8009106 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800841c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800842a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800843e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008442:	817b      	strh	r3, [r7, #10]
 8008444:	897b      	ldrh	r3, [r7, #10]
 8008446:	f083 0310 	eor.w	r3, r3, #16
 800844a:	817b      	strh	r3, [r7, #10]
 800844c:	897b      	ldrh	r3, [r7, #10]
 800844e:	f083 0320 	eor.w	r3, r3, #32
 8008452:	817b      	strh	r3, [r7, #10]
 8008454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	441a      	add	r2, r3
 800846e:	897b      	ldrh	r3, [r7, #10]
 8008470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800847c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008480:	b29b      	uxth	r3, r3
 8008482:	8013      	strh	r3, [r2, #0]
 8008484:	f000 bcde 	b.w	8008e44 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	7b1b      	ldrb	r3, [r3, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f040 80bb 	bne.w	8008610 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800849a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800849e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	699a      	ldr	r2, [r3, #24]
 80084a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d917      	bls.n	80084e6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80084b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80084c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	699a      	ldr	r2, [r3, #24]
 80084d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084d6:	1ad2      	subs	r2, r2, r3
 80084d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	619a      	str	r2, [r3, #24]
 80084e4:	e00e      	b.n	8008504 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80084e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80084f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2200      	movs	r2, #0
 8008502:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008520:	b29b      	uxth	r3, r3
 8008522:	461a      	mov	r2, r3
 8008524:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008528:	4413      	add	r3, r2
 800852a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800852e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	00da      	lsls	r2, r3, #3
 800853c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008540:	4413      	add	r3, r2
 8008542:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800854a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008556:	b29a      	uxth	r2, r3
 8008558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800855c:	801a      	strh	r2, [r3, #0]
 800855e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008562:	2b3e      	cmp	r3, #62	; 0x3e
 8008564:	d924      	bls.n	80085b0 <USB_EPStartXfer+0xec2>
 8008566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800856a:	095b      	lsrs	r3, r3, #5
 800856c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008574:	f003 031f 	and.w	r3, r3, #31
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <USB_EPStartXfer+0xe98>
 800857c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008580:	3b01      	subs	r3, #1
 8008582:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	b29a      	uxth	r2, r3
 800858e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008592:	b29b      	uxth	r3, r3
 8008594:	029b      	lsls	r3, r3, #10
 8008596:	b29b      	uxth	r3, r3
 8008598:	4313      	orrs	r3, r2
 800859a:	b29b      	uxth	r3, r3
 800859c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085aa:	801a      	strh	r2, [r3, #0]
 80085ac:	f000 bc10 	b.w	8008dd0 <USB_EPStartXfer+0x16e2>
 80085b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10c      	bne.n	80085d2 <USB_EPStartXfer+0xee4>
 80085b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085ce:	801a      	strh	r2, [r3, #0]
 80085d0:	e3fe      	b.n	8008dd0 <USB_EPStartXfer+0x16e2>
 80085d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d6:	085b      	lsrs	r3, r3, #1
 80085d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d004      	beq.n	80085f2 <USB_EPStartXfer+0xf04>
 80085e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085ec:	3301      	adds	r3, #1
 80085ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085fe:	b29b      	uxth	r3, r3
 8008600:	029b      	lsls	r3, r3, #10
 8008602:	b29b      	uxth	r3, r3
 8008604:	4313      	orrs	r3, r2
 8008606:	b29a      	uxth	r2, r3
 8008608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800860c:	801a      	strh	r2, [r3, #0]
 800860e:	e3df      	b.n	8008dd0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	78db      	ldrb	r3, [r3, #3]
 800861c:	2b02      	cmp	r3, #2
 800861e:	f040 8218 	bne.w	8008a52 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	785b      	ldrb	r3, [r3, #1]
 800862e:	2b00      	cmp	r3, #0
 8008630:	f040 809d 	bne.w	800876e <USB_EPStartXfer+0x1080>
 8008634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008650:	b29b      	uxth	r3, r3
 8008652:	461a      	mov	r2, r3
 8008654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008658:	4413      	add	r3, r2
 800865a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800865e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	00da      	lsls	r2, r3, #3
 800866c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008670:	4413      	add	r3, r2
 8008672:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008676:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800867a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	b29b      	uxth	r3, r3
 8008682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008686:	b29a      	uxth	r2, r3
 8008688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800868c:	801a      	strh	r2, [r3, #0]
 800868e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	2b3e      	cmp	r3, #62	; 0x3e
 800869c:	d92b      	bls.n	80086f6 <USB_EPStartXfer+0x1008>
 800869e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	095b      	lsrs	r3, r3, #5
 80086ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80086b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	f003 031f 	and.w	r3, r3, #31
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d104      	bne.n	80086ce <USB_EPStartXfer+0xfe0>
 80086c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c8:	3b01      	subs	r3, #1
 80086ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80086ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086da:	b29b      	uxth	r3, r3
 80086dc:	029b      	lsls	r3, r3, #10
 80086de:	b29b      	uxth	r3, r3
 80086e0:	4313      	orrs	r3, r2
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80086f2:	801a      	strh	r2, [r3, #0]
 80086f4:	e070      	b.n	80087d8 <USB_EPStartXfer+0x10ea>
 80086f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10c      	bne.n	8008720 <USB_EPStartXfer+0x1032>
 8008706:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800870a:	881b      	ldrh	r3, [r3, #0]
 800870c:	b29b      	uxth	r3, r3
 800870e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008716:	b29a      	uxth	r2, r3
 8008718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800871c:	801a      	strh	r2, [r3, #0]
 800871e:	e05b      	b.n	80087d8 <USB_EPStartXfer+0x10ea>
 8008720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	085b      	lsrs	r3, r3, #1
 800872e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	d004      	beq.n	8008750 <USB_EPStartXfer+0x1062>
 8008746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800874a:	3301      	adds	r3, #1
 800874c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008750:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29a      	uxth	r2, r3
 8008758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800875c:	b29b      	uxth	r3, r3
 800875e:	029b      	lsls	r3, r3, #10
 8008760:	b29b      	uxth	r3, r3
 8008762:	4313      	orrs	r3, r2
 8008764:	b29a      	uxth	r2, r3
 8008766:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800876a:	801a      	strh	r2, [r3, #0]
 800876c:	e034      	b.n	80087d8 <USB_EPStartXfer+0x10ea>
 800876e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	785b      	ldrb	r3, [r3, #1]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d12c      	bne.n	80087d8 <USB_EPStartXfer+0x10ea>
 800877e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800878c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800879a:	b29b      	uxth	r3, r3
 800879c:	461a      	mov	r2, r3
 800879e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087a2:	4413      	add	r3, r2
 80087a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	00da      	lsls	r2, r3, #3
 80087b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087ba:	4413      	add	r3, r2
 80087bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087d6:	801a      	strh	r2, [r3, #0]
 80087d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80087e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f040 809d 	bne.w	8008932 <USB_EPStartXfer+0x1244>
 80087f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800880a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008814:	b29b      	uxth	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800881c:	4413      	add	r3, r2
 800881e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	00da      	lsls	r2, r3, #3
 8008830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008834:	4413      	add	r3, r2
 8008836:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800883a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800883e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800884a:	b29a      	uxth	r2, r3
 800884c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008850:	801a      	strh	r2, [r3, #0]
 8008852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	2b3e      	cmp	r3, #62	; 0x3e
 8008860:	d92b      	bls.n	80088ba <USB_EPStartXfer+0x11cc>
 8008862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	095b      	lsrs	r3, r3, #5
 8008870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	f003 031f 	and.w	r3, r3, #31
 8008884:	2b00      	cmp	r3, #0
 8008886:	d104      	bne.n	8008892 <USB_EPStartXfer+0x11a4>
 8008888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800888c:	3b01      	subs	r3, #1
 800888e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008892:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	b29a      	uxth	r2, r3
 800889a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800889e:	b29b      	uxth	r3, r3
 80088a0:	029b      	lsls	r3, r3, #10
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	4313      	orrs	r3, r2
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088b6:	801a      	strh	r2, [r3, #0]
 80088b8:	e069      	b.n	800898e <USB_EPStartXfer+0x12a0>
 80088ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10c      	bne.n	80088e4 <USB_EPStartXfer+0x11f6>
 80088ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088da:	b29a      	uxth	r2, r3
 80088dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088e0:	801a      	strh	r2, [r3, #0]
 80088e2:	e054      	b.n	800898e <USB_EPStartXfer+0x12a0>
 80088e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	085b      	lsrs	r3, r3, #1
 80088f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d004      	beq.n	8008914 <USB_EPStartXfer+0x1226>
 800890a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800890e:	3301      	adds	r3, #1
 8008910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	b29a      	uxth	r2, r3
 800891c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008920:	b29b      	uxth	r3, r3
 8008922:	029b      	lsls	r3, r3, #10
 8008924:	b29b      	uxth	r3, r3
 8008926:	4313      	orrs	r3, r2
 8008928:	b29a      	uxth	r2, r3
 800892a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800892e:	801a      	strh	r2, [r3, #0]
 8008930:	e02d      	b.n	800898e <USB_EPStartXfer+0x12a0>
 8008932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	785b      	ldrb	r3, [r3, #1]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d125      	bne.n	800898e <USB_EPStartXfer+0x12a0>
 8008942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008950:	b29b      	uxth	r3, r3
 8008952:	461a      	mov	r2, r3
 8008954:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008958:	4413      	add	r3, r2
 800895a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800895e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	00da      	lsls	r2, r3, #3
 800896c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008970:	4413      	add	r3, r2
 8008972:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800897a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	b29a      	uxth	r2, r3
 8008988:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800898c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800898e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 8218 	beq.w	8008dd0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80089a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80089c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80089c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <USB_EPStartXfer+0x12ea>
 80089cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80089d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10d      	bne.n	80089f4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80089d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80089dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f040 81f5 	bne.w	8008dd0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80089e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80089ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f040 81ee 	bne.w	8008dd0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80089f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	441a      	add	r2, r3
 8008a38:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	8013      	strh	r3, [r2, #0]
 8008a50:	e1be      	b.n	8008dd0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	78db      	ldrb	r3, [r3, #3]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	f040 81b4 	bne.w	8008dcc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	699a      	ldr	r2, [r3, #24]
 8008a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d917      	bls.n	8008ab0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	699a      	ldr	r2, [r3, #24]
 8008a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aa0:	1ad2      	subs	r2, r2, r3
 8008aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	619a      	str	r2, [r3, #24]
 8008aae:	e00e      	b.n	8008ace <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2200      	movs	r2, #0
 8008acc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	785b      	ldrb	r3, [r3, #1]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f040 8085 	bne.w	8008bea <USB_EPStartXfer+0x14fc>
 8008ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	461a      	mov	r2, r3
 8008b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b04:	4413      	add	r3, r2
 8008b06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	00da      	lsls	r2, r3, #3
 8008b18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b38:	801a      	strh	r2, [r3, #0]
 8008b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b3e:	2b3e      	cmp	r3, #62	; 0x3e
 8008b40:	d923      	bls.n	8008b8a <USB_EPStartXfer+0x149c>
 8008b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b46:	095b      	lsrs	r3, r3, #5
 8008b48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b50:	f003 031f 	and.w	r3, r3, #31
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d104      	bne.n	8008b62 <USB_EPStartXfer+0x1474>
 8008b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	029b      	lsls	r3, r3, #10
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	4313      	orrs	r3, r2
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b86:	801a      	strh	r2, [r3, #0]
 8008b88:	e060      	b.n	8008c4c <USB_EPStartXfer+0x155e>
 8008b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10c      	bne.n	8008bac <USB_EPStartXfer+0x14be>
 8008b92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ba8:	801a      	strh	r2, [r3, #0]
 8008baa:	e04f      	b.n	8008c4c <USB_EPStartXfer+0x155e>
 8008bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb0:	085b      	lsrs	r3, r3, #1
 8008bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d004      	beq.n	8008bcc <USB_EPStartXfer+0x14de>
 8008bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	029b      	lsls	r3, r3, #10
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	4313      	orrs	r3, r2
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008be6:	801a      	strh	r2, [r3, #0]
 8008be8:	e030      	b.n	8008c4c <USB_EPStartXfer+0x155e>
 8008bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d128      	bne.n	8008c4c <USB_EPStartXfer+0x155e>
 8008bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	461a      	mov	r2, r3
 8008c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c1e:	4413      	add	r3, r2
 8008c20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	00da      	lsls	r2, r3, #3
 8008c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c36:	4413      	add	r3, r2
 8008c38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f040 8085 	bne.w	8008d76 <USB_EPStartXfer+0x1688>
 8008c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c90:	4413      	add	r3, r2
 8008c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	00da      	lsls	r2, r3, #3
 8008ca4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008ca8:	4413      	add	r3, r2
 8008caa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cc4:	801a      	strh	r2, [r3, #0]
 8008cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cca:	2b3e      	cmp	r3, #62	; 0x3e
 8008ccc:	d923      	bls.n	8008d16 <USB_EPStartXfer+0x1628>
 8008cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd2:	095b      	lsrs	r3, r3, #5
 8008cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cdc:	f003 031f 	and.w	r3, r3, #31
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d104      	bne.n	8008cee <USB_EPStartXfer+0x1600>
 8008ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	029b      	lsls	r3, r3, #10
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	4313      	orrs	r3, r2
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d12:	801a      	strh	r2, [r3, #0]
 8008d14:	e05c      	b.n	8008dd0 <USB_EPStartXfer+0x16e2>
 8008d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10c      	bne.n	8008d38 <USB_EPStartXfer+0x164a>
 8008d1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d34:	801a      	strh	r2, [r3, #0]
 8008d36:	e04b      	b.n	8008dd0 <USB_EPStartXfer+0x16e2>
 8008d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d3c:	085b      	lsrs	r3, r3, #1
 8008d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d004      	beq.n	8008d58 <USB_EPStartXfer+0x166a>
 8008d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d52:	3301      	adds	r3, #1
 8008d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d5c:	881b      	ldrh	r3, [r3, #0]
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	029b      	lsls	r3, r3, #10
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d72:	801a      	strh	r2, [r3, #0]
 8008d74:	e02c      	b.n	8008dd0 <USB_EPStartXfer+0x16e2>
 8008d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	785b      	ldrb	r3, [r3, #1]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d124      	bne.n	8008dd0 <USB_EPStartXfer+0x16e2>
 8008d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	461a      	mov	r2, r3
 8008d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	00da      	lsls	r2, r3, #3
 8008db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008db4:	4413      	add	r3, r2
 8008db6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008dc8:	801a      	strh	r2, [r3, #0]
 8008dca:	e001      	b.n	8008dd0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e03a      	b.n	8008e46 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008dfa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008dfe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e02:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008e06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e0e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	441a      	add	r2, r3
 8008e2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d020      	beq.n	8008ea4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e78:	81bb      	strh	r3, [r7, #12]
 8008e7a:	89bb      	ldrh	r3, [r7, #12]
 8008e7c:	f083 0310 	eor.w	r3, r3, #16
 8008e80:	81bb      	strh	r3, [r7, #12]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	441a      	add	r2, r3
 8008e8c:	89bb      	ldrh	r3, [r7, #12]
 8008e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	8013      	strh	r3, [r2, #0]
 8008ea2:	e01f      	b.n	8008ee4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eba:	81fb      	strh	r3, [r7, #14]
 8008ebc:	89fb      	ldrh	r3, [r7, #14]
 8008ebe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ec2:	81fb      	strh	r3, [r7, #14]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	441a      	add	r2, r3
 8008ece:	89fb      	ldrh	r3, [r7, #14]
 8008ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b087      	sub	sp, #28
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	7b1b      	ldrb	r3, [r3, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f040 809d 	bne.w	8009040 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	785b      	ldrb	r3, [r3, #1]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d04c      	beq.n	8008fa8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	823b      	strh	r3, [r7, #16]
 8008f1c:	8a3b      	ldrh	r3, [r7, #16]
 8008f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d01b      	beq.n	8008f5e <USB_EPClearStall+0x6c>
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f3c:	81fb      	strh	r3, [r7, #14]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	441a      	add	r2, r3
 8008f48:	89fb      	ldrh	r3, [r7, #14]
 8008f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	78db      	ldrb	r3, [r3, #3]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d06c      	beq.n	8009040 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f7c:	81bb      	strh	r3, [r7, #12]
 8008f7e:	89bb      	ldrh	r3, [r7, #12]
 8008f80:	f083 0320 	eor.w	r3, r3, #32
 8008f84:	81bb      	strh	r3, [r7, #12]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	441a      	add	r2, r3
 8008f90:	89bb      	ldrh	r3, [r7, #12]
 8008f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	8013      	strh	r3, [r2, #0]
 8008fa6:	e04b      	b.n	8009040 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	82fb      	strh	r3, [r7, #22]
 8008fb6:	8afb      	ldrh	r3, [r7, #22]
 8008fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01b      	beq.n	8008ff8 <USB_EPClearStall+0x106>
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd6:	82bb      	strh	r3, [r7, #20]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	441a      	add	r2, r3
 8008fe2:	8abb      	ldrh	r3, [r7, #20]
 8008fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	b29b      	uxth	r3, r3
 8009006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800900a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800900e:	827b      	strh	r3, [r7, #18]
 8009010:	8a7b      	ldrh	r3, [r7, #18]
 8009012:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009016:	827b      	strh	r3, [r7, #18]
 8009018:	8a7b      	ldrh	r3, [r7, #18]
 800901a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800901e:	827b      	strh	r3, [r7, #18]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	441a      	add	r2, r3
 800902a:	8a7b      	ldrh	r3, [r7, #18]
 800902c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903c:	b29b      	uxth	r3, r3
 800903e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d103      	bne.n	8009068 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2280      	movs	r2, #128	; 0x80
 8009064:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009076:	b480      	push	{r7}
 8009078:	b083      	sub	sp, #12
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009084:	b29b      	uxth	r3, r3
 8009086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800908a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800908e:	b29a      	uxth	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b085      	sub	sp, #20
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80090dc:	b29b      	uxth	r3, r3
 80090de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80090e0:	68fb      	ldr	r3, [r7, #12]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b083      	sub	sp, #12
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009106:	b480      	push	{r7}
 8009108:	b08b      	sub	sp, #44	; 0x2c
 800910a:	af00      	add	r7, sp, #0
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	60b9      	str	r1, [r7, #8]
 8009110:	4611      	mov	r1, r2
 8009112:	461a      	mov	r2, r3
 8009114:	460b      	mov	r3, r1
 8009116:	80fb      	strh	r3, [r7, #6]
 8009118:	4613      	mov	r3, r2
 800911a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800911c:	88bb      	ldrh	r3, [r7, #4]
 800911e:	3301      	adds	r3, #1
 8009120:	085b      	lsrs	r3, r3, #1
 8009122:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800912c:	88fa      	ldrh	r2, [r7, #6]
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009136:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
 800913c:	e01b      	b.n	8009176 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	3301      	adds	r3, #1
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	021b      	lsls	r3, r3, #8
 800914c:	b21a      	sxth	r2, r3
 800914e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009152:	4313      	orrs	r3, r2
 8009154:	b21b      	sxth	r3, r3
 8009156:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	8a7a      	ldrh	r2, [r7, #18]
 800915c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	3302      	adds	r3, #2
 8009162:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	3301      	adds	r3, #1
 8009168:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	3301      	adds	r3, #1
 800916e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	3b01      	subs	r3, #1
 8009174:	627b      	str	r3, [r7, #36]	; 0x24
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e0      	bne.n	800913e <USB_WritePMA+0x38>
  }
}
 800917c:	bf00      	nop
 800917e:	bf00      	nop
 8009180:	372c      	adds	r7, #44	; 0x2c
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800918a:	b480      	push	{r7}
 800918c:	b08b      	sub	sp, #44	; 0x2c
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	4611      	mov	r1, r2
 8009196:	461a      	mov	r2, r3
 8009198:	460b      	mov	r3, r1
 800919a:	80fb      	strh	r3, [r7, #6]
 800919c:	4613      	mov	r3, r2
 800919e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80091a0:	88bb      	ldrh	r3, [r7, #4]
 80091a2:	085b      	lsrs	r3, r3, #1
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091b0:	88fa      	ldrh	r2, [r7, #6]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091ba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	627b      	str	r3, [r7, #36]	; 0x24
 80091c0:	e018      	b.n	80091f4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	3302      	adds	r3, #2
 80091ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	3301      	adds	r3, #1
 80091dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	0a1b      	lsrs	r3, r3, #8
 80091e2:	b2da      	uxtb	r2, r3
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	3301      	adds	r3, #1
 80091ec:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	3b01      	subs	r3, #1
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e3      	bne.n	80091c2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80091fa:	88bb      	ldrh	r3, [r7, #4]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	b29b      	uxth	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d007      	beq.n	8009216 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	b2da      	uxtb	r2, r3
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	701a      	strb	r2, [r3, #0]
  }
}
 8009216:	bf00      	nop
 8009218:	372c      	adds	r7, #44	; 0x2c
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
	...

08009224 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009230:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009234:	f002 fd24 	bl	800bc80 <USBD_static_malloc>
 8009238:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d109      	bne.n	8009254 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	32b0      	adds	r2, #176	; 0xb0
 800924a:	2100      	movs	r1, #0
 800924c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009250:	2302      	movs	r3, #2
 8009252:	e0d4      	b.n	80093fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009254:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009258:	2100      	movs	r1, #0
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f002 fd2e 	bl	800bcbc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	32b0      	adds	r2, #176	; 0xb0
 800926a:	68f9      	ldr	r1, [r7, #12]
 800926c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	32b0      	adds	r2, #176	; 0xb0
 800927a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7c1b      	ldrb	r3, [r3, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d138      	bne.n	80092fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800928c:	4b5e      	ldr	r3, [pc, #376]	; (8009408 <USBD_CDC_Init+0x1e4>)
 800928e:	7819      	ldrb	r1, [r3, #0]
 8009290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009294:	2202      	movs	r2, #2
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f002 faf4 	bl	800b884 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800929c:	4b5a      	ldr	r3, [pc, #360]	; (8009408 <USBD_CDC_Init+0x1e4>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	f003 020f 	and.w	r2, r3, #15
 80092a4:	6879      	ldr	r1, [r7, #4]
 80092a6:	4613      	mov	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	440b      	add	r3, r1
 80092b0:	3324      	adds	r3, #36	; 0x24
 80092b2:	2201      	movs	r2, #1
 80092b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80092b6:	4b55      	ldr	r3, [pc, #340]	; (800940c <USBD_CDC_Init+0x1e8>)
 80092b8:	7819      	ldrb	r1, [r3, #0]
 80092ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092be:	2202      	movs	r2, #2
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f002 fadf 	bl	800b884 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092c6:	4b51      	ldr	r3, [pc, #324]	; (800940c <USBD_CDC_Init+0x1e8>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	f003 020f 	and.w	r2, r3, #15
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	4613      	mov	r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092de:	2201      	movs	r2, #1
 80092e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80092e2:	4b4b      	ldr	r3, [pc, #300]	; (8009410 <USBD_CDC_Init+0x1ec>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	f003 020f 	and.w	r2, r3, #15
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	4613      	mov	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	440b      	add	r3, r1
 80092f6:	3326      	adds	r3, #38	; 0x26
 80092f8:	2210      	movs	r2, #16
 80092fa:	801a      	strh	r2, [r3, #0]
 80092fc:	e035      	b.n	800936a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80092fe:	4b42      	ldr	r3, [pc, #264]	; (8009408 <USBD_CDC_Init+0x1e4>)
 8009300:	7819      	ldrb	r1, [r3, #0]
 8009302:	2340      	movs	r3, #64	; 0x40
 8009304:	2202      	movs	r2, #2
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f002 fabc 	bl	800b884 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800930c:	4b3e      	ldr	r3, [pc, #248]	; (8009408 <USBD_CDC_Init+0x1e4>)
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	f003 020f 	and.w	r2, r3, #15
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	4613      	mov	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	440b      	add	r3, r1
 8009320:	3324      	adds	r3, #36	; 0x24
 8009322:	2201      	movs	r2, #1
 8009324:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009326:	4b39      	ldr	r3, [pc, #228]	; (800940c <USBD_CDC_Init+0x1e8>)
 8009328:	7819      	ldrb	r1, [r3, #0]
 800932a:	2340      	movs	r3, #64	; 0x40
 800932c:	2202      	movs	r2, #2
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f002 faa8 	bl	800b884 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009334:	4b35      	ldr	r3, [pc, #212]	; (800940c <USBD_CDC_Init+0x1e8>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	f003 020f 	and.w	r2, r3, #15
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	4613      	mov	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4413      	add	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	440b      	add	r3, r1
 8009348:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800934c:	2201      	movs	r2, #1
 800934e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009350:	4b2f      	ldr	r3, [pc, #188]	; (8009410 <USBD_CDC_Init+0x1ec>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	f003 020f 	and.w	r2, r3, #15
 8009358:	6879      	ldr	r1, [r7, #4]
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	440b      	add	r3, r1
 8009364:	3326      	adds	r3, #38	; 0x26
 8009366:	2210      	movs	r2, #16
 8009368:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800936a:	4b29      	ldr	r3, [pc, #164]	; (8009410 <USBD_CDC_Init+0x1ec>)
 800936c:	7819      	ldrb	r1, [r3, #0]
 800936e:	2308      	movs	r3, #8
 8009370:	2203      	movs	r2, #3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f002 fa86 	bl	800b884 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009378:	4b25      	ldr	r3, [pc, #148]	; (8009410 <USBD_CDC_Init+0x1ec>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 020f 	and.w	r2, r3, #15
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	440b      	add	r3, r1
 800938c:	3324      	adds	r3, #36	; 0x24
 800938e:	2201      	movs	r2, #1
 8009390:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	33b0      	adds	r3, #176	; 0xb0
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80093c8:	2302      	movs	r3, #2
 80093ca:	e018      	b.n	80093fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	7c1b      	ldrb	r3, [r3, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10a      	bne.n	80093ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093d4:	4b0d      	ldr	r3, [pc, #52]	; (800940c <USBD_CDC_Init+0x1e8>)
 80093d6:	7819      	ldrb	r1, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f002 fbca 	bl	800bb7c <USBD_LL_PrepareReceive>
 80093e8:	e008      	b.n	80093fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093ea:	4b08      	ldr	r3, [pc, #32]	; (800940c <USBD_CDC_Init+0x1e8>)
 80093ec:	7819      	ldrb	r1, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093f4:	2340      	movs	r3, #64	; 0x40
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f002 fbc0 	bl	800bb7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20000093 	.word	0x20000093
 800940c:	20000094 	.word	0x20000094
 8009410:	20000095 	.word	0x20000095

08009414 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009420:	4b3a      	ldr	r3, [pc, #232]	; (800950c <USBD_CDC_DeInit+0xf8>)
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f002 fa6a 	bl	800b900 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800942c:	4b37      	ldr	r3, [pc, #220]	; (800950c <USBD_CDC_DeInit+0xf8>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	f003 020f 	and.w	r2, r3, #15
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	440b      	add	r3, r1
 8009440:	3324      	adds	r3, #36	; 0x24
 8009442:	2200      	movs	r2, #0
 8009444:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009446:	4b32      	ldr	r3, [pc, #200]	; (8009510 <USBD_CDC_DeInit+0xfc>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f002 fa57 	bl	800b900 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009452:	4b2f      	ldr	r3, [pc, #188]	; (8009510 <USBD_CDC_DeInit+0xfc>)
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	f003 020f 	and.w	r2, r3, #15
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	4613      	mov	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	440b      	add	r3, r1
 8009466:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800946a:	2200      	movs	r2, #0
 800946c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800946e:	4b29      	ldr	r3, [pc, #164]	; (8009514 <USBD_CDC_DeInit+0x100>)
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f002 fa43 	bl	800b900 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800947a:	4b26      	ldr	r3, [pc, #152]	; (8009514 <USBD_CDC_DeInit+0x100>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	f003 020f 	and.w	r2, r3, #15
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	4613      	mov	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	440b      	add	r3, r1
 800948e:	3324      	adds	r3, #36	; 0x24
 8009490:	2200      	movs	r2, #0
 8009492:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009494:	4b1f      	ldr	r3, [pc, #124]	; (8009514 <USBD_CDC_DeInit+0x100>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	f003 020f 	and.w	r2, r3, #15
 800949c:	6879      	ldr	r1, [r7, #4]
 800949e:	4613      	mov	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	440b      	add	r3, r1
 80094a8:	3326      	adds	r3, #38	; 0x26
 80094aa:	2200      	movs	r2, #0
 80094ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	32b0      	adds	r2, #176	; 0xb0
 80094b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01f      	beq.n	8009500 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	33b0      	adds	r3, #176	; 0xb0
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	32b0      	adds	r2, #176	; 0xb0
 80094de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f002 fbda 	bl	800bc9c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	32b0      	adds	r2, #176	; 0xb0
 80094f2:	2100      	movs	r1, #0
 80094f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	20000093 	.word	0x20000093
 8009510:	20000094 	.word	0x20000094
 8009514:	20000095 	.word	0x20000095

08009518 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	32b0      	adds	r2, #176	; 0xb0
 800952c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009530:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009536:	2300      	movs	r3, #0
 8009538:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009544:	2303      	movs	r3, #3
 8009546:	e0bf      	b.n	80096c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009550:	2b00      	cmp	r3, #0
 8009552:	d050      	beq.n	80095f6 <USBD_CDC_Setup+0xde>
 8009554:	2b20      	cmp	r3, #32
 8009556:	f040 80af 	bne.w	80096b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	88db      	ldrh	r3, [r3, #6]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d03a      	beq.n	80095d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	b25b      	sxtb	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	da1b      	bge.n	80095a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	33b0      	adds	r3, #176	; 0xb0
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009582:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	88d2      	ldrh	r2, [r2, #6]
 8009588:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	88db      	ldrh	r3, [r3, #6]
 800958e:	2b07      	cmp	r3, #7
 8009590:	bf28      	it	cs
 8009592:	2307      	movcs	r3, #7
 8009594:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	89fa      	ldrh	r2, [r7, #14]
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 fd21 	bl	800afe4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80095a2:	e090      	b.n	80096c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	785a      	ldrb	r2, [r3, #1]
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	88db      	ldrh	r3, [r3, #6]
 80095b2:	2b3f      	cmp	r3, #63	; 0x3f
 80095b4:	d803      	bhi.n	80095be <USBD_CDC_Setup+0xa6>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	88db      	ldrh	r3, [r3, #6]
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	e000      	b.n	80095c0 <USBD_CDC_Setup+0xa8>
 80095be:	2240      	movs	r2, #64	; 0x40
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80095c6:	6939      	ldr	r1, [r7, #16]
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80095ce:	461a      	mov	r2, r3
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f001 fd33 	bl	800b03c <USBD_CtlPrepareRx>
      break;
 80095d6:	e076      	b.n	80096c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	33b0      	adds	r3, #176	; 0xb0
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	7850      	ldrb	r0, [r2, #1]
 80095ee:	2200      	movs	r2, #0
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	4798      	blx	r3
      break;
 80095f4:	e067      	b.n	80096c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	785b      	ldrb	r3, [r3, #1]
 80095fa:	2b0b      	cmp	r3, #11
 80095fc:	d851      	bhi.n	80096a2 <USBD_CDC_Setup+0x18a>
 80095fe:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <USBD_CDC_Setup+0xec>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	08009635 	.word	0x08009635
 8009608:	080096b1 	.word	0x080096b1
 800960c:	080096a3 	.word	0x080096a3
 8009610:	080096a3 	.word	0x080096a3
 8009614:	080096a3 	.word	0x080096a3
 8009618:	080096a3 	.word	0x080096a3
 800961c:	080096a3 	.word	0x080096a3
 8009620:	080096a3 	.word	0x080096a3
 8009624:	080096a3 	.word	0x080096a3
 8009628:	080096a3 	.word	0x080096a3
 800962c:	0800965f 	.word	0x0800965f
 8009630:	08009689 	.word	0x08009689
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b03      	cmp	r3, #3
 800963e:	d107      	bne.n	8009650 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009640:	f107 030a 	add.w	r3, r7, #10
 8009644:	2202      	movs	r2, #2
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f001 fccb 	bl	800afe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800964e:	e032      	b.n	80096b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 fc55 	bl	800af02 <USBD_CtlError>
            ret = USBD_FAIL;
 8009658:	2303      	movs	r3, #3
 800965a:	75fb      	strb	r3, [r7, #23]
          break;
 800965c:	e02b      	b.n	80096b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b03      	cmp	r3, #3
 8009668:	d107      	bne.n	800967a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800966a:	f107 030d 	add.w	r3, r7, #13
 800966e:	2201      	movs	r2, #1
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 fcb6 	bl	800afe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009678:	e01d      	b.n	80096b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f001 fc40 	bl	800af02 <USBD_CtlError>
            ret = USBD_FAIL;
 8009682:	2303      	movs	r3, #3
 8009684:	75fb      	strb	r3, [r7, #23]
          break;
 8009686:	e016      	b.n	80096b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b03      	cmp	r3, #3
 8009692:	d00f      	beq.n	80096b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f001 fc33 	bl	800af02 <USBD_CtlError>
            ret = USBD_FAIL;
 800969c:	2303      	movs	r3, #3
 800969e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80096a0:	e008      	b.n	80096b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f001 fc2c 	bl	800af02 <USBD_CtlError>
          ret = USBD_FAIL;
 80096aa:	2303      	movs	r3, #3
 80096ac:	75fb      	strb	r3, [r7, #23]
          break;
 80096ae:	e002      	b.n	80096b6 <USBD_CDC_Setup+0x19e>
          break;
 80096b0:	bf00      	nop
 80096b2:	e008      	b.n	80096c6 <USBD_CDC_Setup+0x1ae>
          break;
 80096b4:	bf00      	nop
      }
      break;
 80096b6:	e006      	b.n	80096c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 fc21 	bl	800af02 <USBD_CtlError>
      ret = USBD_FAIL;
 80096c0:	2303      	movs	r3, #3
 80096c2:	75fb      	strb	r3, [r7, #23]
      break;
 80096c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	32b0      	adds	r2, #176	; 0xb0
 80096ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e065      	b.n	80097c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	32b0      	adds	r2, #176	; 0xb0
 8009704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009708:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800970a:	78fb      	ldrb	r3, [r7, #3]
 800970c:	f003 020f 	and.w	r2, r3, #15
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	4613      	mov	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	440b      	add	r3, r1
 800971c:	3318      	adds	r3, #24
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d02f      	beq.n	8009784 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	f003 020f 	and.w	r2, r3, #15
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	4613      	mov	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	440b      	add	r3, r1
 8009736:	3318      	adds	r3, #24
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	78fb      	ldrb	r3, [r7, #3]
 800973c:	f003 010f 	and.w	r1, r3, #15
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	460b      	mov	r3, r1
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	440b      	add	r3, r1
 8009748:	00db      	lsls	r3, r3, #3
 800974a:	4403      	add	r3, r0
 800974c:	3338      	adds	r3, #56	; 0x38
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	fbb2 f1f3 	udiv	r1, r2, r3
 8009754:	fb01 f303 	mul.w	r3, r1, r3
 8009758:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800975a:	2b00      	cmp	r3, #0
 800975c:	d112      	bne.n	8009784 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800975e:	78fb      	ldrb	r3, [r7, #3]
 8009760:	f003 020f 	and.w	r2, r3, #15
 8009764:	6879      	ldr	r1, [r7, #4]
 8009766:	4613      	mov	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4413      	add	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	440b      	add	r3, r1
 8009770:	3318      	adds	r3, #24
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009776:	78f9      	ldrb	r1, [r7, #3]
 8009778:	2300      	movs	r3, #0
 800977a:	2200      	movs	r2, #0
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f002 f9c5 	bl	800bb0c <USBD_LL_Transmit>
 8009782:	e01f      	b.n	80097c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2200      	movs	r2, #0
 8009788:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	33b0      	adds	r3, #176	; 0xb0
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d010      	beq.n	80097c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	33b0      	adds	r3, #176	; 0xb0
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4413      	add	r3, r2
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80097c0:	78fa      	ldrb	r2, [r7, #3]
 80097c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	460b      	mov	r3, r1
 80097d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	32b0      	adds	r2, #176	; 0xb0
 80097e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	32b0      	adds	r2, #176	; 0xb0
 80097f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e01a      	b.n	8009836 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f002 f9f1 	bl	800bbec <USBD_LL_GetRxDataSize>
 800980a:	4602      	mov	r2, r0
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	33b0      	adds	r3, #176	; 0xb0
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009830:	4611      	mov	r1, r2
 8009832:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	32b0      	adds	r2, #176	; 0xb0
 8009850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009854:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800985c:	2303      	movs	r3, #3
 800985e:	e025      	b.n	80098ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	33b0      	adds	r3, #176	; 0xb0
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d01a      	beq.n	80098aa <USBD_CDC_EP0_RxReady+0x6c>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800987a:	2bff      	cmp	r3, #255	; 0xff
 800987c:	d015      	beq.n	80098aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	33b0      	adds	r3, #176	; 0xb0
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009896:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800989e:	b292      	uxth	r2, r2
 80098a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	22ff      	movs	r2, #255	; 0xff
 80098a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098bc:	2182      	movs	r1, #130	; 0x82
 80098be:	4818      	ldr	r0, [pc, #96]	; (8009920 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098c0:	f000 fcbd 	bl	800a23e <USBD_GetEpDesc>
 80098c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098c6:	2101      	movs	r1, #1
 80098c8:	4815      	ldr	r0, [pc, #84]	; (8009920 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098ca:	f000 fcb8 	bl	800a23e <USBD_GetEpDesc>
 80098ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098d0:	2181      	movs	r1, #129	; 0x81
 80098d2:	4813      	ldr	r0, [pc, #76]	; (8009920 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098d4:	f000 fcb3 	bl	800a23e <USBD_GetEpDesc>
 80098d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	2210      	movs	r2, #16
 80098e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d006      	beq.n	80098fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098f4:	711a      	strb	r2, [r3, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d006      	beq.n	800990e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009908:	711a      	strb	r2, [r3, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2243      	movs	r2, #67	; 0x43
 8009912:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009914:	4b02      	ldr	r3, [pc, #8]	; (8009920 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	20000050 	.word	0x20000050

08009924 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800992c:	2182      	movs	r1, #130	; 0x82
 800992e:	4818      	ldr	r0, [pc, #96]	; (8009990 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009930:	f000 fc85 	bl	800a23e <USBD_GetEpDesc>
 8009934:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009936:	2101      	movs	r1, #1
 8009938:	4815      	ldr	r0, [pc, #84]	; (8009990 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800993a:	f000 fc80 	bl	800a23e <USBD_GetEpDesc>
 800993e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009940:	2181      	movs	r1, #129	; 0x81
 8009942:	4813      	ldr	r0, [pc, #76]	; (8009990 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009944:	f000 fc7b 	bl	800a23e <USBD_GetEpDesc>
 8009948:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	2210      	movs	r2, #16
 8009954:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d006      	beq.n	800996a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	2200      	movs	r2, #0
 8009960:	711a      	strb	r2, [r3, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f042 0202 	orr.w	r2, r2, #2
 8009968:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d006      	beq.n	800997e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	711a      	strb	r2, [r3, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f042 0202 	orr.w	r2, r2, #2
 800997c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2243      	movs	r2, #67	; 0x43
 8009982:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009984:	4b02      	ldr	r3, [pc, #8]	; (8009990 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009986:	4618      	mov	r0, r3
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	20000050 	.word	0x20000050

08009994 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800999c:	2182      	movs	r1, #130	; 0x82
 800999e:	4818      	ldr	r0, [pc, #96]	; (8009a00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099a0:	f000 fc4d 	bl	800a23e <USBD_GetEpDesc>
 80099a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099a6:	2101      	movs	r1, #1
 80099a8:	4815      	ldr	r0, [pc, #84]	; (8009a00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099aa:	f000 fc48 	bl	800a23e <USBD_GetEpDesc>
 80099ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099b0:	2181      	movs	r1, #129	; 0x81
 80099b2:	4813      	ldr	r0, [pc, #76]	; (8009a00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099b4:	f000 fc43 	bl	800a23e <USBD_GetEpDesc>
 80099b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	2210      	movs	r2, #16
 80099c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d006      	beq.n	80099da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099d4:	711a      	strb	r2, [r3, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d006      	beq.n	80099ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099e8:	711a      	strb	r2, [r3, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2243      	movs	r2, #67	; 0x43
 80099f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099f4:	4b02      	ldr	r3, [pc, #8]	; (8009a00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20000050 	.word	0x20000050

08009a04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	220a      	movs	r2, #10
 8009a10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009a12:	4b03      	ldr	r3, [pc, #12]	; (8009a20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr
 8009a20:	2000000c 	.word	0x2000000c

08009a24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e009      	b.n	8009a4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	33b0      	adds	r3, #176	; 0xb0
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b087      	sub	sp, #28
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	32b0      	adds	r2, #176	; 0xb0
 8009a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a72:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e008      	b.n	8009a90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	371c      	adds	r7, #28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	32b0      	adds	r2, #176	; 0xb0
 8009ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e004      	b.n	8009aca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
	...

08009ad8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	32b0      	adds	r2, #176	; 0xb0
 8009aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009af0:	2301      	movs	r3, #1
 8009af2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e025      	b.n	8009b4a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d11f      	bne.n	8009b48 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009b10:	4b10      	ldr	r3, [pc, #64]	; (8009b54 <USBD_CDC_TransmitPacket+0x7c>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	f003 020f 	and.w	r2, r3, #15
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	4613      	mov	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4403      	add	r3, r0
 8009b2a:	3318      	adds	r3, #24
 8009b2c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009b2e:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <USBD_CDC_TransmitPacket+0x7c>)
 8009b30:	7819      	ldrb	r1, [r3, #0]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f001 ffe4 	bl	800bb0c <USBD_LL_Transmit>

    ret = USBD_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20000093 	.word	0x20000093

08009b58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	32b0      	adds	r2, #176	; 0xb0
 8009b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	32b0      	adds	r2, #176	; 0xb0
 8009b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e018      	b.n	8009bb8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	7c1b      	ldrb	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10a      	bne.n	8009ba4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <USBD_CDC_ReceivePacket+0x68>)
 8009b90:	7819      	ldrb	r1, [r3, #0]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f001 ffed 	bl	800bb7c <USBD_LL_PrepareReceive>
 8009ba2:	e008      	b.n	8009bb6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ba4:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <USBD_CDC_ReceivePacket+0x68>)
 8009ba6:	7819      	ldrb	r1, [r3, #0]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bae:	2340      	movs	r3, #64	; 0x40
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 ffe3 	bl	800bb7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	20000094 	.word	0x20000094

08009bc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e01f      	b.n	8009c1c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d003      	beq.n	8009c02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	79fa      	ldrb	r2, [r7, #7]
 8009c0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f001 fda3 	bl	800b75c <USBD_LL_Init>
 8009c16:	4603      	mov	r3, r0
 8009c18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e025      	b.n	8009c88 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	32ae      	adds	r2, #174	; 0xae
 8009c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00f      	beq.n	8009c78 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	32ae      	adds	r2, #174	; 0xae
 8009c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	f107 020e 	add.w	r2, r7, #14
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4798      	blx	r3
 8009c70:	4602      	mov	r2, r0
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 fdc1 	bl	800b820 <USBD_LL_Start>
 8009c9e:	4603      	mov	r3, r0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009cb0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d009      	beq.n	8009cec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	78fa      	ldrb	r2, [r7, #3]
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	4798      	blx	r3
 8009ce8:	4603      	mov	r3, r0
 8009cea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b084      	sub	sp, #16
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	78fa      	ldrb	r2, [r7, #3]
 8009d10:	4611      	mov	r1, r2
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	4798      	blx	r3
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f001 f8a6 	bl	800ae8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009d50:	461a      	mov	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d5e:	f003 031f 	and.w	r3, r3, #31
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d01a      	beq.n	8009d9c <USBD_LL_SetupStage+0x72>
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d822      	bhi.n	8009db0 <USBD_LL_SetupStage+0x86>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <USBD_LL_SetupStage+0x4a>
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d00a      	beq.n	8009d88 <USBD_LL_SetupStage+0x5e>
 8009d72:	e01d      	b.n	8009db0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fad3 	bl	800a328 <USBD_StdDevReq>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73fb      	strb	r3, [r7, #15]
      break;
 8009d86:	e020      	b.n	8009dca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fb3b 	bl	800a40c <USBD_StdItfReq>
 8009d96:	4603      	mov	r3, r0
 8009d98:	73fb      	strb	r3, [r7, #15]
      break;
 8009d9a:	e016      	b.n	8009dca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fb9d 	bl	800a4e4 <USBD_StdEPReq>
 8009daa:	4603      	mov	r3, r0
 8009dac:	73fb      	strb	r3, [r7, #15]
      break;
 8009dae:	e00c      	b.n	8009dca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009db6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f001 fdd4 	bl	800b96c <USBD_LL_StallEP>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8009dc8:	bf00      	nop
  }

  return ret;
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d16e      	bne.n	8009eca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009df2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	f040 8098 	bne.w	8009f30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d913      	bls.n	8009e34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	689a      	ldr	r2, [r3, #8]
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	1ad2      	subs	r2, r2, r3
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	68da      	ldr	r2, [r3, #12]
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	4293      	cmp	r3, r2
 8009e24:	bf28      	it	cs
 8009e26:	4613      	movcs	r3, r2
 8009e28:	461a      	mov	r2, r3
 8009e2a:	6879      	ldr	r1, [r7, #4]
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f001 f922 	bl	800b076 <USBD_CtlContinueRx>
 8009e32:	e07d      	b.n	8009f30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e3a:	f003 031f 	and.w	r3, r3, #31
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d014      	beq.n	8009e6c <USBD_LL_DataOutStage+0x98>
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d81d      	bhi.n	8009e82 <USBD_LL_DataOutStage+0xae>
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <USBD_LL_DataOutStage+0x7c>
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d003      	beq.n	8009e56 <USBD_LL_DataOutStage+0x82>
 8009e4e:	e018      	b.n	8009e82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	75bb      	strb	r3, [r7, #22]
            break;
 8009e54:	e018      	b.n	8009e88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	4619      	mov	r1, r3
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 f9d2 	bl	800a20a <USBD_CoreFindIF>
 8009e66:	4603      	mov	r3, r0
 8009e68:	75bb      	strb	r3, [r7, #22]
            break;
 8009e6a:	e00d      	b.n	8009e88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	4619      	mov	r1, r3
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 f9d4 	bl	800a224 <USBD_CoreFindEP>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	75bb      	strb	r3, [r7, #22]
            break;
 8009e80:	e002      	b.n	8009e88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009e82:	2300      	movs	r3, #0
 8009e84:	75bb      	strb	r3, [r7, #22]
            break;
 8009e86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009e88:	7dbb      	ldrb	r3, [r7, #22]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d119      	bne.n	8009ec2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	d113      	bne.n	8009ec2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e9a:	7dba      	ldrb	r2, [r7, #22]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	32ae      	adds	r2, #174	; 0xae
 8009ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00b      	beq.n	8009ec2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009eaa:	7dba      	ldrb	r2, [r7, #22]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009eb2:	7dba      	ldrb	r2, [r7, #22]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	32ae      	adds	r2, #174	; 0xae
 8009eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f001 f8e8 	bl	800b098 <USBD_CtlSendStatus>
 8009ec8:	e032      	b.n	8009f30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009eca:	7afb      	ldrb	r3, [r7, #11]
 8009ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f000 f9a5 	bl	800a224 <USBD_CoreFindEP>
 8009eda:	4603      	mov	r3, r0
 8009edc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ede:	7dbb      	ldrb	r3, [r7, #22]
 8009ee0:	2bff      	cmp	r3, #255	; 0xff
 8009ee2:	d025      	beq.n	8009f30 <USBD_LL_DataOutStage+0x15c>
 8009ee4:	7dbb      	ldrb	r3, [r7, #22]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d122      	bne.n	8009f30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d117      	bne.n	8009f26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009ef6:	7dba      	ldrb	r2, [r7, #22]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	32ae      	adds	r2, #174	; 0xae
 8009efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00f      	beq.n	8009f26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009f06:	7dba      	ldrb	r2, [r7, #22]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009f0e:	7dba      	ldrb	r2, [r7, #22]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	32ae      	adds	r2, #174	; 0xae
 8009f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	7afa      	ldrb	r2, [r7, #11]
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	4798      	blx	r3
 8009f22:	4603      	mov	r3, r0
 8009f24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009f26:	7dfb      	ldrb	r3, [r7, #23]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009f2c:	7dfb      	ldrb	r3, [r7, #23]
 8009f2e:	e000      	b.n	8009f32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3718      	adds	r7, #24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b086      	sub	sp, #24
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	60f8      	str	r0, [r7, #12]
 8009f42:	460b      	mov	r3, r1
 8009f44:	607a      	str	r2, [r7, #4]
 8009f46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009f48:	7afb      	ldrb	r3, [r7, #11]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d16f      	bne.n	800a02e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3314      	adds	r3, #20
 8009f52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d15a      	bne.n	800a014 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	689a      	ldr	r2, [r3, #8]
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d914      	bls.n	8009f94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	689a      	ldr	r2, [r3, #8]
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	1ad2      	subs	r2, r2, r3
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f001 f84a 	bl	800b01a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f86:	2300      	movs	r3, #0
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f001 fdf5 	bl	800bb7c <USBD_LL_PrepareReceive>
 8009f92:	e03f      	b.n	800a014 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	68da      	ldr	r2, [r3, #12]
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d11c      	bne.n	8009fda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d316      	bcc.n	8009fda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d20f      	bcs.n	8009fda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f001 f82b 	bl	800b01a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f001 fdd2 	bl	800bb7c <USBD_LL_PrepareReceive>
 8009fd8:	e01c      	b.n	800a014 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b03      	cmp	r3, #3
 8009fe4:	d10f      	bne.n	800a006 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d009      	beq.n	800a006 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a006:	2180      	movs	r1, #128	; 0x80
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f001 fcaf 	bl	800b96c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f001 f855 	bl	800b0be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d03a      	beq.n	800a094 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f7ff fe42 	bl	8009ca8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a02c:	e032      	b.n	800a094 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a02e:	7afb      	ldrb	r3, [r7, #11]
 800a030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a034:	b2db      	uxtb	r3, r3
 800a036:	4619      	mov	r1, r3
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f000 f8f3 	bl	800a224 <USBD_CoreFindEP>
 800a03e:	4603      	mov	r3, r0
 800a040:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	2bff      	cmp	r3, #255	; 0xff
 800a046:	d025      	beq.n	800a094 <USBD_LL_DataInStage+0x15a>
 800a048:	7dfb      	ldrb	r3, [r7, #23]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d122      	bne.n	800a094 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b03      	cmp	r3, #3
 800a058:	d11c      	bne.n	800a094 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a05a:	7dfa      	ldrb	r2, [r7, #23]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	32ae      	adds	r2, #174	; 0xae
 800a060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d014      	beq.n	800a094 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a06a:	7dfa      	ldrb	r2, [r7, #23]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a072:	7dfa      	ldrb	r2, [r7, #23]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	32ae      	adds	r2, #174	; 0xae
 800a078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	7afa      	ldrb	r2, [r7, #11]
 800a080:	4611      	mov	r1, r2
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	4798      	blx	r3
 800a086:	4603      	mov	r3, r0
 800a088:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a08a:	7dbb      	ldrb	r3, [r7, #22]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a090:	7dbb      	ldrb	r3, [r7, #22]
 800a092:	e000      	b.n	800a096 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d014      	beq.n	800a104 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00e      	beq.n	800a104 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	6852      	ldr	r2, [r2, #4]
 800a0f2:	b2d2      	uxtb	r2, r2
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	4798      	blx	r3
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a100:	2303      	movs	r3, #3
 800a102:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a104:	2340      	movs	r3, #64	; 0x40
 800a106:	2200      	movs	r2, #0
 800a108:	2100      	movs	r1, #0
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f001 fbba 	bl	800b884 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2240      	movs	r2, #64	; 0x40
 800a11c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a120:	2340      	movs	r3, #64	; 0x40
 800a122:	2200      	movs	r2, #0
 800a124:	2180      	movs	r1, #128	; 0x80
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f001 fbac 	bl	800b884 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2240      	movs	r2, #64	; 0x40
 800a136:	621a      	str	r2, [r3, #32]

  return ret;
 800a138:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a142:	b480      	push	{r7}
 800a144:	b083      	sub	sp, #12
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	460b      	mov	r3, r1
 800a14c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	78fa      	ldrb	r2, [r7, #3]
 800a152:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a162:	b480      	push	{r7}
 800a164:	b083      	sub	sp, #12
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b04      	cmp	r3, #4
 800a174:	d006      	beq.n	800a184 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2204      	movs	r2, #4
 800a188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	370c      	adds	r7, #12
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b083      	sub	sp, #12
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b04      	cmp	r3, #4
 800a1ac:	d106      	bne.n	800a1bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b082      	sub	sp, #8
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	d110      	bne.n	800a200 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00b      	beq.n	800a200 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ee:	69db      	ldr	r3, [r3, #28]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d005      	beq.n	800a200 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	460b      	mov	r3, r1
 800a214:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a216:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a230:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a232:	4618      	mov	r0, r3
 800a234:	370c      	adds	r7, #12
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b086      	sub	sp, #24
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	460b      	mov	r3, r1
 800a248:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a252:	2300      	movs	r3, #0
 800a254:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	885b      	ldrh	r3, [r3, #2]
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	b29b      	uxth	r3, r3
 800a262:	429a      	cmp	r2, r3
 800a264:	d920      	bls.n	800a2a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a26e:	e013      	b.n	800a298 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a270:	f107 030a 	add.w	r3, r7, #10
 800a274:	4619      	mov	r1, r3
 800a276:	6978      	ldr	r0, [r7, #20]
 800a278:	f000 f81b 	bl	800a2b2 <USBD_GetNextDesc>
 800a27c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	785b      	ldrb	r3, [r3, #1]
 800a282:	2b05      	cmp	r3, #5
 800a284:	d108      	bne.n	800a298 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	789b      	ldrb	r3, [r3, #2]
 800a28e:	78fa      	ldrb	r2, [r7, #3]
 800a290:	429a      	cmp	r2, r3
 800a292:	d008      	beq.n	800a2a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a294:	2300      	movs	r3, #0
 800a296:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	885b      	ldrh	r3, [r3, #2]
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	897b      	ldrh	r3, [r7, #10]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d8e5      	bhi.n	800a270 <USBD_GetEpDesc+0x32>
 800a2a4:	e000      	b.n	800a2a8 <USBD_GetEpDesc+0x6a>
          break;
 800a2a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a2a8:	693b      	ldr	r3, [r7, #16]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b085      	sub	sp, #20
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	881a      	ldrh	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	4413      	add	r3, r2
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4413      	add	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a2de:	68fb      	ldr	r3, [r7, #12]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	3301      	adds	r3, #1
 800a302:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a30a:	8a3b      	ldrh	r3, [r7, #16]
 800a30c:	021b      	lsls	r3, r3, #8
 800a30e:	b21a      	sxth	r2, r3
 800a310:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a314:	4313      	orrs	r3, r2
 800a316:	b21b      	sxth	r3, r3
 800a318:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a31a:	89fb      	ldrh	r3, [r7, #14]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	371c      	adds	r7, #28
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a33e:	2b40      	cmp	r3, #64	; 0x40
 800a340:	d005      	beq.n	800a34e <USBD_StdDevReq+0x26>
 800a342:	2b40      	cmp	r3, #64	; 0x40
 800a344:	d857      	bhi.n	800a3f6 <USBD_StdDevReq+0xce>
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00f      	beq.n	800a36a <USBD_StdDevReq+0x42>
 800a34a:	2b20      	cmp	r3, #32
 800a34c:	d153      	bne.n	800a3f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	32ae      	adds	r2, #174	; 0xae
 800a358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	4798      	blx	r3
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]
      break;
 800a368:	e04a      	b.n	800a400 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	785b      	ldrb	r3, [r3, #1]
 800a36e:	2b09      	cmp	r3, #9
 800a370:	d83b      	bhi.n	800a3ea <USBD_StdDevReq+0xc2>
 800a372:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <USBD_StdDevReq+0x50>)
 800a374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a378:	0800a3cd 	.word	0x0800a3cd
 800a37c:	0800a3e1 	.word	0x0800a3e1
 800a380:	0800a3eb 	.word	0x0800a3eb
 800a384:	0800a3d7 	.word	0x0800a3d7
 800a388:	0800a3eb 	.word	0x0800a3eb
 800a38c:	0800a3ab 	.word	0x0800a3ab
 800a390:	0800a3a1 	.word	0x0800a3a1
 800a394:	0800a3eb 	.word	0x0800a3eb
 800a398:	0800a3c3 	.word	0x0800a3c3
 800a39c:	0800a3b5 	.word	0x0800a3b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fa3c 	bl	800a820 <USBD_GetDescriptor>
          break;
 800a3a8:	e024      	b.n	800a3f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fbcb 	bl	800ab48 <USBD_SetAddress>
          break;
 800a3b2:	e01f      	b.n	800a3f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fc0a 	bl	800abd0 <USBD_SetConfig>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]
          break;
 800a3c0:	e018      	b.n	800a3f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fcad 	bl	800ad24 <USBD_GetConfig>
          break;
 800a3ca:	e013      	b.n	800a3f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fcde 	bl	800ad90 <USBD_GetStatus>
          break;
 800a3d4:	e00e      	b.n	800a3f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fd0d 	bl	800adf8 <USBD_SetFeature>
          break;
 800a3de:	e009      	b.n	800a3f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fd31 	bl	800ae4a <USBD_ClrFeature>
          break;
 800a3e8:	e004      	b.n	800a3f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fd88 	bl	800af02 <USBD_CtlError>
          break;
 800a3f2:	bf00      	nop
      }
      break;
 800a3f4:	e004      	b.n	800a400 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fd82 	bl	800af02 <USBD_CtlError>
      break;
 800a3fe:	bf00      	nop
  }

  return ret;
 800a400:	7bfb      	ldrb	r3, [r7, #15]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop

0800a40c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a422:	2b40      	cmp	r3, #64	; 0x40
 800a424:	d005      	beq.n	800a432 <USBD_StdItfReq+0x26>
 800a426:	2b40      	cmp	r3, #64	; 0x40
 800a428:	d852      	bhi.n	800a4d0 <USBD_StdItfReq+0xc4>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <USBD_StdItfReq+0x26>
 800a42e:	2b20      	cmp	r3, #32
 800a430:	d14e      	bne.n	800a4d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	3b01      	subs	r3, #1
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d840      	bhi.n	800a4c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	889b      	ldrh	r3, [r3, #4]
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b01      	cmp	r3, #1
 800a448:	d836      	bhi.n	800a4b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	889b      	ldrh	r3, [r3, #4]
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff fed9 	bl	800a20a <USBD_CoreFindIF>
 800a458:	4603      	mov	r3, r0
 800a45a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2bff      	cmp	r3, #255	; 0xff
 800a460:	d01d      	beq.n	800a49e <USBD_StdItfReq+0x92>
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d11a      	bne.n	800a49e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a468:	7bba      	ldrb	r2, [r7, #14]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	32ae      	adds	r2, #174	; 0xae
 800a46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00f      	beq.n	800a498 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a478:	7bba      	ldrb	r2, [r7, #14]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a480:	7bba      	ldrb	r2, [r7, #14]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	32ae      	adds	r2, #174	; 0xae
 800a486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	4798      	blx	r3
 800a492:	4603      	mov	r3, r0
 800a494:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a496:	e004      	b.n	800a4a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a498:	2303      	movs	r3, #3
 800a49a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a49c:	e001      	b.n	800a4a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a49e:	2303      	movs	r3, #3
 800a4a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	88db      	ldrh	r3, [r3, #6]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d110      	bne.n	800a4cc <USBD_StdItfReq+0xc0>
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10d      	bne.n	800a4cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fdf1 	bl	800b098 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a4b6:	e009      	b.n	800a4cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fd21 	bl	800af02 <USBD_CtlError>
          break;
 800a4c0:	e004      	b.n	800a4cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a4c2:	6839      	ldr	r1, [r7, #0]
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 fd1c 	bl	800af02 <USBD_CtlError>
          break;
 800a4ca:	e000      	b.n	800a4ce <USBD_StdItfReq+0xc2>
          break;
 800a4cc:	bf00      	nop
      }
      break;
 800a4ce:	e004      	b.n	800a4da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a4d0:	6839      	ldr	r1, [r7, #0]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fd15 	bl	800af02 <USBD_CtlError>
      break;
 800a4d8:	bf00      	nop
  }

  return ret;
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	889b      	ldrh	r3, [r3, #4]
 800a4f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a500:	2b40      	cmp	r3, #64	; 0x40
 800a502:	d007      	beq.n	800a514 <USBD_StdEPReq+0x30>
 800a504:	2b40      	cmp	r3, #64	; 0x40
 800a506:	f200 817f 	bhi.w	800a808 <USBD_StdEPReq+0x324>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d02a      	beq.n	800a564 <USBD_StdEPReq+0x80>
 800a50e:	2b20      	cmp	r3, #32
 800a510:	f040 817a 	bne.w	800a808 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7ff fe83 	bl	800a224 <USBD_CoreFindEP>
 800a51e:	4603      	mov	r3, r0
 800a520:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a522:	7b7b      	ldrb	r3, [r7, #13]
 800a524:	2bff      	cmp	r3, #255	; 0xff
 800a526:	f000 8174 	beq.w	800a812 <USBD_StdEPReq+0x32e>
 800a52a:	7b7b      	ldrb	r3, [r7, #13]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f040 8170 	bne.w	800a812 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a532:	7b7a      	ldrb	r2, [r7, #13]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a53a:	7b7a      	ldrb	r2, [r7, #13]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	32ae      	adds	r2, #174	; 0xae
 800a540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	2b00      	cmp	r3, #0
 800a548:	f000 8163 	beq.w	800a812 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a54c:	7b7a      	ldrb	r2, [r7, #13]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	32ae      	adds	r2, #174	; 0xae
 800a552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	4798      	blx	r3
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a562:	e156      	b.n	800a812 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	785b      	ldrb	r3, [r3, #1]
 800a568:	2b03      	cmp	r3, #3
 800a56a:	d008      	beq.n	800a57e <USBD_StdEPReq+0x9a>
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	f300 8145 	bgt.w	800a7fc <USBD_StdEPReq+0x318>
 800a572:	2b00      	cmp	r3, #0
 800a574:	f000 809b 	beq.w	800a6ae <USBD_StdEPReq+0x1ca>
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d03c      	beq.n	800a5f6 <USBD_StdEPReq+0x112>
 800a57c:	e13e      	b.n	800a7fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a584:	b2db      	uxtb	r3, r3
 800a586:	2b02      	cmp	r3, #2
 800a588:	d002      	beq.n	800a590 <USBD_StdEPReq+0xac>
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d016      	beq.n	800a5bc <USBD_StdEPReq+0xd8>
 800a58e:	e02c      	b.n	800a5ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00d      	beq.n	800a5b2 <USBD_StdEPReq+0xce>
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	2b80      	cmp	r3, #128	; 0x80
 800a59a:	d00a      	beq.n	800a5b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 f9e3 	bl	800b96c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5a6:	2180      	movs	r1, #128	; 0x80
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f001 f9df 	bl	800b96c <USBD_LL_StallEP>
 800a5ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5b0:	e020      	b.n	800a5f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a5b2:	6839      	ldr	r1, [r7, #0]
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fca4 	bl	800af02 <USBD_CtlError>
              break;
 800a5ba:	e01b      	b.n	800a5f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	885b      	ldrh	r3, [r3, #2]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10e      	bne.n	800a5e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a5c4:	7bbb      	ldrb	r3, [r7, #14]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00b      	beq.n	800a5e2 <USBD_StdEPReq+0xfe>
 800a5ca:	7bbb      	ldrb	r3, [r7, #14]
 800a5cc:	2b80      	cmp	r3, #128	; 0x80
 800a5ce:	d008      	beq.n	800a5e2 <USBD_StdEPReq+0xfe>
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	88db      	ldrh	r3, [r3, #6]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d104      	bne.n	800a5e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 f9c5 	bl	800b96c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fd58 	bl	800b098 <USBD_CtlSendStatus>

              break;
 800a5e8:	e004      	b.n	800a5f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fc88 	bl	800af02 <USBD_CtlError>
              break;
 800a5f2:	bf00      	nop
          }
          break;
 800a5f4:	e107      	b.n	800a806 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d002      	beq.n	800a608 <USBD_StdEPReq+0x124>
 800a602:	2b03      	cmp	r3, #3
 800a604:	d016      	beq.n	800a634 <USBD_StdEPReq+0x150>
 800a606:	e04b      	b.n	800a6a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a608:	7bbb      	ldrb	r3, [r7, #14]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00d      	beq.n	800a62a <USBD_StdEPReq+0x146>
 800a60e:	7bbb      	ldrb	r3, [r7, #14]
 800a610:	2b80      	cmp	r3, #128	; 0x80
 800a612:	d00a      	beq.n	800a62a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a614:	7bbb      	ldrb	r3, [r7, #14]
 800a616:	4619      	mov	r1, r3
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f001 f9a7 	bl	800b96c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a61e:	2180      	movs	r1, #128	; 0x80
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f001 f9a3 	bl	800b96c <USBD_LL_StallEP>
 800a626:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a628:	e040      	b.n	800a6ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a62a:	6839      	ldr	r1, [r7, #0]
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 fc68 	bl	800af02 <USBD_CtlError>
              break;
 800a632:	e03b      	b.n	800a6ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	885b      	ldrh	r3, [r3, #2]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d136      	bne.n	800a6aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a63c:	7bbb      	ldrb	r3, [r7, #14]
 800a63e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a642:	2b00      	cmp	r3, #0
 800a644:	d004      	beq.n	800a650 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	4619      	mov	r1, r3
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 f9c4 	bl	800b9d8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fd21 	bl	800b098 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a656:	7bbb      	ldrb	r3, [r7, #14]
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7ff fde2 	bl	800a224 <USBD_CoreFindEP>
 800a660:	4603      	mov	r3, r0
 800a662:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a664:	7b7b      	ldrb	r3, [r7, #13]
 800a666:	2bff      	cmp	r3, #255	; 0xff
 800a668:	d01f      	beq.n	800a6aa <USBD_StdEPReq+0x1c6>
 800a66a:	7b7b      	ldrb	r3, [r7, #13]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d11c      	bne.n	800a6aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a670:	7b7a      	ldrb	r2, [r7, #13]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a678:	7b7a      	ldrb	r2, [r7, #13]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	32ae      	adds	r2, #174	; 0xae
 800a67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d010      	beq.n	800a6aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a688:	7b7a      	ldrb	r2, [r7, #13]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	32ae      	adds	r2, #174	; 0xae
 800a68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	4798      	blx	r3
 800a69a:	4603      	mov	r3, r0
 800a69c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a69e:	e004      	b.n	800a6aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fc2d 	bl	800af02 <USBD_CtlError>
              break;
 800a6a8:	e000      	b.n	800a6ac <USBD_StdEPReq+0x1c8>
              break;
 800a6aa:	bf00      	nop
          }
          break;
 800a6ac:	e0ab      	b.n	800a806 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d002      	beq.n	800a6c0 <USBD_StdEPReq+0x1dc>
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d032      	beq.n	800a724 <USBD_StdEPReq+0x240>
 800a6be:	e097      	b.n	800a7f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d007      	beq.n	800a6d6 <USBD_StdEPReq+0x1f2>
 800a6c6:	7bbb      	ldrb	r3, [r7, #14]
 800a6c8:	2b80      	cmp	r3, #128	; 0x80
 800a6ca:	d004      	beq.n	800a6d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fc17 	bl	800af02 <USBD_CtlError>
                break;
 800a6d4:	e091      	b.n	800a7fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	da0b      	bge.n	800a6f6 <USBD_StdEPReq+0x212>
 800a6de:	7bbb      	ldrb	r3, [r7, #14]
 800a6e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4413      	add	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	3310      	adds	r3, #16
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	e00b      	b.n	800a70e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	4413      	add	r3, r2
 800a70c:	3304      	adds	r3, #4
 800a70e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2200      	movs	r2, #0
 800a714:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	2202      	movs	r2, #2
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 fc61 	bl	800afe4 <USBD_CtlSendData>
              break;
 800a722:	e06a      	b.n	800a7fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	da11      	bge.n	800a750 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	f003 020f 	and.w	r2, r3, #15
 800a732:	6879      	ldr	r1, [r7, #4]
 800a734:	4613      	mov	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	440b      	add	r3, r1
 800a73e:	3324      	adds	r3, #36	; 0x24
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d117      	bne.n	800a776 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a746:	6839      	ldr	r1, [r7, #0]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fbda 	bl	800af02 <USBD_CtlError>
                  break;
 800a74e:	e054      	b.n	800a7fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a750:	7bbb      	ldrb	r3, [r7, #14]
 800a752:	f003 020f 	and.w	r2, r3, #15
 800a756:	6879      	ldr	r1, [r7, #4]
 800a758:	4613      	mov	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4413      	add	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	440b      	add	r3, r1
 800a762:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a766:	881b      	ldrh	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d104      	bne.n	800a776 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fbc7 	bl	800af02 <USBD_CtlError>
                  break;
 800a774:	e041      	b.n	800a7fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	da0b      	bge.n	800a796 <USBD_StdEPReq+0x2b2>
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a784:	4613      	mov	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	3310      	adds	r3, #16
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	4413      	add	r3, r2
 800a792:	3304      	adds	r3, #4
 800a794:	e00b      	b.n	800a7ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a79c:	4613      	mov	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d002      	beq.n	800a7bc <USBD_StdEPReq+0x2d8>
 800a7b6:	7bbb      	ldrb	r3, [r7, #14]
 800a7b8:	2b80      	cmp	r3, #128	; 0x80
 800a7ba:	d103      	bne.n	800a7c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	601a      	str	r2, [r3, #0]
 800a7c2:	e00e      	b.n	800a7e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f001 f93b 	bl	800ba44 <USBD_LL_IsStallEP>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d003      	beq.n	800a7dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	601a      	str	r2, [r3, #0]
 800a7da:	e002      	b.n	800a7e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	2202      	movs	r2, #2
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fbfb 	bl	800afe4 <USBD_CtlSendData>
              break;
 800a7ee:	e004      	b.n	800a7fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fb85 	bl	800af02 <USBD_CtlError>
              break;
 800a7f8:	bf00      	nop
          }
          break;
 800a7fa:	e004      	b.n	800a806 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fb7f 	bl	800af02 <USBD_CtlError>
          break;
 800a804:	bf00      	nop
      }
      break;
 800a806:	e005      	b.n	800a814 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fb79 	bl	800af02 <USBD_CtlError>
      break;
 800a810:	e000      	b.n	800a814 <USBD_StdEPReq+0x330>
      break;
 800a812:	bf00      	nop
  }

  return ret;
 800a814:	7bfb      	ldrb	r3, [r7, #15]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a82a:	2300      	movs	r3, #0
 800a82c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a82e:	2300      	movs	r3, #0
 800a830:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	885b      	ldrh	r3, [r3, #2]
 800a83a:	0a1b      	lsrs	r3, r3, #8
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	3b01      	subs	r3, #1
 800a840:	2b0e      	cmp	r3, #14
 800a842:	f200 8152 	bhi.w	800aaea <USBD_GetDescriptor+0x2ca>
 800a846:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <USBD_GetDescriptor+0x2c>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a8bd 	.word	0x0800a8bd
 800a850:	0800a8d5 	.word	0x0800a8d5
 800a854:	0800a915 	.word	0x0800a915
 800a858:	0800aaeb 	.word	0x0800aaeb
 800a85c:	0800aaeb 	.word	0x0800aaeb
 800a860:	0800aa8b 	.word	0x0800aa8b
 800a864:	0800aab7 	.word	0x0800aab7
 800a868:	0800aaeb 	.word	0x0800aaeb
 800a86c:	0800aaeb 	.word	0x0800aaeb
 800a870:	0800aaeb 	.word	0x0800aaeb
 800a874:	0800aaeb 	.word	0x0800aaeb
 800a878:	0800aaeb 	.word	0x0800aaeb
 800a87c:	0800aaeb 	.word	0x0800aaeb
 800a880:	0800aaeb 	.word	0x0800aaeb
 800a884:	0800a889 	.word	0x0800a889
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a88e:	69db      	ldr	r3, [r3, #28]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00b      	beq.n	800a8ac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a89a:	69db      	ldr	r3, [r3, #28]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	7c12      	ldrb	r2, [r2, #16]
 800a8a0:	f107 0108 	add.w	r1, r7, #8
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	4798      	blx	r3
 800a8a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8aa:	e126      	b.n	800aafa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fb27 	bl	800af02 <USBD_CtlError>
        err++;
 800a8b4:	7afb      	ldrb	r3, [r7, #11]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	72fb      	strb	r3, [r7, #11]
      break;
 800a8ba:	e11e      	b.n	800aafa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	7c12      	ldrb	r2, [r2, #16]
 800a8c8:	f107 0108 	add.w	r1, r7, #8
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	4798      	blx	r3
 800a8d0:	60f8      	str	r0, [r7, #12]
      break;
 800a8d2:	e112      	b.n	800aafa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	7c1b      	ldrb	r3, [r3, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10d      	bne.n	800a8f8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e4:	f107 0208 	add.w	r2, r7, #8
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	4798      	blx	r3
 800a8ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a8f6:	e100      	b.n	800aafa <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a900:	f107 0208 	add.w	r2, r7, #8
 800a904:	4610      	mov	r0, r2
 800a906:	4798      	blx	r3
 800a908:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3301      	adds	r3, #1
 800a90e:	2202      	movs	r2, #2
 800a910:	701a      	strb	r2, [r3, #0]
      break;
 800a912:	e0f2      	b.n	800aafa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	885b      	ldrh	r3, [r3, #2]
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b05      	cmp	r3, #5
 800a91c:	f200 80ac 	bhi.w	800aa78 <USBD_GetDescriptor+0x258>
 800a920:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <USBD_GetDescriptor+0x108>)
 800a922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a926:	bf00      	nop
 800a928:	0800a941 	.word	0x0800a941
 800a92c:	0800a975 	.word	0x0800a975
 800a930:	0800a9a9 	.word	0x0800a9a9
 800a934:	0800a9dd 	.word	0x0800a9dd
 800a938:	0800aa11 	.word	0x0800aa11
 800a93c:	0800aa45 	.word	0x0800aa45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00b      	beq.n	800a964 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	7c12      	ldrb	r2, [r2, #16]
 800a958:	f107 0108 	add.w	r1, r7, #8
 800a95c:	4610      	mov	r0, r2
 800a95e:	4798      	blx	r3
 800a960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a962:	e091      	b.n	800aa88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 facb 	bl	800af02 <USBD_CtlError>
            err++;
 800a96c:	7afb      	ldrb	r3, [r7, #11]
 800a96e:	3301      	adds	r3, #1
 800a970:	72fb      	strb	r3, [r7, #11]
          break;
 800a972:	e089      	b.n	800aa88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00b      	beq.n	800a998 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	7c12      	ldrb	r2, [r2, #16]
 800a98c:	f107 0108 	add.w	r1, r7, #8
 800a990:	4610      	mov	r0, r2
 800a992:	4798      	blx	r3
 800a994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a996:	e077      	b.n	800aa88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a998:	6839      	ldr	r1, [r7, #0]
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fab1 	bl	800af02 <USBD_CtlError>
            err++;
 800a9a0:	7afb      	ldrb	r3, [r7, #11]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a9a6:	e06f      	b.n	800aa88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00b      	beq.n	800a9cc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	7c12      	ldrb	r2, [r2, #16]
 800a9c0:	f107 0108 	add.w	r1, r7, #8
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	4798      	blx	r3
 800a9c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ca:	e05d      	b.n	800aa88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fa97 	bl	800af02 <USBD_CtlError>
            err++;
 800a9d4:	7afb      	ldrb	r3, [r7, #11]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a9da:	e055      	b.n	800aa88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00b      	beq.n	800aa00 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	7c12      	ldrb	r2, [r2, #16]
 800a9f4:	f107 0108 	add.w	r1, r7, #8
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	4798      	blx	r3
 800a9fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9fe:	e043      	b.n	800aa88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa00:	6839      	ldr	r1, [r7, #0]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fa7d 	bl	800af02 <USBD_CtlError>
            err++;
 800aa08:	7afb      	ldrb	r3, [r7, #11]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa0e:	e03b      	b.n	800aa88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa16:	695b      	ldr	r3, [r3, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00b      	beq.n	800aa34 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa22:	695b      	ldr	r3, [r3, #20]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	7c12      	ldrb	r2, [r2, #16]
 800aa28:	f107 0108 	add.w	r1, r7, #8
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	4798      	blx	r3
 800aa30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa32:	e029      	b.n	800aa88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fa63 	bl	800af02 <USBD_CtlError>
            err++;
 800aa3c:	7afb      	ldrb	r3, [r7, #11]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	72fb      	strb	r3, [r7, #11]
          break;
 800aa42:	e021      	b.n	800aa88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00b      	beq.n	800aa68 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	7c12      	ldrb	r2, [r2, #16]
 800aa5c:	f107 0108 	add.w	r1, r7, #8
 800aa60:	4610      	mov	r0, r2
 800aa62:	4798      	blx	r3
 800aa64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa66:	e00f      	b.n	800aa88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fa49 	bl	800af02 <USBD_CtlError>
            err++;
 800aa70:	7afb      	ldrb	r3, [r7, #11]
 800aa72:	3301      	adds	r3, #1
 800aa74:	72fb      	strb	r3, [r7, #11]
          break;
 800aa76:	e007      	b.n	800aa88 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fa41 	bl	800af02 <USBD_CtlError>
          err++;
 800aa80:	7afb      	ldrb	r3, [r7, #11]
 800aa82:	3301      	adds	r3, #1
 800aa84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aa86:	bf00      	nop
      }
      break;
 800aa88:	e037      	b.n	800aafa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	7c1b      	ldrb	r3, [r3, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d109      	bne.n	800aaa6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9a:	f107 0208 	add.w	r2, r7, #8
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	4798      	blx	r3
 800aaa2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaa4:	e029      	b.n	800aafa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aaa6:	6839      	ldr	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fa2a 	bl	800af02 <USBD_CtlError>
        err++;
 800aaae:	7afb      	ldrb	r3, [r7, #11]
 800aab0:	3301      	adds	r3, #1
 800aab2:	72fb      	strb	r3, [r7, #11]
      break;
 800aab4:	e021      	b.n	800aafa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	7c1b      	ldrb	r3, [r3, #16]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10d      	bne.n	800aada <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac6:	f107 0208 	add.w	r2, r7, #8
 800aaca:	4610      	mov	r0, r2
 800aacc:	4798      	blx	r3
 800aace:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	3301      	adds	r3, #1
 800aad4:	2207      	movs	r2, #7
 800aad6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aad8:	e00f      	b.n	800aafa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fa10 	bl	800af02 <USBD_CtlError>
        err++;
 800aae2:	7afb      	ldrb	r3, [r7, #11]
 800aae4:	3301      	adds	r3, #1
 800aae6:	72fb      	strb	r3, [r7, #11]
      break;
 800aae8:	e007      	b.n	800aafa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fa08 	bl	800af02 <USBD_CtlError>
      err++;
 800aaf2:	7afb      	ldrb	r3, [r7, #11]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	72fb      	strb	r3, [r7, #11]
      break;
 800aaf8:	bf00      	nop
  }

  if (err != 0U)
 800aafa:	7afb      	ldrb	r3, [r7, #11]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d11e      	bne.n	800ab3e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	88db      	ldrh	r3, [r3, #6]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d016      	beq.n	800ab36 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ab08:	893b      	ldrh	r3, [r7, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00e      	beq.n	800ab2c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	88da      	ldrh	r2, [r3, #6]
 800ab12:	893b      	ldrh	r3, [r7, #8]
 800ab14:	4293      	cmp	r3, r2
 800ab16:	bf28      	it	cs
 800ab18:	4613      	movcs	r3, r2
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab1e:	893b      	ldrh	r3, [r7, #8]
 800ab20:	461a      	mov	r2, r3
 800ab22:	68f9      	ldr	r1, [r7, #12]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fa5d 	bl	800afe4 <USBD_CtlSendData>
 800ab2a:	e009      	b.n	800ab40 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f9e7 	bl	800af02 <USBD_CtlError>
 800ab34:	e004      	b.n	800ab40 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 faae 	bl	800b098 <USBD_CtlSendStatus>
 800ab3c:	e000      	b.n	800ab40 <USBD_GetDescriptor+0x320>
    return;
 800ab3e:	bf00      	nop
  }
}
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop

0800ab48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	889b      	ldrh	r3, [r3, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d131      	bne.n	800abbe <USBD_SetAddress+0x76>
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	88db      	ldrh	r3, [r3, #6]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d12d      	bne.n	800abbe <USBD_SetAddress+0x76>
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	885b      	ldrh	r3, [r3, #2]
 800ab66:	2b7f      	cmp	r3, #127	; 0x7f
 800ab68:	d829      	bhi.n	800abbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	885b      	ldrh	r3, [r3, #2]
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d104      	bne.n	800ab8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f9bc 	bl	800af02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab8a:	e01d      	b.n	800abc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	7bfa      	ldrb	r2, [r7, #15]
 800ab90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
 800ab96:	4619      	mov	r1, r3
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 ff81 	bl	800baa0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fa7a 	bl	800b098 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d004      	beq.n	800abb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2202      	movs	r2, #2
 800abae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb2:	e009      	b.n	800abc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abbc:	e004      	b.n	800abc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800abbe:	6839      	ldr	r1, [r7, #0]
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 f99e 	bl	800af02 <USBD_CtlError>
  }
}
 800abc6:	bf00      	nop
 800abc8:	bf00      	nop
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	885b      	ldrh	r3, [r3, #2]
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	4b4e      	ldr	r3, [pc, #312]	; (800ad20 <USBD_SetConfig+0x150>)
 800abe6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800abe8:	4b4d      	ldr	r3, [pc, #308]	; (800ad20 <USBD_SetConfig+0x150>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d905      	bls.n	800abfc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f985 	bl	800af02 <USBD_CtlError>
    return USBD_FAIL;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e08c      	b.n	800ad16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d002      	beq.n	800ac0e <USBD_SetConfig+0x3e>
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d029      	beq.n	800ac60 <USBD_SetConfig+0x90>
 800ac0c:	e075      	b.n	800acfa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac0e:	4b44      	ldr	r3, [pc, #272]	; (800ad20 <USBD_SetConfig+0x150>)
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d020      	beq.n	800ac58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ac16:	4b42      	ldr	r3, [pc, #264]	; (800ad20 <USBD_SetConfig+0x150>)
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac20:	4b3f      	ldr	r3, [pc, #252]	; (800ad20 <USBD_SetConfig+0x150>)
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7ff f849 	bl	8009cbe <USBD_SetClassConfig>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d008      	beq.n	800ac48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f962 	bl	800af02 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2202      	movs	r2, #2
 800ac42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac46:	e065      	b.n	800ad14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 fa25 	bl	800b098 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2203      	movs	r2, #3
 800ac52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ac56:	e05d      	b.n	800ad14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fa1d 	bl	800b098 <USBD_CtlSendStatus>
      break;
 800ac5e:	e059      	b.n	800ad14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ac60:	4b2f      	ldr	r3, [pc, #188]	; (800ad20 <USBD_SetConfig+0x150>)
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d112      	bne.n	800ac8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ac70:	4b2b      	ldr	r3, [pc, #172]	; (800ad20 <USBD_SetConfig+0x150>)
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	461a      	mov	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac7a:	4b29      	ldr	r3, [pc, #164]	; (800ad20 <USBD_SetConfig+0x150>)
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7ff f838 	bl	8009cf6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fa06 	bl	800b098 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac8c:	e042      	b.n	800ad14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ac8e:	4b24      	ldr	r3, [pc, #144]	; (800ad20 <USBD_SetConfig+0x150>)
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d02a      	beq.n	800acf2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	4619      	mov	r1, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f7ff f826 	bl	8009cf6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800acaa:	4b1d      	ldr	r3, [pc, #116]	; (800ad20 <USBD_SetConfig+0x150>)
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800acb4:	4b1a      	ldr	r3, [pc, #104]	; (800ad20 <USBD_SetConfig+0x150>)
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7fe ffff 	bl	8009cbe <USBD_SetClassConfig>
 800acc0:	4603      	mov	r3, r0
 800acc2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00f      	beq.n	800acea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f918 	bl	800af02 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7ff f80b 	bl	8009cf6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2202      	movs	r2, #2
 800ace4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ace8:	e014      	b.n	800ad14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f9d4 	bl	800b098 <USBD_CtlSendStatus>
      break;
 800acf0:	e010      	b.n	800ad14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f9d0 	bl	800b098 <USBD_CtlSendStatus>
      break;
 800acf8:	e00c      	b.n	800ad14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 f900 	bl	800af02 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad02:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <USBD_SetConfig+0x150>)
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7fe fff4 	bl	8009cf6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	73fb      	strb	r3, [r7, #15]
      break;
 800ad12:	bf00      	nop
  }

  return ret;
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20000284 	.word	0x20000284

0800ad24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	88db      	ldrh	r3, [r3, #6]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d004      	beq.n	800ad40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 f8e2 	bl	800af02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad3e:	e023      	b.n	800ad88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	dc02      	bgt.n	800ad52 <USBD_GetConfig+0x2e>
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	dc03      	bgt.n	800ad58 <USBD_GetConfig+0x34>
 800ad50:	e015      	b.n	800ad7e <USBD_GetConfig+0x5a>
 800ad52:	2b03      	cmp	r3, #3
 800ad54:	d00b      	beq.n	800ad6e <USBD_GetConfig+0x4a>
 800ad56:	e012      	b.n	800ad7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3308      	adds	r3, #8
 800ad62:	2201      	movs	r2, #1
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f93c 	bl	800afe4 <USBD_CtlSendData>
        break;
 800ad6c:	e00c      	b.n	800ad88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	3304      	adds	r3, #4
 800ad72:	2201      	movs	r2, #1
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f934 	bl	800afe4 <USBD_CtlSendData>
        break;
 800ad7c:	e004      	b.n	800ad88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f8be 	bl	800af02 <USBD_CtlError>
        break;
 800ad86:	bf00      	nop
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	3b01      	subs	r3, #1
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	d81e      	bhi.n	800ade6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	88db      	ldrh	r3, [r3, #6]
 800adac:	2b02      	cmp	r3, #2
 800adae:	d004      	beq.n	800adba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f8a5 	bl	800af02 <USBD_CtlError>
        break;
 800adb8:	e01a      	b.n	800adf0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2201      	movs	r2, #1
 800adbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d005      	beq.n	800add6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	f043 0202 	orr.w	r2, r3, #2
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	330c      	adds	r3, #12
 800adda:	2202      	movs	r2, #2
 800addc:	4619      	mov	r1, r3
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f900 	bl	800afe4 <USBD_CtlSendData>
      break;
 800ade4:	e004      	b.n	800adf0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f88a 	bl	800af02 <USBD_CtlError>
      break;
 800adee:	bf00      	nop
  }
}
 800adf0:	bf00      	nop
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	885b      	ldrh	r3, [r3, #2]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d107      	bne.n	800ae1a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f940 	bl	800b098 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ae18:	e013      	b.n	800ae42 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	885b      	ldrh	r3, [r3, #2]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d10b      	bne.n	800ae3a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	889b      	ldrh	r3, [r3, #4]
 800ae26:	0a1b      	lsrs	r3, r3, #8
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f930 	bl	800b098 <USBD_CtlSendStatus>
}
 800ae38:	e003      	b.n	800ae42 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f860 	bl	800af02 <USBD_CtlError>
}
 800ae42:	bf00      	nop
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d80b      	bhi.n	800ae7a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	885b      	ldrh	r3, [r3, #2]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d10c      	bne.n	800ae84 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f910 	bl	800b098 <USBD_CtlSendStatus>
      }
      break;
 800ae78:	e004      	b.n	800ae84 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f840 	bl	800af02 <USBD_CtlError>
      break;
 800ae82:	e000      	b.n	800ae86 <USBD_ClrFeature+0x3c>
      break;
 800ae84:	bf00      	nop
  }
}
 800ae86:	bf00      	nop
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b084      	sub	sp, #16
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
 800ae96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	781a      	ldrb	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	3301      	adds	r3, #1
 800aea8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	781a      	ldrb	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f7ff fa17 	bl	800a2ec <SWAPBYTE>
 800aebe:	4603      	mov	r3, r0
 800aec0:	461a      	mov	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3301      	adds	r3, #1
 800aeca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	3301      	adds	r3, #1
 800aed0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f7ff fa0a 	bl	800a2ec <SWAPBYTE>
 800aed8:	4603      	mov	r3, r0
 800aeda:	461a      	mov	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	3301      	adds	r3, #1
 800aee4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3301      	adds	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f7ff f9fd 	bl	800a2ec <SWAPBYTE>
 800aef2:	4603      	mov	r3, r0
 800aef4:	461a      	mov	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	80da      	strh	r2, [r3, #6]
}
 800aefa:	bf00      	nop
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b082      	sub	sp, #8
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af0c:	2180      	movs	r1, #128	; 0x80
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fd2c 	bl	800b96c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af14:	2100      	movs	r1, #0
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fd28 	bl	800b96c <USBD_LL_StallEP>
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b086      	sub	sp, #24
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af30:	2300      	movs	r3, #0
 800af32:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d036      	beq.n	800afa8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800af3e:	6938      	ldr	r0, [r7, #16]
 800af40:	f000 f836 	bl	800afb0 <USBD_GetLen>
 800af44:	4603      	mov	r3, r0
 800af46:	3301      	adds	r3, #1
 800af48:	b29b      	uxth	r3, r3
 800af4a:	005b      	lsls	r3, r3, #1
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800af52:	7dfb      	ldrb	r3, [r7, #23]
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	4413      	add	r3, r2
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	7812      	ldrb	r2, [r2, #0]
 800af5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800af5e:	7dfb      	ldrb	r3, [r7, #23]
 800af60:	3301      	adds	r3, #1
 800af62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800af64:	7dfb      	ldrb	r3, [r7, #23]
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	4413      	add	r3, r2
 800af6a:	2203      	movs	r2, #3
 800af6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
 800af70:	3301      	adds	r3, #1
 800af72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800af74:	e013      	b.n	800af9e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800af76:	7dfb      	ldrb	r3, [r7, #23]
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	4413      	add	r3, r2
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	7812      	ldrb	r2, [r2, #0]
 800af80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	3301      	adds	r3, #1
 800af86:	613b      	str	r3, [r7, #16]
    idx++;
 800af88:	7dfb      	ldrb	r3, [r7, #23]
 800af8a:	3301      	adds	r3, #1
 800af8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	4413      	add	r3, r2
 800af94:	2200      	movs	r2, #0
 800af96:	701a      	strb	r2, [r3, #0]
    idx++;
 800af98:	7dfb      	ldrb	r3, [r7, #23]
 800af9a:	3301      	adds	r3, #1
 800af9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1e7      	bne.n	800af76 <USBD_GetString+0x52>
 800afa6:	e000      	b.n	800afaa <USBD_GetString+0x86>
    return;
 800afa8:	bf00      	nop
  }
}
 800afaa:	3718      	adds	r7, #24
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800afb8:	2300      	movs	r3, #0
 800afba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800afc0:	e005      	b.n	800afce <USBD_GetLen+0x1e>
  {
    len++;
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
 800afc4:	3301      	adds	r3, #1
 800afc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	3301      	adds	r3, #1
 800afcc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1f5      	bne.n	800afc2 <USBD_GetLen+0x12>
  }

  return len;
 800afd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3714      	adds	r7, #20
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2202      	movs	r2, #2
 800aff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	2100      	movs	r1, #0
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f000 fd7e 	bl	800bb0c <USBD_LL_Transmit>

  return USBD_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	2100      	movs	r1, #0
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 fd6d 	bl	800bb0c <USBD_LL_Transmit>

  return USBD_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2203      	movs	r2, #3
 800b04c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	2100      	movs	r1, #0
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f000 fd88 	bl	800bb7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b084      	sub	sp, #16
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	60f8      	str	r0, [r7, #12]
 800b07e:	60b9      	str	r1, [r7, #8]
 800b080:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	2100      	movs	r1, #0
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 fd77 	bl	800bb7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2204      	movs	r2, #4
 800b0a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fd2c 	bl	800bb0c <USBD_LL_Transmit>

  return USBD_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b082      	sub	sp, #8
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2205      	movs	r2, #5
 800b0ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fd51 	bl	800bb7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	4912      	ldr	r1, [pc, #72]	; (800b134 <MX_USB_DEVICE_Init+0x50>)
 800b0ec:	4812      	ldr	r0, [pc, #72]	; (800b138 <MX_USB_DEVICE_Init+0x54>)
 800b0ee:	f7fe fd69 	bl	8009bc4 <USBD_Init>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d001      	beq.n	800b0fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b0f8:	f7f5 fe5e 	bl	8000db8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b0fc:	490f      	ldr	r1, [pc, #60]	; (800b13c <MX_USB_DEVICE_Init+0x58>)
 800b0fe:	480e      	ldr	r0, [pc, #56]	; (800b138 <MX_USB_DEVICE_Init+0x54>)
 800b100:	f7fe fd90 	bl	8009c24 <USBD_RegisterClass>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b10a:	f7f5 fe55 	bl	8000db8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b10e:	490c      	ldr	r1, [pc, #48]	; (800b140 <MX_USB_DEVICE_Init+0x5c>)
 800b110:	4809      	ldr	r0, [pc, #36]	; (800b138 <MX_USB_DEVICE_Init+0x54>)
 800b112:	f7fe fc87 	bl	8009a24 <USBD_CDC_RegisterInterface>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d001      	beq.n	800b120 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b11c:	f7f5 fe4c 	bl	8000db8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b120:	4805      	ldr	r0, [pc, #20]	; (800b138 <MX_USB_DEVICE_Init+0x54>)
 800b122:	f7fe fdb5 	bl	8009c90 <USBD_Start>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b12c:	f7f5 fe44 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b130:	bf00      	nop
 800b132:	bd80      	pop	{r7, pc}
 800b134:	200000ac 	.word	0x200000ac
 800b138:	20000288 	.word	0x20000288
 800b13c:	20000018 	.word	0x20000018
 800b140:	20000098 	.word	0x20000098

0800b144 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b148:	2200      	movs	r2, #0
 800b14a:	4905      	ldr	r1, [pc, #20]	; (800b160 <CDC_Init_FS+0x1c>)
 800b14c:	4805      	ldr	r0, [pc, #20]	; (800b164 <CDC_Init_FS+0x20>)
 800b14e:	f7fe fc83 	bl	8009a58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b152:	4905      	ldr	r1, [pc, #20]	; (800b168 <CDC_Init_FS+0x24>)
 800b154:	4803      	ldr	r0, [pc, #12]	; (800b164 <CDC_Init_FS+0x20>)
 800b156:	f7fe fca1 	bl	8009a9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b15a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	20000968 	.word	0x20000968
 800b164:	20000288 	.word	0x20000288
 800b168:	20000568 	.word	0x20000568

0800b16c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b16c:	b480      	push	{r7}
 800b16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b170:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b172:	4618      	mov	r0, r3
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	4603      	mov	r3, r0
 800b184:	6039      	str	r1, [r7, #0]
 800b186:	71fb      	strb	r3, [r7, #7]
 800b188:	4613      	mov	r3, r2
 800b18a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b18c:	79fb      	ldrb	r3, [r7, #7]
 800b18e:	2b23      	cmp	r3, #35	; 0x23
 800b190:	d85a      	bhi.n	800b248 <CDC_Control_FS+0xcc>
 800b192:	a201      	add	r2, pc, #4	; (adr r2, 800b198 <CDC_Control_FS+0x1c>)
 800b194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b198:	0800b249 	.word	0x0800b249
 800b19c:	0800b249 	.word	0x0800b249
 800b1a0:	0800b249 	.word	0x0800b249
 800b1a4:	0800b249 	.word	0x0800b249
 800b1a8:	0800b249 	.word	0x0800b249
 800b1ac:	0800b249 	.word	0x0800b249
 800b1b0:	0800b249 	.word	0x0800b249
 800b1b4:	0800b249 	.word	0x0800b249
 800b1b8:	0800b249 	.word	0x0800b249
 800b1bc:	0800b249 	.word	0x0800b249
 800b1c0:	0800b249 	.word	0x0800b249
 800b1c4:	0800b249 	.word	0x0800b249
 800b1c8:	0800b249 	.word	0x0800b249
 800b1cc:	0800b249 	.word	0x0800b249
 800b1d0:	0800b249 	.word	0x0800b249
 800b1d4:	0800b249 	.word	0x0800b249
 800b1d8:	0800b249 	.word	0x0800b249
 800b1dc:	0800b249 	.word	0x0800b249
 800b1e0:	0800b249 	.word	0x0800b249
 800b1e4:	0800b249 	.word	0x0800b249
 800b1e8:	0800b249 	.word	0x0800b249
 800b1ec:	0800b249 	.word	0x0800b249
 800b1f0:	0800b249 	.word	0x0800b249
 800b1f4:	0800b249 	.word	0x0800b249
 800b1f8:	0800b249 	.word	0x0800b249
 800b1fc:	0800b249 	.word	0x0800b249
 800b200:	0800b249 	.word	0x0800b249
 800b204:	0800b249 	.word	0x0800b249
 800b208:	0800b249 	.word	0x0800b249
 800b20c:	0800b249 	.word	0x0800b249
 800b210:	0800b249 	.word	0x0800b249
 800b214:	0800b249 	.word	0x0800b249
 800b218:	0800b249 	.word	0x0800b249
 800b21c:	0800b249 	.word	0x0800b249
 800b220:	0800b229 	.word	0x0800b229
 800b224:	0800b249 	.word	0x0800b249
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
    	USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	60fb      	str	r3, [r7, #12]
    	if ((req->wValue & 0x0001) != 0){
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	885b      	ldrh	r3, [r3, #2]
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <CDC_Control_FS+0xc4>
    		USB_COM_Port_open = 1;
 800b238:	4b07      	ldr	r3, [pc, #28]	; (800b258 <CDC_Control_FS+0xdc>)
 800b23a:	2201      	movs	r2, #1
 800b23c:	701a      	strb	r2, [r3, #0]
    	}
    	else {
    		USB_COM_Port_open = 0;
    	}
    break;
 800b23e:	e004      	b.n	800b24a <CDC_Control_FS+0xce>
    		USB_COM_Port_open = 0;
 800b240:	4b05      	ldr	r3, [pc, #20]	; (800b258 <CDC_Control_FS+0xdc>)
 800b242:	2200      	movs	r2, #0
 800b244:	701a      	strb	r2, [r3, #0]
    break;
 800b246:	e000      	b.n	800b24a <CDC_Control_FS+0xce>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b248:	bf00      	nop
  }

  return (USBD_OK);
 800b24a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr
 800b258:	20000564 	.word	0x20000564

0800b25c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b266:	6879      	ldr	r1, [r7, #4]
 800b268:	4808      	ldr	r0, [pc, #32]	; (800b28c <CDC_Receive_FS+0x30>)
 800b26a:	f7fe fc17 	bl	8009a9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b26e:	4807      	ldr	r0, [pc, #28]	; (800b28c <CDC_Receive_FS+0x30>)
 800b270:	f7fe fc72 	bl	8009b58 <USBD_CDC_ReceivePacket>
  CDC_FS_RxDataReady_Callback(Buf, *Len); // User implemented callback
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f7f5 f939 	bl	80004f4 <CDC_FS_RxDataReady_Callback>
  return (USBD_OK);
 800b282:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b284:	4618      	mov	r0, r3
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	20000288 	.word	0x20000288

0800b290 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b2a0:	4b0d      	ldr	r3, [pc, #52]	; (800b2d8 <CDC_Transmit_FS+0x48>)
 800b2a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e00b      	b.n	800b2ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b2b6:	887b      	ldrh	r3, [r7, #2]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	6879      	ldr	r1, [r7, #4]
 800b2bc:	4806      	ldr	r0, [pc, #24]	; (800b2d8 <CDC_Transmit_FS+0x48>)
 800b2be:	f7fe fbcb 	bl	8009a58 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b2c2:	4805      	ldr	r0, [pc, #20]	; (800b2d8 <CDC_Transmit_FS+0x48>)
 800b2c4:	f7fe fc08 	bl	8009ad8 <USBD_CDC_TransmitPacket>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	20000288 	.word	0x20000288

0800b2dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b087      	sub	sp, #28
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b2ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	371c      	adds	r7, #28
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
	...

0800b300 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	4603      	mov	r3, r0
 800b308:	6039      	str	r1, [r7, #0]
 800b30a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	2212      	movs	r2, #18
 800b310:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b312:	4b03      	ldr	r3, [pc, #12]	; (800b320 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b314:	4618      	mov	r0, r3
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	200000cc 	.word	0x200000cc

0800b324 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	6039      	str	r1, [r7, #0]
 800b32e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2204      	movs	r2, #4
 800b334:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b336:	4b03      	ldr	r3, [pc, #12]	; (800b344 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b338:	4618      	mov	r0, r3
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	200000ec 	.word	0x200000ec

0800b348 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	4603      	mov	r3, r0
 800b350:	6039      	str	r1, [r7, #0]
 800b352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b354:	79fb      	ldrb	r3, [r7, #7]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d105      	bne.n	800b366 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	4907      	ldr	r1, [pc, #28]	; (800b37c <USBD_FS_ProductStrDescriptor+0x34>)
 800b35e:	4808      	ldr	r0, [pc, #32]	; (800b380 <USBD_FS_ProductStrDescriptor+0x38>)
 800b360:	f7ff fde0 	bl	800af24 <USBD_GetString>
 800b364:	e004      	b.n	800b370 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	4904      	ldr	r1, [pc, #16]	; (800b37c <USBD_FS_ProductStrDescriptor+0x34>)
 800b36a:	4805      	ldr	r0, [pc, #20]	; (800b380 <USBD_FS_ProductStrDescriptor+0x38>)
 800b36c:	f7ff fdda 	bl	800af24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b370:	4b02      	ldr	r3, [pc, #8]	; (800b37c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b372:	4618      	mov	r0, r3
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20000d68 	.word	0x20000d68
 800b380:	0800bf28 	.word	0x0800bf28

0800b384 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	4603      	mov	r3, r0
 800b38c:	6039      	str	r1, [r7, #0]
 800b38e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	4904      	ldr	r1, [pc, #16]	; (800b3a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b394:	4804      	ldr	r0, [pc, #16]	; (800b3a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b396:	f7ff fdc5 	bl	800af24 <USBD_GetString>
  return USBD_StrDesc;
 800b39a:	4b02      	ldr	r3, [pc, #8]	; (800b3a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	20000d68 	.word	0x20000d68
 800b3a8:	0800bf40 	.word	0x0800bf40

0800b3ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	6039      	str	r1, [r7, #0]
 800b3b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	221a      	movs	r2, #26
 800b3bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b3be:	f000 f855 	bl	800b46c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b3c2:	4b02      	ldr	r3, [pc, #8]	; (800b3cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	200000f0 	.word	0x200000f0

0800b3d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d105      	bne.n	800b3ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	4907      	ldr	r1, [pc, #28]	; (800b404 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b3e6:	4808      	ldr	r0, [pc, #32]	; (800b408 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b3e8:	f7ff fd9c 	bl	800af24 <USBD_GetString>
 800b3ec:	e004      	b.n	800b3f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	4904      	ldr	r1, [pc, #16]	; (800b404 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b3f2:	4805      	ldr	r0, [pc, #20]	; (800b408 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b3f4:	f7ff fd96 	bl	800af24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3f8:	4b02      	ldr	r3, [pc, #8]	; (800b404 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20000d68 	.word	0x20000d68
 800b408:	0800bf54 	.word	0x0800bf54

0800b40c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	4603      	mov	r3, r0
 800b414:	6039      	str	r1, [r7, #0]
 800b416:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b418:	79fb      	ldrb	r3, [r7, #7]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d105      	bne.n	800b42a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b41e:	683a      	ldr	r2, [r7, #0]
 800b420:	4907      	ldr	r1, [pc, #28]	; (800b440 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b422:	4808      	ldr	r0, [pc, #32]	; (800b444 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b424:	f7ff fd7e 	bl	800af24 <USBD_GetString>
 800b428:	e004      	b.n	800b434 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	4904      	ldr	r1, [pc, #16]	; (800b440 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b42e:	4805      	ldr	r0, [pc, #20]	; (800b444 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b430:	f7ff fd78 	bl	800af24 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b434:	4b02      	ldr	r3, [pc, #8]	; (800b440 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b436:	4618      	mov	r0, r3
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	20000d68 	.word	0x20000d68
 800b444:	0800bf60 	.word	0x0800bf60

0800b448 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	4603      	mov	r3, r0
 800b450:	6039      	str	r1, [r7, #0]
 800b452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	220c      	movs	r2, #12
 800b458:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b45a:	4b03      	ldr	r3, [pc, #12]	; (800b468 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr
 800b468:	200000e0 	.word	0x200000e0

0800b46c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b472:	4b0f      	ldr	r3, [pc, #60]	; (800b4b0 <Get_SerialNum+0x44>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b478:	4b0e      	ldr	r3, [pc, #56]	; (800b4b4 <Get_SerialNum+0x48>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b47e:	4b0e      	ldr	r3, [pc, #56]	; (800b4b8 <Get_SerialNum+0x4c>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4413      	add	r3, r2
 800b48a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d009      	beq.n	800b4a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b492:	2208      	movs	r2, #8
 800b494:	4909      	ldr	r1, [pc, #36]	; (800b4bc <Get_SerialNum+0x50>)
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f000 f814 	bl	800b4c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b49c:	2204      	movs	r2, #4
 800b49e:	4908      	ldr	r1, [pc, #32]	; (800b4c0 <Get_SerialNum+0x54>)
 800b4a0:	68b8      	ldr	r0, [r7, #8]
 800b4a2:	f000 f80f 	bl	800b4c4 <IntToUnicode>
  }
}
 800b4a6:	bf00      	nop
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	1fff7590 	.word	0x1fff7590
 800b4b4:	1fff7594 	.word	0x1fff7594
 800b4b8:	1fff7598 	.word	0x1fff7598
 800b4bc:	200000f2 	.word	0x200000f2
 800b4c0:	20000102 	.word	0x20000102

0800b4c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	75fb      	strb	r3, [r7, #23]
 800b4da:	e027      	b.n	800b52c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	0f1b      	lsrs	r3, r3, #28
 800b4e0:	2b09      	cmp	r3, #9
 800b4e2:	d80b      	bhi.n	800b4fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	0f1b      	lsrs	r3, r3, #28
 800b4e8:	b2da      	uxtb	r2, r3
 800b4ea:	7dfb      	ldrb	r3, [r7, #23]
 800b4ec:	005b      	lsls	r3, r3, #1
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	440b      	add	r3, r1
 800b4f4:	3230      	adds	r2, #48	; 0x30
 800b4f6:	b2d2      	uxtb	r2, r2
 800b4f8:	701a      	strb	r2, [r3, #0]
 800b4fa:	e00a      	b.n	800b512 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	0f1b      	lsrs	r3, r3, #28
 800b500:	b2da      	uxtb	r2, r3
 800b502:	7dfb      	ldrb	r3, [r7, #23]
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	4619      	mov	r1, r3
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	440b      	add	r3, r1
 800b50c:	3237      	adds	r2, #55	; 0x37
 800b50e:	b2d2      	uxtb	r2, r2
 800b510:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	011b      	lsls	r3, r3, #4
 800b516:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b518:	7dfb      	ldrb	r3, [r7, #23]
 800b51a:	005b      	lsls	r3, r3, #1
 800b51c:	3301      	adds	r3, #1
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	4413      	add	r3, r2
 800b522:	2200      	movs	r2, #0
 800b524:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b526:	7dfb      	ldrb	r3, [r7, #23]
 800b528:	3301      	adds	r3, #1
 800b52a:	75fb      	strb	r3, [r7, #23]
 800b52c:	7dfa      	ldrb	r2, [r7, #23]
 800b52e:	79fb      	ldrb	r3, [r7, #7]
 800b530:	429a      	cmp	r2, r3
 800b532:	d3d3      	bcc.n	800b4dc <IntToUnicode+0x18>
  }
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop
 800b538:	371c      	adds	r7, #28
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
	...

0800b544 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b096      	sub	sp, #88	; 0x58
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b54c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b550:	2200      	movs	r2, #0
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	605a      	str	r2, [r3, #4]
 800b556:	609a      	str	r2, [r3, #8]
 800b558:	60da      	str	r2, [r3, #12]
 800b55a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b55c:	f107 0310 	add.w	r3, r7, #16
 800b560:	2234      	movs	r2, #52	; 0x34
 800b562:	2100      	movs	r1, #0
 800b564:	4618      	mov	r0, r3
 800b566:	f000 fba9 	bl	800bcbc <memset>
  if(pcdHandle->Instance==USB)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a24      	ldr	r2, [pc, #144]	; (800b600 <HAL_PCD_MspInit+0xbc>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d141      	bne.n	800b5f8 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b578:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800b57a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800b57e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b580:	f107 0310 	add.w	r3, r7, #16
 800b584:	4618      	mov	r0, r3
 800b586:	f7f9 fd05 	bl	8004f94 <HAL_RCCEx_PeriphCLKConfig>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d001      	beq.n	800b594 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b590:	f7f5 fc12 	bl	8000db8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b594:	4b1b      	ldr	r3, [pc, #108]	; (800b604 <HAL_PCD_MspInit+0xc0>)
 800b596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b598:	4a1a      	ldr	r2, [pc, #104]	; (800b604 <HAL_PCD_MspInit+0xc0>)
 800b59a:	f043 0301 	orr.w	r3, r3, #1
 800b59e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5a0:	4b18      	ldr	r3, [pc, #96]	; (800b604 <HAL_PCD_MspInit+0xc0>)
 800b5a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5a4:	f003 0301 	and.w	r3, r3, #1
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b5ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b5b0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5b2:	2302      	movs	r3, #2
 800b5b4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800b5be:	230a      	movs	r3, #10
 800b5c0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b5cc:	f7f6 fee0 	bl	8002390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b5d0:	4b0c      	ldr	r3, [pc, #48]	; (800b604 <HAL_PCD_MspInit+0xc0>)
 800b5d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5d4:	4a0b      	ldr	r2, [pc, #44]	; (800b604 <HAL_PCD_MspInit+0xc0>)
 800b5d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b5da:	6593      	str	r3, [r2, #88]	; 0x58
 800b5dc:	4b09      	ldr	r3, [pc, #36]	; (800b604 <HAL_PCD_MspInit+0xc0>)
 800b5de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b5e4:	60bb      	str	r3, [r7, #8]
 800b5e6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	2043      	movs	r0, #67	; 0x43
 800b5ee:	f7f6 fe98 	bl	8002322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b5f2:	2043      	movs	r0, #67	; 0x43
 800b5f4:	f7f6 feb1 	bl	800235a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b5f8:	bf00      	nop
 800b5fa:	3758      	adds	r7, #88	; 0x58
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	40006800 	.word	0x40006800
 800b604:	40021000 	.word	0x40021000

0800b608 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b61c:	4619      	mov	r1, r3
 800b61e:	4610      	mov	r0, r2
 800b620:	f7fe fb83 	bl	8009d2a <USBD_LL_SetupStage>
}
 800b624:	bf00      	nop
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	460b      	mov	r3, r1
 800b636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800b63e:	78fa      	ldrb	r2, [r7, #3]
 800b640:	6879      	ldr	r1, [r7, #4]
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	440b      	add	r3, r1
 800b64c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	78fb      	ldrb	r3, [r7, #3]
 800b654:	4619      	mov	r1, r3
 800b656:	f7fe fbbd 	bl	8009dd4 <USBD_LL_DataOutStage>
}
 800b65a:	bf00      	nop
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800b674:	78fa      	ldrb	r2, [r7, #3]
 800b676:	6879      	ldr	r1, [r7, #4]
 800b678:	4613      	mov	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	4413      	add	r3, r2
 800b67e:	00db      	lsls	r3, r3, #3
 800b680:	440b      	add	r3, r1
 800b682:	333c      	adds	r3, #60	; 0x3c
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	78fb      	ldrb	r3, [r7, #3]
 800b688:	4619      	mov	r1, r3
 800b68a:	f7fe fc56 	bl	8009f3a <USBD_LL_DataInStage>
}
 800b68e:	bf00      	nop
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b082      	sub	sp, #8
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fe fd90 	bl	800a1ca <USBD_LL_SOF>
}
 800b6aa:	bf00      	nop
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b084      	sub	sp, #16
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d001      	beq.n	800b6ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b6c6:	f7f5 fb77 	bl	8000db8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b6d0:	7bfa      	ldrb	r2, [r7, #15]
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fe fd34 	bl	800a142 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fe fcdc 	bl	800a09e <USBD_LL_Reset>
}
 800b6e6:	bf00      	nop
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
	...

0800b6f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fe fd2f 	bl	800a162 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d005      	beq.n	800b718 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b70c:	4b04      	ldr	r3, [pc, #16]	; (800b720 <HAL_PCD_SuspendCallback+0x30>)
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	4a03      	ldr	r2, [pc, #12]	; (800b720 <HAL_PCD_SuspendCallback+0x30>)
 800b712:	f043 0306 	orr.w	r3, r3, #6
 800b716:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	e000ed00 	.word	0xe000ed00

0800b724 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	699b      	ldr	r3, [r3, #24]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d007      	beq.n	800b744 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b734:	4b08      	ldr	r3, [pc, #32]	; (800b758 <HAL_PCD_ResumeCallback+0x34>)
 800b736:	691b      	ldr	r3, [r3, #16]
 800b738:	4a07      	ldr	r2, [pc, #28]	; (800b758 <HAL_PCD_ResumeCallback+0x34>)
 800b73a:	f023 0306 	bic.w	r3, r3, #6
 800b73e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b740:	f000 fab6 	bl	800bcb0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe fd25 	bl	800a19a <USBD_LL_Resume>
}
 800b750:	bf00      	nop
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	e000ed00 	.word	0xe000ed00

0800b75c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b764:	f7f8 fd80 	bl	8004268 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b768:	4a2b      	ldr	r2, [pc, #172]	; (800b818 <USBD_LL_Init+0xbc>)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a29      	ldr	r2, [pc, #164]	; (800b818 <USBD_LL_Init+0xbc>)
 800b774:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800b778:	4b27      	ldr	r3, [pc, #156]	; (800b818 <USBD_LL_Init+0xbc>)
 800b77a:	4a28      	ldr	r2, [pc, #160]	; (800b81c <USBD_LL_Init+0xc0>)
 800b77c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b77e:	4b26      	ldr	r3, [pc, #152]	; (800b818 <USBD_LL_Init+0xbc>)
 800b780:	2208      	movs	r2, #8
 800b782:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b784:	4b24      	ldr	r3, [pc, #144]	; (800b818 <USBD_LL_Init+0xbc>)
 800b786:	2202      	movs	r2, #2
 800b788:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b78a:	4b23      	ldr	r3, [pc, #140]	; (800b818 <USBD_LL_Init+0xbc>)
 800b78c:	2202      	movs	r2, #2
 800b78e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b790:	4b21      	ldr	r3, [pc, #132]	; (800b818 <USBD_LL_Init+0xbc>)
 800b792:	2200      	movs	r2, #0
 800b794:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b796:	4b20      	ldr	r3, [pc, #128]	; (800b818 <USBD_LL_Init+0xbc>)
 800b798:	2200      	movs	r2, #0
 800b79a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b79c:	4b1e      	ldr	r3, [pc, #120]	; (800b818 <USBD_LL_Init+0xbc>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b7a2:	4b1d      	ldr	r3, [pc, #116]	; (800b818 <USBD_LL_Init+0xbc>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b7a8:	481b      	ldr	r0, [pc, #108]	; (800b818 <USBD_LL_Init+0xbc>)
 800b7aa:	f7f6 ff7b 	bl	80026a4 <HAL_PCD_Init>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b7b4:	f7f5 fb00 	bl	8000db8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7be:	2318      	movs	r3, #24
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	f7f8 fc7f 	bl	80040c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7ce:	2358      	movs	r3, #88	; 0x58
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	2180      	movs	r1, #128	; 0x80
 800b7d4:	f7f8 fc77 	bl	80040c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7de:	23c0      	movs	r3, #192	; 0xc0
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2181      	movs	r1, #129	; 0x81
 800b7e4:	f7f8 fc6f 	bl	80040c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	f7f8 fc66 	bl	80040c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b800:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b804:	2200      	movs	r2, #0
 800b806:	2182      	movs	r1, #130	; 0x82
 800b808:	f7f8 fc5d 	bl	80040c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	20000f68 	.word	0x20000f68
 800b81c:	40006800 	.word	0x40006800

0800b820 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b836:	4618      	mov	r0, r3
 800b838:	f7f7 f83a 	bl	80028b0 <HAL_PCD_Start>
 800b83c:	4603      	mov	r3, r0
 800b83e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b840:	7bbb      	ldrb	r3, [r7, #14]
 800b842:	2b03      	cmp	r3, #3
 800b844:	d816      	bhi.n	800b874 <USBD_LL_Start+0x54>
 800b846:	a201      	add	r2, pc, #4	; (adr r2, 800b84c <USBD_LL_Start+0x2c>)
 800b848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84c:	0800b85d 	.word	0x0800b85d
 800b850:	0800b863 	.word	0x0800b863
 800b854:	0800b869 	.word	0x0800b869
 800b858:	0800b86f 	.word	0x0800b86f
    case HAL_OK :
      usb_status = USBD_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	73fb      	strb	r3, [r7, #15]
    break;
 800b860:	e00b      	b.n	800b87a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b862:	2303      	movs	r3, #3
 800b864:	73fb      	strb	r3, [r7, #15]
    break;
 800b866:	e008      	b.n	800b87a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b868:	2301      	movs	r3, #1
 800b86a:	73fb      	strb	r3, [r7, #15]
    break;
 800b86c:	e005      	b.n	800b87a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b86e:	2303      	movs	r3, #3
 800b870:	73fb      	strb	r3, [r7, #15]
    break;
 800b872:	e002      	b.n	800b87a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b874:	2303      	movs	r3, #3
 800b876:	73fb      	strb	r3, [r7, #15]
    break;
 800b878:	bf00      	nop
  }
  return usb_status;
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	4608      	mov	r0, r1
 800b88e:	4611      	mov	r1, r2
 800b890:	461a      	mov	r2, r3
 800b892:	4603      	mov	r3, r0
 800b894:	70fb      	strb	r3, [r7, #3]
 800b896:	460b      	mov	r3, r1
 800b898:	70bb      	strb	r3, [r7, #2]
 800b89a:	4613      	mov	r3, r2
 800b89c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b8ac:	78bb      	ldrb	r3, [r7, #2]
 800b8ae:	883a      	ldrh	r2, [r7, #0]
 800b8b0:	78f9      	ldrb	r1, [r7, #3]
 800b8b2:	f7f7 f96b 	bl	8002b8c <HAL_PCD_EP_Open>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b8ba:	7bbb      	ldrb	r3, [r7, #14]
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	d817      	bhi.n	800b8f0 <USBD_LL_OpenEP+0x6c>
 800b8c0:	a201      	add	r2, pc, #4	; (adr r2, 800b8c8 <USBD_LL_OpenEP+0x44>)
 800b8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c6:	bf00      	nop
 800b8c8:	0800b8d9 	.word	0x0800b8d9
 800b8cc:	0800b8df 	.word	0x0800b8df
 800b8d0:	0800b8e5 	.word	0x0800b8e5
 800b8d4:	0800b8eb 	.word	0x0800b8eb
    case HAL_OK :
      usb_status = USBD_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	73fb      	strb	r3, [r7, #15]
    break;
 800b8dc:	e00b      	b.n	800b8f6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e2:	e008      	b.n	800b8f6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e8:	e005      	b.n	800b8f6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ee:	e002      	b.n	800b8f6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f4:	bf00      	nop
  }
  return usb_status;
 800b8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	460b      	mov	r3, r1
 800b90a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b90c:	2300      	movs	r3, #0
 800b90e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b91a:	78fa      	ldrb	r2, [r7, #3]
 800b91c:	4611      	mov	r1, r2
 800b91e:	4618      	mov	r0, r3
 800b920:	f7f7 f991 	bl	8002c46 <HAL_PCD_EP_Close>
 800b924:	4603      	mov	r3, r0
 800b926:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b928:	7bbb      	ldrb	r3, [r7, #14]
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d816      	bhi.n	800b95c <USBD_LL_CloseEP+0x5c>
 800b92e:	a201      	add	r2, pc, #4	; (adr r2, 800b934 <USBD_LL_CloseEP+0x34>)
 800b930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b934:	0800b945 	.word	0x0800b945
 800b938:	0800b94b 	.word	0x0800b94b
 800b93c:	0800b951 	.word	0x0800b951
 800b940:	0800b957 	.word	0x0800b957
    case HAL_OK :
      usb_status = USBD_OK;
 800b944:	2300      	movs	r3, #0
 800b946:	73fb      	strb	r3, [r7, #15]
    break;
 800b948:	e00b      	b.n	800b962 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b94a:	2303      	movs	r3, #3
 800b94c:	73fb      	strb	r3, [r7, #15]
    break;
 800b94e:	e008      	b.n	800b962 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b950:	2301      	movs	r3, #1
 800b952:	73fb      	strb	r3, [r7, #15]
    break;
 800b954:	e005      	b.n	800b962 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b956:	2303      	movs	r3, #3
 800b958:	73fb      	strb	r3, [r7, #15]
    break;
 800b95a:	e002      	b.n	800b962 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b95c:	2303      	movs	r3, #3
 800b95e:	73fb      	strb	r3, [r7, #15]
    break;
 800b960:	bf00      	nop
  }
  return usb_status;
 800b962:	7bfb      	ldrb	r3, [r7, #15]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b986:	78fa      	ldrb	r2, [r7, #3]
 800b988:	4611      	mov	r1, r2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7f7 fa23 	bl	8002dd6 <HAL_PCD_EP_SetStall>
 800b990:	4603      	mov	r3, r0
 800b992:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b994:	7bbb      	ldrb	r3, [r7, #14]
 800b996:	2b03      	cmp	r3, #3
 800b998:	d816      	bhi.n	800b9c8 <USBD_LL_StallEP+0x5c>
 800b99a:	a201      	add	r2, pc, #4	; (adr r2, 800b9a0 <USBD_LL_StallEP+0x34>)
 800b99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a0:	0800b9b1 	.word	0x0800b9b1
 800b9a4:	0800b9b7 	.word	0x0800b9b7
 800b9a8:	0800b9bd 	.word	0x0800b9bd
 800b9ac:	0800b9c3 	.word	0x0800b9c3
    case HAL_OK :
      usb_status = USBD_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9b4:	e00b      	b.n	800b9ce <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ba:	e008      	b.n	800b9ce <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c0:	e005      	b.n	800b9ce <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c6:	e002      	b.n	800b9ce <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b9cc:	bf00      	nop
  }
  return usb_status;
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9f2:	78fa      	ldrb	r2, [r7, #3]
 800b9f4:	4611      	mov	r1, r2
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7f7 fa4d 	bl	8002e96 <HAL_PCD_EP_ClrStall>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ba00:	7bbb      	ldrb	r3, [r7, #14]
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d816      	bhi.n	800ba34 <USBD_LL_ClearStallEP+0x5c>
 800ba06:	a201      	add	r2, pc, #4	; (adr r2, 800ba0c <USBD_LL_ClearStallEP+0x34>)
 800ba08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0c:	0800ba1d 	.word	0x0800ba1d
 800ba10:	0800ba23 	.word	0x0800ba23
 800ba14:	0800ba29 	.word	0x0800ba29
 800ba18:	0800ba2f 	.word	0x0800ba2f
    case HAL_OK :
      usb_status = USBD_OK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba20:	e00b      	b.n	800ba3a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba22:	2303      	movs	r3, #3
 800ba24:	73fb      	strb	r3, [r7, #15]
    break;
 800ba26:	e008      	b.n	800ba3a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba2c:	e005      	b.n	800ba3a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	73fb      	strb	r3, [r7, #15]
    break;
 800ba32:	e002      	b.n	800ba3a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ba34:	2303      	movs	r3, #3
 800ba36:	73fb      	strb	r3, [r7, #15]
    break;
 800ba38:	bf00      	nop
  }
  return usb_status;
 800ba3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	da0c      	bge.n	800ba7a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba60:	78fb      	ldrb	r3, [r7, #3]
 800ba62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba66:	68f9      	ldr	r1, [r7, #12]
 800ba68:	1c5a      	adds	r2, r3, #1
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	4413      	add	r3, r2
 800ba70:	00db      	lsls	r3, r3, #3
 800ba72:	440b      	add	r3, r1
 800ba74:	3302      	adds	r3, #2
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	e00b      	b.n	800ba92 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba7a:	78fb      	ldrb	r3, [r7, #3]
 800ba7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba80:	68f9      	ldr	r1, [r7, #12]
 800ba82:	4613      	mov	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4413      	add	r3, r2
 800ba88:	00db      	lsls	r3, r3, #3
 800ba8a:	440b      	add	r3, r1
 800ba8c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ba90:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
	...

0800baa0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	460b      	mov	r3, r1
 800baaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800baba:	78fa      	ldrb	r2, [r7, #3]
 800babc:	4611      	mov	r1, r2
 800babe:	4618      	mov	r0, r3
 800bac0:	f7f7 f83f 	bl	8002b42 <HAL_PCD_SetAddress>
 800bac4:	4603      	mov	r3, r0
 800bac6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bac8:	7bbb      	ldrb	r3, [r7, #14]
 800baca:	2b03      	cmp	r3, #3
 800bacc:	d816      	bhi.n	800bafc <USBD_LL_SetUSBAddress+0x5c>
 800bace:	a201      	add	r2, pc, #4	; (adr r2, 800bad4 <USBD_LL_SetUSBAddress+0x34>)
 800bad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad4:	0800bae5 	.word	0x0800bae5
 800bad8:	0800baeb 	.word	0x0800baeb
 800badc:	0800baf1 	.word	0x0800baf1
 800bae0:	0800baf7 	.word	0x0800baf7
    case HAL_OK :
      usb_status = USBD_OK;
 800bae4:	2300      	movs	r3, #0
 800bae6:	73fb      	strb	r3, [r7, #15]
    break;
 800bae8:	e00b      	b.n	800bb02 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800baea:	2303      	movs	r3, #3
 800baec:	73fb      	strb	r3, [r7, #15]
    break;
 800baee:	e008      	b.n	800bb02 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800baf0:	2301      	movs	r3, #1
 800baf2:	73fb      	strb	r3, [r7, #15]
    break;
 800baf4:	e005      	b.n	800bb02 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800baf6:	2303      	movs	r3, #3
 800baf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bafa:	e002      	b.n	800bb02 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bafc:	2303      	movs	r3, #3
 800bafe:	73fb      	strb	r3, [r7, #15]
    break;
 800bb00:	bf00      	nop
  }
  return usb_status;
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	607a      	str	r2, [r7, #4]
 800bb16:	603b      	str	r3, [r7, #0]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb2a:	7af9      	ldrb	r1, [r7, #11]
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	f7f7 f91a 	bl	8002d68 <HAL_PCD_EP_Transmit>
 800bb34:	4603      	mov	r3, r0
 800bb36:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bb38:	7dbb      	ldrb	r3, [r7, #22]
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	d816      	bhi.n	800bb6c <USBD_LL_Transmit+0x60>
 800bb3e:	a201      	add	r2, pc, #4	; (adr r2, 800bb44 <USBD_LL_Transmit+0x38>)
 800bb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb44:	0800bb55 	.word	0x0800bb55
 800bb48:	0800bb5b 	.word	0x0800bb5b
 800bb4c:	0800bb61 	.word	0x0800bb61
 800bb50:	0800bb67 	.word	0x0800bb67
    case HAL_OK :
      usb_status = USBD_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	75fb      	strb	r3, [r7, #23]
    break;
 800bb58:	e00b      	b.n	800bb72 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	75fb      	strb	r3, [r7, #23]
    break;
 800bb5e:	e008      	b.n	800bb72 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb60:	2301      	movs	r3, #1
 800bb62:	75fb      	strb	r3, [r7, #23]
    break;
 800bb64:	e005      	b.n	800bb72 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb66:	2303      	movs	r3, #3
 800bb68:	75fb      	strb	r3, [r7, #23]
    break;
 800bb6a:	e002      	b.n	800bb72 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bb6c:	2303      	movs	r3, #3
 800bb6e:	75fb      	strb	r3, [r7, #23]
    break;
 800bb70:	bf00      	nop
  }
  return usb_status;
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	607a      	str	r2, [r7, #4]
 800bb86:	603b      	str	r3, [r7, #0]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb9a:	7af9      	ldrb	r1, [r7, #11]
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	f7f7 f899 	bl	8002cd6 <HAL_PCD_EP_Receive>
 800bba4:	4603      	mov	r3, r0
 800bba6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bba8:	7dbb      	ldrb	r3, [r7, #22]
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	d816      	bhi.n	800bbdc <USBD_LL_PrepareReceive+0x60>
 800bbae:	a201      	add	r2, pc, #4	; (adr r2, 800bbb4 <USBD_LL_PrepareReceive+0x38>)
 800bbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb4:	0800bbc5 	.word	0x0800bbc5
 800bbb8:	0800bbcb 	.word	0x0800bbcb
 800bbbc:	0800bbd1 	.word	0x0800bbd1
 800bbc0:	0800bbd7 	.word	0x0800bbd7
    case HAL_OK :
      usb_status = USBD_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	75fb      	strb	r3, [r7, #23]
    break;
 800bbc8:	e00b      	b.n	800bbe2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	75fb      	strb	r3, [r7, #23]
    break;
 800bbce:	e008      	b.n	800bbe2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	75fb      	strb	r3, [r7, #23]
    break;
 800bbd4:	e005      	b.n	800bbe2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	75fb      	strb	r3, [r7, #23]
    break;
 800bbda:	e002      	b.n	800bbe2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bbdc:	2303      	movs	r3, #3
 800bbde:	75fb      	strb	r3, [r7, #23]
    break;
 800bbe0:	bf00      	nop
  }
  return usb_status;
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3718      	adds	r7, #24
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbfe:	78fa      	ldrb	r2, [r7, #3]
 800bc00:	4611      	mov	r1, r2
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7f7 f898 	bl	8002d38 <HAL_PCD_EP_GetRxCount>
 800bc08:	4603      	mov	r3, r0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bc20:	78fb      	ldrb	r3, [r7, #3]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d002      	beq.n	800bc2c <HAL_PCDEx_LPM_Callback+0x18>
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d013      	beq.n	800bc52 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bc2a:	e023      	b.n	800bc74 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d007      	beq.n	800bc44 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bc34:	f000 f83c 	bl	800bcb0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc38:	4b10      	ldr	r3, [pc, #64]	; (800bc7c <HAL_PCDEx_LPM_Callback+0x68>)
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	4a0f      	ldr	r2, [pc, #60]	; (800bc7c <HAL_PCDEx_LPM_Callback+0x68>)
 800bc3e:	f023 0306 	bic.w	r3, r3, #6
 800bc42:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fe faa5 	bl	800a19a <USBD_LL_Resume>
    break;
 800bc50:	e010      	b.n	800bc74 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fe fa82 	bl	800a162 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	699b      	ldr	r3, [r3, #24]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d005      	beq.n	800bc72 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc66:	4b05      	ldr	r3, [pc, #20]	; (800bc7c <HAL_PCDEx_LPM_Callback+0x68>)
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	4a04      	ldr	r2, [pc, #16]	; (800bc7c <HAL_PCDEx_LPM_Callback+0x68>)
 800bc6c:	f043 0306 	orr.w	r3, r3, #6
 800bc70:	6113      	str	r3, [r2, #16]
    break;
 800bc72:	bf00      	nop
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	e000ed00 	.word	0xe000ed00

0800bc80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc88:	4b03      	ldr	r3, [pc, #12]	; (800bc98 <USBD_static_malloc+0x18>)
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	370c      	adds	r7, #12
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	20001260 	.word	0x20001260

0800bc9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]

}
 800bca4:	bf00      	nop
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bcb4:	f7f4 fe9e 	bl	80009f4 <SystemClock_Config>
}
 800bcb8:	bf00      	nop
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <memset>:
 800bcbc:	4402      	add	r2, r0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d100      	bne.n	800bcc6 <memset+0xa>
 800bcc4:	4770      	bx	lr
 800bcc6:	f803 1b01 	strb.w	r1, [r3], #1
 800bcca:	e7f9      	b.n	800bcc0 <memset+0x4>

0800bccc <strncmp>:
 800bccc:	b510      	push	{r4, lr}
 800bcce:	b16a      	cbz	r2, 800bcec <strncmp+0x20>
 800bcd0:	3901      	subs	r1, #1
 800bcd2:	1884      	adds	r4, r0, r2
 800bcd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d103      	bne.n	800bce8 <strncmp+0x1c>
 800bce0:	42a0      	cmp	r0, r4
 800bce2:	d001      	beq.n	800bce8 <strncmp+0x1c>
 800bce4:	2a00      	cmp	r2, #0
 800bce6:	d1f5      	bne.n	800bcd4 <strncmp+0x8>
 800bce8:	1ad0      	subs	r0, r2, r3
 800bcea:	bd10      	pop	{r4, pc}
 800bcec:	4610      	mov	r0, r2
 800bcee:	e7fc      	b.n	800bcea <strncmp+0x1e>

0800bcf0 <__libc_init_array>:
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	4d0d      	ldr	r5, [pc, #52]	; (800bd28 <__libc_init_array+0x38>)
 800bcf4:	4c0d      	ldr	r4, [pc, #52]	; (800bd2c <__libc_init_array+0x3c>)
 800bcf6:	1b64      	subs	r4, r4, r5
 800bcf8:	10a4      	asrs	r4, r4, #2
 800bcfa:	2600      	movs	r6, #0
 800bcfc:	42a6      	cmp	r6, r4
 800bcfe:	d109      	bne.n	800bd14 <__libc_init_array+0x24>
 800bd00:	4d0b      	ldr	r5, [pc, #44]	; (800bd30 <__libc_init_array+0x40>)
 800bd02:	4c0c      	ldr	r4, [pc, #48]	; (800bd34 <__libc_init_array+0x44>)
 800bd04:	f000 f818 	bl	800bd38 <_init>
 800bd08:	1b64      	subs	r4, r4, r5
 800bd0a:	10a4      	asrs	r4, r4, #2
 800bd0c:	2600      	movs	r6, #0
 800bd0e:	42a6      	cmp	r6, r4
 800bd10:	d105      	bne.n	800bd1e <__libc_init_array+0x2e>
 800bd12:	bd70      	pop	{r4, r5, r6, pc}
 800bd14:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd18:	4798      	blx	r3
 800bd1a:	3601      	adds	r6, #1
 800bd1c:	e7ee      	b.n	800bcfc <__libc_init_array+0xc>
 800bd1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd22:	4798      	blx	r3
 800bd24:	3601      	adds	r6, #1
 800bd26:	e7f2      	b.n	800bd0e <__libc_init_array+0x1e>
 800bd28:	0800bfc0 	.word	0x0800bfc0
 800bd2c:	0800bfc0 	.word	0x0800bfc0
 800bd30:	0800bfc0 	.word	0x0800bfc0
 800bd34:	0800bfc4 	.word	0x0800bfc4

0800bd38 <_init>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	bf00      	nop
 800bd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd3e:	bc08      	pop	{r3}
 800bd40:	469e      	mov	lr, r3
 800bd42:	4770      	bx	lr

0800bd44 <_fini>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	bf00      	nop
 800bd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd4a:	bc08      	pop	{r3}
 800bd4c:	469e      	mov	lr, r3
 800bd4e:	4770      	bx	lr
